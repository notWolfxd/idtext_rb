
#line 1 "ext/dtext/dtext.cpp.rl"
#include "dtext.h"
#include "url.h"

#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <regex>

#ifdef DEBUG
#undef g_debug
#define STRINGIFY(x) XSTRINGIFY(x)
#define XSTRINGIFY(x) #x
#define g_debug(fmt, ...) fprintf(stderr, "\x1B[1;32mDEBUG\x1B[0m %-28.28s %-24.24s " fmt "\n", __FILE__ ":" STRINGIFY(__LINE__), __func__, ##__VA_ARGS__)
#else
#undef g_debug
#define g_debug(...)
#endif

static const size_t MAX_STACK_DEPTH = 512;

// Strip qualifier from tag: "Artoria Pendragon (Lancer) (Fate)" -> "Artoria Pendragon (Lancer)"
static const std::regex tag_qualifier_regex("[ _]\\([^)]+?\\)$");

// Permitted HTML attribute names.
static const std::unordered_map<std::string_view, const std::unordered_set<std::string_view>> permitted_attribute_names = {
  { "thead",    { "align" } },
  { "tbody",    { "align" } },
  { "tr",       { "align" } },
  { "td",       { "align", "colspan", "rowspan" } },
  { "th",       { "align", "colspan", "rowspan" } },
  { "col",      { "align", "span" } },
  { "colgroup", {} },
};

// Permitted HTML attribute values.
static const std::unordered_set<std::string_view> align_values = { "left", "center", "right", "justify" };
static const std::unordered_map<std::string_view, std::function<bool(std::string_view)>> permitted_attribute_values = {
  { "align",   [](auto value) { return align_values.find(value) != align_values.end(); } },
  { "span",    [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
  { "colspan", [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
  { "rowspan", [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
};


#line 785 "ext/dtext/dtext.cpp.rl"



#line 47 "ext/dtext/dtext.cpp"
static const unsigned char _dtext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 10, 1, 11, 1, 
	12, 1, 13, 1, 14, 1, 15, 1, 
	16, 1, 17, 1, 18, 1, 19, 1, 
	20, 1, 21, 1, 22, 1, 23, 1, 
	24, 1, 25, 1, 79, 1, 80, 1, 
	81, 1, 83, 1, 84, 1, 85, 1, 
	86, 1, 87, 1, 88, 1, 89, 1, 
	90, 1, 91, 1, 92, 1, 93, 1, 
	94, 1, 95, 1, 97, 1, 98, 1, 
	99, 1, 100, 1, 101, 1, 102, 1, 
	103, 1, 104, 1, 105, 1, 106, 1, 
	107, 1, 108, 1, 109, 1, 110, 1, 
	111, 1, 112, 1, 113, 1, 138, 1, 
	139, 1, 140, 1, 141, 1, 143, 1, 
	144, 1, 145, 1, 146, 1, 147, 1, 
	148, 1, 149, 1, 150, 1, 151, 1, 
	152, 1, 153, 1, 154, 1, 155, 1, 
	156, 1, 157, 1, 158, 1, 159, 1, 
	160, 1, 161, 1, 162, 1, 163, 1, 
	164, 1, 165, 1, 166, 1, 167, 1, 
	168, 1, 169, 1, 170, 1, 171, 1, 
	172, 1, 173, 1, 174, 1, 175, 1, 
	176, 1, 177, 1, 178, 1, 179, 1, 
	180, 1, 181, 1, 182, 1, 183, 1, 
	184, 1, 185, 1, 186, 1, 187, 1, 
	188, 1, 189, 1, 190, 1, 191, 1, 
	192, 1, 193, 1, 194, 1, 195, 1, 
	197, 1, 198, 1, 199, 1, 200, 1, 
	201, 1, 202, 1, 203, 1, 204, 1, 
	205, 1, 206, 1, 207, 1, 208, 1, 
	209, 1, 210, 1, 212, 1, 213, 1, 
	214, 1, 215, 1, 216, 1, 217, 1, 
	218, 2, 0, 1, 2, 1, 0, 2, 
	1, 81, 2, 1, 82, 2, 1, 96, 
	2, 1, 106, 2, 1, 108, 2, 1, 
	114, 2, 1, 115, 2, 1, 116, 2, 
	1, 117, 2, 1, 118, 2, 1, 119, 
	2, 1, 120, 2, 1, 121, 2, 1, 
	122, 2, 1, 123, 2, 1, 124, 2, 
	1, 125, 2, 1, 126, 2, 1, 127, 
	2, 1, 128, 2, 1, 129, 2, 1, 
	130, 2, 1, 196, 2, 2, 3, 2, 
	3, 1, 2, 3, 4, 2, 3, 5, 
	2, 3, 6, 2, 3, 7, 2, 3, 
	10, 2, 3, 79, 2, 3, 131, 2, 
	3, 132, 2, 3, 133, 2, 3, 142, 
	2, 3, 211, 2, 4, 5, 2, 5, 
	7, 2, 6, 7, 2, 7, 134, 2, 
	7, 135, 2, 9, 136, 2, 9, 137, 
	2, 10, 177, 2, 10, 179, 2, 10, 
	180, 2, 10, 182, 2, 10, 184, 2, 
	10, 185, 2, 10, 187, 2, 13, 0, 
	2, 13, 1, 2, 13, 3, 2, 13, 
	26, 2, 13, 27, 2, 13, 28, 2, 
	13, 29, 2, 13, 30, 2, 13, 31, 
	2, 13, 32, 2, 13, 33, 2, 13, 
	34, 2, 13, 35, 2, 13, 36, 2, 
	13, 37, 2, 13, 38, 2, 13, 39, 
	2, 13, 40, 2, 13, 41, 2, 13, 
	42, 2, 13, 44, 2, 13, 45, 2, 
	13, 74, 2, 13, 75, 2, 13, 76, 
	2, 13, 77, 2, 13, 78, 3, 0, 
	1, 96, 3, 0, 1, 108, 3, 0, 
	1, 196, 3, 1, 2, 3, 3, 3, 
	4, 5, 3, 3, 6, 7, 3, 3, 
	10, 177, 3, 3, 10, 179, 3, 3, 
	10, 180, 3, 3, 10, 182, 3, 3, 
	10, 184, 3, 3, 10, 185, 3, 3, 
	10, 187, 3, 6, 7, 134, 3, 6, 
	7, 135, 3, 8, 9, 136, 3, 8, 
	9, 137, 3, 13, 0, 26, 3, 13, 
	0, 27, 3, 13, 0, 28, 3, 13, 
	0, 29, 3, 13, 0, 30, 3, 13, 
	0, 31, 3, 13, 0, 32, 3, 13, 
	0, 33, 3, 13, 0, 34, 3, 13, 
	0, 35, 3, 13, 0, 36, 3, 13, 
	0, 37, 3, 13, 0, 38, 3, 13, 
	0, 39, 3, 13, 0, 40, 3, 13, 
	0, 41, 3, 13, 0, 42, 3, 13, 
	0, 77, 3, 13, 1, 46, 3, 13, 
	1, 47, 3, 13, 1, 48, 3, 13, 
	1, 49, 3, 13, 1, 50, 3, 13, 
	1, 51, 3, 13, 1, 52, 3, 13, 
	1, 53, 3, 13, 1, 54, 3, 13, 
	1, 55, 3, 13, 1, 56, 3, 13, 
	1, 57, 3, 13, 1, 58, 3, 13, 
	1, 59, 3, 13, 1, 60, 3, 13, 
	1, 61, 3, 13, 1, 62, 3, 13, 
	1, 63, 3, 13, 1, 64, 3, 13, 
	1, 65, 3, 13, 1, 66, 3, 13, 
	1, 67, 3, 13, 1, 68, 3, 13, 
	1, 69, 3, 13, 1, 70, 3, 13, 
	1, 71, 3, 13, 1, 72, 3, 13, 
	1, 73, 3, 13, 2, 3, 3, 13, 
	3, 43, 3, 13, 3, 44, 4, 13, 
	0, 1, 60, 4, 13, 0, 1, 70, 
	4, 13, 0, 1, 78, 4, 13, 0, 
	3, 44, 4, 13, 1, 0, 60, 4, 
	13, 1, 0, 70, 4, 13, 2, 3, 
	43
};

static const short _dtext_cond_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 3, 3, 3, 3, 4, 
	4, 4, 4, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 7, 7, 7, 
	7, 7, 7, 8, 8, 8, 8, 8, 
	8, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	13, 19, 20, 40, 60, 81, 102, 125, 
	148, 170, 196, 220, 245, 266, 293, 314, 
	335, 358, 381, 403, 429, 453, 478, 505, 
	526, 550, 551, 554, 556, 558, 561, 565, 
	568, 572, 573, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 589, 604, 624, 644, 644, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644
};

static const char _dtext_cond_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 4, 
	6, 1, 20, 20, 21, 21, 23, 23, 
	22, 26, 24, 25, 21, 27, 21, 21, 
	23, 23, 22, 26, 24, 25, 27, 21, 
	24, 1, 3, 2, 2, 3, 4, 3, 
	4, 1, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 15, 20, 20, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
};

static const short _dtext_cond_keys[] = {
	62, 62, 93, 93, 93, 93, 62, 62, 
	62, 62, 93, 93, 93, 93, 93, 93, 
	93, 93, -128, -1, 1, 8, 14, 31, 
	33, 127, -128, -1, 1, 9, 11, 12, 
	14, 61, 62, 62, 63, 127, -128, -65, 
	-128, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -100, -99, -99, 
	-98, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -84, -83, -83, -82, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -128, -127, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -126, -125, -121, 
	-120, -111, -110, -109, -108, -100, -99, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -69, -68, -68, -67, -67, -66, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -120, -119, -119, -118, -68, -67, -67, 
	-66, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -100, -99, -99, 
	-98, -97, -96, -96, -95, -94, -93, -93, 
	-92, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -100, 
	-99, -99, -98, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -84, -83, -83, 
	-82, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -128, -127, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -126, 
	-125, -121, -120, -111, -110, -109, -108, -100, 
	-99, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -69, -68, -68, -67, -67, 
	-66, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -120, -119, -119, -118, -68, 
	-67, -67, -66, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -100, -99, -99, 
	-98, -97, -96, -96, -95, -94, -93, -93, 
	-92, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 99, 100, 100, 101, 114, 115, 115, 
	116, 122, 127, 127, -128, -65, -128, -100, 
	-99, -99, -98, -65, -128, -84, -82, -65, 
	-128, -128, -127, -65, -125, -121, -110, -109, 
	-99, -65, -128, -69, -68, -68, -67, -67, 
	-66, -65, -128, -120, -118, -68, -66, -65, 
	-128, -100, -98, -97, -95, -94, -92, -65, 
	-128, -65, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	1, 8, 14, 31, 48, 57, 65, 90, 
	97, 122, 127, 127, 60, 60, 64, 64, 
	64, 64, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	1, 8, 14, 31, 46, 46, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	0
};

static const char _dtext_cond_spaces[] = {
	4, 4, 2, 3, 2, 3, 4, 3, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0
};

static const short _dtext_key_offsets[] = {
	0, 0, 4, 10, 16, 18, 20, 22, 
	24, 26, 27, 29, 30, 34, 36, 38, 
	40, 42, 43, 49, 51, 53, 55, 57, 
	59, 60, 62, 63, 65, 67, 69, 71, 
	72, 77, 80, 82, 84, 86, 88, 90, 
	92, 94, 96, 98, 99, 103, 107, 109, 
	113, 116, 124, 131, 135, 139, 141, 143, 
	147, 154, 158, 164, 166, 168, 170, 172, 
	174, 178, 185, 189, 195, 197, 199, 201, 
	203, 205, 207, 208, 212, 214, 216, 218, 
	220, 222, 224, 227, 228, 232, 233, 235, 
	246, 257, 261, 265, 267, 271, 274, 282, 
	289, 291, 293, 297, 304, 308, 314, 316, 
	318, 320, 322, 324, 328, 335, 339, 345, 
	347, 349, 351, 353, 355, 357, 358, 360, 
	362, 364, 366, 367, 369, 371, 373, 375, 
	377, 379, 382, 383, 387, 388, 389, 399, 
	401, 403, 406, 409, 412, 416, 426, 430, 
	440, 441, 443, 444, 447, 449, 451, 453, 
	455, 456, 457, 459, 460, 463, 465, 467, 
	469, 471, 472, 480, 481, 482, 483, 484, 
	485, 486, 487, 488, 490, 492, 494, 498, 
	502, 508, 514, 516, 517, 521, 523, 525, 
	527, 529, 531, 533, 536, 540, 541, 543, 
	545, 547, 549, 550, 556, 558, 559, 561, 
	563, 565, 567, 569, 571, 574, 575, 577, 
	579, 581, 583, 584, 585, 589, 593, 595, 
	597, 599, 601, 602, 604, 606, 608, 610, 
	616, 617, 618, 619, 620, 624, 628, 630, 
	632, 634, 636, 637, 639, 641, 643, 645, 
	651, 652, 653, 654, 657, 662, 673, 685, 
	687, 689, 691, 693, 695, 697, 699, 701, 
	703, 704, 706, 708, 710, 712, 714, 715, 
	717, 719, 721, 723, 724, 726, 728, 730, 
	732, 734, 736, 739, 740, 742, 744, 746, 
	750, 753, 761, 768, 770, 772, 774, 776, 
	778, 780, 781, 783, 785, 796, 807, 818, 
	828, 830, 832, 834, 836, 838, 839, 841, 
	843, 845, 847, 849, 851, 854, 855, 857, 
	859, 861, 865, 868, 876, 883, 885, 887, 
	889, 891, 893, 895, 896, 897, 898, 908, 
	910, 912, 915, 918, 921, 925, 935, 939, 
	940, 941, 946, 948, 950, 953, 957, 960, 
	966, 970, 976, 984, 986, 1014, 1016, 1018, 
	1021, 1025, 1028, 1034, 1038, 1044, 1052, 1054, 
	1082, 1106, 1108, 1110, 1113, 1117, 1120, 1126, 
	1130, 1136, 1144, 1146, 1148, 1150, 1152, 1155, 
	1156, 1157, 1171, 1173, 1188, 1190, 1192, 1209, 
	1211, 1213, 1216, 1219, 1240, 1243, 1255, 1259, 
	1263, 1268, 1270, 1272, 1273, 1277, 1282, 1284, 
	1286, 1288, 1291, 1292, 1293, 1297, 1298, 1299, 
	1309, 1316, 1323, 1328, 1337, 1349, 1353, 1354, 
	1360, 1366, 1372, 1373, 1385, 1394, 1401, 1408, 
	1415, 1423, 1437, 1443, 1444, 1458, 1472, 1486, 
	1493, 1500, 1507, 1514, 1520, 1521, 1525, 1529, 
	1531, 1542, 1545, 1556, 1565, 1573, 1580, 1587, 
	1594, 1601, 1607, 1608, 1617, 1622, 1627, 1629, 
	1630, 1635, 1636, 1637, 1638, 1652, 1660, 1674, 
	1686, 1694, 1698, 1706, 1714, 1722, 1729, 1730, 
	1731, 1740, 1756, 1766, 1782, 1796, 1806, 1815, 
	1816, 1820, 1830, 1839, 1848, 1857, 1866, 1875, 
	1886, 1896, 1905, 1915, 1924, 1933, 1950, 1959, 
	1968, 1977, 1986, 1990, 1998, 2007, 2015, 2023, 
	2032, 2033, 2037, 2038, 2039, 2040, 2046, 2052, 
	2058, 2064, 2070, 2076, 2082, 2088, 2094, 2100, 
	2106, 2107, 2113, 2119, 2125, 2131, 2137, 2143, 
	2149, 2155, 2161, 2167, 2173, 2174, 2180, 2186, 
	2192, 2198, 2204, 2210, 2216, 2222, 2228, 2234, 
	2240, 2241, 2247, 2255, 2261, 2267, 2273, 2279, 
	2285, 2291, 2297, 2303, 2309, 2315, 2316, 2322, 
	2328, 2334, 2340, 2346, 2352, 2358, 2364, 2370, 
	2376, 2382, 2383, 2384, 2398, 2400, 2415, 2417, 
	2419, 2436, 2438, 2440, 2443, 2446, 2467, 2470, 
	2482, 2486, 2490, 2495, 2497, 2499, 2501, 2504, 
	2508, 2511, 2517, 2521, 2527, 2535, 2537, 2565, 
	2567, 2569, 2572, 2576, 2579, 2585, 2589, 2595, 
	2603, 2605, 2633, 2657, 2659, 2661, 2664, 2668, 
	2671, 2677, 2681, 2687, 2695, 2697, 2699, 2701, 
	2703, 2705, 2707, 2709, 2711, 2712, 2713, 2719, 
	2725, 2731, 2737, 2743, 2749, 2755, 2761, 2767, 
	2773, 2779, 2780, 2786, 2793, 2795, 2797, 2804, 
	2811, 2818, 2825, 2832, 2839, 2846, 2853, 2860, 
	2863, 2864, 2870, 2876, 2882, 2888, 2894, 2900, 
	2906, 2912, 2918, 2924, 2925, 2931, 2937, 2943, 
	2949, 2955, 2961, 2967, 2973, 2979, 2985, 2991, 
	2992, 2998, 3004, 3010, 3016, 3022, 3028, 3034, 
	3040, 3046, 3052, 3058, 3059, 3065, 3071, 3077, 
	3083, 3089, 3095, 3101, 3107, 3113, 3119, 3125, 
	3126, 3132, 3138, 3144, 3150, 3156, 3162, 3168, 
	3174, 3180, 3186, 3192, 3198, 3200, 3202, 3204, 
	3206, 3207, 3208, 3214, 3220, 3226, 3232, 3238, 
	3244, 3250, 3256, 3262, 3268, 3274, 3276, 3278, 
	3280, 3282, 3284, 3286, 3288, 3290, 3292, 3294, 
	3295, 3296, 3302, 3308, 3314, 3320, 3326, 3332, 
	3338, 3344, 3350, 3356, 3362, 3364, 3366, 3368, 
	3370, 3372, 3374, 3376, 3378, 3380, 3382, 3383, 
	3384, 3390, 3396, 3402, 3408, 3414, 3420, 3426, 
	3432, 3438, 3444, 3450, 3451, 3457, 3459, 3461, 
	3467, 3473, 3479, 3485, 3491, 3497, 3503, 3509, 
	3515, 3521, 3524, 3530, 3536, 3542, 3548, 3554, 
	3560, 3566, 3572, 3578, 3584, 3590, 3592, 3594, 
	3596, 3598, 3600, 3601, 3602, 3608, 3614, 3620, 
	3626, 3632, 3638, 3644, 3650, 3656, 3662, 3668, 
	3669, 3675, 3681, 3687, 3693, 3699, 3705, 3711, 
	3717, 3723, 3729, 3735, 3742, 3745, 3746, 3750, 
	3755, 3757, 3759, 3761, 3764, 3765, 3766, 3770, 
	3771, 3778, 3801, 3808, 3819, 3828, 3837, 3846, 
	3855, 3862, 3871, 3880, 3889, 3904, 3913, 3922, 
	3931, 3940, 3949, 3964, 3971, 3980, 3989, 3998, 
	4007, 4022, 4031, 4040, 4049, 4058, 4067, 4076, 
	4085, 4092, 4105, 4112, 4119, 4126, 4133, 4142, 
	4149, 4160, 4169, 4178, 4187, 4196, 4203, 4214, 
	4223, 4231, 4235, 4243, 4250, 4254, 4267, 4276, 
	4289, 4293, 4302, 4311, 4319, 4326, 4330, 4336, 
	4343, 4350, 4356, 4362, 4371, 4380, 4389, 4398, 
	4407, 4415, 4422, 4426, 4432, 4439, 4446, 4452, 
	4458, 4465, 4474, 4483, 4492, 4501, 4510, 4519, 
	4526, 4530, 4539, 4548, 4557, 4566, 4573, 4582, 
	4591, 4600, 4609, 4618, 4627, 4636, 4643, 4652, 
	4659, 4668, 4677, 4685, 4689, 4697, 4701, 4706, 
	4709, 4714, 4720, 4723, 4724, 4726, 4728, 4730, 
	4731, 4737, 4739, 4741, 4743, 4746, 4747, 4748, 
	4752, 4753, 4759, 4763, 4768, 4770, 4772, 4774, 
	4777, 4778, 4779, 4783, 4784, 4786, 4788, 4790, 
	4793, 4794, 4795, 4799, 4800, 4813, 4822, 4833, 
	4843, 4850, 4853, 4859, 4869, 4878, 4884, 4891, 
	4898, 4905, 4911, 4919, 4927, 4935, 4944, 4951, 
	4958, 4966, 4973, 4979, 4988, 4994, 5001, 5009, 
	5016, 5023, 5030, 5038, 5044, 5050, 5055, 5061, 
	5070, 5079, 5088, 5098, 5106, 5114, 5123, 5131, 
	5140, 5151, 5161, 5167, 5176, 5182, 5189, 5196, 
	5203, 5211, 5217, 5223, 5228, 5234, 5243, 5252, 
	5261, 5271, 5279, 5287, 5296, 5304, 5313, 5322, 
	5331, 5341, 5349, 5357, 5366, 5373, 5383, 5390, 
	5398, 5406, 5414, 5423, 5430, 5437, 5443, 5450, 
	5458, 5465, 5471, 5477, 5480, 5481, 5483, 5485, 
	5487, 5488, 5495, 5503, 5511, 5519, 5526, 5528, 
	5530, 5532, 5535, 5536, 5537, 5541, 5542, 5558, 
	5561, 5565, 5566, 5571, 5573, 5575, 5577, 5579, 
	5580, 5581, 5583, 5587, 5589, 5591, 5593, 5594, 
	5595, 5599, 5604, 5610, 5613, 5617, 5622, 5628, 
	5633, 5635, 5637, 5639, 5642, 5643, 5644, 5648, 
	5649, 5654, 5656, 5658, 5660, 5662, 5664, 5666, 
	5668, 5670, 5671, 5672, 5676, 5678, 5680, 5682, 
	5684, 5685, 5689, 5691, 5695, 5698, 5706, 5713, 
	5715, 5717, 5721, 5728, 5732, 5738, 5742, 5743, 
	5745, 5747, 5749, 5751, 5755, 5762, 5766, 5772, 
	5774, 5776, 5778, 5781, 5782, 5783, 5787, 5792, 
	5793, 5795, 5797, 5799, 5801, 5803, 5805, 5806, 
	5811, 5813, 5815, 5817, 5819, 5821, 5824, 5825, 
	5827, 5829, 5831, 5833, 5834, 5836, 5837, 5838, 
	5846, 5855, 5857, 5887, 5917, 5949, 5981, 6014, 
	6047, 6080, 6122, 6156, 6190, 6222, 6257, 6289, 
	6321, 6354, 6387, 6420, 6462, 6496, 6530, 6565, 
	6597, 6629, 6631, 6634, 6638, 6641, 6647, 6651, 
	6657, 6665, 6667, 6687, 6688, 6690, 6692, 6694, 
	6696, 6697, 6698, 6700, 6702, 6704, 6706, 6707, 
	6708, 6710, 6712, 6714, 6716, 6718, 6720, 6722, 
	6723, 6724, 6726, 6728, 6730, 6732, 6734, 6736, 
	6738, 6739, 6743, 6745, 6747, 6749, 6751, 6753, 
	6755, 6757, 6758, 6766, 6768, 6770, 6772, 6773, 
	6775, 6777, 6779, 6780, 6782, 6784, 6786, 6787, 
	6788, 6790, 6792, 6797, 6805, 6814, 6817, 6827, 
	6830, 6834, 6837, 6840, 6844, 6853, 6855, 6857, 
	6859, 6861, 6864, 6872, 6881, 6884, 6894, 6897, 
	6901, 6904, 6907, 6911, 6920, 6928, 6930, 6932, 
	6934, 6937, 6945, 6954, 6957, 6967, 6970, 6974, 
	6977, 6980, 6984, 6993, 6996, 7004, 7013, 7016, 
	7026, 7029, 7033, 7036, 7039, 7043, 7052, 7057, 
	7065, 7074, 7077, 7087, 7090, 7094, 7097, 7100, 
	7104, 7113, 7115, 7117, 7120, 7128, 7137, 7140, 
	7150, 7153, 7157, 7160, 7163, 7167, 7176, 7179, 
	7187, 7196, 7199, 7209, 7212, 7216, 7219, 7222, 
	7226, 7235, 7239, 7241, 7243, 7245, 7247, 7249, 
	7251, 7253, 7254, 7262, 7264, 7266, 7268, 7269, 
	7271, 7273, 7275, 7276, 7278, 7280, 7282, 7283, 
	7284, 7286, 7288, 7293, 7301, 7310, 7313, 7323, 
	7326, 7330, 7333, 7336, 7340, 7349, 7351, 7353, 
	7355, 7357, 7360, 7368, 7377, 7380, 7390, 7393, 
	7397, 7400, 7403, 7407, 7416, 7424, 7426, 7428, 
	7430, 7433, 7441, 7450, 7453, 7463, 7466, 7470, 
	7473, 7476, 7480, 7489, 7492, 7500, 7509, 7512, 
	7522, 7525, 7529, 7532, 7535, 7539, 7548, 7553, 
	7561, 7570, 7573, 7583, 7586, 7590, 7593, 7596, 
	7600, 7609, 7611, 7613, 7616, 7624, 7633, 7636, 
	7646, 7649, 7653, 7656, 7659, 7663, 7672, 7675, 
	7683, 7692, 7695, 7705, 7708, 7712, 7715, 7718, 
	7722, 7731, 7741, 7745, 7751, 7753, 7756, 7759, 
	7764, 7780, 7783, 7787, 7791, 7794, 7797, 7801, 
	7804, 7806, 7808, 7822, 7823, 7826, 7837, 7846, 
	7910, 7912, 7918, 7920, 7922, 7926, 7930, 7940, 
	7942, 7948, 7949, 7952, 7957, 7959, 7961, 7963, 
	7964, 7992, 8020, 8044, 8065, 8070, 8078, 8084, 
	8090, 8096, 8102, 8108, 8114, 8120, 8126, 8132, 
	8138, 8144, 8150, 8157, 8164, 8174, 8184, 8194, 
	8204, 8214, 8223, 8229, 8235, 8241, 8247, 8253, 
	8259, 8265, 8271, 8277, 8283, 8285, 8285, 8295, 
	8305, 8315, 8324, 8330, 8336, 8342, 8348, 8354, 
	8360, 8366, 8372, 8378, 8384, 8386, 8386, 8396, 
	8406, 8416, 8426, 8436, 8446, 8455, 8461, 8467, 
	8473, 8479, 8485, 8491, 8497, 8503, 8509, 8515, 
	8517, 8517, 8527, 8537, 8547, 8557, 8566, 8573, 
	8581, 8588, 8595, 8602, 8609, 8616, 8623, 8630, 
	8637, 8644, 8647, 8648, 8658, 8668, 8678, 8688, 
	8697, 8703, 8709, 8715, 8721, 8727, 8733, 8739, 
	8745, 8751, 8757, 8759, 8759, 8769, 8779, 8789, 
	8800, 8821, 8849, 8877, 8901, 8906, 8915, 8925, 
	8935, 8944, 8950, 8956, 8962, 8968, 8974, 8980, 
	8986, 8992, 8998, 9004, 9006, 9006, 9018, 9028, 
	9038, 9048, 9057, 9059, 9071, 9081, 9090, 9096, 
	9102, 9108, 9114, 9120, 9126, 9132, 9138, 9144, 
	9150, 9152, 9152, 9162, 9171, 9177, 9183, 9189, 
	9195, 9201, 9207, 9213, 9219, 9225, 9231, 9233, 
	9233, 9243, 9253, 9263, 9273, 9283, 9292, 9298, 
	9304, 9310, 9316, 9322, 9328, 9334, 9340, 9346, 
	9352, 9354, 9354, 9364, 9374, 9384, 9394, 9404, 
	9413, 9419, 9425, 9431, 9437, 9443, 9449, 9455, 
	9461, 9467, 9473, 9475, 9475, 9487, 9497, 9506, 
	9512, 9518, 9524, 9530, 9536, 9542, 9548, 9554, 
	9560, 9566, 9568, 9568, 9574, 9580, 9586, 9592, 
	9598, 9604, 9610, 9616, 9622, 9628, 9630, 9630, 
	9636, 9642, 9648, 9654, 9660, 9666, 9672, 9678, 
	9684, 9690, 9692, 9692, 9702, 9712, 9722, 9731, 
	9738, 9740, 9747, 9754, 9761, 9768, 9775, 9782, 
	9789, 9796, 9803, 9806, 9807, 9817, 9827, 9837, 
	9846, 9852, 9858, 9864, 9870, 9876, 9882, 9888, 
	9894, 9900, 9906, 9908, 9908, 9914, 9920, 9926, 
	9932, 9938, 9944, 9950, 9956, 9962, 9968, 9970, 
	9970, 9980, 9990, 10000, 10009, 10015, 10021, 10027, 
	10033, 10039, 10045, 10051, 10057, 10063, 10069, 10071, 
	10071, 10097, 10098, 10100, 10103, 10106, 10110, 10115, 
	10120, 10125, 10131, 10136, 10141, 10146, 10152, 10153, 
	10176, 10180, 10184, 10208, 10230, 10260, 10290, 10294, 
	10296, 10297, 10298, 10302, 10304, 10305, 10306, 10308, 
	10313
};

static const short _dtext_trans_keys[] = {
	0, 9, 10, 32, 0, 9, 10, 32, 
	60, 91, 67, 72, 84, 99, 104, 116, 
	69, 101, 78, 110, 84, 116, 69, 101, 
	82, 114, 62, 82, 114, 62, 0, 9, 
	10, 32, 65, 97, 66, 98, 76, 108, 
	69, 101, 62, 67, 72, 84, 99, 104, 
	116, 69, 101, 78, 110, 84, 116, 69, 
	101, 82, 114, 93, 82, 114, 93, 65, 
	97, 66, 98, 76, 108, 69, 101, 93, 
	0, 9, 10, 13, 32, 9, 32, 42, 
	76, 108, 79, 111, 67, 99, 75, 107, 
	81, 113, 85, 117, 79, 111, 84, 116, 
	69, 101, 62, 69, 79, 101, 111, 68, 
	76, 100, 108, 69, 101, 9, 32, 61, 
	62, 9, 32, 61, 9, 32, 48, 57, 
	65, 90, 97, 122, 62, 48, 57, 65, 
	90, 97, 122, 0, 9, 10, 32, 0, 
	9, 10, 32, 79, 111, 82, 114, 9, 
	32, 61, 62, 0, 9, 10, 13, 32, 
	61, 62, 0, 10, 13, 62, 0, 9, 
	10, 13, 32, 62, 88, 120, 80, 112, 
	65, 97, 78, 110, 68, 100, 9, 32, 
	61, 62, 0, 9, 10, 13, 32, 61, 
	62, 0, 10, 13, 62, 0, 9, 10, 
	13, 32, 62, 79, 111, 68, 100, 84, 
	116, 69, 101, 88, 120, 84, 116, 62, 
	0, 9, 10, 32, 80, 112, 79, 111, 
	73, 105, 76, 108, 69, 101, 82, 114, 
	62, 83, 115, 62, 65, 78, 97, 110, 
	62, 35, 46, 33, 35, 38, 45, 95, 
	47, 58, 65, 90, 97, 122, 33, 35, 
	38, 46, 95, 45, 58, 65, 90, 97, 
	122, 69, 79, 101, 111, 68, 76, 100, 
	108, 69, 101, 9, 32, 61, 93, 9, 
	32, 61, 9, 32, 48, 57, 65, 90, 
	97, 122, 93, 48, 57, 65, 90, 97, 
	122, 79, 111, 82, 114, 9, 32, 61, 
	93, 0, 9, 10, 13, 32, 61, 93, 
	0, 10, 13, 93, 0, 9, 10, 13, 
	32, 93, 88, 120, 80, 112, 65, 97, 
	78, 110, 68, 100, 9, 32, 61, 93, 
	0, 9, 10, 13, 32, 61, 93, 0, 
	10, 13, 93, 0, 9, 10, 13, 32, 
	93, 79, 111, 68, 100, 84, 116, 69, 
	101, 88, 120, 84, 116, 93, 85, 117, 
	79, 111, 84, 116, 69, 101, 93, 80, 
	112, 79, 111, 73, 105, 76, 108, 69, 
	101, 82, 114, 83, 93, 115, 93, 65, 
	78, 97, 110, 93, 96, 0, 9, 10, 
	32, 48, 57, 65, 90, 97, 122, 0, 
	10, 0, 10, 0, 10, 96, 0, 10, 
	96, 0, 10, 96, 0, 9, 10, 32, 
	0, 9, 10, 32, 48, 57, 65, 90, 
	97, 122, 0, 9, 10, 32, 66, 69, 
	73, 83, 85, 98, 101, 105, 115, 117, 
	62, 77, 109, 62, 62, 84, 116, 82, 
	114, 79, 111, 78, 110, 71, 103, 62, 
	62, 77, 109, 62, 62, 84, 116, 82, 
	114, 79, 111, 78, 110, 71, 103, 62, 
	66, 73, 83, 85, 98, 105, 115, 117, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	-128, -65, -128, -65, -128, -65, 0, 9, 
	10, 32, 0, 9, 10, 32, 0, 9, 
	10, 32, 60, 91, 72, 83, 84, 104, 
	115, 116, 82, 114, 62, 0, 9, 10, 
	32, 80, 112, 79, 111, 73, 105, 76, 
	108, 69, 101, 82, 114, 62, 83, 115, 
	0, 9, 10, 32, 62, 65, 97, 66, 
	98, 76, 108, 69, 101, 62, 72, 83, 
	84, 104, 115, 116, 82, 114, 93, 80, 
	112, 79, 111, 73, 105, 76, 108, 69, 
	101, 82, 114, 83, 93, 115, 93, 65, 
	97, 66, 98, 76, 108, 69, 101, 93, 
	47, 67, 84, 99, 116, 69, 79, 101, 
	111, 78, 110, 84, 116, 69, 101, 82, 
	114, 62, 76, 108, 79, 111, 82, 114, 
	2366, 2622, 68, 72, 78, 100, 104, 110, 
	62, 62, 62, 47, 67, 84, 99, 116, 
	69, 79, 101, 111, 78, 110, 84, 116, 
	69, 101, 82, 114, 93, 76, 108, 79, 
	111, 82, 114, 2397, 2653, 68, 72, 78, 
	100, 104, 110, 93, 93, 93, 9, 32, 
	42, 0, 9, 10, 13, 32, 47, 67, 
	72, 78, 83, 84, 99, 104, 110, 115, 
	116, 66, 67, 69, 81, 83, 84, 98, 
	99, 101, 113, 115, 116, 76, 108, 79, 
	111, 67, 99, 75, 107, 81, 113, 85, 
	117, 79, 111, 84, 116, 69, 101, 3165, 
	88, 120, 80, 112, 65, 97, 78, 110, 
	68, 100, 3646, 85, 117, 79, 111, 84, 
	116, 69, 101, 3134, 80, 112, 79, 111, 
	73, 105, 76, 108, 69, 101, 82, 114, 
	62, 83, 115, 62, 79, 111, 68, 100, 
	69, 101, 9, 32, 61, 62, 9, 32, 
	61, 9, 32, 48, 57, 65, 90, 97, 
	122, 62, 48, 57, 65, 90, 97, 122, 
	79, 111, 68, 100, 84, 116, 69, 101, 
	88, 120, 84, 116, 62, 49, 54, 35, 
	46, 33, 35, 38, 45, 95, 47, 58, 
	65, 90, 97, 122, 33, 35, 38, 46, 
	95, 45, 58, 65, 90, 97, 122, 47, 
	67, 72, 78, 83, 84, 99, 104, 110, 
	115, 116, 67, 69, 81, 83, 84, 99, 
	101, 113, 115, 116, 88, 120, 80, 112, 
	65, 97, 78, 110, 68, 100, 3677, 80, 
	112, 79, 111, 73, 105, 76, 108, 69, 
	101, 82, 114, 83, 93, 115, 93, 79, 
	111, 68, 100, 69, 101, 9, 32, 61, 
	93, 9, 32, 61, 9, 32, 48, 57, 
	65, 90, 97, 122, 93, 48, 57, 65, 
	90, 97, 122, 79, 111, 68, 100, 84, 
	116, 69, 101, 88, 120, 84, 116, 93, 
	96, 96, 0, 9, 10, 32, 48, 57, 
	65, 90, 97, 122, 0, 10, 0, 10, 
	0, 10, 96, 0, 10, 96, 0, 10, 
	96, 0, 9, 10, 32, 0, 9, 10, 
	32, 48, 57, 65, 90, 97, 122, 0, 
	9, 10, 32, 34, 58, 35, 47, 72, 
	91, 104, -128, -65, -128, -65, -99, -128, 
	-65, -128, -84, -82, -65, -128, -127, -65, 
	-125, -121, -110, -109, -99, -65, -68, -67, 
	-128, -65, -128, -120, -118, -68, -66, -65, 
	-128, -100, -98, -97, -95, -94, -92, -65, 
	-128, -65, -30, -29, -17, 32, 34, 35, 
	39, 44, 46, 60, 62, 63, 91, 93, 
	-128, -63, -62, -33, -32, -18, -16, -12, 
	-11, 0, 9, 13, 58, 59, -128, -65, 
	-128, -65, -99, -128, -65, -128, -84, -82, 
	-65, -128, -127, -65, -125, -121, -110, -109, 
	-99, -65, -68, -67, -128, -65, -128, -120, 
	-118, -68, -66, -65, -128, -100, -98, -97, 
	-95, -94, -92, -65, -128, -65, -30, -29, 
	-17, 32, 34, 35, 39, 44, 46, 60, 
	62, 63, 91, 93, -128, -63, -62, -33, 
	-32, -18, -16, -12, -11, 0, 9, 13, 
	58, 59, -30, -29, -17, 32, 34, 35, 
	39, 44, 46, 63, -128, -63, -62, -33, 
	-32, -18, -16, -12, -11, 0, 9, 13, 
	58, 59, -128, -65, -128, -65, -99, -128, 
	-65, -128, -84, -82, -65, -128, -127, -65, 
	-125, -121, -110, -109, -99, -65, -68, -67, 
	-128, -65, -128, -120, -118, -68, -66, -65, 
	-128, -100, -98, -97, -95, -94, -92, -65, 
	-128, -65, 84, 116, 84, 116, 80, 112, 
	58, 83, 115, 47, 47, 45, 95, -62, 
	-33, -32, -17, -16, -12, 48, 57, 65, 
	90, 97, 122, -128, -65, 45, 46, 95, 
	-62, -33, -32, -17, -16, -12, 48, 57, 
	65, 90, 97, 122, -128, -65, -128, -65, 
	-30, -29, -17, 45, 95, -62, -33, -32, 
	-18, -16, -12, 48, 57, 65, 90, 97, 
	122, -128, -65, -128, -65, -99, -128, -65, 
	-83, -128, -65, -30, -29, -17, 35, 46, 
	47, 58, 63, 95, -62, -33, -32, -18, 
	-16, -12, 45, 57, 65, 90, 97, 122, 
	-128, -127, -65, -128, -126, -125, -121, -120, 
	-111, -110, -109, -108, -100, -99, -65, -68, 
	-67, -128, -65, -119, -67, -128, -65, -99, 
	-96, -93, -128, -65, -128, -65, 48, 57, 
	58, 35, 47, 72, 104, 0, 32, 93, 
	9, 13, 84, 116, 84, 116, 80, 112, 
	58, 83, 115, 47, 47, 0, 32, 9, 
	13, 58, 91, 9, 32, 58, 60, 62, 
	92, 93, 124, 10, 13, 9, 32, 35, 
	93, 124, 10, 13, 9, 32, 35, 93, 
	124, 10, 13, 32, 93, 124, 9, 13, 
	9, 32, 35, 93, 124, 10, 13, 65, 
	90, 9, 32, 45, 93, 95, 124, 48, 
	57, 65, 90, 97, 122, 9, 32, 93, 
	124, 93, 9, 32, 93, 124, 10, 13, 
	9, 32, 93, 124, 10, 13, 9, 32, 
	93, 124, 10, 13, 93, 9, 32, 45, 
	93, 95, 124, 48, 57, 65, 90, 97, 
	122, 32, 45, 95, 48, 57, 65, 90, 
	97, 122, 9, 32, 35, 93, 124, 10, 
	13, 9, 32, 35, 93, 124, 10, 13, 
	9, 32, 35, 93, 124, 10, 13, 9, 
	32, 93, 124, 10, 13, 65, 90, 9, 
	32, 45, 93, 95, 124, 10, 13, 48, 
	57, 65, 90, 97, 122, 9, 32, 93, 
	124, 10, 13, 93, 9, 32, 45, 93, 
	95, 124, 10, 13, 48, 57, 65, 90, 
	97, 122, 9, 32, 45, 93, 95, 124, 
	10, 13, 48, 57, 65, 90, 97, 122, 
	9, 32, 45, 93, 95, 124, 10, 13, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	35, 93, 124, 10, 13, 9, 32, 62, 
	93, 124, 10, 13, 9, 32, 93, 95, 
	124, 10, 13, 9, 32, 60, 93, 124, 
	10, 13, 9, 32, 93, 124, 10, 13, 
	62, 9, 32, 35, 93, 9, 32, 35, 
	93, 65, 90, 9, 32, 45, 93, 95, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	93, 9, 32, 45, 93, 95, 48, 57, 
	65, 90, 97, 122, 32, 45, 95, 48, 
	57, 65, 90, 97, 122, 9, 32, 35, 
	58, 93, 124, 10, 13, 9, 32, 51, 
	93, 124, 10, 13, 9, 32, 35, 93, 
	124, 10, 13, 9, 32, 35, 93, 124, 
	10, 13, 9, 32, 35, 93, 124, 10, 
	13, 9, 32, 93, 124, 10, 13, 47, 
	95, 119, 124, 48, 57, 65, 90, 97, 
	122, 9, 32, 35, 93, 124, 9, 32, 
	35, 93, 124, 65, 90, 124, 9, 32, 
	35, 93, 124, 95, 124, 123, 0, 9, 
	32, 45, 58, 60, 62, 92, 124, 126, 
	10, 13, 123, 125, 0, 9, 32, 123, 
	124, 125, 10, 13, 0, 9, 32, 45, 
	58, 60, 62, 92, 123, 124, 125, 126, 
	10, 13, 0, 9, 32, 58, 60, 62, 
	92, 123, 124, 125, 10, 13, 0, 9, 
	32, 123, 124, 125, 10, 13, 9, 32, 
	124, 125, 0, 9, 10, 13, 32, 125, 
	11, 12, 0, 9, 10, 13, 32, 125, 
	11, 12, 0, 9, 10, 13, 32, 125, 
	11, 12, 0, 10, 13, 32, 125, 9, 
	12, 125, 125, 0, 9, 10, 13, 32, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 45, 58, 60, 62, 92, 123, 124, 
	125, 126, 11, 12, 0, 9, 10, 13, 
	32, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 45, 58, 60, 62, 92, 
	123, 124, 125, 126, 11, 12, 0, 9, 
	10, 13, 32, 58, 60, 62, 92, 123, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 124, 125, 11, 12, 125, 
	9, 32, 124, 125, 0, 9, 10, 13, 
	32, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 62, 125, 11, 12, 0, 
	9, 10, 13, 32, 95, 125, 11, 12, 
	0, 9, 10, 13, 32, 60, 125, 11, 
	12, 0, 9, 10, 13, 32, 124, 125, 
	11, 12, 0, 9, 10, 13, 32, 62, 
	125, 11, 12, 0, 9, 10, 13, 32, 
	58, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 123, 124, 125, 11, 12, 
	0, 9, 10, 13, 32, 51, 125, 11, 
	12, 0, 9, 10, 13, 32, 123, 124, 
	125, 11, 12, 0, 9, 10, 13, 32, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 47, 125, 11, 12, 0, 9, 10, 
	13, 32, 95, 119, 124, 125, 11, 12, 
	48, 57, 65, 90, 97, 122, 0, 9, 
	10, 13, 32, 124, 125, 11, 12, 0, 
	9, 10, 13, 32, 124, 125, 11, 12, 
	0, 9, 10, 13, 32, 95, 125, 11, 
	12, 0, 9, 10, 13, 32, 124, 125, 
	11, 12, 9, 32, 124, 125, 0, 9, 
	32, 123, 124, 125, 10, 13, 0, 9, 
	32, 58, 123, 124, 125, 10, 13, 0, 
	9, 32, 123, 124, 125, 10, 13, 0, 
	9, 32, 123, 124, 125, 10, 13, 95, 
	119, 124, 48, 57, 65, 90, 97, 122, 
	124, 9, 32, 124, 125, 95, 124, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 35, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 35, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	35, 48, 57, 65, 90, 97, 122, 45, 
	61, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 35, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 47, 47, 
	45, 95, -62, -33, -32, -17, -16, -12, 
	48, 57, 65, 90, 97, 122, -128, -65, 
	45, 46, 95, -62, -33, -32, -17, -16, 
	-12, 48, 57, 65, 90, 97, 122, -128, 
	-65, -128, -65, -30, -29, -17, 45, 95, 
	-62, -33, -32, -18, -16, -12, 48, 57, 
	65, 90, 97, 122, -128, -65, -128, -65, 
	-99, -128, -65, -83, -128, -65, -30, -29, 
	-17, 35, 46, 47, 58, 63, 95, -62, 
	-33, -32, -18, -16, -12, 45, 57, 65, 
	90, 97, 122, -128, -127, -65, -128, -126, 
	-125, -121, -120, -111, -110, -109, -108, -100, 
	-99, -65, -68, -67, -128, -65, -119, -67, 
	-128, -65, -99, -96, -93, -128, -65, -128, 
	-65, -128, -65, -128, -65, -99, -128, -65, 
	-128, -84, -82, -65, -128, -127, -65, -125, 
	-121, -110, -109, -99, -65, -68, -67, -128, 
	-65, -128, -120, -118, -68, -66, -65, -128, 
	-100, -98, -97, -95, -94, -92, -65, -128, 
	-65, -30, -29, -17, 32, 34, 35, 39, 
	44, 46, 60, 62, 63, 91, 93, -128, 
	-63, -62, -33, -32, -18, -16, -12, -11, 
	0, 9, 13, 58, 59, -128, -65, -128, 
	-65, -99, -128, -65, -128, -84, -82, -65, 
	-128, -127, -65, -125, -121, -110, -109, -99, 
	-65, -68, -67, -128, -65, -128, -120, -118, 
	-68, -66, -65, -128, -100, -98, -97, -95, 
	-94, -92, -65, -128, -65, -30, -29, -17, 
	32, 34, 35, 39, 44, 46, 60, 62, 
	63, 91, 93, -128, -63, -62, -33, -32, 
	-18, -16, -12, -11, 0, 9, 13, 58, 
	59, -30, -29, -17, 32, 34, 35, 39, 
	44, 46, 63, -128, -63, -62, -33, -32, 
	-18, -16, -12, -11, 0, 9, 13, 58, 
	59, -128, -65, -128, -65, -99, -128, -65, 
	-128, -84, -82, -65, -128, -127, -65, -125, 
	-121, -110, -109, -99, -65, -68, -67, -128, 
	-65, -128, -120, -118, -68, -66, -65, -128, 
	-100, -98, -97, -95, -94, -92, -65, -128, 
	-65, 48, 57, 65, 97, 67, 99, 84, 
	116, 73, 105, 79, 111, 78, 110, 32, 
	35, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 35, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 80, 112, 48, 57, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 65, 90, 97, 122, 
	47, 48, 57, 65, 90, 97, 122, 47, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 47, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 35, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 35, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 35, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	65, 73, 84, 97, 105, 116, 76, 108, 
	73, 105, 65, 97, 83, 115, 32, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 77, 109, 80, 112, 76, 108, 
	73, 105, 67, 99, 65, 97, 84, 116, 
	73, 105, 79, 111, 78, 110, 32, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 82, 114, 65, 97, 78, 110, 
	83, 115, 76, 108, 65, 97, 84, 116, 
	73, 105, 79, 111, 78, 110, 32, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 35, 48, 57, 65, 90, 97, 
	122, 80, 112, 48, 57, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 35, 82, 114, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 69, 101, 
	80, 112, 79, 111, 82, 114, 84, 116, 
	32, 35, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 35, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 0, 
	9, 10, 13, 32, 91, 93, 9, 32, 
	93, 40, 35, 47, 72, 104, 0, 32, 
	41, 9, 13, 84, 116, 84, 116, 80, 
	112, 58, 83, 115, 47, 47, 0, 32, 
	9, 13, 58, 0, 9, 10, 13, 32, 
	91, 93, 0, 9, 10, 13, 32, 66, 
	67, 69, 73, 81, 83, 84, 85, 91, 
	93, 98, 99, 101, 105, 113, 115, 116, 
	117, 0, 9, 10, 13, 32, 91, 93, 
	0, 9, 10, 13, 32, 69, 79, 91, 
	93, 101, 111, 0, 9, 10, 13, 32, 
	78, 91, 93, 110, 0, 9, 10, 13, 
	32, 84, 91, 93, 116, 0, 9, 10, 
	13, 32, 69, 91, 93, 101, 0, 9, 
	10, 13, 32, 82, 91, 93, 114, 0, 
	9, 10, 13, 32, 91, 93, 0, 9, 
	10, 13, 32, 76, 91, 93, 108, 0, 
	9, 10, 13, 32, 79, 91, 93, 111, 
	0, 9, 10, 13, 32, 82, 91, 93, 
	114, 9, 32, 92, 2397, 2653, -128, -1, 
	1, 8, 11, 12, 14, 90, 94, 127, 
	0, 9, 10, 13, 32, 88, 91, 93, 
	120, 0, 9, 10, 13, 32, 80, 91, 
	93, 112, 0, 9, 10, 13, 32, 65, 
	91, 93, 97, 0, 9, 10, 13, 32, 
	78, 91, 93, 110, 0, 9, 10, 13, 
	32, 68, 91, 93, 100, 9, 32, 92, 
	3421, 3677, -128, -1, 1, 8, 11, 12, 
	14, 90, 94, 127, 0, 9, 10, 13, 
	32, 91, 93, 0, 9, 10, 13, 32, 
	85, 91, 93, 117, 0, 9, 10, 13, 
	32, 79, 91, 93, 111, 0, 9, 10, 
	13, 32, 84, 91, 93, 116, 0, 9, 
	10, 13, 32, 69, 91, 93, 101, 9, 
	32, 92, 2909, 3165, -128, -1, 1, 8, 
	11, 12, 14, 90, 94, 127, 0, 9, 
	10, 13, 32, 80, 91, 93, 112, 0, 
	9, 10, 13, 32, 79, 91, 93, 111, 
	0, 9, 10, 13, 32, 73, 91, 93, 
	105, 0, 9, 10, 13, 32, 76, 91, 
	93, 108, 0, 9, 10, 13, 32, 69, 
	91, 93, 101, 0, 9, 10, 13, 32, 
	82, 91, 93, 114, 0, 9, 10, 13, 
	32, 83, 91, 93, 115, 0, 9, 10, 
	13, 32, 91, 93, 0, 9, 10, 13, 
	32, 68, 72, 78, 91, 93, 100, 104, 
	110, 0, 9, 10, 13, 32, 91, 93, 
	0, 9, 10, 13, 32, 91, 93, 0, 
	9, 10, 13, 32, 91, 93, 0, 9, 
	10, 13, 32, 91, 93, 0, 9, 10, 
	13, 32, 82, 91, 93, 114, 0, 9, 
	10, 13, 32, 91, 93, 0, 9, 10, 
	13, 32, 69, 79, 91, 93, 101, 111, 
	0, 9, 10, 13, 32, 78, 91, 93, 
	110, 0, 9, 10, 13, 32, 84, 91, 
	93, 116, 0, 9, 10, 13, 32, 69, 
	91, 93, 101, 0, 9, 10, 13, 32, 
	82, 91, 93, 114, 0, 9, 10, 13, 
	32, 91, 93, 0, 9, 10, 13, 32, 
	68, 76, 91, 93, 100, 108, 0, 9, 
	10, 13, 32, 69, 91, 93, 101, 0, 
	9, 10, 13, 32, 61, 91, 93, 9, 
	32, 61, 93, 9, 32, 48, 57, 65, 
	90, 97, 122, 93, 48, 57, 65, 90, 
	97, 122, 0, 9, 10, 32, 0, 9, 
	10, 13, 32, 91, 93, 48, 57, 65, 
	90, 97, 122, 9, 32, 93, 48, 57, 
	65, 90, 97, 122, 0, 9, 10, 13, 
	32, 91, 93, 48, 57, 65, 90, 97, 
	122, 0, 9, 10, 32, 0, 9, 10, 
	13, 32, 79, 91, 93, 111, 0, 9, 
	10, 13, 32, 82, 91, 93, 114, 0, 
	9, 10, 13, 32, 61, 91, 93, 0, 
	9, 10, 13, 32, 61, 93, 0, 10, 
	13, 93, 0, 9, 10, 13, 32, 93, 
	0, 9, 10, 13, 32, 91, 93, 0, 
	9, 10, 13, 32, 91, 93, 0, 9, 
	10, 13, 32, 93, 0, 9, 10, 13, 
	32, 93, 0, 9, 10, 13, 32, 88, 
	91, 93, 120, 0, 9, 10, 13, 32, 
	80, 91, 93, 112, 0, 9, 10, 13, 
	32, 65, 91, 93, 97, 0, 9, 10, 
	13, 32, 78, 91, 93, 110, 0, 9, 
	10, 13, 32, 68, 91, 93, 100, 0, 
	9, 10, 13, 32, 61, 91, 93, 0, 
	9, 10, 13, 32, 61, 93, 0, 10, 
	13, 93, 0, 9, 10, 13, 32, 93, 
	0, 9, 10, 13, 32, 91, 93, 0, 
	9, 10, 13, 32, 91, 93, 0, 9, 
	10, 13, 32, 93, 0, 9, 10, 13, 
	32, 93, 0, 9, 10, 13, 32, 91, 
	93, 0, 9, 10, 13, 32, 79, 91, 
	93, 111, 0, 9, 10, 13, 32, 68, 
	91, 93, 100, 0, 9, 10, 13, 32, 
	84, 91, 93, 116, 0, 9, 10, 13, 
	32, 69, 91, 93, 101, 0, 9, 10, 
	13, 32, 88, 91, 93, 120, 0, 9, 
	10, 13, 32, 84, 91, 93, 116, 0, 
	9, 10, 13, 32, 91, 93, 0, 9, 
	10, 32, 0, 9, 10, 13, 32, 85, 
	91, 93, 117, 0, 9, 10, 13, 32, 
	79, 91, 93, 111, 0, 9, 10, 13, 
	32, 84, 91, 93, 116, 0, 9, 10, 
	13, 32, 69, 91, 93, 101, 0, 9, 
	10, 13, 32, 91, 93, 0, 9, 10, 
	13, 32, 80, 91, 93, 112, 0, 9, 
	10, 13, 32, 79, 91, 93, 111, 0, 
	9, 10, 13, 32, 73, 91, 93, 105, 
	0, 9, 10, 13, 32, 76, 91, 93, 
	108, 0, 9, 10, 13, 32, 69, 91, 
	93, 101, 0, 9, 10, 13, 32, 82, 
	91, 93, 114, 0, 9, 10, 13, 32, 
	83, 91, 93, 115, 0, 9, 10, 13, 
	32, 91, 93, 0, 9, 10, 13, 32, 
	78, 91, 93, 110, 0, 9, 10, 13, 
	32, 91, 93, 0, 9, 10, 13, 32, 
	82, 91, 93, 114, 0, 9, 10, 13, 
	32, 76, 91, 93, 108, 0, 9, 10, 
	13, 32, 61, 91, 93, 9, 32, 61, 
	93, 9, 32, 34, 35, 39, 47, 72, 
	104, 35, 47, 72, 104, 0, 32, 34, 
	9, 13, 9, 32, 93, 0, 9, 10, 
	13, 32, 0, 9, 10, 13, 32, 91, 
	9, 32, 91, 47, 85, 117, 82, 114, 
	76, 108, 93, 0, 9, 10, 13, 32, 
	91, 84, 116, 84, 116, 80, 112, 58, 
	83, 115, 47, 47, 0, 32, 9, 13, 
	58, 0, 9, 32, 93, 10, 13, 35, 
	47, 72, 104, 0, 32, 39, 9, 13, 
	84, 116, 84, 116, 80, 112, 58, 83, 
	115, 47, 47, 0, 32, 9, 13, 58, 
	84, 116, 84, 116, 80, 112, 58, 83, 
	115, 47, 47, 0, 32, 9, 13, 58, 
	0, 9, 10, 13, 32, 34, 35, 39, 
	47, 72, 91, 93, 104, 9, 32, 34, 
	35, 39, 47, 72, 93, 104, 0, 9, 
	10, 13, 32, 35, 47, 72, 91, 93, 
	104, 0, 9, 10, 13, 32, 34, 91, 
	93, 11, 12, 0, 9, 10, 13, 32, 
	91, 93, 9, 32, 93, 0, 9, 10, 
	13, 32, 40, 0, 9, 10, 13, 32, 
	35, 47, 72, 91, 104, 0, 9, 10, 
	13, 32, 41, 91, 11, 12, 0, 32, 
	41, 47, 9, 13, 0, 32, 41, 85, 
	117, 9, 13, 0, 32, 41, 82, 114, 
	9, 13, 0, 32, 41, 76, 108, 9, 
	13, 0, 32, 41, 93, 9, 13, 0, 
	9, 10, 13, 32, 84, 91, 116, 0, 
	9, 10, 13, 32, 84, 91, 116, 0, 
	9, 10, 13, 32, 80, 91, 112, 0, 
	9, 10, 13, 32, 58, 83, 91, 115, 
	0, 9, 10, 13, 32, 47, 91, 0, 
	9, 10, 13, 32, 47, 91, 0, 9, 
	10, 13, 32, 91, 11, 12, 0, 9, 
	10, 13, 32, 58, 91, 0, 32, 34, 
	40, 9, 13, 0, 32, 34, 35, 47, 
	72, 104, 9, 13, 0, 32, 34, 41, 
	9, 13, 0, 9, 32, 41, 93, 10, 
	13, 0, 9, 10, 13, 32, 41, 11, 
	12, 0, 32, 34, 84, 116, 9, 13, 
	0, 32, 34, 84, 116, 9, 13, 0, 
	32, 34, 80, 112, 9, 13, 0, 32, 
	34, 58, 83, 115, 9, 13, 0, 32, 
	34, 47, 9, 13, 0, 32, 34, 47, 
	9, 13, 0, 32, 34, 9, 13, 0, 
	32, 34, 58, 9, 13, 0, 9, 10, 
	13, 32, 84, 91, 93, 116, 0, 9, 
	10, 13, 32, 84, 91, 93, 116, 0, 
	9, 10, 13, 32, 80, 91, 93, 112, 
	0, 9, 10, 13, 32, 58, 83, 91, 
	93, 115, 0, 9, 10, 13, 32, 47, 
	91, 93, 0, 9, 10, 13, 32, 47, 
	91, 93, 0, 9, 10, 13, 32, 91, 
	93, 11, 12, 0, 9, 10, 13, 32, 
	58, 91, 93, 0, 9, 10, 13, 32, 
	91, 93, 11, 12, 0, 9, 10, 13, 
	32, 35, 47, 72, 91, 93, 104, 0, 
	9, 10, 13, 32, 39, 91, 93, 11, 
	12, 0, 32, 39, 40, 9, 13, 0, 
	32, 35, 39, 47, 72, 104, 9, 13, 
	0, 32, 39, 41, 9, 13, 0, 32, 
	39, 84, 116, 9, 13, 0, 32, 39, 
	84, 116, 9, 13, 0, 32, 39, 80, 
	112, 9, 13, 0, 32, 39, 58, 83, 
	115, 9, 13, 0, 32, 39, 47, 9, 
	13, 0, 32, 39, 47, 9, 13, 0, 
	32, 39, 9, 13, 0, 32, 39, 58, 
	9, 13, 0, 9, 10, 13, 32, 84, 
	91, 93, 116, 0, 9, 10, 13, 32, 
	84, 91, 93, 116, 0, 9, 10, 13, 
	32, 80, 91, 93, 112, 0, 9, 10, 
	13, 32, 58, 83, 91, 93, 115, 0, 
	9, 10, 13, 32, 47, 91, 93, 0, 
	9, 10, 13, 32, 47, 91, 93, 0, 
	9, 10, 13, 32, 91, 93, 11, 12, 
	0, 9, 10, 13, 32, 58, 91, 93, 
	0, 9, 10, 13, 32, 84, 91, 93, 
	116, 0, 9, 10, 13, 32, 84, 91, 
	93, 116, 0, 9, 10, 13, 32, 80, 
	91, 93, 112, 0, 9, 10, 13, 32, 
	58, 83, 91, 93, 115, 0, 9, 10, 
	13, 32, 47, 91, 93, 0, 9, 10, 
	13, 32, 47, 91, 93, 0, 9, 10, 
	13, 32, 91, 93, 11, 12, 0, 9, 
	32, 40, 93, 10, 13, 0, 9, 32, 
	35, 47, 72, 93, 104, 10, 13, 0, 
	9, 32, 41, 93, 10, 13, 0, 9, 
	32, 84, 93, 116, 10, 13, 0, 9, 
	32, 84, 93, 116, 10, 13, 0, 9, 
	32, 80, 93, 112, 10, 13, 0, 9, 
	32, 58, 83, 93, 115, 10, 13, 0, 
	9, 32, 47, 93, 10, 13, 0, 9, 
	32, 47, 93, 10, 13, 0, 9, 32, 
	93, 10, 13, 0, 9, 32, 58, 93, 
	10, 13, 0, 9, 10, 13, 32, 58, 
	91, 93, 9, 32, 35, 40, 47, 72, 
	104, 9, 32, 35, 47, 72, 104, 0, 
	9, 32, 91, 10, 13, 9, 32, 91, 
	47, 85, 117, 82, 114, 76, 108, 93, 
	0, 9, 32, 47, 91, 10, 13, 0, 
	9, 32, 85, 91, 117, 10, 13, 0, 
	9, 32, 82, 91, 114, 10, 13, 0, 
	9, 32, 76, 91, 108, 10, 13, 0, 
	9, 32, 91, 93, 10, 13, 84, 116, 
	84, 116, 80, 112, 58, 83, 115, 47, 
	47, 0, 32, 9, 13, 58, 66, 67, 
	69, 73, 81, 83, 84, 85, 98, 99, 
	101, 105, 113, 115, 116, 117, 62, 76, 
	108, 77, 88, 109, 120, 62, 62, 80, 
	84, 112, 116, 82, 114, 79, 111, 78, 
	110, 71, 103, 62, 62, 9, 32, 9, 
	32, 72, 104, 82, 114, 69, 101, 70, 
	102, 61, 34, 35, 47, 72, 104, 0, 
	32, 34, 9, 13, 0, 32, 34, 62, 
	9, 13, 0, 10, 13, 0, 10, 13, 
	60, 0, 10, 13, 47, 60, 0, 10, 
	13, 60, 65, 97, 0, 10, 13, 60, 
	62, 84, 116, 84, 116, 80, 112, 58, 
	83, 115, 47, 47, 0, 32, 9, 13, 
	58, 62, 76, 82, 108, 114, 79, 111, 
	67, 99, 75, 107, 81, 113, 85, 117, 
	79, 111, 84, 116, 69, 101, 62, 62, 
	69, 79, 101, 111, 78, 110, 84, 116, 
	69, 101, 82, 114, 62, 68, 76, 100, 
	108, 69, 101, 9, 32, 61, 62, 9, 
	32, 61, 9, 32, 48, 57, 65, 90, 
	97, 122, 62, 48, 57, 65, 90, 97, 
	122, 79, 111, 82, 114, 9, 32, 61, 
	62, 0, 9, 10, 13, 32, 61, 62, 
	0, 10, 13, 62, 0, 9, 10, 13, 
	32, 62, 77, 88, 109, 120, 62, 80, 
	112, 65, 97, 78, 110, 68, 100, 9, 
	32, 61, 62, 0, 9, 10, 13, 32, 
	61, 62, 0, 10, 13, 62, 0, 9, 
	10, 13, 32, 62, 84, 116, 84, 116, 
	80, 112, 58, 83, 115, 47, 47, 0, 
	32, 9, 13, 0, 32, 62, 9, 13, 
	58, 79, 111, 68, 100, 84, 116, 69, 
	101, 88, 120, 84, 116, 62, 62, 80, 
	84, 112, 116, 79, 111, 73, 105, 76, 
	108, 69, 101, 82, 114, 62, 83, 115, 
	62, 82, 114, 79, 111, 78, 110, 71, 
	103, 62, 78, 110, 62, 62, 896, 1023, 
	1025, 1032, 1038, 1055, 1057, 1151, 1086, 896, 
	1023, 1025, 1033, 1035, 1036, 1038, 1151, 896, 
	959, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 961, 962, 991, 992, 1006, 1008, 
	1012, 1013, 1023, 1025, 1032, 1038, 1055, 1069, 
	1071, 1072, 1081, 1089, 1114, 1121, 1146, 994, 
	995, 1007, 1057, 1063, 1067, 1119, 1151, 896, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 925, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 941, 994, 
	995, 1007, 1057, 1063, 1067, 1119, 1151, 896, 
	959, 960, 961, 962, 991, 992, 1006, 1008, 
	1012, 1013, 1023, 1025, 1032, 1038, 1055, 1069, 
	1071, 1072, 1081, 1089, 1114, 1121, 1146, 896, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	897, 959, 960, 961, 962, 991, 992, 1006, 
	1008, 1012, 1013, 1023, 1025, 1032, 1038, 1055, 
	1069, 1071, 1072, 1081, 1089, 1114, 1121, 1146, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	896, 898, 899, 903, 904, 913, 914, 915, 
	916, 924, 925, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 956, 957, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 959, 960, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 905, 957, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 925, 928, 
	931, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 925, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 941, 994, 995, 1007, 1057, 1063, 
	1067, 1119, 1151, 896, 959, 960, 961, 962, 
	991, 992, 1006, 1008, 1012, 1013, 1023, 1025, 
	1032, 1038, 1055, 1069, 1071, 1072, 1081, 1089, 
	1114, 1121, 1146, 896, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 897, 959, 960, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 898, 899, 903, 
	904, 913, 914, 915, 916, 924, 925, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 956, 957, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	896, 959, 960, 961, 962, 991, 992, 1006, 
	1008, 1012, 1013, 1023, 1025, 1032, 1038, 1055, 
	1069, 1071, 1072, 1081, 1089, 1114, 1121, 1146, 
	905, 957, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 925, 928, 931, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1124, 1139, 1151, 896, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 896, 959, 925, 
	896, 959, 896, 940, 942, 959, 896, 897, 
	959, 899, 903, 914, 915, 925, 959, 956, 
	957, 896, 959, 896, 904, 906, 956, 958, 
	959, 896, 924, 926, 927, 929, 930, 932, 
	959, 896, 959, 994, 995, 1007, 1151, 962, 
	991, 992, 1006, 1008, 1012, 1025, 1032, 1038, 
	1055, 1072, 1081, 1089, 1114, 1121, 1146, 47, 
	67, 99, 79, 111, 68, 100, 69, 101, 
	62, 47, 67, 99, 79, 111, 68, 100, 
	69, 101, 93, 47, 78, 110, 79, 111, 
	68, 100, 84, 116, 69, 101, 88, 120, 
	84, 116, 62, 47, 78, 110, 79, 111, 
	68, 100, 84, 116, 69, 101, 88, 120, 
	84, 116, 93, 67, 84, 99, 116, 79, 
	111, 76, 108, 71, 103, 82, 114, 79, 
	111, 85, 117, 80, 112, 62, 65, 66, 
	72, 82, 97, 98, 104, 114, 66, 98, 
	76, 108, 69, 101, 62, 79, 111, 68, 
	100, 89, 121, 62, 69, 101, 65, 97, 
	68, 100, 62, 62, 79, 111, 76, 108, 
	9, 32, 62, 71, 103, 9, 32, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 9, 32, 34, 39, 48, 57, 65, 
	90, 97, 122, 0, 10, 13, 0, 10, 
	13, 34, 9, 32, 62, 0, 10, 13, 
	0, 10, 13, 39, 9, 32, 62, 48, 
	57, 65, 90, 97, 122, 82, 114, 79, 
	111, 85, 117, 80, 112, 9, 32, 62, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 62, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 62, 48, 57, 65, 90, 97, 122, 
	66, 68, 72, 82, 98, 100, 104, 114, 
	79, 111, 68, 100, 89, 121, 9, 32, 
	62, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	62, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 62, 48, 57, 65, 90, 97, 
	122, 9, 32, 62, 9, 32, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	9, 32, 34, 39, 48, 57, 65, 90, 
	97, 122, 0, 10, 13, 0, 10, 13, 
	34, 9, 32, 62, 0, 10, 13, 0, 
	10, 13, 39, 9, 32, 62, 48, 57, 
	65, 90, 97, 122, 9, 32, 62, 69, 
	101, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	62, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 62, 48, 57, 65, 90, 97, 
	122, 65, 97, 68, 100, 9, 32, 62, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 62, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 62, 48, 57, 65, 90, 97, 122, 
	9, 32, 62, 9, 32, 48, 57, 65, 
	90, 97, 122, 9, 32, 61, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 9, 
	32, 34, 39, 48, 57, 65, 90, 97, 
	122, 0, 10, 13, 0, 10, 13, 34, 
	9, 32, 62, 0, 10, 13, 0, 10, 
	13, 39, 9, 32, 62, 48, 57, 65, 
	90, 97, 122, 67, 84, 99, 116, 79, 
	111, 76, 108, 71, 103, 82, 114, 79, 
	111, 85, 117, 80, 112, 93, 65, 66, 
	72, 82, 97, 98, 104, 114, 66, 98, 
	76, 108, 69, 101, 93, 79, 111, 68, 
	100, 89, 121, 93, 69, 101, 65, 97, 
	68, 100, 93, 93, 79, 111, 76, 108, 
	9, 32, 71, 93, 103, 9, 32, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 9, 32, 34, 39, 48, 57, 65, 
	90, 97, 122, 0, 10, 13, 0, 10, 
	13, 34, 9, 32, 93, 0, 10, 13, 
	0, 10, 13, 39, 9, 32, 93, 48, 
	57, 65, 90, 97, 122, 82, 114, 79, 
	111, 85, 117, 80, 112, 9, 32, 93, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 93, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 93, 48, 57, 65, 90, 97, 122, 
	66, 68, 72, 82, 98, 100, 104, 114, 
	79, 111, 68, 100, 89, 121, 9, 32, 
	93, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	93, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 93, 48, 57, 65, 90, 97, 
	122, 9, 32, 93, 9, 32, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	9, 32, 34, 39, 48, 57, 65, 90, 
	97, 122, 0, 10, 13, 0, 10, 13, 
	34, 9, 32, 93, 0, 10, 13, 0, 
	10, 13, 39, 9, 32, 93, 48, 57, 
	65, 90, 97, 122, 9, 32, 69, 93, 
	101, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	93, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 93, 48, 57, 65, 90, 97, 
	122, 65, 97, 68, 100, 9, 32, 93, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 93, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 93, 48, 57, 65, 90, 97, 122, 
	9, 32, 93, 9, 32, 48, 57, 65, 
	90, 97, 122, 9, 32, 61, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 9, 
	32, 34, 39, 48, 57, 65, 90, 97, 
	122, 0, 10, 13, 0, 10, 13, 34, 
	9, 32, 93, 0, 10, 13, 0, 10, 
	13, 39, 9, 32, 93, 48, 57, 65, 
	90, 97, 122, 0, 9, 10, 32, 42, 
	60, 72, 91, 96, 104, 0, 9, 10, 
	32, 0, 9, 10, 32, 60, 91, 0, 
	10, 9, 32, 42, 0, 10, 13, 0, 
	9, 10, 13, 32, 66, 67, 69, 72, 
	78, 81, 83, 84, 98, 99, 101, 104, 
	110, 113, 115, 116, 32, 9, 13, 0, 
	9, 10, 32, 0, 9, 10, 32, 32, 
	9, 13, 32, 9, 13, 0, 9, 10, 
	32, 32, 9, 13, 49, 54, 9, 32, 
	67, 69, 72, 78, 81, 83, 84, 99, 
	101, 104, 110, 113, 115, 116, 96, 0, 
	60, 91, 47, 66, 69, 73, 83, 85, 
	98, 101, 105, 115, 117, 47, 66, 73, 
	83, 85, 98, 105, 115, 117, 0, 9, 
	10, 13, 32, 34, 65, 66, 67, 68, 
	70, 72, 77, 80, 82, 83, 84, 85, 
	87, 91, 97, 98, 99, 100, 102, 104, 
	109, 112, 114, 115, 116, 117, 119, 123, 
	828, 1084, 1344, 1600, 1856, 2112, -128, -63, 
	-62, -33, -32, -17, -16, -12, -11, 47, 
	48, 57, 58, 59, 61, 63, 69, 90, 
	92, 96, 101, 122, 124, 127, -128, -65, 
	-62, -33, -32, -17, -16, -12, -128, -65, 
	-128, -65, 0, 9, 10, 32, 0, 9, 
	10, 32, 0, 9, 10, 32, 42, 60, 
	72, 91, 96, 104, 0, 10, 0, 9, 
	10, 32, 60, 91, 10, 0, 10, 13, 
	0, 9, 10, 13, 32, 9, 32, 9, 
	32, 9, 32, 34, -30, -29, -17, 32, 
	34, 35, 39, 44, 46, 60, 62, 63, 
	91, 93, -128, -63, -62, -33, -32, -18, 
	-16, -12, -11, 0, 9, 13, 58, 59, 
	-30, -29, -17, 32, 34, 35, 39, 44, 
	46, 60, 62, 63, 91, 93, -128, -63, 
	-62, -33, -32, -18, -16, -12, -11, 0, 
	9, 13, 58, 59, -30, -29, -17, 32, 
	34, 35, 39, 44, 46, 63, -128, -63, 
	-62, -33, -32, -18, -16, -12, -11, 0, 
	9, 13, 58, 59, -30, -29, -17, 35, 
	46, 47, 58, 63, 95, -62, -33, -32, 
	-18, -16, -12, 45, 57, 65, 90, 97, 
	122, 35, 47, 63, 48, 57, 91, 123, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 125, 48, 
	57, 65, 90, 97, 122, 125, 48, 57, 
	65, 90, 97, 122, 82, 91, 114, 123, 
	48, 57, 65, 90, 97, 122, 84, 91, 
	116, 123, 48, 57, 65, 90, 97, 122, 
	73, 91, 105, 123, 48, 57, 65, 90, 
	97, 122, 83, 91, 115, 123, 48, 57, 
	65, 90, 97, 122, 84, 91, 116, 123, 
	48, 57, 65, 90, 97, 122, 32, 91, 
	123, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 79, 91, 111, 
	123, 48, 57, 65, 90, 97, 122, 79, 
	91, 111, 123, 48, 57, 65, 90, 97, 
	122, 75, 91, 107, 123, 48, 57, 65, 
	90, 97, 122, 32, 91, 123, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 79, 91, 111, 123, 48, 57, 
	65, 90, 97, 122, 77, 91, 109, 123, 
	48, 57, 65, 90, 97, 122, 77, 91, 
	109, 123, 48, 57, 65, 90, 97, 122, 
	69, 91, 101, 123, 48, 57, 65, 90, 
	97, 122, 78, 91, 110, 123, 48, 57, 
	65, 90, 97, 122, 84, 91, 116, 123, 
	48, 57, 65, 90, 97, 122, 32, 91, 
	123, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 77, 91, 109, 
	123, 48, 57, 65, 90, 97, 122, 65, 
	91, 97, 123, 48, 57, 66, 90, 98, 
	122, 73, 91, 105, 123, 48, 57, 65, 
	90, 97, 122, 76, 91, 108, 123, 48, 
	57, 65, 90, 97, 122, 32, 91, 123, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 45, 61, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 65, 90, 97, 122, 
	47, 48, 57, 65, 90, 97, 122, 47, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 47, 
	79, 91, 111, 123, 48, 57, 65, 90, 
	97, 122, 82, 91, 114, 123, 48, 57, 
	65, 90, 97, 122, 85, 91, 117, 123, 
	48, 57, 65, 90, 97, 122, 77, 91, 
	109, 123, 48, 57, 65, 90, 97, 122, 
	32, 91, 123, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 84, 
	91, 116, 123, 48, 57, 65, 90, 97, 
	122, 84, 91, 116, 123, 48, 57, 65, 
	90, 97, 122, 80, 91, 112, 123, 48, 
	57, 65, 90, 97, 122, 58, 83, 91, 
	115, 123, 48, 57, 65, 90, 97, 122, 
	-30, -29, -17, 35, 46, 47, 58, 63, 
	95, -62, -33, -32, -18, -16, -12, 45, 
	57, 65, 90, 97, 122, -30, -29, -17, 
	32, 34, 35, 39, 44, 46, 60, 62, 
	63, 91, 93, -128, -63, -62, -33, -32, 
	-18, -16, -12, -11, 0, 9, 13, 58, 
	59, -30, -29, -17, 32, 34, 35, 39, 
	44, 46, 60, 62, 63, 91, 93, -128, 
	-63, -62, -33, -32, -18, -16, -12, -11, 
	0, 9, 13, 58, 59, -30, -29, -17, 
	32, 34, 35, 39, 44, 46, 63, -128, 
	-63, -62, -33, -32, -18, -16, -12, -11, 
	0, 9, 13, 58, 59, 35, 47, 63, 
	48, 57, 58, 91, 123, 48, 57, 65, 
	90, 97, 122, 79, 91, 111, 123, 48, 
	57, 65, 90, 97, 122, 68, 91, 100, 
	123, 48, 57, 65, 90, 97, 122, 32, 
	91, 123, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 73, 79, 
	91, 105, 111, 123, 48, 57, 65, 90, 
	97, 122, 88, 91, 120, 123, 48, 57, 
	65, 90, 97, 122, 73, 91, 105, 123, 
	48, 57, 65, 90, 97, 122, 86, 91, 
	118, 123, 48, 57, 65, 90, 97, 122, 
	32, 91, 123, 48, 57, 65, 90, 97, 
	122, 48, 57, 79, 83, 91, 111, 115, 
	123, 48, 57, 65, 90, 97, 122, 76, 
	91, 108, 123, 48, 57, 65, 90, 97, 
	122, 32, 91, 123, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	84, 91, 116, 123, 48, 57, 65, 90, 
	97, 122, 32, 91, 123, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 69, 91, 101, 123, 48, 57, 65, 
	90, 97, 122, 67, 91, 99, 123, 48, 
	57, 65, 90, 97, 122, 79, 91, 111, 
	123, 48, 57, 65, 90, 97, 122, 82, 
	91, 114, 123, 48, 57, 65, 90, 97, 
	122, 68, 91, 100, 123, 48, 57, 65, 
	90, 97, 122, 32, 91, 123, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 69, 91, 101, 123, 48, 57, 
	65, 90, 97, 122, 82, 91, 114, 123, 
	48, 57, 65, 90, 97, 122, 73, 91, 
	105, 123, 48, 57, 65, 90, 97, 122, 
	69, 91, 101, 123, 48, 57, 65, 90, 
	97, 122, 83, 91, 115, 123, 48, 57, 
	65, 90, 97, 122, 32, 91, 123, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 79, 91, 97, 111, 
	123, 48, 57, 66, 90, 98, 122, 71, 
	91, 103, 123, 48, 57, 65, 90, 97, 
	122, 32, 91, 123, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 80, 91, 112, 123, 
	48, 57, 65, 90, 97, 122, 73, 91, 
	105, 123, 48, 57, 65, 90, 97, 122, 
	67, 91, 99, 123, 48, 57, 65, 90, 
	97, 122, 32, 91, 123, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 48, 57, 47, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 65, 90, 97, 122, 
	47, 48, 57, 65, 90, 97, 122, 47, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 47, 83, 
	91, 115, 123, 48, 57, 65, 90, 97, 
	122, 69, 91, 101, 123, 48, 57, 65, 
	90, 97, 122, 82, 91, 114, 123, 48, 
	57, 65, 90, 97, 122, 32, 91, 123, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 73, 91, 105, 123, 48, 57, 
	65, 90, 97, 122, 75, 91, 107, 123, 
	48, 57, 65, 90, 97, 122, 73, 91, 
	105, 123, 48, 57, 65, 90, 97, 122, 
	32, 91, 123, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 0, 
	9, 10, 13, 32, 47, 66, 67, 69, 
	73, 78, 81, 83, 84, 85, 91, 93, 
	98, 99, 101, 105, 110, 113, 115, 116, 
	117, 40, 10, 40, 9, 32, 40, 9, 
	32, 40, 0, 9, 10, 32, 0, 9, 
	10, 32, 40, 0, 9, 10, 32, 40, 
	0, 9, 10, 32, 40, 0, 9, 10, 
	13, 32, 91, 0, 32, 41, 9, 13, 
	0, 32, 34, 9, 13, 0, 32, 39, 
	9, 13, 0, 9, 32, 93, 10, 13, 
	123, 47, 65, 66, 67, 69, 72, 73, 
	78, 81, 83, 84, 85, 97, 98, 99, 
	101, 104, 105, 110, 113, 115, 116, 117, 
	0, 9, 10, 32, 0, 9, 10, 32, 
	47, 65, 66, 67, 69, 72, 73, 78, 
	81, 83, 84, 85, 97, 98, 99, 101, 
	104, 105, 110, 113, 115, 116, 117, 1088, 
	994, 995, 1007, 1070, 1119, 1151, 962, 991, 
	992, 1006, 1008, 1012, 1025, 1032, 1038, 1055, 
	1072, 1081, 1089, 1114, 1121, 1146, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 0, 10, 60, 91, 60, 91, 
	47, 47, 0, 10, 60, 91, 60, 91, 
	47, 47, 60, 91, 47, 67, 84, 99, 
	116, 47, 67, 84, 99, 116, 0
};

static const char _dtext_single_lengths[] = {
	0, 4, 6, 6, 2, 2, 2, 2, 
	2, 1, 2, 1, 4, 2, 2, 2, 
	2, 1, 6, 2, 2, 2, 2, 2, 
	1, 2, 1, 2, 2, 2, 2, 1, 
	5, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 4, 4, 2, 4, 
	3, 2, 1, 4, 4, 2, 2, 4, 
	7, 4, 6, 2, 2, 2, 2, 2, 
	4, 7, 4, 6, 2, 2, 2, 2, 
	2, 2, 1, 4, 2, 2, 2, 2, 
	2, 2, 3, 1, 4, 1, 2, 5, 
	5, 4, 4, 2, 4, 3, 2, 1, 
	2, 2, 4, 7, 4, 6, 2, 2, 
	2, 2, 2, 4, 7, 4, 6, 2, 
	2, 2, 2, 2, 2, 1, 2, 2, 
	2, 2, 1, 2, 2, 2, 2, 2, 
	2, 3, 1, 4, 1, 1, 4, 2, 
	2, 3, 3, 3, 4, 4, 4, 10, 
	1, 2, 1, 3, 2, 2, 2, 2, 
	1, 1, 2, 1, 3, 2, 2, 2, 
	2, 1, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 4, 4, 
	6, 6, 2, 1, 4, 2, 2, 2, 
	2, 2, 2, 3, 4, 1, 2, 2, 
	2, 2, 1, 6, 2, 1, 2, 2, 
	2, 2, 2, 2, 3, 1, 2, 2, 
	2, 2, 1, 1, 4, 4, 2, 2, 
	2, 2, 1, 2, 2, 2, 2, 6, 
	1, 1, 1, 1, 4, 4, 2, 2, 
	2, 2, 1, 2, 2, 2, 2, 6, 
	1, 1, 1, 3, 5, 11, 12, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 2, 2, 2, 2, 2, 1, 2, 
	2, 2, 2, 1, 2, 2, 2, 2, 
	2, 2, 3, 1, 2, 2, 2, 4, 
	3, 2, 1, 2, 2, 2, 2, 2, 
	2, 1, 0, 2, 5, 5, 11, 10, 
	2, 2, 2, 2, 2, 1, 2, 2, 
	2, 2, 2, 2, 3, 1, 2, 2, 
	2, 4, 3, 2, 1, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 4, 2, 
	2, 3, 3, 3, 4, 4, 4, 1, 
	1, 5, 0, 0, 1, 0, 1, 0, 
	2, 0, 0, 0, 14, 0, 0, 1, 
	0, 1, 0, 2, 0, 0, 0, 14, 
	10, 0, 0, 1, 0, 1, 0, 2, 
	0, 0, 0, 2, 2, 2, 3, 1, 
	1, 2, 0, 3, 0, 0, 5, 0, 
	0, 1, 1, 9, 1, 0, 2, 2, 
	3, 0, 0, 1, 4, 3, 2, 2, 
	2, 3, 1, 1, 2, 1, 1, 8, 
	5, 5, 3, 5, 6, 4, 1, 4, 
	4, 4, 1, 6, 3, 5, 5, 5, 
	4, 6, 4, 1, 6, 6, 6, 5, 
	5, 5, 5, 4, 1, 4, 4, 0, 
	5, 3, 5, 3, 6, 5, 5, 5, 
	5, 4, 1, 3, 5, 5, 0, 1, 
	5, 1, 1, 1, 10, 6, 12, 10, 
	6, 4, 6, 6, 6, 5, 1, 1, 
	7, 14, 8, 14, 12, 8, 7, 1, 
	4, 8, 7, 7, 7, 7, 7, 9, 
	8, 7, 8, 7, 7, 9, 7, 7, 
	7, 7, 4, 6, 7, 6, 6, 3, 
	1, 4, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 2, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 2, 0, 3, 0, 0, 
	5, 0, 0, 1, 1, 9, 1, 0, 
	2, 2, 3, 0, 0, 0, 1, 0, 
	1, 0, 2, 0, 0, 0, 14, 0, 
	0, 1, 0, 1, 0, 2, 0, 0, 
	0, 14, 10, 0, 0, 1, 0, 1, 
	0, 2, 0, 0, 0, 0, 2, 2, 
	2, 2, 2, 2, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 2, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 6, 2, 2, 2, 2, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 2, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 2, 2, 2, 
	2, 2, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 7, 3, 1, 4, 3, 
	2, 2, 2, 3, 1, 1, 2, 1, 
	7, 23, 7, 11, 9, 9, 9, 9, 
	7, 9, 9, 9, 5, 9, 9, 9, 
	9, 9, 5, 7, 9, 9, 9, 9, 
	5, 9, 9, 9, 9, 9, 9, 9, 
	7, 13, 7, 7, 7, 7, 9, 7, 
	11, 9, 9, 9, 9, 7, 11, 9, 
	8, 4, 2, 1, 4, 7, 3, 7, 
	4, 9, 9, 8, 7, 4, 6, 7, 
	7, 6, 6, 9, 9, 9, 9, 9, 
	8, 7, 4, 6, 7, 7, 6, 6, 
	7, 9, 9, 9, 9, 9, 9, 7, 
	4, 9, 9, 9, 9, 7, 9, 9, 
	9, 9, 9, 9, 9, 7, 9, 7, 
	9, 9, 8, 4, 8, 4, 3, 3, 
	5, 6, 3, 1, 2, 2, 2, 1, 
	6, 2, 2, 2, 3, 1, 1, 2, 
	1, 4, 4, 3, 2, 2, 2, 3, 
	1, 1, 2, 1, 2, 2, 2, 3, 
	1, 1, 2, 1, 13, 9, 11, 8, 
	7, 3, 6, 10, 7, 4, 5, 5, 
	5, 4, 8, 8, 8, 9, 7, 7, 
	6, 7, 4, 7, 4, 5, 6, 5, 
	5, 5, 6, 4, 4, 3, 4, 9, 
	9, 9, 10, 8, 8, 7, 8, 7, 
	11, 8, 4, 7, 4, 5, 5, 5, 
	6, 4, 4, 3, 4, 9, 9, 9, 
	10, 8, 8, 7, 8, 9, 9, 9, 
	10, 8, 8, 7, 5, 8, 5, 6, 
	6, 6, 7, 5, 5, 4, 5, 8, 
	7, 6, 4, 3, 1, 2, 2, 2, 
	1, 5, 6, 6, 6, 5, 2, 2, 
	2, 3, 1, 1, 2, 1, 16, 3, 
	4, 1, 5, 2, 2, 2, 2, 1, 
	1, 2, 4, 2, 2, 2, 1, 1, 
	4, 3, 4, 3, 4, 5, 6, 5, 
	2, 2, 2, 3, 1, 1, 2, 1, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 4, 2, 2, 2, 2, 
	1, 4, 2, 4, 3, 2, 1, 2, 
	2, 4, 7, 4, 6, 4, 1, 2, 
	2, 2, 2, 4, 7, 4, 6, 2, 
	2, 2, 3, 1, 1, 2, 3, 1, 
	2, 2, 2, 2, 2, 2, 1, 5, 
	2, 2, 2, 2, 2, 3, 1, 2, 
	2, 2, 2, 1, 2, 1, 1, 0, 
	1, 0, 8, 8, 8, 8, 9, 9, 
	9, 8, 10, 10, 8, 11, 8, 8, 
	9, 9, 9, 8, 10, 10, 11, 8, 
	10, 0, 1, 0, 1, 0, 2, 0, 
	0, 0, 4, 1, 2, 2, 2, 2, 
	1, 1, 2, 2, 2, 2, 1, 1, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 2, 2, 2, 2, 2, 2, 2, 
	1, 4, 2, 2, 2, 2, 2, 2, 
	2, 1, 8, 2, 2, 2, 1, 2, 
	2, 2, 1, 2, 2, 2, 1, 1, 
	2, 2, 5, 2, 3, 3, 4, 3, 
	4, 3, 3, 4, 3, 2, 2, 2, 
	2, 3, 2, 3, 3, 4, 3, 4, 
	3, 3, 4, 3, 8, 2, 2, 2, 
	3, 2, 3, 3, 4, 3, 4, 3, 
	3, 4, 3, 3, 2, 3, 3, 4, 
	3, 4, 3, 3, 4, 3, 5, 2, 
	3, 3, 4, 3, 4, 3, 3, 4, 
	3, 2, 2, 3, 2, 3, 3, 4, 
	3, 4, 3, 3, 4, 3, 3, 2, 
	3, 3, 4, 3, 4, 3, 3, 4, 
	3, 4, 2, 2, 2, 2, 2, 2, 
	2, 1, 8, 2, 2, 2, 1, 2, 
	2, 2, 1, 2, 2, 2, 1, 1, 
	2, 2, 5, 2, 3, 3, 4, 3, 
	4, 3, 3, 4, 3, 2, 2, 2, 
	2, 3, 2, 3, 3, 4, 3, 4, 
	3, 3, 4, 3, 8, 2, 2, 2, 
	3, 2, 3, 3, 4, 3, 4, 3, 
	3, 4, 3, 3, 2, 3, 3, 4, 
	3, 4, 3, 3, 4, 3, 5, 2, 
	3, 3, 4, 3, 4, 3, 3, 4, 
	3, 2, 2, 3, 2, 3, 3, 4, 
	3, 4, 3, 3, 4, 3, 3, 2, 
	3, 3, 4, 3, 4, 3, 3, 4, 
	3, 10, 4, 6, 2, 3, 3, 5, 
	16, 1, 4, 4, 1, 1, 4, 1, 
	0, 2, 14, 1, 3, 11, 9, 40, 
	0, 0, 0, 0, 4, 4, 10, 2, 
	6, 1, 3, 5, 2, 2, 2, 1, 
	14, 14, 10, 9, 3, 2, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 4, 4, 4, 4, 
	4, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 4, 
	4, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 4, 
	4, 4, 4, 4, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 4, 4, 4, 4, 3, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 5, 
	9, 14, 14, 10, 3, 3, 4, 4, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 6, 4, 4, 
	4, 3, 0, 6, 4, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	4, 4, 4, 4, 4, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 4, 4, 4, 4, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 6, 4, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 3, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	4, 4, 4, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	26, 1, 2, 3, 3, 4, 5, 5, 
	5, 6, 3, 3, 3, 4, 1, 23, 
	4, 4, 24, 6, 8, 8, 4, 2, 
	1, 1, 4, 2, 1, 1, 2, 5, 
	5
};

static const char _dtext_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 0, 0, 0, 0, 0, 3, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 3, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 1, 1, 1, 2, 1, 3, 
	1, 3, 4, 1, 7, 1, 1, 1, 
	2, 1, 3, 1, 3, 4, 1, 7, 
	7, 1, 1, 1, 2, 1, 3, 1, 
	3, 4, 1, 0, 0, 0, 0, 0, 
	0, 6, 1, 6, 1, 1, 6, 1, 
	1, 1, 1, 6, 1, 6, 1, 1, 
	1, 1, 1, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 1, 
	1, 1, 1, 2, 3, 0, 0, 1, 
	1, 1, 0, 3, 3, 1, 1, 1, 
	2, 4, 1, 0, 4, 4, 4, 1, 
	1, 1, 1, 1, 0, 0, 0, 1, 
	3, 0, 3, 3, 1, 1, 1, 1, 
	1, 1, 0, 3, 0, 0, 1, 0, 
	0, 0, 0, 0, 2, 1, 1, 1, 
	1, 0, 1, 1, 1, 1, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 0, 1, 1, 1, 1, 3, 
	0, 0, 0, 0, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 6, 1, 6, 1, 1, 
	6, 1, 1, 1, 1, 6, 1, 6, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 3, 1, 3, 4, 1, 7, 1, 
	1, 1, 2, 1, 3, 1, 3, 4, 
	1, 7, 7, 1, 1, 1, 2, 1, 
	3, 1, 3, 4, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 3, 3, 0, 1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 1, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 3, 0, 1, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 0, 0, 0, 
	0, 0, 5, 0, 0, 0, 0, 0, 
	5, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 3, 0, 3, 3, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 1, 0, 1, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	1, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 4, 
	4, 1, 11, 11, 12, 12, 12, 12, 
	12, 17, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 17, 12, 12, 12, 12, 
	11, 1, 1, 2, 1, 3, 1, 3, 
	4, 1, 8, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 3, 0, 3, 0, 
	0, 0, 0, 0, 3, 0, 0, 0, 
	0, 0, 3, 3, 0, 3, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 3, 3, 0, 3, 0, 0, 0, 
	0, 0, 3, 0, 3, 3, 0, 3, 
	0, 0, 0, 0, 0, 3, 0, 3, 
	3, 0, 3, 0, 0, 0, 0, 0, 
	3, 0, 0, 0, 3, 3, 0, 3, 
	0, 0, 0, 0, 0, 3, 0, 3, 
	3, 0, 3, 0, 0, 0, 0, 0, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 3, 0, 3, 0, 
	0, 0, 0, 0, 3, 0, 0, 0, 
	0, 0, 3, 3, 0, 3, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 3, 3, 0, 3, 0, 0, 0, 
	0, 0, 3, 0, 3, 3, 0, 3, 
	0, 0, 0, 0, 0, 3, 0, 3, 
	3, 0, 3, 0, 0, 0, 0, 0, 
	3, 0, 0, 0, 3, 3, 0, 3, 
	0, 0, 0, 0, 0, 3, 0, 3, 
	3, 0, 3, 0, 0, 0, 0, 0, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 12, 
	1, 3, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 7, 7, 6, 1, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 1, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 1, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 1, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 1, 0, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 1, 0, 3, 3, 3, 3, 
	6, 7, 7, 7, 1, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 1, 0, 3, 3, 3, 
	3, 3, 1, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	1, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 1, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	1, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 1, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 1, 0, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 1, 0, 3, 3, 3, 3, 3, 
	1, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 1, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 1, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 1, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 8, 11, 11, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
};

static const short _dtext_index_offsets[] = {
	0, 0, 5, 12, 19, 22, 25, 28, 
	31, 34, 36, 39, 41, 46, 49, 52, 
	55, 58, 60, 67, 70, 73, 76, 79, 
	82, 84, 87, 89, 92, 95, 98, 101, 
	103, 109, 113, 116, 119, 122, 125, 128, 
	131, 134, 137, 140, 142, 147, 152, 155, 
	160, 164, 170, 175, 180, 185, 188, 191, 
	196, 204, 209, 216, 219, 222, 225, 228, 
	231, 236, 244, 249, 256, 259, 262, 265, 
	268, 271, 274, 276, 281, 284, 287, 290, 
	293, 296, 299, 303, 305, 310, 312, 315, 
	324, 333, 338, 343, 346, 351, 355, 361, 
	366, 369, 372, 377, 385, 390, 397, 400, 
	403, 406, 409, 412, 417, 425, 430, 437, 
	440, 443, 446, 449, 452, 455, 457, 460, 
	463, 466, 469, 471, 474, 477, 480, 483, 
	486, 489, 493, 495, 500, 502, 504, 512, 
	515, 518, 522, 526, 530, 535, 543, 548, 
	559, 561, 564, 566, 570, 573, 576, 579, 
	582, 584, 586, 589, 591, 595, 598, 601, 
	604, 607, 609, 618, 620, 622, 624, 626, 
	628, 630, 632, 634, 636, 638, 640, 645, 
	650, 657, 664, 667, 669, 674, 677, 680, 
	683, 686, 689, 692, 696, 701, 703, 706, 
	709, 712, 715, 717, 724, 727, 729, 732, 
	735, 738, 741, 744, 747, 751, 753, 756, 
	759, 762, 765, 767, 769, 774, 779, 782, 
	785, 788, 791, 793, 796, 799, 802, 805, 
	812, 814, 816, 818, 820, 825, 830, 833, 
	836, 839, 842, 844, 847, 850, 853, 856, 
	863, 865, 867, 869, 873, 879, 891, 904, 
	907, 910, 913, 916, 919, 922, 925, 928, 
	931, 933, 936, 939, 942, 945, 948, 950, 
	953, 956, 959, 962, 964, 967, 970, 973, 
	976, 979, 982, 986, 988, 991, 994, 997, 
	1002, 1006, 1012, 1017, 1020, 1023, 1026, 1029, 
	1032, 1035, 1037, 1039, 1042, 1051, 1060, 1072, 
	1083, 1086, 1089, 1092, 1095, 1098, 1100, 1103, 
	1106, 1109, 1112, 1115, 1118, 1122, 1124, 1127, 
	1130, 1133, 1138, 1142, 1148, 1153, 1156, 1159, 
	1162, 1165, 1168, 1171, 1173, 1175, 1177, 1185, 
	1188, 1191, 1195, 1199, 1203, 1208, 1216, 1221, 
	1223, 1225, 1231, 1233, 1235, 1238, 1241, 1244, 
	1248, 1252, 1256, 1261, 1263, 1285, 1287, 1289, 
	1292, 1295, 1298, 1302, 1306, 1310, 1315, 1317, 
	1339, 1357, 1359, 1361, 1364, 1367, 1370, 1374, 
	1378, 1382, 1387, 1389, 1392, 1395, 1398, 1402, 
	1404, 1406, 1415, 1417, 1427, 1429, 1431, 1443, 
	1445, 1447, 1450, 1453, 1469, 1472, 1479, 1483, 
	1487, 1492, 1494, 1496, 1498, 1503, 1508, 1511, 
	1514, 1517, 1521, 1523, 1525, 1529, 1531, 1533, 
	1543, 1550, 1557, 1562, 1570, 1580, 1585, 1587, 
	1593, 1599, 1605, 1607, 1617, 1624, 1631, 1638, 
	1645, 1652, 1663, 1669, 1671, 1682, 1693, 1704, 
	1711, 1718, 1725, 1732, 1738, 1740, 1745, 1750, 
	1752, 1761, 1765, 1774, 1781, 1789, 1796, 1803, 
	1810, 1817, 1823, 1825, 1832, 1838, 1844, 1846, 
	1848, 1854, 1856, 1858, 1860, 1873, 1881, 1895, 
	1907, 1915, 1920, 1928, 1936, 1944, 1951, 1953, 
	1955, 1964, 1980, 1990, 2006, 2020, 2030, 2039, 
	2041, 2046, 2056, 2065, 2074, 2083, 2092, 2101, 
	2112, 2122, 2131, 2141, 2150, 2159, 2173, 2182, 
	2191, 2200, 2209, 2214, 2222, 2231, 2239, 2247, 
	2254, 2256, 2261, 2263, 2265, 2267, 2271, 2275, 
	2279, 2283, 2287, 2291, 2295, 2299, 2303, 2307, 
	2311, 2313, 2317, 2321, 2325, 2329, 2333, 2337, 
	2341, 2345, 2349, 2353, 2357, 2359, 2363, 2367, 
	2371, 2375, 2379, 2383, 2387, 2391, 2395, 2399, 
	2403, 2405, 2409, 2415, 2419, 2423, 2427, 2431, 
	2435, 2439, 2443, 2447, 2451, 2455, 2457, 2461, 
	2465, 2469, 2473, 2477, 2481, 2485, 2489, 2493, 
	2497, 2501, 2503, 2505, 2514, 2516, 2526, 2528, 
	2530, 2542, 2544, 2546, 2549, 2552, 2568, 2571, 
	2578, 2582, 2586, 2591, 2593, 2595, 2597, 2600, 
	2603, 2606, 2610, 2614, 2618, 2623, 2625, 2647, 
	2649, 2651, 2654, 2657, 2660, 2664, 2668, 2672, 
	2677, 2679, 2701, 2719, 2721, 2723, 2726, 2729, 
	2732, 2736, 2740, 2744, 2749, 2751, 2753, 2756, 
	2759, 2762, 2765, 2768, 2771, 2773, 2775, 2779, 
	2783, 2787, 2791, 2795, 2799, 2803, 2807, 2811, 
	2815, 2819, 2821, 2825, 2830, 2833, 2835, 2840, 
	2845, 2850, 2855, 2860, 2865, 2870, 2875, 2880, 
	2883, 2885, 2889, 2893, 2897, 2901, 2905, 2909, 
	2913, 2917, 2921, 2925, 2927, 2931, 2935, 2939, 
	2943, 2947, 2951, 2955, 2959, 2963, 2967, 2971, 
	2973, 2977, 2981, 2985, 2989, 2993, 2997, 3001, 
	3005, 3009, 3013, 3017, 3019, 3023, 3027, 3031, 
	3035, 3039, 3043, 3047, 3051, 3055, 3059, 3063, 
	3065, 3069, 3073, 3077, 3081, 3085, 3089, 3093, 
	3097, 3101, 3105, 3109, 3116, 3119, 3122, 3125, 
	3128, 3130, 3132, 3136, 3140, 3144, 3148, 3152, 
	3156, 3160, 3164, 3168, 3172, 3176, 3179, 3182, 
	3185, 3188, 3191, 3194, 3197, 3200, 3203, 3206, 
	3208, 3210, 3214, 3218, 3222, 3226, 3230, 3234, 
	3238, 3242, 3246, 3250, 3254, 3257, 3260, 3263, 
	3266, 3269, 3272, 3275, 3278, 3281, 3284, 3286, 
	3288, 3292, 3296, 3300, 3304, 3308, 3312, 3316, 
	3320, 3324, 3328, 3332, 3334, 3338, 3341, 3343, 
	3347, 3351, 3355, 3359, 3363, 3367, 3371, 3375, 
	3379, 3383, 3387, 3391, 3395, 3399, 3403, 3407, 
	3411, 3415, 3419, 3423, 3427, 3431, 3434, 3437, 
	3440, 3443, 3446, 3448, 3450, 3454, 3458, 3462, 
	3466, 3470, 3474, 3478, 3482, 3486, 3490, 3494, 
	3496, 3500, 3504, 3508, 3512, 3516, 3520, 3524, 
	3528, 3532, 3536, 3540, 3548, 3552, 3554, 3559, 
	3564, 3567, 3570, 3573, 3577, 3579, 3581, 3585, 
	3587, 3595, 3619, 3627, 3639, 3649, 3659, 3669, 
	3679, 3687, 3697, 3707, 3717, 3728, 3738, 3748, 
	3758, 3768, 3778, 3789, 3797, 3807, 3817, 3827, 
	3837, 3848, 3858, 3868, 3878, 3888, 3898, 3908, 
	3918, 3926, 3940, 3948, 3956, 3964, 3972, 3982, 
	3990, 4002, 4012, 4022, 4032, 4042, 4050, 4062, 
	4072, 4081, 4086, 4092, 4097, 4102, 4113, 4120, 
	4131, 4136, 4146, 4156, 4165, 4173, 4178, 4185, 
	4193, 4201, 4208, 4215, 4225, 4235, 4245, 4255, 
	4265, 4274, 4282, 4287, 4294, 4302, 4310, 4317, 
	4324, 4332, 4342, 4352, 4362, 4372, 4382, 4392, 
	4400, 4405, 4415, 4425, 4435, 4445, 4453, 4463, 
	4473, 4483, 4493, 4503, 4513, 4523, 4531, 4541, 
	4549, 4559, 4569, 4578, 4583, 4592, 4597, 4602, 
	4606, 4612, 4619, 4623, 4625, 4628, 4631, 4634, 
	4636, 4643, 4646, 4649, 4652, 4656, 4658, 4660, 
	4664, 4666, 4672, 4677, 4682, 4685, 4688, 4691, 
	4695, 4697, 4699, 4703, 4705, 4708, 4711, 4714, 
	4718, 4720, 4722, 4726, 4728, 4742, 4752, 4764, 
	4774, 4782, 4786, 4793, 4804, 4813, 4819, 4826, 
	4833, 4840, 4846, 4855, 4864, 4873, 4883, 4891, 
	4899, 4907, 4915, 4921, 4930, 4936, 4943, 4951, 
	4958, 4965, 4972, 4980, 4986, 4992, 4997, 5003, 
	5013, 5023, 5033, 5044, 5053, 5062, 5071, 5080, 
	5089, 5101, 5111, 5117, 5126, 5132, 5139, 5146, 
	5153, 5161, 5167, 5173, 5178, 5184, 5194, 5204, 
	5214, 5225, 5234, 5243, 5252, 5261, 5271, 5281, 
	5291, 5302, 5311, 5320, 5329, 5336, 5346, 5353, 
	5361, 5369, 5377, 5386, 5393, 5400, 5406, 5413, 
	5422, 5430, 5437, 5443, 5447, 5449, 5452, 5455, 
	5458, 5460, 5467, 5475, 5483, 5491, 5498, 5501, 
	5504, 5507, 5511, 5513, 5515, 5519, 5521, 5538, 
	5542, 5547, 5549, 5555, 5558, 5561, 5564, 5567, 
	5569, 5571, 5574, 5579, 5582, 5585, 5588, 5590, 
	5592, 5597, 5602, 5608, 5612, 5617, 5623, 5630, 
	5636, 5639, 5642, 5645, 5649, 5651, 5653, 5657, 
	5659, 5665, 5668, 5671, 5674, 5677, 5680, 5683, 
	5686, 5689, 5691, 5693, 5698, 5701, 5704, 5707, 
	5710, 5712, 5717, 5720, 5725, 5729, 5735, 5740, 
	5743, 5746, 5751, 5759, 5764, 5771, 5776, 5778, 
	5781, 5784, 5787, 5790, 5795, 5803, 5808, 5815, 
	5818, 5821, 5824, 5828, 5830, 5832, 5836, 5841, 
	5843, 5846, 5849, 5852, 5855, 5858, 5861, 5863, 
	5869, 5872, 5875, 5878, 5881, 5884, 5888, 5890, 
	5893, 5896, 5899, 5902, 5904, 5907, 5909, 5911, 
	5916, 5922, 5924, 5944, 5964, 5985, 6006, 6028, 
	6050, 6072, 6098, 6121, 6144, 6165, 6189, 6210, 
	6231, 6253, 6275, 6297, 6323, 6346, 6369, 6393, 
	6414, 6436, 6438, 6441, 6444, 6447, 6451, 6455, 
	6459, 6464, 6466, 6479, 6481, 6484, 6487, 6490, 
	6493, 6495, 6497, 6500, 6503, 6506, 6509, 6511, 
	6513, 6516, 6519, 6522, 6525, 6528, 6531, 6534, 
	6536, 6538, 6541, 6544, 6547, 6550, 6553, 6556, 
	6559, 6561, 6566, 6569, 6572, 6575, 6578, 6581, 
	6584, 6587, 6589, 6598, 6601, 6604, 6607, 6609, 
	6612, 6615, 6618, 6620, 6623, 6626, 6629, 6631, 
	6633, 6636, 6639, 6645, 6651, 6658, 6662, 6670, 
	6674, 6679, 6683, 6687, 6692, 6699, 6702, 6705, 
	6708, 6711, 6715, 6721, 6728, 6732, 6740, 6744, 
	6749, 6753, 6757, 6762, 6769, 6778, 6781, 6784, 
	6787, 6791, 6797, 6804, 6808, 6816, 6820, 6825, 
	6829, 6833, 6838, 6845, 6849, 6855, 6862, 6866, 
	6874, 6878, 6883, 6887, 6891, 6896, 6903, 6909, 
	6915, 6922, 6926, 6934, 6938, 6943, 6947, 6951, 
	6956, 6963, 6966, 6969, 6973, 6979, 6986, 6990, 
	6998, 7002, 7007, 7011, 7015, 7020, 7027, 7031, 
	7037, 7044, 7048, 7056, 7060, 7065, 7069, 7073, 
	7078, 7085, 7090, 7093, 7096, 7099, 7102, 7105, 
	7108, 7111, 7113, 7122, 7125, 7128, 7131, 7133, 
	7136, 7139, 7142, 7144, 7147, 7150, 7153, 7155, 
	7157, 7160, 7163, 7169, 7175, 7182, 7186, 7194, 
	7198, 7203, 7207, 7211, 7216, 7223, 7226, 7229, 
	7232, 7235, 7239, 7245, 7252, 7256, 7264, 7268, 
	7273, 7277, 7281, 7286, 7293, 7302, 7305, 7308, 
	7311, 7315, 7321, 7328, 7332, 7340, 7344, 7349, 
	7353, 7357, 7362, 7369, 7373, 7379, 7386, 7390, 
	7398, 7402, 7407, 7411, 7415, 7420, 7427, 7433, 
	7439, 7446, 7450, 7458, 7462, 7467, 7471, 7475, 
	7480, 7487, 7490, 7493, 7497, 7503, 7510, 7514, 
	7522, 7526, 7531, 7535, 7539, 7544, 7551, 7555, 
	7561, 7568, 7572, 7580, 7584, 7589, 7593, 7597, 
	7602, 7609, 7620, 7625, 7632, 7635, 7639, 7643, 
	7649, 7666, 7669, 7674, 7679, 7682, 7685, 7690, 
	7693, 7695, 7698, 7713, 7715, 7719, 7731, 7741, 
	7794, 7796, 7800, 7802, 7804, 7809, 7814, 7825, 
	7828, 7835, 7837, 7841, 7847, 7850, 7853, 7856, 
	7858, 7880, 7902, 7920, 7936, 7941, 7947, 7951, 
	7955, 7959, 7963, 7967, 7971, 7975, 7979, 7983, 
	7987, 7991, 7995, 8000, 8005, 8013, 8021, 8029, 
	8037, 8045, 8052, 8056, 8060, 8064, 8068, 8072, 
	8076, 8080, 8084, 8088, 8092, 8094, 8095, 8103, 
	8111, 8119, 8126, 8130, 8134, 8138, 8142, 8146, 
	8150, 8154, 8158, 8162, 8166, 8168, 8169, 8177, 
	8185, 8193, 8201, 8209, 8217, 8224, 8228, 8232, 
	8236, 8240, 8244, 8248, 8252, 8256, 8260, 8264, 
	8266, 8267, 8275, 8283, 8291, 8299, 8306, 8311, 
	8317, 8322, 8327, 8332, 8337, 8342, 8347, 8352, 
	8357, 8362, 8365, 8367, 8375, 8383, 8391, 8399, 
	8406, 8410, 8414, 8418, 8422, 8426, 8430, 8434, 
	8438, 8442, 8446, 8448, 8449, 8457, 8465, 8473, 
	8482, 8498, 8520, 8542, 8560, 8565, 8572, 8580, 
	8588, 8595, 8599, 8603, 8607, 8611, 8615, 8619, 
	8623, 8627, 8631, 8635, 8637, 8638, 8648, 8656, 
	8664, 8672, 8679, 8681, 8691, 8699, 8706, 8710, 
	8714, 8718, 8722, 8726, 8730, 8734, 8738, 8742, 
	8746, 8748, 8749, 8757, 8764, 8768, 8772, 8776, 
	8780, 8784, 8788, 8792, 8796, 8800, 8804, 8806, 
	8807, 8815, 8823, 8831, 8839, 8847, 8854, 8858, 
	8862, 8866, 8870, 8874, 8878, 8882, 8886, 8890, 
	8894, 8896, 8897, 8905, 8913, 8921, 8929, 8937, 
	8944, 8948, 8952, 8956, 8960, 8964, 8968, 8972, 
	8976, 8980, 8984, 8986, 8987, 8997, 9005, 9012, 
	9016, 9020, 9024, 9028, 9032, 9036, 9040, 9044, 
	9048, 9052, 9054, 9055, 9059, 9063, 9067, 9071, 
	9075, 9079, 9083, 9087, 9091, 9095, 9097, 9098, 
	9102, 9106, 9110, 9114, 9118, 9122, 9126, 9130, 
	9134, 9138, 9140, 9141, 9149, 9157, 9165, 9172, 
	9177, 9179, 9184, 9189, 9194, 9199, 9204, 9209, 
	9214, 9219, 9224, 9227, 9229, 9237, 9245, 9253, 
	9260, 9264, 9268, 9272, 9276, 9280, 9284, 9288, 
	9292, 9296, 9300, 9302, 9303, 9307, 9311, 9315, 
	9319, 9323, 9327, 9331, 9335, 9339, 9343, 9345, 
	9346, 9354, 9362, 9370, 9377, 9381, 9385, 9389, 
	9393, 9397, 9401, 9405, 9409, 9413, 9417, 9419, 
	9420, 9447, 9449, 9452, 9456, 9460, 9465, 9471, 
	9477, 9483, 9490, 9495, 9500, 9505, 9511, 9513, 
	9537, 9542, 9547, 9572, 9587, 9607, 9627, 9632, 
	9635, 9637, 9639, 9644, 9647, 9649, 9651, 9654, 
	9660
};

static const short _dtext_indicies[] = {
	1, 2, 1, 2, 0, 1, 4, 1, 
	4, 5, 6, 3, 7, 8, 9, 7, 
	8, 9, 3, 10, 10, 3, 11, 11, 
	3, 12, 12, 3, 13, 13, 3, 14, 
	14, 3, 15, 3, 16, 16, 3, 17, 
	3, 18, 17, 18, 17, 3, 19, 19, 
	3, 20, 20, 3, 21, 21, 3, 22, 
	22, 3, 23, 3, 24, 25, 26, 24, 
	25, 26, 3, 27, 27, 3, 28, 28, 
	3, 29, 29, 3, 30, 30, 3, 31, 
	31, 3, 15, 3, 32, 32, 3, 17, 
	3, 33, 33, 3, 34, 34, 3, 35, 
	35, 3, 36, 36, 3, 23, 3, 3, 
	38, 3, 3, 38, 37, 39, 39, 40, 
	3, 41, 41, 3, 42, 42, 3, 43, 
	43, 3, 44, 44, 3, 45, 45, 3, 
	46, 46, 3, 47, 47, 3, 48, 48, 
	3, 49, 49, 3, 50, 3, 10, 51, 
	10, 51, 3, 52, 53, 52, 53, 3, 
	54, 54, 3, 55, 55, 56, 57, 3, 
	55, 55, 56, 3, 56, 56, 58, 58, 
	58, 3, 60, 59, 59, 59, 3, 62, 
	63, 62, 63, 61, 65, 66, 65, 66, 
	64, 67, 67, 3, 68, 68, 3, 69, 
	69, 70, 71, 3, 3, 73, 3, 3, 
	73, 74, 75, 72, 3, 3, 3, 77, 
	76, 3, 74, 3, 3, 74, 75, 72, 
	78, 78, 3, 79, 79, 3, 80, 80, 
	3, 81, 81, 3, 82, 82, 3, 83, 
	83, 84, 85, 3, 3, 87, 3, 3, 
	87, 88, 89, 86, 3, 3, 3, 91, 
	90, 3, 88, 3, 3, 88, 89, 86, 
	92, 92, 3, 93, 93, 3, 94, 94, 
	3, 95, 95, 3, 96, 96, 3, 97, 
	97, 3, 98, 3, 100, 101, 100, 101, 
	99, 102, 102, 3, 103, 103, 3, 104, 
	104, 3, 105, 105, 3, 106, 106, 3, 
	107, 107, 3, 108, 109, 109, 3, 108, 
	3, 19, 110, 19, 110, 3, 111, 3, 
	112, 113, 3, 114, 114, 114, 114, 114, 
	114, 114, 114, 3, 115, 115, 115, 116, 
	115, 115, 115, 115, 3, 27, 117, 27, 
	117, 3, 118, 119, 118, 119, 3, 120, 
	120, 3, 121, 121, 122, 57, 3, 121, 
	121, 122, 3, 122, 122, 123, 123, 123, 
	3, 60, 124, 124, 124, 3, 125, 125, 
	3, 126, 126, 3, 127, 127, 128, 71, 
	3, 3, 130, 3, 3, 130, 131, 75, 
	129, 3, 3, 3, 77, 132, 3, 131, 
	3, 3, 131, 75, 129, 133, 133, 3, 
	134, 134, 3, 135, 135, 3, 136, 136, 
	3, 137, 137, 3, 138, 138, 139, 85, 
	3, 3, 141, 3, 3, 141, 142, 89, 
	140, 3, 3, 3, 91, 143, 3, 142, 
	3, 3, 142, 89, 140, 144, 144, 3, 
	145, 145, 3, 146, 146, 3, 147, 147, 
	3, 148, 148, 3, 149, 149, 3, 98, 
	3, 150, 150, 3, 151, 151, 3, 152, 
	152, 3, 153, 153, 3, 50, 3, 154, 
	154, 3, 155, 155, 3, 156, 156, 3, 
	157, 157, 3, 158, 158, 3, 159, 159, 
	3, 160, 108, 160, 3, 108, 3, 33, 
	161, 33, 161, 3, 111, 3, 162, 3, 
	163, 164, 163, 164, 165, 165, 165, 3, 
	167, 167, 166, 169, 169, 168, 169, 169, 
	170, 168, 169, 169, 171, 168, 169, 169, 
	172, 168, 173, 172, 173, 172, 168, 174, 
	175, 174, 175, 176, 176, 176, 3, 177, 
	178, 177, 178, 3, 180, 181, 182, 183, 
	184, 180, 181, 182, 183, 184, 179, 185, 
	179, 182, 182, 179, 186, 179, 187, 188, 
	188, 179, 189, 189, 179, 190, 190, 179, 
	191, 191, 179, 180, 180, 179, 192, 179, 
	193, 179, 194, 194, 179, 195, 179, 196, 
	197, 197, 179, 198, 198, 179, 199, 199, 
	179, 200, 200, 179, 201, 201, 179, 202, 
	179, 203, 204, 205, 206, 203, 204, 205, 
	206, 179, 185, 179, 186, 179, 187, 179, 
	192, 179, 193, 179, 195, 179, 196, 179, 
	202, 179, 208, 207, 209, 207, 211, 210, 
	212, 213, 212, 213, 207, 213, 215, 213, 
	215, 214, 212, 217, 212, 217, 218, 219, 
	216, 220, 221, 222, 220, 221, 222, 216, 
	223, 223, 216, 224, 216, 225, 224, 225, 
	224, 216, 226, 226, 216, 227, 227, 216, 
	228, 228, 216, 229, 229, 216, 230, 230, 
	216, 231, 231, 216, 232, 233, 233, 216, 
	234, 232, 234, 232, 216, 232, 216, 235, 
	235, 216, 236, 236, 216, 237, 237, 216, 
	238, 238, 216, 239, 216, 240, 241, 242, 
	240, 241, 242, 216, 243, 243, 216, 224, 
	216, 244, 244, 216, 245, 245, 216, 246, 
	246, 216, 247, 247, 216, 248, 248, 216, 
	249, 249, 216, 250, 232, 250, 216, 232, 
	216, 251, 251, 216, 252, 252, 216, 253, 
	253, 216, 254, 254, 216, 239, 216, 256, 
	255, 257, 258, 257, 258, 255, 259, 260, 
	259, 260, 207, 261, 261, 207, 262, 262, 
	207, 263, 263, 207, 264, 264, 207, 265, 
	207, 266, 266, 207, 267, 267, 207, 268, 
	268, 207, 269, 269, 207, 270, 271, 272, 
	270, 271, 272, 207, 273, 207, 274, 207, 
	275, 207, 276, 255, 277, 278, 277, 278, 
	255, 279, 280, 279, 280, 207, 281, 281, 
	207, 282, 282, 207, 283, 283, 207, 284, 
	284, 207, 265, 207, 285, 285, 207, 286, 
	286, 207, 287, 287, 207, 269, 269, 207, 
	288, 289, 290, 288, 289, 290, 207, 273, 
	207, 274, 207, 275, 207, 291, 291, 292, 
	216, 216, 294, 216, 216, 294, 293, 295, 
	296, 220, 297, 221, 222, 296, 220, 297, 
	221, 222, 216, 298, 257, 299, 300, 301, 
	258, 298, 257, 299, 300, 301, 258, 216, 
	302, 302, 216, 303, 303, 207, 304, 304, 
	207, 305, 305, 207, 306, 306, 207, 307, 
	307, 207, 308, 308, 207, 309, 309, 207, 
	310, 310, 207, 311, 207, 312, 312, 216, 
	313, 313, 207, 314, 314, 207, 315, 315, 
	207, 316, 316, 207, 317, 207, 318, 318, 
	207, 319, 319, 207, 320, 320, 207, 321, 
	321, 207, 311, 207, 322, 322, 216, 323, 
	323, 207, 324, 324, 207, 325, 325, 207, 
	326, 326, 207, 327, 327, 207, 328, 329, 
	329, 207, 328, 207, 330, 330, 216, 331, 
	331, 216, 332, 332, 216, 333, 333, 334, 
	335, 216, 333, 333, 334, 216, 334, 334, 
	336, 336, 336, 216, 338, 337, 337, 337, 
	216, 339, 339, 216, 340, 340, 216, 341, 
	341, 216, 342, 342, 216, 343, 343, 216, 
	344, 344, 216, 335, 216, 345, 216, 346, 
	347, 216, 348, 348, 348, 348, 348, 348, 
	348, 348, 216, 349, 349, 349, 350, 349, 
	349, 349, 349, 216, 351, 352, 240, 353, 
	241, 242, 352, 240, 353, 241, 242, 216, 
	277, 354, 306, 355, 278, 277, 354, 306, 
	355, 278, 216, 356, 356, 216, 357, 357, 
	216, 358, 358, 216, 359, 359, 216, 360, 
	360, 216, 317, 216, 361, 361, 216, 362, 
	362, 216, 363, 363, 216, 364, 364, 216, 
	365, 365, 216, 366, 366, 216, 367, 328, 
	367, 216, 328, 216, 368, 368, 216, 369, 
	369, 216, 370, 370, 216, 371, 371, 372, 
	335, 216, 371, 371, 372, 216, 372, 372, 
	373, 373, 373, 216, 338, 374, 374, 374, 
	216, 375, 375, 216, 376, 376, 216, 377, 
	377, 216, 378, 378, 216, 379, 379, 216, 
	380, 380, 216, 335, 216, 381, 216, 382, 
	216, 383, 384, 383, 384, 385, 385, 385, 
	216, 387, 387, 386, 389, 389, 388, 389, 
	389, 390, 388, 389, 389, 391, 388, 389, 
	389, 392, 388, 393, 392, 393, 392, 388, 
	394, 395, 394, 395, 396, 396, 396, 216, 
	397, 398, 397, 398, 216, 400, 399, 401, 
	214, 402, 403, 404, 405, 404, 214, 407, 
	406, 408, 406, 409, 408, 406, 407, 407, 
	406, 410, 408, 406, 407, 407, 407, 406, 
	411, 412, 408, 406, 407, 407, 407, 406, 
	407, 407, 407, 407, 406, 413, 406, 414, 
	415, 416, 406, 418, 406, 418, 418, 418, 
	406, 406, 418, 406, 406, 406, 408, 413, 
	417, 406, 406, 418, 407, 419, 406, 420, 
	406, 421, 420, 406, 419, 419, 406, 422, 
	420, 406, 419, 419, 419, 406, 423, 424, 
	420, 406, 419, 419, 419, 406, 419, 419, 
	419, 419, 406, 425, 406, 426, 427, 428, 
	406, 430, 407, 430, 430, 430, 406, 406, 
	431, 406, 406, 406, 420, 425, 429, 406, 
	406, 430, 419, 434, 435, 436, 207, 431, 
	407, 431, 431, 431, 431, 207, 432, 433, 
	437, 207, 207, 431, 438, 438, 207, 432, 
	207, 439, 432, 207, 438, 438, 207, 440, 
	432, 207, 438, 438, 438, 207, 441, 442, 
	432, 207, 438, 438, 438, 207, 438, 438, 
	438, 438, 207, 433, 207, 443, 443, 214, 
	444, 444, 214, 445, 445, 214, 446, 447, 
	447, 214, 448, 214, 449, 214, 453, 453, 
	450, 451, 452, 453, 453, 453, 214, 453, 
	214, 453, 454, 453, 450, 451, 452, 453, 
	453, 453, 214, 450, 214, 451, 214, 457, 
	458, 459, 461, 461, 455, 456, 460, 461, 
	461, 461, 207, 461, 207, 455, 207, 462, 
	455, 207, 463, 461, 207, 457, 458, 459, 
	407, 454, 419, 464, 431, 461, 455, 456, 
	460, 461, 461, 461, 207, 465, 455, 207, 
	463, 461, 463, 461, 463, 461, 207, 466, 
	467, 455, 207, 463, 463, 461, 207, 463, 
	463, 463, 461, 207, 456, 207, 468, 207, 
	446, 214, 469, 469, 470, 470, 214, 214, 
	214, 472, 214, 471, 473, 473, 214, 474, 
	474, 214, 475, 475, 214, 476, 477, 477, 
	214, 478, 214, 479, 214, 214, 214, 214, 
	471, 476, 214, 480, 210, 482, 482, 484, 
	485, 486, 487, 207, 488, 483, 481, 490, 
	490, 492, 493, 494, 491, 489, 495, 495, 
	496, 497, 498, 491, 489, 491, 207, 207, 
	491, 489, 490, 490, 492, 493, 494, 491, 
	499, 489, 500, 501, 502, 504, 502, 505, 
	503, 503, 503, 207, 506, 506, 497, 498, 
	207, 507, 207, 509, 509, 510, 207, 207, 
	508, 512, 512, 513, 207, 207, 511, 514, 
	514, 515, 207, 207, 511, 516, 207, 506, 
	517, 502, 497, 502, 498, 503, 503, 503, 
	207, 502, 502, 502, 503, 503, 503, 207, 
	490, 490, 492, 493, 518, 491, 489, 519, 
	519, 520, 521, 207, 207, 508, 522, 522, 
	523, 524, 207, 207, 508, 512, 512, 513, 
	207, 207, 525, 511, 526, 527, 528, 530, 
	528, 207, 207, 529, 529, 529, 511, 531, 
	531, 532, 207, 207, 511, 533, 207, 531, 
	534, 528, 532, 528, 207, 207, 529, 529, 
	529, 511, 512, 535, 528, 513, 528, 207, 
	207, 529, 529, 529, 511, 514, 536, 528, 
	515, 528, 207, 207, 529, 529, 529, 511, 
	490, 490, 492, 493, 537, 491, 489, 509, 
	509, 538, 510, 207, 207, 508, 512, 512, 
	513, 539, 207, 207, 511, 512, 512, 540, 
	513, 207, 207, 511, 512, 512, 513, 541, 
	207, 511, 542, 207, 543, 543, 544, 493, 
	207, 545, 545, 546, 497, 207, 547, 207, 
	548, 549, 550, 504, 550, 551, 551, 551, 
	207, 552, 552, 497, 207, 552, 553, 550, 
	497, 550, 551, 551, 551, 207, 550, 550, 
	550, 551, 551, 551, 207, 490, 490, 492, 
	554, 493, 555, 491, 489, 509, 509, 556, 
	510, 207, 207, 508, 557, 557, 558, 559, 
	207, 207, 511, 560, 560, 561, 532, 207, 
	207, 511, 490, 490, 492, 493, 562, 491, 
	489, 509, 509, 510, 563, 207, 508, 542, 
	207, 565, 566, 567, 564, 564, 564, 207, 
	568, 568, 569, 493, 494, 207, 570, 570, 
	571, 497, 498, 207, 499, 207, 564, 207, 
	568, 568, 569, 493, 518, 207, 572, 207, 
	565, 207, 573, 210, 207, 573, 573, 575, 
	576, 577, 578, 579, 580, 575, 207, 207, 
	574, 207, 582, 582, 207, 583, 584, 207, 
	581, 207, 585, 585, 586, 587, 588, 589, 
	590, 207, 591, 592, 586, 207, 581, 207, 
	582, 582, 587, 588, 589, 590, 207, 593, 
	584, 207, 581, 207, 582, 582, 594, 595, 
	596, 207, 581, 582, 582, 583, 584, 207, 
	207, 598, 207, 207, 598, 600, 599, 597, 
	207, 602, 207, 207, 602, 604, 603, 601, 
	207, 605, 207, 207, 605, 606, 603, 601, 
	207, 207, 207, 603, 207, 603, 601, 607, 
	207, 608, 207, 207, 609, 207, 207, 609, 
	610, 611, 599, 597, 207, 613, 207, 207, 
	613, 614, 615, 616, 617, 618, 597, 619, 
	620, 614, 599, 612, 207, 622, 207, 207, 
	622, 601, 583, 623, 603, 621, 207, 624, 
	207, 207, 624, 625, 626, 627, 628, 629, 
	601, 591, 630, 625, 603, 621, 207, 622, 
	207, 207, 622, 626, 627, 628, 629, 601, 
	593, 623, 603, 621, 207, 622, 207, 207, 
	622, 631, 595, 632, 603, 621, 207, 622, 
	207, 207, 622, 583, 623, 603, 601, 633, 
	207, 582, 582, 583, 634, 207, 207, 622, 
	207, 207, 622, 601, 635, 623, 603, 621, 
	207, 598, 207, 207, 598, 636, 600, 599, 
	597, 207, 602, 207, 207, 602, 637, 604, 
	603, 601, 207, 602, 207, 207, 602, 638, 
	604, 603, 601, 207, 602, 207, 207, 602, 
	639, 604, 603, 601, 207, 602, 207, 207, 
	602, 631, 604, 603, 601, 207, 622, 207, 
	207, 622, 640, 601, 641, 623, 603, 621, 
	207, 622, 207, 207, 622, 601, 595, 623, 
	603, 621, 207, 598, 207, 207, 598, 642, 
	600, 599, 597, 207, 622, 207, 207, 622, 
	601, 643, 623, 603, 621, 207, 598, 207, 
	207, 598, 644, 600, 599, 597, 207, 602, 
	207, 207, 602, 631, 604, 603, 601, 207, 
	598, 207, 207, 598, 645, 646, 647, 600, 
	599, 642, 642, 642, 597, 207, 602, 207, 
	207, 602, 631, 604, 603, 601, 207, 622, 
	207, 207, 622, 595, 623, 603, 601, 207, 
	602, 207, 207, 602, 648, 604, 603, 601, 
	207, 602, 207, 207, 602, 649, 604, 603, 
	601, 582, 582, 583, 650, 207, 207, 582, 
	582, 207, 635, 584, 207, 581, 207, 582, 
	582, 651, 207, 641, 584, 207, 581, 207, 
	582, 582, 207, 595, 584, 207, 581, 207, 
	582, 582, 207, 643, 584, 207, 581, 652, 
	653, 654, 594, 594, 594, 207, 594, 207, 
	582, 582, 595, 584, 207, 655, 207, 652, 
	207, 656, 210, 657, 658, 658, 210, 659, 
	659, 659, 207, 660, 660, 660, 207, 661, 
	661, 661, 207, 662, 662, 662, 207, 663, 
	663, 663, 207, 664, 664, 664, 207, 665, 
	665, 665, 207, 666, 666, 666, 207, 667, 
	667, 667, 207, 668, 668, 668, 210, 669, 
	210, 670, 671, 671, 210, 672, 672, 672, 
	207, 673, 673, 673, 207, 674, 674, 674, 
	207, 675, 675, 675, 207, 676, 676, 676, 
	207, 677, 677, 677, 207, 678, 678, 678, 
	207, 679, 679, 679, 207, 680, 680, 680, 
	207, 681, 681, 681, 210, 682, 210, 683, 
	684, 684, 210, 685, 685, 685, 207, 686, 
	686, 686, 207, 687, 687, 687, 207, 688, 
	688, 688, 207, 689, 689, 689, 207, 690, 
	690, 690, 207, 691, 691, 691, 207, 692, 
	692, 692, 207, 693, 693, 693, 207, 694, 
	694, 694, 210, 695, 210, 696, 697, 697, 
	210, 699, 699, 699, 699, 699, 698, 700, 
	700, 700, 207, 701, 701, 701, 207, 702, 
	702, 702, 207, 703, 703, 703, 207, 704, 
	704, 704, 207, 705, 705, 705, 207, 706, 
	706, 706, 207, 707, 707, 707, 207, 708, 
	708, 708, 207, 709, 709, 709, 210, 710, 
	210, 711, 712, 712, 210, 713, 713, 713, 
	207, 714, 714, 714, 207, 715, 715, 715, 
	207, 716, 716, 716, 207, 717, 717, 717, 
	207, 718, 718, 718, 207, 719, 719, 719, 
	207, 720, 720, 720, 207, 721, 721, 721, 
	207, 722, 722, 722, 210, 723, 210, 724, 
	210, 728, 728, 725, 726, 727, 728, 728, 
	728, 210, 728, 210, 728, 729, 728, 725, 
	726, 727, 728, 728, 728, 210, 725, 210, 
	726, 210, 732, 733, 734, 736, 736, 730, 
	731, 735, 736, 736, 736, 207, 736, 207, 
	730, 207, 737, 730, 207, 738, 736, 207, 
	732, 733, 734, 739, 729, 740, 741, 742, 
	736, 730, 731, 735, 736, 736, 736, 207, 
	743, 730, 207, 738, 736, 738, 736, 738, 
	736, 207, 744, 745, 730, 207, 738, 738, 
	736, 207, 738, 738, 738, 736, 207, 731, 
	207, 739, 746, 747, 746, 748, 747, 746, 
	739, 739, 746, 749, 747, 746, 739, 739, 
	739, 746, 750, 751, 747, 746, 739, 739, 
	739, 746, 739, 739, 739, 739, 746, 752, 
	746, 753, 754, 755, 746, 757, 746, 757, 
	757, 757, 746, 746, 757, 746, 746, 746, 
	747, 752, 756, 746, 746, 757, 739, 740, 
	746, 758, 746, 759, 758, 746, 740, 740, 
	746, 760, 758, 746, 740, 740, 740, 746, 
	761, 762, 758, 746, 740, 740, 740, 746, 
	740, 740, 740, 740, 746, 763, 746, 764, 
	765, 766, 746, 768, 739, 768, 768, 768, 
	746, 746, 742, 746, 746, 746, 758, 763, 
	767, 746, 746, 768, 740, 771, 772, 773, 
	207, 742, 739, 742, 742, 742, 742, 207, 
	769, 770, 774, 207, 207, 742, 775, 775, 
	207, 769, 207, 776, 769, 207, 775, 775, 
	207, 777, 769, 207, 775, 775, 775, 207, 
	778, 779, 769, 207, 775, 775, 775, 207, 
	775, 775, 775, 775, 207, 770, 207, 780, 
	207, 781, 781, 210, 782, 782, 210, 783, 
	783, 210, 784, 784, 210, 785, 785, 210, 
	786, 786, 210, 787, 210, 788, 210, 789, 
	790, 790, 210, 791, 791, 791, 207, 792, 
	792, 792, 207, 793, 793, 793, 207, 794, 
	794, 794, 207, 795, 795, 795, 207, 796, 
	796, 796, 207, 797, 797, 797, 207, 798, 
	798, 798, 207, 799, 799, 799, 207, 800, 
	800, 800, 210, 801, 210, 802, 803, 803, 
	210, 804, 805, 806, 806, 210, 807, 807, 
	210, 808, 210, 804, 809, 810, 810, 210, 
	804, 811, 812, 812, 210, 804, 813, 814, 
	814, 210, 804, 815, 816, 816, 210, 804, 
	817, 818, 818, 210, 804, 819, 820, 820, 
	210, 804, 821, 822, 822, 210, 804, 823, 
	824, 824, 210, 804, 825, 826, 826, 210, 
	804, 825, 210, 804, 210, 826, 826, 826, 
	210, 824, 824, 824, 210, 822, 822, 822, 
	210, 820, 820, 820, 210, 818, 818, 818, 
	210, 816, 816, 816, 210, 814, 814, 814, 
	210, 812, 812, 812, 210, 810, 810, 810, 
	210, 806, 806, 806, 210, 827, 210, 828, 
	829, 829, 210, 830, 830, 830, 207, 831, 
	831, 831, 207, 832, 832, 832, 207, 833, 
	833, 833, 207, 834, 834, 834, 207, 835, 
	835, 835, 207, 836, 836, 836, 207, 837, 
	837, 837, 207, 838, 838, 838, 207, 839, 
	839, 839, 210, 840, 210, 841, 842, 842, 
	210, 843, 843, 843, 207, 844, 844, 844, 
	207, 845, 845, 845, 207, 846, 846, 846, 
	207, 847, 847, 847, 207, 848, 848, 848, 
	207, 849, 849, 849, 207, 850, 850, 850, 
	207, 851, 851, 851, 207, 852, 852, 852, 
	210, 853, 210, 854, 855, 855, 210, 856, 
	856, 856, 207, 857, 857, 857, 207, 858, 
	858, 858, 207, 859, 859, 859, 207, 860, 
	860, 860, 207, 861, 861, 861, 207, 862, 
	862, 862, 207, 863, 863, 863, 207, 864, 
	864, 864, 207, 865, 865, 865, 210, 866, 
	210, 867, 868, 868, 210, 869, 869, 869, 
	207, 870, 870, 870, 207, 871, 871, 871, 
	207, 872, 872, 872, 207, 873, 873, 873, 
	207, 874, 874, 874, 207, 875, 875, 875, 
	207, 876, 876, 876, 207, 877, 877, 877, 
	207, 878, 878, 878, 210, 879, 880, 881, 
	879, 880, 881, 210, 882, 882, 210, 883, 
	883, 210, 884, 884, 210, 885, 885, 210, 
	886, 210, 887, 210, 888, 889, 889, 210, 
	890, 890, 890, 207, 891, 891, 891, 207, 
	892, 892, 892, 207, 893, 893, 893, 207, 
	894, 894, 894, 207, 895, 895, 895, 207, 
	896, 896, 896, 207, 897, 897, 897, 207, 
	898, 898, 898, 207, 899, 899, 899, 210, 
	900, 900, 210, 901, 901, 210, 902, 902, 
	210, 903, 903, 210, 904, 904, 210, 905, 
	905, 210, 906, 906, 210, 907, 907, 210, 
	908, 908, 210, 909, 909, 210, 910, 210, 
	911, 210, 912, 913, 913, 210, 914, 914, 
	914, 207, 915, 915, 915, 207, 916, 916, 
	916, 207, 917, 917, 917, 207, 918, 918, 
	918, 207, 919, 919, 919, 207, 920, 920, 
	920, 207, 921, 921, 921, 207, 922, 922, 
	922, 207, 923, 923, 923, 210, 924, 924, 
	210, 925, 925, 210, 926, 926, 210, 927, 
	927, 210, 928, 928, 210, 929, 929, 210, 
	930, 930, 210, 931, 931, 210, 932, 932, 
	210, 933, 933, 210, 934, 210, 935, 210, 
	936, 937, 937, 210, 938, 938, 938, 207, 
	939, 939, 939, 207, 940, 940, 940, 207, 
	941, 941, 941, 207, 942, 942, 942, 207, 
	943, 943, 943, 207, 944, 944, 944, 207, 
	945, 945, 945, 207, 946, 946, 946, 207, 
	947, 947, 947, 210, 948, 210, 949, 950, 
	950, 210, 952, 952, 951, 953, 951, 954, 
	954, 954, 207, 955, 955, 955, 207, 956, 
	956, 956, 207, 957, 957, 957, 207, 958, 
	958, 958, 207, 959, 959, 959, 207, 960, 
	960, 960, 207, 961, 961, 961, 207, 962, 
	962, 962, 207, 963, 963, 963, 210, 964, 
	965, 965, 210, 966, 967, 967, 210, 968, 
	968, 968, 207, 969, 969, 969, 207, 970, 
	970, 970, 207, 971, 971, 971, 207, 972, 
	972, 972, 207, 973, 973, 973, 207, 974, 
	974, 974, 207, 975, 975, 975, 207, 976, 
	976, 976, 207, 977, 977, 977, 210, 978, 
	978, 210, 979, 979, 210, 980, 980, 210, 
	981, 981, 210, 982, 982, 210, 983, 210, 
	984, 210, 985, 986, 986, 210, 987, 987, 
	987, 207, 988, 988, 988, 207, 989, 989, 
	989, 207, 990, 990, 990, 207, 991, 991, 
	991, 207, 992, 992, 992, 207, 993, 993, 
	993, 207, 994, 994, 994, 207, 995, 995, 
	995, 207, 996, 996, 996, 210, 997, 210, 
	998, 999, 999, 210, 1000, 1000, 1000, 207, 
	1001, 1001, 1001, 207, 1002, 1002, 1002, 207, 
	1003, 1003, 1003, 207, 1004, 1004, 1004, 207, 
	1005, 1005, 1005, 207, 1006, 1006, 1006, 207, 
	1007, 1007, 1007, 207, 1008, 1008, 1008, 207, 
	1009, 1009, 1009, 210, 214, 1011, 214, 214, 
	1011, 214, 1012, 1010, 1013, 1013, 1014, 214, 
	1015, 214, 1016, 1016, 1017, 1017, 207, 207, 
	207, 472, 207, 1018, 1019, 1019, 207, 1020, 
	1020, 207, 1021, 1021, 207, 1022, 1023, 1023, 
	207, 1024, 207, 1025, 207, 207, 207, 207, 
	1018, 1022, 207, 214, 1011, 214, 214, 1011, 
	214, 1012, 1026, 214, 1011, 214, 214, 1011, 
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 
	214, 1012, 1027, 1028, 1029, 1030, 1031, 1032, 
	1033, 1034, 1010, 214, 1011, 214, 214, 1011, 
	214, 1035, 1010, 214, 1011, 214, 214, 1011, 
	1036, 1037, 214, 1012, 1036, 1037, 1010, 214, 
	1011, 214, 214, 1011, 1038, 214, 1012, 1038, 
	1010, 214, 1011, 214, 214, 1011, 1039, 214, 
	1012, 1039, 1010, 214, 1011, 214, 214, 1011, 
	1040, 214, 1012, 1040, 1010, 214, 1011, 214, 
	214, 1011, 1041, 214, 1012, 1041, 1010, 214, 
	1011, 214, 214, 1011, 214, 1042, 1010, 214, 
	1011, 214, 214, 1011, 1043, 214, 1012, 1043, 
	1010, 214, 1011, 214, 214, 1011, 1044, 214, 
	1012, 1044, 1010, 214, 1011, 214, 214, 1011, 
	1045, 214, 1012, 1045, 1010, 1011, 1011, 1010, 
	1046, 1046, 1010, 1010, 1010, 1010, 1010, 214, 
	214, 1011, 214, 214, 1011, 1047, 214, 1012, 
	1047, 1010, 214, 1011, 214, 214, 1011, 1048, 
	214, 1012, 1048, 1010, 214, 1011, 214, 214, 
	1011, 1049, 214, 1012, 1049, 1010, 214, 1011, 
	214, 214, 1011, 1050, 214, 1012, 1050, 1010, 
	214, 1011, 214, 214, 1011, 1051, 214, 1012, 
	1051, 1010, 1011, 1011, 1010, 1012, 1052, 1010, 
	1010, 1010, 1010, 1010, 214, 214, 1011, 214, 
	214, 1011, 214, 1053, 1010, 214, 1011, 214, 
	214, 1011, 1054, 214, 1012, 1054, 1010, 214, 
	1011, 214, 214, 1011, 1055, 214, 1012, 1055, 
	1010, 214, 1011, 214, 214, 1011, 1056, 214, 
	1012, 1056, 1010, 214, 1011, 214, 214, 1011, 
	1057, 214, 1012, 1057, 1010, 1011, 1011, 1010, 
	1012, 1058, 1010, 1010, 1010, 1010, 1010, 214, 
	214, 1011, 214, 214, 1011, 1059, 214, 1060, 
	1059, 1010, 214, 1011, 214, 214, 1011, 1061, 
	214, 1012, 1061, 1010, 214, 1011, 214, 214, 
	1011, 1062, 214, 1012, 1062, 1010, 214, 1011, 
	214, 214, 1011, 1063, 214, 1012, 1063, 1010, 
	214, 1011, 214, 214, 1011, 1064, 214, 1012, 
	1064, 1010, 214, 1011, 214, 214, 1011, 1065, 
	214, 1012, 1065, 1010, 214, 1011, 214, 214, 
	1011, 1066, 214, 1067, 1066, 1010, 214, 1011, 
	214, 214, 1011, 214, 1067, 1010, 214, 1011, 
	214, 214, 1011, 1068, 1069, 1070, 214, 1012, 
	1068, 1069, 1070, 1010, 214, 1011, 214, 214, 
	1011, 214, 1071, 1010, 214, 1011, 214, 214, 
	1011, 214, 1072, 1010, 214, 1011, 214, 214, 
	1011, 214, 1073, 1010, 214, 1011, 214, 214, 
	1011, 214, 1074, 1010, 214, 1011, 214, 214, 
	1011, 1075, 214, 1076, 1075, 1010, 214, 1011, 
	214, 214, 1011, 214, 1077, 1010, 214, 1011, 
	214, 214, 1011, 1078, 1079, 214, 1012, 1078, 
	1079, 1010, 214, 1011, 214, 214, 1011, 1080, 
	214, 1012, 1080, 1010, 214, 1011, 214, 214, 
	1011, 1081, 214, 1012, 1081, 1010, 214, 1011, 
	214, 214, 1011, 1082, 214, 1012, 1082, 1010, 
	214, 1011, 214, 214, 1011, 1083, 214, 1012, 
	1083, 1010, 214, 1011, 214, 214, 1011, 214, 
	1084, 1010, 214, 1011, 214, 214, 1011, 1085, 
	1086, 214, 1012, 1085, 1086, 1010, 214, 1011, 
	214, 214, 1011, 1087, 214, 1012, 1087, 1010, 
	214, 1088, 214, 214, 1088, 1089, 214, 1090, 
	1010, 1091, 1091, 1092, 1014, 214, 1092, 1092, 
	1093, 1093, 1093, 214, 1095, 1094, 1094, 1094, 
	214, 1097, 1098, 1097, 1098, 1096, 214, 1099, 
	214, 214, 1099, 214, 1012, 1100, 1100, 1100, 
	1010, 1101, 1101, 1014, 1093, 1093, 1093, 214, 
	214, 1011, 214, 214, 1011, 214, 1103, 1102, 
	1102, 1102, 1010, 1105, 1106, 1105, 1106, 1104, 
	214, 1011, 214, 214, 1011, 1107, 214, 1012, 
	1107, 1010, 214, 1011, 214, 214, 1011, 1108, 
	214, 1012, 1108, 1010, 214, 1109, 214, 214, 
	1109, 1110, 214, 1111, 1010, 214, 1113, 214, 
	214, 1113, 1114, 1115, 1112, 214, 214, 214, 
	1117, 1116, 214, 1114, 214, 214, 1114, 1118, 
	1112, 214, 1120, 214, 214, 1120, 1112, 1121, 
	1119, 214, 1123, 214, 214, 1123, 1116, 1124, 
	1122, 214, 1125, 214, 214, 1125, 1124, 1116, 
	214, 1126, 214, 214, 1126, 1115, 1112, 214, 
	1011, 214, 214, 1011, 1127, 214, 1012, 1127, 
	1010, 214, 1011, 214, 214, 1011, 1128, 214, 
	1012, 1128, 1010, 214, 1011, 214, 214, 1011, 
	1129, 214, 1012, 1129, 1010, 214, 1011, 214, 
	214, 1011, 1130, 214, 1012, 1130, 1010, 214, 
	1011, 214, 214, 1011, 1131, 214, 1012, 1131, 
	1010, 214, 1132, 214, 214, 1132, 1133, 214, 
	1134, 1010, 214, 1136, 214, 214, 1136, 1137, 
	1138, 1135, 214, 214, 214, 1140, 1139, 214, 
	1137, 214, 214, 1137, 1141, 1135, 214, 1143, 
	214, 214, 1143, 1135, 1144, 1142, 214, 1146, 
	214, 214, 1146, 1139, 1134, 1145, 214, 1147, 
	214, 214, 1147, 1134, 1139, 214, 1148, 214, 
	214, 1148, 1138, 1135, 214, 1011, 214, 214, 
	1011, 214, 1149, 1010, 214, 1011, 214, 214, 
	1011, 1150, 214, 1012, 1150, 1010, 214, 1011, 
	214, 214, 1011, 1151, 214, 1012, 1151, 1010, 
	214, 1011, 214, 214, 1011, 1152, 214, 1012, 
	1152, 1010, 214, 1011, 214, 214, 1011, 1153, 
	214, 1012, 1153, 1010, 214, 1011, 214, 214, 
	1011, 1154, 214, 1012, 1154, 1010, 214, 1011, 
	214, 214, 1011, 1155, 214, 1012, 1155, 1010, 
	214, 1011, 214, 214, 1011, 214, 1156, 1010, 
	1158, 1159, 1158, 1159, 1157, 214, 1011, 214, 
	214, 1011, 1160, 214, 1012, 1160, 1010, 214, 
	1011, 214, 214, 1011, 1161, 214, 1012, 1161, 
	1010, 214, 1011, 214, 214, 1011, 1162, 214, 
	1012, 1162, 1010, 214, 1011, 214, 214, 1011, 
	1163, 214, 1012, 1163, 1010, 214, 1011, 214, 
	214, 1011, 214, 1164, 1010, 214, 1011, 214, 
	214, 1011, 1165, 214, 1166, 1165, 1010, 214, 
	1011, 214, 214, 1011, 1167, 214, 1012, 1167, 
	1010, 214, 1011, 214, 214, 1011, 1168, 214, 
	1012, 1168, 1010, 214, 1011, 214, 214, 1011, 
	1169, 214, 1012, 1169, 1010, 214, 1011, 214, 
	214, 1011, 1170, 214, 1012, 1170, 1010, 214, 
	1011, 214, 214, 1011, 1171, 214, 1012, 1171, 
	1010, 214, 1011, 214, 214, 1011, 1172, 214, 
	1173, 1172, 1010, 214, 1011, 214, 214, 1011, 
	214, 1173, 1010, 214, 1011, 214, 214, 1011, 
	1174, 214, 1012, 1174, 1010, 214, 1011, 214, 
	214, 1011, 214, 1175, 1010, 214, 1011, 214, 
	214, 1011, 1176, 214, 1177, 1176, 1010, 214, 
	1011, 214, 214, 1011, 1178, 214, 1012, 1178, 
	1010, 214, 1179, 214, 214, 1179, 1180, 214, 
	1181, 1010, 1182, 1182, 1183, 1014, 214, 1183, 
	1183, 1184, 1185, 1186, 1185, 1187, 1187, 214, 
	1188, 1188, 1189, 1189, 214, 207, 207, 1191, 
	207, 1190, 1192, 1192, 1193, 207, 207, 1195, 
	207, 207, 1195, 1194, 207, 1197, 207, 207, 
	1197, 1198, 1196, 1199, 1199, 1200, 207, 1201, 
	207, 1202, 1202, 207, 1203, 1203, 207, 1204, 
	1204, 207, 1205, 207, 207, 1197, 207, 207, 
	1197, 1198, 1194, 1206, 1206, 214, 1207, 1207, 
	214, 1208, 1208, 214, 1209, 1210, 1210, 214, 
	1211, 214, 1212, 214, 214, 214, 214, 1190, 
	1209, 214, 207, 1191, 1191, 1214, 207, 1213, 
	1215, 1215, 1216, 1216, 214, 207, 207, 1191, 
	207, 1217, 1218, 1218, 214, 1219, 1219, 214, 
	1220, 1220, 214, 1221, 1222, 1222, 214, 1223, 
	214, 1224, 214, 214, 214, 214, 1217, 1221, 
	214, 1225, 1225, 214, 1226, 1226, 214, 1227, 
	1227, 214, 1228, 1229, 1229, 214, 1230, 214, 
	1231, 214, 214, 214, 214, 1213, 1228, 214, 
	214, 1232, 214, 214, 1232, 1233, 1234, 1235, 
	1234, 1236, 214, 1012, 1236, 1010, 1237, 1237, 
	1184, 1185, 1186, 1185, 1187, 1014, 1187, 214, 
	214, 1011, 214, 214, 1011, 1238, 1238, 1239, 
	214, 1012, 1239, 1010, 214, 1011, 214, 214, 
	1011, 1241, 1190, 1242, 1010, 1240, 214, 1243, 
	214, 214, 1243, 214, 1244, 1010, 1245, 1245, 
	1246, 214, 214, 1195, 214, 214, 1195, 1247, 
	1194, 214, 1197, 214, 214, 1197, 1248, 1248, 
	1249, 1198, 1249, 1196, 214, 1197, 214, 214, 
	1197, 1251, 1252, 1196, 1250, 214, 214, 472, 
	1253, 214, 1018, 214, 214, 472, 1254, 1254, 
	214, 1018, 214, 214, 472, 1255, 1255, 214, 
	1018, 214, 214, 472, 1256, 1256, 214, 1018, 
	214, 214, 472, 1257, 214, 1018, 214, 1197, 
	214, 214, 1197, 1258, 1198, 1258, 1196, 214, 
	1197, 214, 214, 1197, 1259, 1198, 1259, 1196, 
	214, 1197, 214, 214, 1197, 1260, 1198, 1260, 
	1196, 214, 1197, 214, 214, 1197, 1261, 1262, 
	1198, 1262, 1196, 214, 1197, 214, 214, 1197, 
	1263, 1198, 1196, 214, 1197, 214, 214, 1197, 
	1264, 1198, 1196, 214, 1197, 214, 214, 1197, 
	1252, 1196, 1250, 214, 1197, 214, 214, 1197, 
	1261, 1198, 1196, 214, 214, 1191, 1265, 214, 
	1190, 214, 214, 1191, 1266, 1266, 1267, 1267, 
	214, 1190, 214, 214, 1269, 1270, 214, 1268, 
	214, 1192, 1192, 472, 1271, 214, 1018, 214, 
	1195, 214, 214, 1195, 1273, 1194, 1272, 214, 
	214, 1191, 1274, 1274, 214, 1190, 214, 214, 
	1191, 1275, 1275, 214, 1190, 214, 214, 1191, 
	1276, 1276, 214, 1190, 214, 214, 1191, 1277, 
	1278, 1278, 214, 1190, 214, 214, 1191, 1279, 
	214, 1190, 214, 214, 1191, 1280, 214, 1190, 
	214, 214, 1269, 214, 1268, 214, 214, 1191, 
	1277, 214, 1190, 214, 1011, 214, 214, 1011, 
	1281, 214, 1012, 1281, 1010, 214, 1011, 214, 
	214, 1011, 1282, 214, 1012, 1282, 1010, 214, 
	1011, 214, 214, 1011, 1283, 214, 1012, 1283, 
	1010, 214, 1011, 214, 214, 1011, 1284, 1285, 
	214, 1012, 1285, 1010, 214, 1011, 214, 214, 
	1011, 1286, 214, 1012, 1010, 214, 1011, 214, 
	214, 1011, 1287, 214, 1012, 1010, 214, 1011, 
	214, 214, 1011, 1190, 1242, 1010, 1240, 214, 
	1011, 214, 214, 1011, 1284, 214, 1012, 1010, 
	214, 1289, 214, 214, 1289, 1213, 1290, 1010, 
	1288, 214, 1011, 214, 214, 1011, 1291, 1291, 
	1292, 214, 1012, 1292, 1010, 214, 1011, 214, 
	214, 1011, 1241, 1217, 1294, 1010, 1293, 214, 
	214, 1191, 1295, 214, 1217, 214, 214, 1296, 
	1191, 1296, 1297, 1297, 214, 1217, 214, 214, 
	1269, 1299, 214, 1298, 214, 214, 1191, 1300, 
	1300, 214, 1217, 214, 214, 1191, 1301, 1301, 
	214, 1217, 214, 214, 1191, 1302, 1302, 214, 
	1217, 214, 214, 1191, 1303, 1304, 1304, 214, 
	1217, 214, 214, 1191, 1305, 214, 1217, 214, 
	214, 1191, 1306, 214, 1217, 214, 214, 1269, 
	214, 1298, 214, 214, 1191, 1303, 214, 1217, 
	214, 1011, 214, 214, 1011, 1307, 214, 1012, 
	1307, 1010, 214, 1011, 214, 214, 1011, 1308, 
	214, 1012, 1308, 1010, 214, 1011, 214, 214, 
	1011, 1309, 214, 1012, 1309, 1010, 214, 1011, 
	214, 214, 1011, 1310, 1311, 214, 1012, 1311, 
	1010, 214, 1011, 214, 214, 1011, 1312, 214, 
	1012, 1010, 214, 1011, 214, 214, 1011, 1313, 
	214, 1012, 1010, 214, 1011, 214, 214, 1011, 
	1217, 1294, 1010, 1293, 214, 1011, 214, 214, 
	1011, 1310, 214, 1012, 1010, 214, 1011, 214, 
	214, 1011, 1314, 214, 1012, 1314, 1010, 214, 
	1011, 214, 214, 1011, 1315, 214, 1012, 1315, 
	1010, 214, 1011, 214, 214, 1011, 1316, 214, 
	1012, 1316, 1010, 214, 1011, 214, 214, 1011, 
	1317, 1318, 214, 1012, 1318, 1010, 214, 1011, 
	214, 214, 1011, 1319, 214, 1012, 1010, 214, 
	1011, 214, 214, 1011, 1320, 214, 1012, 1010, 
	214, 1011, 214, 214, 1011, 1213, 1321, 1010, 
	1288, 214, 1191, 1191, 1322, 1214, 214, 1213, 
	214, 1191, 1191, 1323, 1323, 1324, 1214, 1324, 
	214, 1213, 214, 1191, 1191, 1326, 1327, 214, 
	1325, 214, 1191, 1191, 1328, 1214, 1328, 214, 
	1213, 214, 1191, 1191, 1329, 1214, 1329, 214, 
	1213, 214, 1191, 1191, 1330, 1214, 1330, 214, 
	1213, 214, 1191, 1191, 1331, 1332, 1214, 1332, 
	214, 1213, 214, 1191, 1191, 1333, 1214, 214, 
	1213, 214, 1191, 1191, 1334, 1214, 214, 1213, 
	214, 1191, 1191, 1327, 214, 1325, 214, 1191, 
	1191, 1331, 1214, 214, 1213, 214, 1011, 214, 
	214, 1011, 1317, 214, 1012, 1010, 1335, 1335, 
	1336, 1015, 1336, 1337, 1337, 214, 1335, 1335, 
	1336, 1336, 1337, 1337, 214, 214, 1339, 1339, 
	1340, 214, 1338, 1341, 1341, 1342, 214, 1343, 
	214, 1344, 1344, 214, 1345, 1345, 214, 1346, 
	1346, 214, 1347, 214, 214, 1339, 1339, 1348, 
	1340, 214, 1338, 214, 1339, 1339, 1349, 1340, 
	1349, 214, 1338, 214, 1339, 1339, 1350, 1340, 
	1350, 214, 1338, 214, 1339, 1339, 1351, 1340, 
	1351, 214, 1338, 214, 1339, 1339, 1340, 1347, 
	214, 1338, 1352, 1352, 214, 1353, 1353, 214, 
	1354, 1354, 214, 1355, 1356, 1356, 214, 1357, 
	214, 1358, 214, 214, 214, 214, 1338, 1355, 
	214, 1359, 257, 1360, 1361, 300, 1362, 258, 
	1363, 1359, 257, 1360, 1361, 300, 1362, 258, 
	1363, 214, 1364, 302, 302, 214, 1361, 312, 
	1361, 312, 214, 1365, 214, 1366, 322, 1367, 
	322, 1367, 214, 1368, 1368, 214, 1369, 1369, 
	214, 1370, 1370, 214, 1371, 1371, 214, 1364, 
	214, 1372, 214, 1373, 1373, 214, 1373, 1373, 
	1374, 1374, 214, 1375, 1375, 214, 1376, 1376, 
	214, 1377, 1377, 214, 1378, 214, 1379, 214, 
	1380, 1380, 1381, 1381, 214, 214, 214, 1383, 
	214, 1382, 214, 214, 1383, 1384, 214, 1382, 
	214, 214, 214, 1385, 214, 214, 214, 1387, 
	1386, 214, 214, 214, 1388, 1387, 1386, 214, 
	214, 214, 1387, 1389, 1389, 1386, 214, 214, 
	214, 1387, 1390, 1386, 1391, 1391, 214, 1392, 
	1392, 214, 1393, 1393, 214, 1394, 1395, 1395, 
	214, 1396, 214, 1397, 214, 214, 214, 214, 
	1382, 1394, 214, 1398, 1399, 1400, 1399, 1400, 
	214, 1401, 1401, 214, 1402, 1402, 214, 1403, 
	1403, 214, 1404, 1404, 214, 1405, 1405, 214, 
	1406, 1406, 214, 1407, 1407, 214, 1408, 1408, 
	214, 1409, 214, 1410, 214, 1411, 1412, 1411, 
	1412, 214, 1413, 1413, 214, 1414, 1414, 214, 
	1415, 1415, 214, 1416, 1416, 214, 1417, 214, 
	1418, 1419, 1418, 1419, 214, 1420, 1420, 214, 
	1421, 1421, 1422, 1423, 214, 1421, 1421, 1422, 
	214, 1422, 1422, 1424, 1424, 1424, 214, 1095, 
	1425, 1425, 1425, 214, 1426, 1426, 214, 1427, 
	1427, 214, 1428, 1428, 1429, 1430, 214, 214, 
	1432, 214, 214, 1432, 1433, 1118, 1431, 214, 
	214, 214, 1117, 1434, 214, 1433, 214, 214, 
	1433, 1118, 1431, 1435, 1436, 1435, 1436, 214, 
	1437, 214, 1438, 1438, 214, 1439, 1439, 214, 
	1440, 1440, 214, 1441, 1441, 214, 1442, 1442, 
	1443, 1444, 214, 214, 1446, 214, 214, 1446, 
	1447, 1141, 1445, 214, 214, 214, 1140, 1448, 
	214, 1447, 214, 214, 1447, 1141, 1445, 1449, 
	1449, 214, 1450, 1450, 214, 1451, 1451, 214, 
	1452, 1453, 1453, 214, 1454, 214, 1455, 214, 
	214, 214, 214, 1456, 214, 214, 1457, 214, 
	1456, 1452, 214, 1458, 1458, 214, 1459, 1459, 
	214, 1460, 1460, 214, 1461, 1461, 214, 1462, 
	1462, 214, 1463, 1463, 214, 1464, 214, 1465, 
	1466, 1467, 1466, 1467, 214, 1468, 1468, 214, 
	1469, 1469, 214, 1470, 1470, 214, 1471, 1471, 
	214, 1472, 1472, 214, 1473, 1474, 1474, 214, 
	1473, 214, 1475, 1475, 214, 1476, 1476, 214, 
	1477, 1477, 214, 1478, 1478, 214, 1398, 214, 
	1479, 1479, 214, 1480, 214, 1481, 214, 1482, 
	1482, 1482, 1482, 214, 1484, 1483, 1483, 1483, 
	1483, 214, 1485, 214, 1489, 1490, 1491, 1485, 
	1494, 1485, 1485, 1493, 1486, 1487, 1488, 1492, 
	1486, 1493, 1493, 1485, 1493, 1493, 1493, 207, 
	1497, 1498, 1499, 1486, 1486, 1486, 1486, 1501, 
	1486, 1495, 1496, 1500, 1486, 1501, 1501, 1486, 
	1501, 1501, 1501, 207, 1497, 1498, 1499, 1486, 
	1486, 1486, 1486, 1501, 1501, 1486, 1495, 1496, 
	1500, 1486, 1501, 1501, 1486, 1501, 1501, 1501, 
	207, 1497, 1498, 1499, 1486, 1486, 1486, 1486, 
	1501, 1495, 1486, 1495, 1496, 1500, 1486, 1501, 
	1501, 1486, 1501, 1501, 1501, 207, 1502, 1497, 
	1498, 1499, 1486, 1486, 1486, 1486, 1501, 1495, 
	1486, 1495, 1496, 1500, 1486, 1501, 1501, 1486, 
	1501, 1501, 1501, 207, 1486, 1497, 1498, 1499, 
	1486, 1486, 1486, 1486, 1501, 1501, 1486, 1495, 
	1496, 1500, 1486, 1501, 1501, 1486, 1501, 1501, 
	1501, 207, 1503, 1497, 1498, 1499, 1486, 1486, 
	1486, 1486, 1501, 1495, 1486, 1495, 1496, 1500, 
	1486, 1501, 1501, 1486, 1501, 1501, 1501, 207, 
	1497, 1498, 1499, 1486, 1486, 1486, 1486, 1501, 
	1486, 1501, 1486, 1501, 1486, 1501, 1486, 1495, 
	1496, 1500, 1486, 1501, 1501, 1486, 1501, 1501, 
	1501, 207, 1504, 1505, 1497, 1498, 1499, 1486, 
	1486, 1486, 1486, 1501, 1495, 1486, 1495, 1496, 
	1500, 1486, 1501, 1501, 1486, 1501, 1501, 1501, 
	207, 1486, 1486, 1497, 1498, 1499, 1486, 1486, 
	1486, 1486, 1501, 1501, 1486, 1495, 1496, 1500, 
	1486, 1501, 1501, 1486, 1501, 1501, 1501, 207, 
	1497, 1498, 1499, 1486, 1486, 1486, 1486, 1501, 
	1496, 1486, 1495, 1496, 1500, 1486, 1501, 1501, 
	1486, 1501, 1501, 1501, 207, 1486, 1486, 1486, 
	1497, 1498, 1499, 1486, 1486, 1486, 1486, 1501, 
	1501, 1486, 1495, 1496, 1500, 1486, 1501, 1501, 
	1486, 1501, 1501, 1501, 207, 1497, 1498, 1499, 
	1486, 1486, 1486, 1486, 1501, 1493, 1486, 1495, 
	1496, 1500, 1486, 1501, 1501, 1486, 1501, 1501, 
	1501, 207, 1497, 1498, 1499, 1486, 1486, 1486, 
	1486, 1501, 1487, 1486, 1495, 1496, 1500, 1486, 
	1501, 1501, 1486, 1501, 1501, 1501, 207, 1506, 
	1497, 1498, 1499, 1486, 1486, 1486, 1486, 1501, 
	1487, 1486, 1495, 1496, 1500, 1486, 1501, 1501, 
	1486, 1501, 1501, 1501, 207, 1485, 1497, 1498, 
	1499, 1486, 1486, 1486, 1486, 1501, 1493, 1486, 
	1495, 1496, 1500, 1486, 1501, 1501, 1486, 1501, 
	1501, 1501, 207, 1507, 1497, 1498, 1499, 1486, 
	1486, 1486, 1486, 1501, 1487, 1486, 1495, 1496, 
	1500, 1486, 1501, 1501, 1486, 1501, 1501, 1501, 
	207, 1497, 1498, 1499, 1486, 1486, 1486, 1486, 
	1501, 1485, 1493, 1485, 1493, 1485, 1493, 1486, 
	1495, 1496, 1500, 1486, 1501, 1501, 1486, 1501, 
	1501, 1501, 207, 1508, 1509, 1497, 1498, 1499, 
	1486, 1486, 1486, 1486, 1501, 1487, 1486, 1495, 
	1496, 1500, 1486, 1501, 1501, 1486, 1501, 1501, 
	1501, 207, 1485, 1485, 1497, 1498, 1499, 1486, 
	1486, 1486, 1486, 1501, 1493, 1486, 1495, 1496, 
	1500, 1486, 1501, 1501, 1486, 1501, 1501, 1501, 
	207, 1485, 1485, 1485, 1497, 1498, 1499, 1486, 
	1486, 1486, 1486, 1501, 1493, 1486, 1495, 1496, 
	1500, 1486, 1501, 1501, 1486, 1501, 1501, 1501, 
	207, 1497, 1498, 1499, 1486, 1486, 1486, 1486, 
	1501, 1488, 1486, 1495, 1496, 1500, 1486, 1501, 
	1501, 1486, 1501, 1501, 1501, 207, 1489, 1490, 
	1491, 1485, 1494, 1485, 1485, 1485, 1485, 1493, 
	1486, 1487, 1488, 1492, 1486, 1493, 1493, 1485, 
	1493, 1493, 1493, 207, 1510, 214, 1511, 1510, 
	214, 1485, 1485, 214, 1512, 1510, 214, 1485, 
	1485, 1485, 214, 1513, 1514, 1510, 214, 1485, 
	1485, 1485, 214, 1485, 1485, 1485, 1485, 214, 
	1515, 214, 1516, 1517, 1518, 1485, 1510, 1515, 
	1519, 1485, 1485, 1485, 1485, 1485, 214, 1521, 
	1520, 1522, 1522, 1520, 1523, 1523, 1520, 1524, 
	1524, 1520, 1525, 1525, 1520, 1526, 1520, 1527, 
	1520, 1528, 1528, 1520, 1529, 1529, 1520, 1530, 
	1530, 1520, 1531, 1531, 1520, 1526, 1520, 1533, 
	1532, 1534, 1534, 1532, 1535, 1535, 1532, 1536, 
	1536, 1532, 1537, 1537, 1532, 1538, 1538, 1532, 
	1539, 1539, 1532, 1540, 1540, 1532, 1541, 1532, 
	1542, 1532, 1543, 1543, 1532, 1544, 1544, 1532, 
	1545, 1545, 1532, 1546, 1546, 1532, 1547, 1547, 
	1532, 1548, 1548, 1532, 1549, 1549, 1532, 1541, 
	1532, 1551, 1552, 1551, 1552, 1550, 1553, 1553, 
	1550, 1554, 1554, 1550, 1555, 1555, 1550, 1556, 
	1556, 1550, 1557, 1557, 1550, 1558, 1558, 1550, 
	1559, 1559, 1550, 1560, 1550, 1561, 1562, 1563, 
	1564, 1561, 1562, 1563, 1564, 1550, 1565, 1565, 
	1550, 1566, 1566, 1550, 1567, 1567, 1550, 1568, 
	1550, 1569, 1569, 1550, 1570, 1570, 1550, 1571, 
	1571, 1550, 1572, 1550, 1573, 1573, 1550, 1574, 
	1574, 1550, 1575, 1575, 1550, 1576, 1550, 1577, 
	1550, 1578, 1578, 1550, 1579, 1579, 1550, 1580, 
	1580, 1581, 1582, 1582, 1550, 1580, 1580, 1583, 
	1583, 1583, 1550, 1584, 1584, 1586, 1585, 1585, 
	1585, 1550, 1587, 1587, 1588, 1550, 1588, 1588, 
	1589, 1590, 1591, 1591, 1591, 1550, 1550, 1550, 
	1550, 1592, 1550, 1550, 1550, 1594, 1593, 1595, 
	1595, 1596, 1550, 1550, 1550, 1550, 1597, 1550, 
	1550, 1550, 1594, 1598, 1599, 1599, 1601, 1600, 
	1600, 1600, 1550, 1602, 1602, 1550, 1603, 1603, 
	1550, 1604, 1604, 1550, 1605, 1605, 1550, 1606, 
	1606, 1607, 1550, 1606, 1606, 1608, 1608, 1608, 
	1550, 1609, 1609, 1611, 1610, 1610, 1610, 1550, 
	1612, 1612, 1613, 1550, 1613, 1613, 1614, 1615, 
	1616, 1616, 1616, 1550, 1550, 1550, 1550, 1617, 
	1550, 1550, 1550, 1619, 1618, 1620, 1620, 1621, 
	1550, 1550, 1550, 1550, 1622, 1550, 1550, 1550, 
	1619, 1623, 1624, 1624, 1626, 1625, 1625, 1625, 
	1550, 1627, 1628, 1629, 1630, 1627, 1628, 1629, 
	1630, 1550, 1631, 1631, 1550, 1632, 1632, 1550, 
	1633, 1633, 1550, 1634, 1634, 1635, 1550, 1634, 
	1634, 1636, 1636, 1636, 1550, 1637, 1637, 1639, 
	1638, 1638, 1638, 1550, 1640, 1640, 1641, 1550, 
	1641, 1641, 1642, 1643, 1644, 1644, 1644, 1550, 
	1550, 1550, 1550, 1645, 1550, 1550, 1550, 1647, 
	1646, 1648, 1648, 1649, 1550, 1550, 1550, 1550, 
	1650, 1550, 1550, 1550, 1647, 1651, 1652, 1652, 
	1654, 1653, 1653, 1653, 1550, 1655, 1655, 1656, 
	1550, 1655, 1655, 1657, 1657, 1657, 1550, 1658, 
	1658, 1660, 1659, 1659, 1659, 1550, 1661, 1661, 
	1662, 1550, 1662, 1662, 1663, 1664, 1665, 1665, 
	1665, 1550, 1550, 1550, 1550, 1666, 1550, 1550, 
	1550, 1668, 1667, 1669, 1669, 1670, 1550, 1550, 
	1550, 1550, 1671, 1550, 1550, 1550, 1668, 1672, 
	1673, 1673, 1675, 1674, 1674, 1674, 1550, 1676, 
	1676, 1677, 1678, 1678, 1550, 1676, 1676, 1679, 
	1679, 1679, 1550, 1680, 1680, 1682, 1681, 1681, 
	1681, 1550, 1683, 1683, 1684, 1550, 1684, 1684, 
	1685, 1686, 1687, 1687, 1687, 1550, 1550, 1550, 
	1550, 1688, 1550, 1550, 1550, 1690, 1689, 1691, 
	1691, 1692, 1550, 1550, 1550, 1550, 1693, 1550, 
	1550, 1550, 1690, 1694, 1695, 1695, 1697, 1696, 
	1696, 1696, 1550, 1698, 1698, 1550, 1699, 1699, 
	1550, 1700, 1700, 1701, 1550, 1700, 1700, 1702, 
	1702, 1702, 1550, 1703, 1703, 1705, 1704, 1704, 
	1704, 1550, 1706, 1706, 1707, 1550, 1707, 1707, 
	1708, 1709, 1710, 1710, 1710, 1550, 1550, 1550, 
	1550, 1711, 1550, 1550, 1550, 1713, 1712, 1714, 
	1714, 1715, 1550, 1550, 1550, 1550, 1716, 1550, 
	1550, 1550, 1713, 1717, 1718, 1718, 1720, 1719, 
	1719, 1719, 1550, 1721, 1721, 1722, 1550, 1721, 
	1721, 1723, 1723, 1723, 1550, 1724, 1724, 1726, 
	1725, 1725, 1725, 1550, 1727, 1727, 1728, 1550, 
	1728, 1728, 1729, 1730, 1731, 1731, 1731, 1550, 
	1550, 1550, 1550, 1732, 1550, 1550, 1550, 1734, 
	1733, 1735, 1735, 1736, 1550, 1550, 1550, 1550, 
	1737, 1550, 1550, 1550, 1734, 1738, 1739, 1739, 
	1741, 1740, 1740, 1740, 1550, 1742, 1743, 1742, 
	1743, 1550, 1744, 1744, 1550, 1745, 1745, 1550, 
	1746, 1746, 1550, 1747, 1747, 1550, 1748, 1748, 
	1550, 1749, 1749, 1550, 1750, 1750, 1550, 1560, 
	1550, 1751, 1752, 1753, 1754, 1751, 1752, 1753, 
	1754, 1550, 1755, 1755, 1550, 1756, 1756, 1550, 
	1757, 1757, 1550, 1568, 1550, 1758, 1758, 1550, 
	1759, 1759, 1550, 1760, 1760, 1550, 1572, 1550, 
	1761, 1761, 1550, 1762, 1762, 1550, 1763, 1763, 
	1550, 1576, 1550, 1577, 1550, 1764, 1764, 1550, 
	1765, 1765, 1550, 1766, 1766, 1767, 1581, 1767, 
	1550, 1766, 1766, 1768, 1768, 1768, 1550, 1769, 
	1769, 1771, 1770, 1770, 1770, 1550, 1772, 1772, 
	1773, 1550, 1773, 1773, 1774, 1775, 1776, 1776, 
	1776, 1550, 1550, 1550, 1550, 1777, 1550, 1550, 
	1550, 1779, 1778, 1780, 1780, 1596, 1550, 1550, 
	1550, 1550, 1781, 1550, 1550, 1550, 1779, 1782, 
	1783, 1783, 1601, 1784, 1784, 1784, 1550, 1785, 
	1785, 1550, 1786, 1786, 1550, 1787, 1787, 1550, 
	1788, 1788, 1550, 1789, 1789, 1607, 1550, 1789, 
	1789, 1790, 1790, 1790, 1550, 1791, 1791, 1793, 
	1792, 1792, 1792, 1550, 1794, 1794, 1795, 1550, 
	1795, 1795, 1796, 1797, 1798, 1798, 1798, 1550, 
	1550, 1550, 1550, 1799, 1550, 1550, 1550, 1801, 
	1800, 1802, 1802, 1621, 1550, 1550, 1550, 1550, 
	1803, 1550, 1550, 1550, 1801, 1804, 1805, 1805, 
	1626, 1806, 1806, 1806, 1550, 1807, 1808, 1809, 
	1810, 1807, 1808, 1809, 1810, 1550, 1811, 1811, 
	1550, 1812, 1812, 1550, 1813, 1813, 1550, 1814, 
	1814, 1635, 1550, 1814, 1814, 1815, 1815, 1815, 
	1550, 1816, 1816, 1818, 1817, 1817, 1817, 1550, 
	1819, 1819, 1820, 1550, 1820, 1820, 1821, 1822, 
	1823, 1823, 1823, 1550, 1550, 1550, 1550, 1824, 
	1550, 1550, 1550, 1826, 1825, 1827, 1827, 1649, 
	1550, 1550, 1550, 1550, 1828, 1550, 1550, 1550, 
	1826, 1829, 1830, 1830, 1654, 1831, 1831, 1831, 
	1550, 1832, 1832, 1656, 1550, 1832, 1832, 1833, 
	1833, 1833, 1550, 1834, 1834, 1836, 1835, 1835, 
	1835, 1550, 1837, 1837, 1838, 1550, 1838, 1838, 
	1839, 1840, 1841, 1841, 1841, 1550, 1550, 1550, 
	1550, 1842, 1550, 1550, 1550, 1844, 1843, 1845, 
	1845, 1670, 1550, 1550, 1550, 1550, 1846, 1550, 
	1550, 1550, 1844, 1847, 1848, 1848, 1675, 1849, 
	1849, 1849, 1550, 1850, 1850, 1851, 1677, 1851, 
	1550, 1850, 1850, 1852, 1852, 1852, 1550, 1853, 
	1853, 1855, 1854, 1854, 1854, 1550, 1856, 1856, 
	1857, 1550, 1857, 1857, 1858, 1859, 1860, 1860, 
	1860, 1550, 1550, 1550, 1550, 1861, 1550, 1550, 
	1550, 1863, 1862, 1864, 1864, 1692, 1550, 1550, 
	1550, 1550, 1865, 1550, 1550, 1550, 1863, 1866, 
	1867, 1867, 1697, 1868, 1868, 1868, 1550, 1869, 
	1869, 1550, 1870, 1870, 1550, 1871, 1871, 1701, 
	1550, 1871, 1871, 1872, 1872, 1872, 1550, 1873, 
	1873, 1875, 1874, 1874, 1874, 1550, 1876, 1876, 
	1877, 1550, 1877, 1877, 1878, 1879, 1880, 1880, 
	1880, 1550, 1550, 1550, 1550, 1881, 1550, 1550, 
	1550, 1883, 1882, 1884, 1884, 1715, 1550, 1550, 
	1550, 1550, 1885, 1550, 1550, 1550, 1883, 1886, 
	1887, 1887, 1720, 1888, 1888, 1888, 1550, 1889, 
	1889, 1722, 1550, 1889, 1889, 1890, 1890, 1890, 
	1550, 1891, 1891, 1893, 1892, 1892, 1892, 1550, 
	1894, 1894, 1895, 1550, 1895, 1895, 1896, 1897, 
	1898, 1898, 1898, 1550, 1550, 1550, 1550, 1899, 
	1550, 1550, 1550, 1901, 1900, 1902, 1902, 1736, 
	1550, 1550, 1550, 1550, 1903, 1550, 1550, 1550, 
	1901, 1904, 1905, 1905, 1741, 1906, 1906, 1906, 
	1550, 1, 1908, 1, 1908, 1909, 1910, 1911, 
	1912, 1913, 1911, 1907, 1, 2, 1, 2, 
	1914, 1, 4, 1, 4, 5, 6, 1915, 
	18, 18, 1916, 39, 39, 40, 1915, 1917, 
	1917, 1917, 1918, 1917, 38, 1917, 1917, 38, 
	37, 1919, 1920, 1921, 8, 1922, 45, 1923, 
	1924, 1919, 1920, 1921, 8, 1922, 45, 1923, 
	1924, 1915, 50, 50, 1925, 62, 63, 62, 
	63, 1926, 65, 66, 65, 66, 1927, 1929, 
	1929, 1928, 85, 85, 1930, 100, 101, 100, 
	101, 1931, 108, 108, 1932, 1933, 1915, 1935, 
	1935, 1934, 1936, 1937, 25, 1938, 1939, 1940, 
	1941, 1936, 1937, 25, 1938, 1939, 1940, 1941, 
	1915, 1942, 1915, 1944, 1945, 1946, 1943, 1948, 
	201, 1949, 194, 1950, 1951, 201, 1949, 194, 
	1950, 1951, 1947, 1952, 1953, 1954, 1955, 1956, 
	1953, 1954, 1955, 1956, 1947, 1961, 1962, 1963, 
	1964, 1962, 1965, 1968, 1969, 1970, 1971, 1972, 
	1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 
	1981, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 
	1975, 1976, 1977, 1978, 1979, 1980, 1982, 1983, 
	1984, 1957, 1957, 1957, 1985, 1957, 1958, 1959, 
	1960, 1957, 1966, 1957, 1957, 1966, 1957, 1966, 
	1957, 1967, 208, 1986, 209, 211, 1988, 1987, 
	209, 1986, 211, 1986, 212, 213, 212, 213, 
	207, 213, 215, 213, 215, 1986, 212, 217, 
	1990, 217, 1991, 1992, 1993, 1994, 1995, 1993, 
	1989, 225, 225, 1996, 212, 213, 1990, 213, 
	1998, 1999, 1997, 2001, 2000, 2002, 2002, 2002, 
	2003, 2002, 294, 2002, 2002, 294, 293, 311, 
	311, 2004, 317, 317, 2005, 2007, 2007, 2006, 
	1986, 2008, 414, 415, 416, 2009, 418, 2009, 
	418, 418, 418, 2009, 2009, 418, 2009, 2009, 
	2009, 408, 413, 417, 2009, 2009, 418, 407, 
	426, 427, 428, 2009, 430, 407, 430, 430, 
	430, 2009, 2009, 431, 2009, 2009, 2009, 420, 
	425, 429, 2009, 2009, 430, 419, 434, 435, 
	436, 2009, 431, 407, 431, 431, 431, 431, 
	2009, 432, 433, 437, 2009, 2009, 431, 438, 
	457, 458, 459, 407, 454, 419, 464, 431, 
	461, 455, 456, 460, 461, 461, 461, 2009, 
	407, 419, 431, 468, 2009, 2011, 2012, 2010, 
	2010, 2010, 1987, 2014, 2014, 2014, 2013, 2016, 
	2016, 2016, 2015, 2018, 2018, 2018, 2017, 2020, 
	2020, 2020, 2019, 2021, 2021, 2021, 2013, 2022, 
	2022, 2022, 2015, 2024, 2024, 2024, 2023, 2026, 
	2026, 2026, 2025, 2028, 2028, 2028, 2027, 2030, 
	2030, 2030, 2029, 2031, 2031, 2031, 2027, 2032, 
	2032, 2032, 2029, 2033, 2031, 2031, 2031, 2027, 
	608, 2028, 2028, 2028, 2027, 2034, 2011, 2034, 
	2012, 2010, 2010, 2010, 1987, 2035, 2011, 2035, 
	2012, 2010, 2010, 2010, 1987, 2036, 2011, 2036, 
	2012, 2010, 2010, 2010, 1987, 2037, 2011, 2037, 
	2012, 2010, 2010, 2010, 1987, 2038, 2011, 2038, 
	2012, 2010, 2010, 2010, 1987, 2039, 2011, 2012, 
	2010, 2010, 2010, 1987, 2041, 668, 668, 2040, 
	2042, 667, 667, 2040, 2043, 666, 666, 2040, 
	2044, 665, 665, 2040, 2045, 664, 664, 2040, 
	2046, 663, 663, 2040, 2047, 662, 662, 2040, 
	2048, 661, 661, 2040, 2049, 660, 660, 2040, 
	2050, 659, 659, 2040, 2050, 2040, 2040, 2051, 
	2011, 2051, 2012, 2010, 2010, 2010, 1987, 2052, 
	2011, 2052, 2012, 2010, 2010, 2010, 1987, 2053, 
	2011, 2053, 2012, 2010, 2010, 2010, 1987, 2054, 
	2011, 2012, 2010, 2010, 2010, 1987, 2056, 681, 
	681, 2055, 2057, 680, 680, 2055, 2058, 679, 
	679, 2055, 2059, 678, 678, 2055, 2060, 677, 
	677, 2055, 2061, 676, 676, 2055, 2062, 675, 
	675, 2055, 2063, 674, 674, 2055, 2064, 673, 
	673, 2055, 2065, 672, 672, 2055, 2065, 2055, 
	2055, 2066, 2011, 2066, 2012, 2010, 2010, 2010, 
	1987, 2067, 2011, 2067, 2012, 2010, 2010, 2010, 
	1987, 2068, 2011, 2068, 2012, 2010, 2010, 2010, 
	1987, 2069, 2011, 2069, 2012, 2010, 2010, 2010, 
	1987, 2070, 2011, 2070, 2012, 2010, 2010, 2010, 
	1987, 2071, 2011, 2071, 2012, 2010, 2010, 2010, 
	1987, 2072, 2011, 2012, 2010, 2010, 2010, 1987, 
	2074, 694, 694, 2073, 2075, 693, 693, 2073, 
	2076, 692, 692, 2073, 2077, 691, 691, 2073, 
	2078, 690, 690, 2073, 2079, 689, 689, 2073, 
	2080, 688, 688, 2073, 2081, 687, 687, 2073, 
	2082, 686, 686, 2073, 2083, 685, 685, 2073, 
	2083, 2073, 2073, 2084, 2011, 2084, 2012, 2010, 
	2010, 2010, 1987, 2085, 2011, 2085, 2012, 2010, 
	2010, 2010, 1987, 2086, 2011, 2086, 2012, 2010, 
	2010, 2010, 1987, 2087, 2011, 2087, 2012, 2010, 
	2010, 2010, 1987, 2088, 2011, 2012, 2010, 2010, 
	2010, 1987, 2090, 2091, 709, 709, 2089, 2093, 
	2093, 2093, 2093, 2093, 2092, 2090, 2094, 708, 
	708, 2089, 2090, 2095, 707, 707, 2089, 2090, 
	2096, 706, 706, 2089, 2090, 2097, 705, 705, 
	2089, 2090, 2098, 704, 704, 2089, 2090, 2099, 
	703, 703, 2089, 2090, 2100, 702, 702, 2089, 
	2090, 2101, 701, 701, 2089, 2090, 2102, 700, 
	700, 2089, 2090, 2102, 2089, 2090, 2089, 2103, 
	2011, 2103, 2012, 2010, 2010, 2010, 1987, 2104, 
	2011, 2104, 2012, 2010, 2010, 2010, 1987, 2105, 
	2011, 2105, 2012, 2010, 2010, 2010, 1987, 2106, 
	2011, 2106, 2012, 2010, 2010, 2010, 1987, 2107, 
	2011, 2012, 2010, 2010, 2010, 1987, 2109, 722, 
	722, 2108, 2110, 721, 721, 2108, 2111, 720, 
	720, 2108, 2112, 719, 719, 2108, 2113, 718, 
	718, 2108, 2114, 717, 717, 2108, 2115, 716, 
	716, 2108, 2116, 715, 715, 2108, 2117, 714, 
	714, 2108, 2118, 713, 713, 2108, 2118, 2108, 
	2108, 2119, 2011, 2119, 2012, 2010, 2010, 2010, 
	1987, 2120, 2011, 2120, 2012, 2010, 2010, 2010, 
	1987, 2121, 2011, 2121, 2012, 2010, 2010, 2010, 
	1987, 2122, 2123, 2011, 2123, 2012, 2010, 2010, 
	2010, 1987, 732, 733, 734, 739, 729, 740, 
	741, 742, 736, 730, 731, 735, 736, 736, 
	736, 2124, 753, 754, 755, 2124, 757, 2124, 
	757, 757, 757, 2124, 2124, 757, 2124, 2124, 
	2124, 747, 752, 756, 2124, 2124, 757, 739, 
	764, 765, 766, 2124, 768, 739, 768, 768, 
	768, 2124, 2124, 742, 2124, 2124, 2124, 758, 
	763, 767, 2124, 2124, 768, 740, 771, 772, 
	773, 2124, 742, 739, 742, 742, 742, 742, 
	2124, 769, 770, 774, 2124, 2124, 742, 775, 
	739, 740, 742, 780, 2124, 2122, 2011, 2012, 
	2010, 2010, 2010, 1987, 2125, 2011, 2125, 2012, 
	2010, 2010, 2010, 1987, 2126, 2011, 2126, 2012, 
	2010, 2010, 2010, 1987, 2127, 2011, 2012, 2010, 
	2010, 2010, 1987, 2129, 800, 800, 2128, 2130, 
	799, 799, 2128, 2131, 798, 798, 2128, 2132, 
	797, 797, 2128, 2133, 796, 796, 2128, 2134, 
	795, 795, 2128, 2135, 794, 794, 2128, 2136, 
	793, 793, 2128, 2137, 792, 792, 2128, 2138, 
	791, 791, 2128, 2138, 2128, 2128, 2139, 2140, 
	2011, 2139, 2140, 2012, 2010, 2010, 2010, 1987, 
	2141, 2011, 2141, 2012, 2010, 2010, 2010, 1987, 
	2142, 2011, 2142, 2012, 2010, 2010, 2010, 1987, 
	2143, 2011, 2143, 2012, 2010, 2010, 2010, 1987, 
	2144, 2011, 2012, 2010, 2010, 2010, 1987, 2146, 
	2145, 2147, 2148, 2011, 2147, 2148, 2012, 2010, 
	2010, 2010, 1987, 2149, 2011, 2149, 2012, 2010, 
	2010, 2010, 1987, 2150, 2011, 2012, 2010, 2010, 
	2010, 1987, 2152, 839, 839, 2151, 2153, 838, 
	838, 2151, 2154, 837, 837, 2151, 2155, 836, 
	836, 2151, 2156, 835, 835, 2151, 2157, 834, 
	834, 2151, 2158, 833, 833, 2151, 2159, 832, 
	832, 2151, 2160, 831, 831, 2151, 2161, 830, 
	830, 2151, 2161, 2151, 2151, 2162, 2011, 2162, 
	2012, 2010, 2010, 2010, 1987, 2163, 2011, 2012, 
	2010, 2010, 2010, 1987, 2165, 852, 852, 2164, 
	2166, 851, 851, 2164, 2167, 850, 850, 2164, 
	2168, 849, 849, 2164, 2169, 848, 848, 2164, 
	2170, 847, 847, 2164, 2171, 846, 846, 2164, 
	2172, 845, 845, 2164, 2173, 844, 844, 2164, 
	2174, 843, 843, 2164, 2174, 2164, 2164, 2175, 
	2011, 2175, 2012, 2010, 2010, 2010, 1987, 2176, 
	2011, 2176, 2012, 2010, 2010, 2010, 1987, 2177, 
	2011, 2177, 2012, 2010, 2010, 2010, 1987, 2178, 
	2011, 2178, 2012, 2010, 2010, 2010, 1987, 2179, 
	2011, 2179, 2012, 2010, 2010, 2010, 1987, 2180, 
	2011, 2012, 2010, 2010, 2010, 1987, 2182, 865, 
	865, 2181, 2183, 864, 864, 2181, 2184, 863, 
	863, 2181, 2185, 862, 862, 2181, 2186, 861, 
	861, 2181, 2187, 860, 860, 2181, 2188, 859, 
	859, 2181, 2189, 858, 858, 2181, 2190, 857, 
	857, 2181, 2191, 856, 856, 2181, 2191, 2181, 
	2181, 2192, 2011, 2192, 2012, 2010, 2010, 2010, 
	1987, 2193, 2011, 2193, 2012, 2010, 2010, 2010, 
	1987, 2194, 2011, 2194, 2012, 2010, 2010, 2010, 
	1987, 2195, 2011, 2195, 2012, 2010, 2010, 2010, 
	1987, 2196, 2011, 2196, 2012, 2010, 2010, 2010, 
	1987, 2197, 2011, 2012, 2010, 2010, 2010, 1987, 
	2199, 878, 878, 2198, 2200, 877, 877, 2198, 
	2201, 876, 876, 2198, 2202, 875, 875, 2198, 
	2203, 874, 874, 2198, 2204, 873, 873, 2198, 
	2205, 872, 872, 2198, 2206, 871, 871, 2198, 
	2207, 870, 870, 2198, 2208, 869, 869, 2198, 
	2208, 2198, 2198, 2209, 2210, 2011, 2209, 2210, 
	2012, 2010, 2010, 2010, 1987, 2211, 2011, 2211, 
	2012, 2010, 2010, 2010, 1987, 2212, 2011, 2012, 
	2010, 2010, 2010, 1987, 2214, 899, 899, 2213, 
	2215, 898, 898, 2213, 2216, 897, 897, 2213, 
	2217, 896, 896, 2213, 2218, 895, 895, 2213, 
	2219, 894, 894, 2213, 2220, 893, 893, 2213, 
	2221, 892, 892, 2213, 2222, 891, 891, 2213, 
	2223, 890, 890, 2213, 2223, 2213, 2213, 2225, 
	923, 923, 2224, 2226, 922, 922, 2224, 2227, 
	921, 921, 2224, 2228, 920, 920, 2224, 2229, 
	919, 919, 2224, 2230, 918, 918, 2224, 2231, 
	917, 917, 2224, 2232, 916, 916, 2224, 2233, 
	915, 915, 2224, 2234, 914, 914, 2224, 2234, 
	2224, 2224, 2236, 947, 947, 2235, 2237, 946, 
	946, 2235, 2238, 945, 945, 2235, 2239, 944, 
	944, 2235, 2240, 943, 943, 2235, 2241, 942, 
	942, 2235, 2242, 941, 941, 2235, 2243, 940, 
	940, 2235, 2244, 939, 939, 2235, 2245, 938, 
	938, 2235, 2245, 2235, 2235, 2246, 2011, 2246, 
	2012, 2010, 2010, 2010, 1987, 2247, 2011, 2247, 
	2012, 2010, 2010, 2010, 1987, 2248, 2011, 2248, 
	2012, 2010, 2010, 2010, 1987, 2249, 2011, 2012, 
	2010, 2010, 2010, 1987, 2251, 2252, 963, 963, 
	2250, 2254, 2253, 2251, 2255, 962, 962, 2250, 
	2251, 2256, 961, 961, 2250, 2251, 2257, 960, 
	960, 2250, 2251, 2258, 959, 959, 2250, 2251, 
	2259, 958, 958, 2250, 2251, 2260, 957, 957, 
	2250, 2251, 2261, 956, 956, 2250, 2251, 2262, 
	955, 955, 2250, 2251, 2263, 954, 954, 2250, 
	2251, 2263, 2250, 2251, 2250, 2264, 2011, 2264, 
	2012, 2010, 2010, 2010, 1987, 2265, 2011, 2265, 
	2012, 2010, 2010, 2010, 1987, 2266, 2011, 2266, 
	2012, 2010, 2010, 2010, 1987, 2267, 2011, 2012, 
	2010, 2010, 2010, 1987, 2269, 977, 977, 2268, 
	2270, 976, 976, 2268, 2271, 975, 975, 2268, 
	2272, 974, 974, 2268, 2273, 973, 973, 2268, 
	2274, 972, 972, 2268, 2275, 971, 971, 2268, 
	2276, 970, 970, 2268, 2277, 969, 969, 2268, 
	2278, 968, 968, 2268, 2278, 2268, 2268, 2280, 
	996, 996, 2279, 2281, 995, 995, 2279, 2282, 
	994, 994, 2279, 2283, 993, 993, 2279, 2284, 
	992, 992, 2279, 2285, 991, 991, 2279, 2286, 
	990, 990, 2279, 2287, 989, 989, 2279, 2288, 
	988, 988, 2279, 2289, 987, 987, 2279, 2289, 
	2279, 2279, 2290, 2011, 2290, 2012, 2010, 2010, 
	2010, 1987, 2291, 2011, 2291, 2012, 2010, 2010, 
	2010, 1987, 2292, 2011, 2292, 2012, 2010, 2010, 
	2010, 1987, 2293, 2011, 2012, 2010, 2010, 2010, 
	1987, 2295, 1009, 1009, 2294, 2296, 1008, 1008, 
	2294, 2297, 1007, 1007, 2294, 2298, 1006, 1006, 
	2294, 2299, 1005, 1005, 2294, 2300, 1004, 1004, 
	2294, 2301, 1003, 1003, 2294, 2302, 1002, 1002, 
	2294, 2303, 1001, 1001, 2294, 2304, 1000, 1000, 
	2294, 2304, 2294, 2294, 1986, 2305, 1986, 1986, 
	2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312, 
	2313, 2314, 2315, 480, 1986, 2307, 2308, 2309, 
	2310, 2311, 2312, 2313, 2314, 2315, 1026, 1015, 
	207, 2001, 1015, 2000, 317, 317, 1015, 2005, 
	311, 311, 1015, 2004, 1097, 1098, 1097, 1098, 
	2316, 1097, 1098, 1097, 1098, 1015, 2316, 1105, 
	1106, 1105, 1106, 1015, 2317, 1158, 1159, 1158, 
	1159, 1015, 2318, 2319, 1197, 2319, 2319, 1197, 
	1198, 1196, 2319, 2319, 472, 2319, 1018, 2319, 
	2319, 1191, 2319, 1190, 2319, 2319, 1191, 2319, 
	1217, 2319, 1191, 1191, 1214, 2319, 1213, 573, 
	1986, 2320, 2321, 2322, 2323, 2324, 2325, 1435, 
	2326, 1404, 2327, 2328, 2329, 2321, 2322, 2323, 
	2324, 2325, 1435, 2326, 1404, 2327, 2328, 2329, 
	1986, 1105, 1106, 1105, 1106, 2317, 1158, 1159, 
	1158, 1159, 2318, 2320, 2321, 2322, 2323, 2324, 
	2325, 1435, 2326, 1404, 2327, 2328, 2329, 2321, 
	2322, 2323, 2324, 2325, 1435, 2326, 1404, 2327, 
	2328, 2329, 2330, 1986, 2333, 2334, 2335, 2338, 
	2338, 2337, 2331, 2332, 2336, 2337, 2337, 2337, 
	2337, 2337, 1986, 1497, 1498, 1499, 1486, 1486, 
	1486, 1486, 1501, 1486, 1495, 1496, 1500, 1486, 
	1501, 1501, 1486, 1501, 1501, 1501, 2339, 1489, 
	1490, 1491, 1485, 1494, 1485, 1485, 1493, 1486, 
	1487, 1488, 1492, 1486, 1493, 1493, 1485, 1493, 
	1493, 1493, 2339, 2341, 2342, 2343, 2344, 2340, 
	2346, 2347, 2345, 1521, 2345, 1527, 2345, 2349, 
	2350, 2351, 2352, 2348, 2354, 2355, 2353, 1533, 
	2353, 1542, 2353, 2357, 2358, 2356, 2360, 2361, 
	2362, 2361, 2362, 2359, 2363, 2364, 2365, 2364, 
	2365, 2359, 0
};

static const short _dtext_trans_targs[] = {
	1497, 1498, 1, 1497, 2, 3, 18, 4, 
	10, 13, 5, 6, 7, 8, 9, 1497, 
	11, 12, 1500, 14, 15, 16, 17, 1497, 
	19, 25, 27, 20, 21, 22, 23, 24, 
	26, 28, 29, 30, 31, 1502, 1503, 32, 
	33, 35, 36, 37, 38, 39, 40, 41, 
	42, 43, 1505, 45, 46, 53, 47, 48, 
	49, 1507, 50, 50, 1506, 1497, 1497, 51, 
	1497, 1497, 52, 54, 55, 56, 58, 1497, 
	57, 56, 58, 1497, 57, 1497, 60, 61, 
	62, 63, 64, 65, 67, 1509, 66, 65, 
	67, 1508, 66, 1508, 69, 70, 71, 72, 
	73, 74, 1510, 1497, 1497, 75, 77, 78, 
	79, 80, 81, 82, 1511, 83, 85, 1497, 
	87, 1513, 88, 88, 1513, 90, 91, 96, 
	92, 93, 94, 95, 95, 97, 98, 99, 
	101, 100, 99, 101, 100, 103, 104, 105, 
	106, 107, 108, 110, 109, 108, 110, 109, 
	112, 113, 114, 115, 116, 117, 119, 120, 
	121, 122, 124, 125, 126, 127, 128, 129, 
	130, 132, 134, 135, 134, 141, 136, 137, 
	136, 137, 138, 139, 140, 1497, 135, 142, 
	141, 135, 142, 1516, 144, 145, 146, 147, 
	152, 1516, 1516, 1516, 148, 149, 150, 151, 
	1516, 1516, 155, 1516, 1516, 157, 158, 159, 
	160, 153, 1516, 163, 164, 165, 166, 1519, 
	1521, 171, 1519, 172, 1524, 174, 1519, 175, 
	1519, 176, 177, 195, 178, 181, 190, 179, 
	180, 1527, 182, 183, 184, 185, 186, 187, 
	188, 189, 1519, 191, 192, 193, 194, 1519, 
	196, 198, 206, 197, 199, 200, 201, 202, 
	203, 204, 205, 207, 208, 209, 210, 1519, 
	212, 213, 223, 214, 219, 215, 216, 217, 
	218, 1529, 220, 221, 222, 1519, 224, 225, 
	226, 1519, 1519, 1519, 228, 229, 239, 230, 
	235, 231, 232, 233, 234, 236, 237, 238, 
	240, 241, 242, 244, 243, 1530, 1531, 246, 
	276, 283, 247, 257, 263, 268, 248, 249, 
	250, 251, 252, 253, 254, 255, 256, 1532, 
	258, 259, 260, 261, 262, 1533, 264, 265, 
	266, 267, 269, 270, 271, 272, 273, 274, 
	1519, 275, 277, 278, 279, 280, 281, 1519, 
	282, 282, 1519, 284, 285, 286, 287, 288, 
	289, 291, 292, 1534, 293, 293, 1534, 295, 
	310, 317, 296, 302, 297, 298, 299, 300, 
	301, 303, 304, 305, 306, 307, 308, 309, 
	311, 312, 313, 314, 315, 316, 316, 318, 
	319, 320, 321, 322, 323, 325, 326, 327, 
	326, 333, 328, 329, 328, 329, 330, 331, 
	332, 1519, 327, 334, 333, 327, 334, 335, 
	336, 337, 1536, 1537, 371, 396, 1519, 1536, 
	338, 341, 343, 345, 346, 339, 340, 342, 
	344, 347, 348, 1537, 349, 352, 354, 356, 
	357, 350, 351, 353, 355, 358, 359, 360, 
	361, 362, 363, 365, 367, 370, 1538, 364, 
	366, 368, 369, 372, 373, 374, 375, 395, 
	376, 377, 378, 380, 381, 379, 382, 383, 
	384, 385, 388, 390, 393, 1539, 386, 387, 
	394, 389, 391, 392, 1540, 397, 398, 397, 
	1519, 399, 400, 401, 402, 405, 403, 404, 
	407, 408, 407, 410, 421, 431, 444, 448, 
	451, 408, 409, 410, 411, 414, 415, 409, 
	411, 414, 415, 412, 413, 419, 420, 412, 
	414, 415, 413, 1542, 416, 415, 418, 416, 
	417, 418, 417, 418, 1544, 419, 422, 423, 
	424, 427, 423, 424, 427, 425, 426, 428, 
	429, 425, 427, 426, 427, 1546, 428, 430, 
	430, 432, 433, 434, 435, 436, 437, 438, 
	439, 438, 439, 440, 441, 442, 443, 440, 
	441, 442, 421, 445, 446, 447, 424, 427, 
	447, 424, 449, 450, 452, 455, 456, 457, 
	453, 454, 453, 454, 458, 460, 461, 463, 
	464, 499, 500, 502, 503, 461, 462, 466, 
	471, 462, 463, 464, 499, 500, 502, 493, 
	471, 493, 465, 472, 498, 467, 466, 469, 
	470, 467, 468, 469, 470, 468, 470, 1548, 
	1550, 473, 466, 479, 474, 473, 476, 477, 
	481, 487, 490, 493, 479, 474, 475, 479, 
	475, 476, 477, 481, 487, 490, 479, 478, 
	480, 1552, 1554, 482, 483, 484, 485, 486, 
	488, 489, 478, 491, 492, 494, 495, 496, 
	497, 494, 1555, 501, 504, 505, 506, 507, 
	509, 1562, 519, 1573, 510, 511, 512, 513, 
	514, 515, 516, 517, 518, 521, 1578, 531, 
	1589, 522, 523, 524, 525, 526, 527, 528, 
	529, 530, 533, 1597, 543, 1608, 534, 535, 
	536, 537, 538, 539, 540, 541, 542, 545, 
	1614, 556, 1519, 1615, 1626, 547, 548, 549, 
	550, 551, 552, 553, 554, 555, 558, 1632, 
	568, 1643, 559, 560, 561, 562, 563, 564, 
	565, 566, 567, 570, 571, 572, 574, 575, 
	573, 576, 577, 578, 579, 582, 584, 587, 
	1648, 580, 581, 1649, 1650, 621, 610, 583, 
	585, 586, 1519, 588, 591, 593, 595, 596, 
	589, 590, 592, 594, 597, 598, 599, 602, 
	604, 606, 607, 600, 601, 603, 605, 608, 
	609, 611, 612, 613, 615, 617, 620, 1651, 
	614, 616, 618, 619, 1652, 623, 624, 625, 
	626, 627, 628, 629, 630, 1657, 640, 1668, 
	631, 632, 633, 634, 635, 636, 637, 638, 
	639, 642, 643, 666, 644, 646, 665, 645, 
	1674, 647, 664, 648, 663, 649, 662, 650, 
	661, 651, 660, 652, 659, 653, 658, 654, 
	657, 655, 656, 668, 1678, 678, 1689, 669, 
	670, 671, 672, 673, 674, 675, 676, 677, 
	680, 1692, 690, 1703, 681, 682, 683, 684, 
	685, 686, 687, 688, 689, 692, 1710, 702, 
	1721, 693, 694, 695, 696, 697, 698, 699, 
	700, 701, 704, 1728, 714, 1739, 705, 706, 
	707, 708, 709, 710, 711, 712, 713, 716, 
	733, 756, 717, 718, 719, 720, 721, 722, 
	1743, 732, 1754, 723, 724, 725, 726, 727, 
	728, 729, 730, 731, 734, 735, 736, 737, 
	738, 739, 740, 741, 742, 743, 744, 745, 
	1755, 755, 1766, 746, 747, 748, 749, 750, 
	751, 752, 753, 754, 757, 758, 759, 760, 
	761, 762, 763, 764, 765, 766, 767, 768, 
	1767, 778, 1778, 769, 770, 771, 772, 773, 
	774, 775, 776, 777, 780, 1783, 792, 1519, 
	782, 1784, 1795, 783, 784, 785, 786, 787, 
	788, 789, 790, 791, 794, 805, 1800, 804, 
	1811, 795, 796, 797, 798, 799, 800, 801, 
	802, 803, 806, 807, 808, 809, 810, 811, 
	812, 1812, 822, 1823, 813, 814, 815, 816, 
	817, 818, 819, 820, 821, 824, 1828, 834, 
	1839, 825, 826, 827, 828, 829, 830, 831, 
	832, 833, 835, 836, 837, 836, 837, 838, 
	839, 840, 839, 841, 842, 843, 844, 847, 
	845, 846, 835, 850, 851, 861, 867, 868, 
	873, 881, 885, 1841, 852, 857, 853, 854, 
	855, 856, 1842, 858, 859, 860, 1841, 862, 
	863, 864, 865, 866, 1843, 1841, 869, 870, 
	871, 872, 1844, 874, 1841, 875, 876, 877, 
	878, 879, 880, 1841, 882, 883, 884, 1841, 
	1841, 1841, 1841, 887, 1841, 1841, 889, 894, 
	890, 891, 892, 893, 1841, 895, 905, 896, 
	897, 901, 1847, 897, 898, 899, 899, 1845, 
	1519, 1519, 900, 902, 903, 902, 903, 1846, 
	1519, 1519, 904, 906, 907, 908, 911, 1841, 
	909, 908, 910, 1841, 909, 1519, 1519, 912, 
	914, 1841, 912, 913, 1841, 913, 914, 916, 
	917, 918, 919, 920, 921, 924, 1841, 922, 
	921, 923, 1841, 922, 1519, 1519, 925, 927, 
	1841, 925, 926, 926, 927, 1841, 930, 931, 
	932, 933, 934, 935, 1848, 1519, 1519, 936, 
	938, 939, 940, 941, 1841, 943, 1841, 944, 
	945, 946, 947, 948, 949, 1841, 951, 1841, 
	953, 1841, 954, 955, 996, 1080, 955, 956, 
	957, 977, 978, 988, 958, 969, 958, 959, 
	959, 960, 961, 968, 961, 962, 963, 962, 
	963, 964, 965, 966, 967, 1519, 970, 971, 
	972, 973, 976, 974, 975, 977, 960, 979, 
	980, 979, 981, 982, 983, 984, 987, 985, 
	986, 989, 990, 991, 992, 995, 993, 994, 
	997, 998, 1039, 1040, 1061, 997, 999, 1031, 
	999, 1000, 1018, 1001, 1002, 1001, 1002, 1003, 
	1004, 1010, 1004, 1849, 1005, 1006, 1007, 1008, 
	1009, 1850, 1011, 1012, 1013, 1014, 1017, 1015, 
	1016, 1019, 1020, 1023, 1020, 1021, 1851, 1022, 
	1004, 1849, 1024, 1025, 1026, 1027, 1030, 1028, 
	1029, 1032, 1033, 1034, 1035, 1038, 1036, 1037, 
	1039, 1001, 1002, 1041, 1053, 1041, 1042, 1043, 
	1044, 1045, 1044, 1852, 1046, 1047, 1048, 1049, 
	1052, 1050, 1051, 1054, 1055, 1056, 1057, 1060, 
	1058, 1059, 1062, 1063, 1064, 1065, 1079, 1066, 
	1067, 1068, 1069, 1070, 1071, 1070, 1853, 1022, 
	1072, 1073, 1074, 1075, 1078, 1076, 1077, 1081, 
	1082, 1094, 1082, 1083, 1089, 1083, 1084, 1085, 
	1086, 1087, 1088, 1519, 1090, 1091, 1092, 1093, 
	1095, 1096, 1097, 1098, 1101, 1099, 1100, 1103, 
	1104, 1105, 1106, 1112, 1519, 1519, 1519, 1107, 
	1108, 1109, 1110, 1111, 1519, 1114, 1115, 1116, 
	1117, 1118, 1119, 1120, 1121, 1128, 1121, 1122, 
	1123, 1124, 1124, 1125, 1126, 1127, 1519, 1129, 
	1130, 1131, 1132, 1135, 1133, 1134, 1519, 1137, 
	1146, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 
	1145, 1519, 1519, 1148, 1153, 1149, 1150, 1151, 
	1152, 1519, 1154, 1159, 1155, 1156, 1157, 1856, 
	1158, 1158, 1160, 1161, 1162, 1164, 1519, 1163, 
	1162, 1164, 1163, 1166, 1167, 1519, 1168, 1169, 
	1170, 1171, 1172, 1174, 1519, 1173, 1172, 1174, 
	1173, 1176, 1177, 1178, 1179, 1183, 1180, 1181, 
	1182, 1519, 1185, 1186, 1187, 1188, 1189, 1190, 
	1857, 1519, 1192, 1199, 1193, 1194, 1195, 1196, 
	1197, 1519, 1198, 1200, 1201, 1202, 1203, 1205, 
	1519, 1519, 1208, 1208, 1519, 1210, 1211, 1222, 
	1223, 1224, 1226, 1228, 1231, 1861, 1232, 1212, 
	1213, 1214, 1216, 1218, 1220, 1860, 1215, 1217, 
	1219, 1221, 1225, 1227, 1229, 1230, 1209, 1235, 
	1237, 1239, 1240, 1233, 1234, 1236, 1238, 1241, 
	1862, 1244, 1245, 1246, 1247, 1248, 1862, 1250, 
	1251, 1252, 1253, 1254, 1866, 1256, 1257, 1258, 
	1259, 1260, 1261, 1262, 1263, 1866, 1265, 1266, 
	1267, 1268, 1269, 1270, 1271, 1272, 1870, 1274, 
	1282, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 
	1870, 1283, 1287, 1291, 1295, 1284, 1285, 1286, 
	1870, 1288, 1289, 1290, 1870, 1292, 1293, 1294, 
	1870, 1870, 1297, 1298, 1299, 1870, 1309, 1300, 
	1301, 1300, 1302, 1301, 1302, 1303, 1306, 1308, 
	1304, 1304, 1305, 1299, 1870, 1307, 1307, 1299, 
	1308, 1870, 1310, 1311, 1312, 1313, 1314, 1870, 
	1315, 1316, 1315, 1317, 1316, 1317, 1318, 1321, 
	1323, 1319, 1319, 1320, 1314, 1870, 1322, 1322, 
	1314, 1323, 1870, 1325, 1339, 1350, 1374, 1326, 
	1327, 1328, 1329, 1870, 1330, 1331, 1330, 1332, 
	1331, 1332, 1333, 1336, 1338, 1334, 1334, 1335, 
	1329, 1870, 1337, 1337, 1329, 1338, 1870, 1340, 
	1870, 1341, 1342, 1341, 1343, 1342, 1343, 1344, 
	1347, 1349, 1345, 1345, 1346, 1340, 1870, 1348, 
	1348, 1340, 1349, 1870, 1351, 1870, 1361, 1352, 
	1353, 1352, 1354, 1353, 1354, 1355, 1358, 1360, 
	1356, 1356, 1357, 1351, 1870, 1359, 1359, 1351, 
	1360, 1870, 1362, 1363, 1364, 1870, 1365, 1366, 
	1365, 1367, 1366, 1367, 1368, 1371, 1373, 1369, 
	1369, 1370, 1364, 1870, 1372, 1372, 1364, 1373, 
	1870, 1375, 1870, 1376, 1377, 1376, 1378, 1377, 
	1378, 1379, 1382, 1384, 1380, 1380, 1381, 1375, 
	1870, 1383, 1383, 1375, 1384, 1870, 1386, 1394, 
	1387, 1388, 1389, 1390, 1391, 1392, 1393, 1395, 
	1399, 1403, 1407, 1396, 1397, 1398, 1400, 1401, 
	1402, 1404, 1405, 1406, 1409, 1410, 1411, 1421, 
	1412, 1413, 1412, 1414, 1413, 1414, 1415, 1418, 
	1420, 1416, 1416, 1417, 1411, 1419, 1419, 1411, 
	1420, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 
	1427, 1429, 1428, 1429, 1430, 1433, 1435, 1431, 
	1431, 1432, 1426, 1434, 1434, 1426, 1435, 1437, 
	1451, 1462, 1486, 1438, 1439, 1440, 1441, 1442, 
	1443, 1442, 1444, 1443, 1444, 1445, 1448, 1450, 
	1446, 1446, 1447, 1441, 1449, 1449, 1441, 1450, 
	1452, 1453, 1454, 1453, 1455, 1454, 1455, 1456, 
	1459, 1461, 1457, 1457, 1458, 1452, 1460, 1460, 
	1452, 1461, 1463, 1473, 1464, 1465, 1464, 1466, 
	1465, 1466, 1467, 1470, 1472, 1468, 1468, 1469, 
	1463, 1471, 1471, 1463, 1472, 1474, 1475, 1476, 
	1477, 1478, 1477, 1479, 1478, 1479, 1480, 1483, 
	1485, 1481, 1481, 1482, 1476, 1484, 1484, 1476, 
	1485, 1487, 1488, 1489, 1488, 1490, 1489, 1490, 
	1491, 1494, 1496, 1492, 1492, 1493, 1487, 1495, 
	1495, 1487, 1496, 1497, 1499, 1501, 1504, 1512, 
	1514, 1515, 1497, 1497, 1497, 1497, 1502, 34, 
	44, 59, 68, 76, 84, 1497, 1497, 1497, 
	1497, 1508, 1497, 1497, 1497, 86, 1497, 1513, 
	89, 102, 111, 118, 123, 131, 133, 1516, 
	1516, 1517, 1518, 1516, 143, 154, 156, 161, 
	162, 167, 168, 169, 170, 1519, 1520, 1522, 
	1523, 1524, 1525, 1526, 1519, 1535, 1541, 0, 
	1556, 1574, 1590, 1609, 1627, 1644, 1654, 1669, 
	1704, 1722, 1740, 1796, 1824, 1840, 1854, 1855, 
	1858, 1859, 1519, 1519, 173, 1519, 1528, 243, 
	245, 290, 294, 324, 1519, 1519, 211, 227, 
	1519, 1519, 1519, 1530, 1519, 1519, 1519, 1534, 
	335, 1519, 1541, 406, 459, 1519, 1543, 1519, 
	1543, 1519, 1545, 1519, 1545, 1547, 1547, 1519, 
	1549, 1519, 1549, 1519, 1551, 1519, 1551, 1553, 
	1553, 1550, 1557, 1558, 1559, 1560, 1561, 508, 
	1519, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 
	1570, 1571, 1572, 1575, 1576, 1577, 520, 1519, 
	1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 
	1587, 1588, 1591, 1592, 1593, 1594, 1595, 1596, 
	532, 1519, 1598, 1599, 1600, 1601, 1602, 1603, 
	1604, 1605, 1606, 1607, 1610, 1611, 1612, 1613, 
	544, 1519, 546, 1616, 1519, 1615, 1617, 1618, 
	1619, 1620, 1621, 1622, 1623, 1624, 1625, 1628, 
	1629, 1630, 1631, 557, 1519, 1633, 1634, 1635, 
	1636, 1637, 1638, 1639, 1640, 1641, 1642, 1645, 
	1646, 1647, 569, 1653, 1519, 1655, 1656, 622, 
	1519, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 
	1665, 1666, 1667, 1670, 1675, 1671, 1672, 1673, 
	641, 1519, 1674, 1676, 1690, 1677, 667, 1519, 
	1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 
	1687, 1688, 1691, 679, 1519, 1693, 1694, 1695, 
	1696, 1697, 1698, 1699, 1700, 1701, 1702, 1705, 
	1706, 1707, 1708, 1709, 691, 1519, 1711, 1712, 
	1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 
	1723, 1724, 1725, 1726, 1727, 703, 1519, 1729, 
	1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 
	1738, 1741, 1779, 1742, 715, 1519, 1744, 1745, 
	1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 
	1519, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 
	1763, 1764, 1765, 1519, 1768, 1769, 1770, 1771, 
	1772, 1773, 1774, 1775, 1776, 1777, 1780, 1781, 
	1782, 779, 1519, 781, 1785, 1519, 1784, 1786, 
	1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 
	1797, 1798, 1799, 793, 1519, 1801, 1802, 1803, 
	1804, 1805, 1806, 1807, 1808, 1809, 1810, 1519, 
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 
	1821, 1822, 1825, 1826, 1827, 823, 1519, 1829, 
	1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 
	1838, 848, 849, 886, 888, 915, 928, 929, 
	937, 942, 950, 952, 1519, 1519, 1519, 1519, 
	1102, 1113, 1136, 1147, 1165, 1175, 1184, 1191, 
	1204, 1206, 1207, 1209, 1233, 1234, 1236, 1238, 
	1241, 1210, 1242, 1519, 1862, 1862, 1863, 1864, 
	1865, 1862, 1243, 1249, 1866, 1866, 1867, 1868, 
	1869, 1866, 1255, 1264, 1870, 1871, 1872, 1870, 
	1273, 1296, 1324, 1385, 1408, 1436
};

static const short _dtext_trans_actions[] = {
	269, 25, 0, 271, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 237, 
	0, 0, 0, 0, 0, 0, 0, 233, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 5, 5, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 25, 1, 0, 432, 265, 225, 0, 
	263, 223, 0, 0, 0, 0, 0, 229, 
	1, 1, 1, 518, 0, 345, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 273, 0, 3, 0, 0, 0, 0, 
	0, 0, 25, 267, 231, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 235, 
	3, 522, 5, 0, 7, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 273, 273, 1, 5, 348, 
	0, 7, 0, 0, 0, 227, 3, 3, 
	0, 0, 0, 49, 0, 0, 0, 0, 
	0, 29, 33, 37, 0, 0, 0, 0, 
	41, 27, 0, 31, 35, 0, 0, 0, 
	0, 0, 39, 0, 0, 0, 0, 171, 
	504, 0, 167, 0, 495, 0, 169, 0, 
	165, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 93, 0, 0, 0, 0, 107, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 163, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 83, 0, 0, 
	0, 111, 109, 75, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 5, 5, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	97, 0, 0, 0, 0, 0, 0, 101, 
	1, 0, 288, 0, 0, 0, 0, 0, 
	0, 1, 3, 522, 5, 0, 7, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 273, 
	273, 1, 5, 348, 0, 7, 0, 0, 
	0, 91, 3, 3, 0, 0, 0, 0, 
	3, 0, 762, 804, 5, 0, 153, 435, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 766, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 766, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 766, 0, 0, 
	0, 0, 0, 0, 766, 5, 5, 0, 
	369, 0, 0, 0, 0, 0, 0, 0, 
	0, 5, 5, 5, 5, 5, 5, 5, 
	5, 0, 7, 0, 7, 7, 7, 0, 
	0, 0, 0, 9, 11, 11, 0, 0, 
	11, 11, 0, 0, 13, 393, 393, 0, 
	15, 15, 0, 0, 0, 0, 7, 530, 
	360, 530, 393, 13, 393, 9, 390, 390, 
	0, 0, 390, 0, 0, 0, 0, 15, 
	0, 7, 13, 0, 0, 0, 0, 7, 
	7, 0, 0, 9, 11, 11, 0, 0, 
	0, 0, 0, 7, 13, 363, 7, 363, 
	0, 0, 7, 0, 0, 0, 0, 0, 
	7, 7, 0, 0, 0, 0, 5, 5, 
	5, 5, 5, 5, 5, 0, 7, 7, 
	7, 0, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 7, 7, 9, 387, 9, 
	387, 0, 11, 0, 11, 0, 0, 0, 
	0, 526, 354, 526, 9, 387, 9, 9, 
	9, 9, 9, 9, 387, 0, 357, 357, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	357, 0, 7, 7, 9, 0, 0, 0, 
	0, 7, 9, 7, 9, 9, 9, 9, 
	0, 0, 7, 0, 0, 0, 0, 0, 
	0, 606, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 626, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 590, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	594, 1, 151, 5, 25, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 582, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	492, 0, 0, 25, 492, 0, 0, 0, 
	0, 0, 155, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 492, 
	0, 0, 0, 0, 492, 0, 0, 0, 
	0, 0, 0, 0, 0, 634, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 3, 0, 0, 0, 
	5, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 598, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 578, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 638, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 630, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	614, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	618, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	622, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 586, 1, 149, 
	0, 5, 25, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 602, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 610, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 642, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 3, 0, 0, 0, 
	5, 5, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 658, 0, 0, 0, 0, 
	0, 0, 698, 0, 0, 0, 710, 0, 
	0, 0, 0, 0, 750, 666, 0, 0, 
	0, 0, 742, 0, 674, 0, 0, 0, 
	0, 0, 0, 730, 0, 0, 0, 758, 
	754, 690, 682, 0, 654, 714, 0, 0, 
	0, 0, 0, 0, 694, 0, 0, 0, 
	3, 0, 718, 0, 0, 1, 0, 432, 
	159, 89, 0, 3, 1, 0, 0, 722, 
	157, 87, 0, 0, 0, 3, 0, 702, 
	1, 1, 1, 774, 0, 285, 510, 1, 
	276, 794, 0, 3, 706, 0, 1, 0, 
	0, 0, 0, 0, 3, 0, 746, 1, 
	1, 1, 779, 0, 291, 514, 1, 276, 
	799, 0, 3, 0, 1, 662, 0, 0, 
	0, 0, 0, 0, 734, 161, 99, 0, 
	0, 0, 0, 0, 738, 0, 670, 0, 
	0, 0, 0, 0, 0, 726, 0, 686, 
	0, 678, 0, 3, 0, 3, 0, 0, 
	0, 5, 0, 5, 5, 5, 0, 7, 
	0, 0, 1, 1, 0, 3, 3, 0, 
	0, 0, 0, 0, 0, 51, 0, 0, 
	0, 0, 0, 0, 0, 0, 7, 5, 
	5, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 0, 5, 0, 5, 0, 5, 5, 
	0, 7, 3, 3, 3, 0, 0, 1, 
	5, 5, 0, 770, 3, 0, 0, 0, 
	0, 489, 0, 0, 0, 0, 0, 0, 
	0, 0, 5, 5, 0, 7, 770, 0, 
	1, 789, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 351, 351, 5, 5, 0, 3, 0, 
	5, 5, 0, 770, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 0, 5, 5, 0, 770, 7, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 3, 3, 0, 0, 0, 
	0, 0, 0, 55, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 59, 63, 67, 0, 
	0, 0, 0, 0, 71, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 3, 
	0, 5, 0, 7, 0, 0, 53, 0, 
	0, 0, 0, 0, 0, 0, 57, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 103, 85, 0, 0, 0, 0, 0, 
	0, 77, 0, 0, 0, 0, 0, 25, 
	1, 0, 0, 0, 0, 0, 81, 1, 
	1, 1, 0, 0, 0, 61, 0, 0, 
	0, 0, 0, 0, 105, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 279, 0, 0, 0, 0, 0, 0, 
	25, 65, 0, 0, 0, 0, 0, 0, 
	0, 95, 0, 0, 0, 0, 0, 0, 
	73, 69, 1, 0, 282, 0, 0, 0, 
	0, 0, 0, 0, 0, 650, 0, 0, 
	0, 0, 0, 0, 0, 650, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	181, 0, 0, 0, 0, 0, 173, 0, 
	0, 0, 0, 0, 191, 0, 0, 0, 
	0, 0, 0, 0, 0, 183, 0, 0, 
	0, 0, 0, 0, 0, 0, 221, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	195, 0, 0, 0, 0, 0, 0, 0, 
	215, 0, 0, 0, 205, 0, 0, 0, 
	201, 211, 0, 0, 0, 197, 0, 1, 
	3, 0, 3, 0, 0, 0, 0, 5, 
	5, 0, 7, 19, 411, 5, 0, 366, 
	0, 538, 0, 0, 0, 0, 0, 193, 
	1, 3, 0, 3, 0, 0, 0, 0, 
	5, 5, 0, 7, 19, 408, 5, 0, 
	366, 0, 534, 0, 0, 0, 0, 0, 
	0, 0, 0, 203, 1, 3, 0, 3, 
	0, 0, 0, 0, 5, 5, 0, 7, 
	19, 417, 5, 0, 366, 0, 546, 0, 
	213, 1, 3, 0, 3, 0, 0, 0, 
	0, 5, 5, 0, 7, 19, 426, 5, 
	0, 366, 0, 558, 0, 207, 0, 1, 
	3, 0, 3, 0, 0, 0, 0, 5, 
	5, 0, 7, 19, 420, 5, 0, 366, 
	0, 550, 0, 0, 0, 199, 1, 3, 
	0, 3, 0, 0, 0, 0, 5, 5, 
	0, 7, 19, 414, 5, 0, 366, 0, 
	542, 0, 209, 1, 3, 0, 3, 0, 
	0, 0, 0, 5, 5, 0, 7, 19, 
	423, 5, 0, 366, 0, 554, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 3, 0, 3, 0, 0, 0, 0, 
	5, 5, 0, 7, 19, 5, 0, 366, 
	0, 0, 0, 0, 0, 0, 1, 3, 
	0, 3, 0, 0, 0, 0, 5, 5, 
	0, 7, 19, 5, 0, 366, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	3, 0, 3, 0, 0, 0, 0, 5, 
	5, 0, 7, 19, 5, 0, 366, 0, 
	0, 1, 3, 0, 3, 0, 0, 0, 
	0, 5, 5, 0, 7, 19, 5, 0, 
	366, 0, 0, 0, 1, 3, 0, 3, 
	0, 0, 0, 0, 5, 5, 0, 7, 
	19, 5, 0, 366, 0, 0, 0, 0, 
	1, 3, 0, 3, 0, 0, 0, 0, 
	5, 5, 0, 7, 19, 5, 0, 366, 
	0, 0, 1, 3, 0, 3, 0, 0, 
	0, 0, 5, 5, 0, 7, 19, 5, 
	0, 366, 0, 239, 25, 429, 25, 25, 
	25, 25, 259, 261, 257, 384, 0, 0, 
	0, 0, 0, 0, 0, 243, 249, 247, 
	253, 0, 251, 255, 245, 1, 241, 0, 
	0, 0, 0, 0, 0, 0, 0, 45, 
	43, 25, 25, 47, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 115, 0, 507, 
	507, 501, 507, 498, 113, 507, 646, 0, 
	646, 646, 646, 646, 646, 646, 646, 646, 
	646, 646, 646, 646, 646, 784, 784, 507, 
	507, 507, 147, 145, 0, 143, 495, 1, 
	0, 0, 0, 0, 139, 141, 0, 0, 
	125, 79, 381, 0, 135, 137, 133, 0, 
	1, 117, 504, 3, 3, 570, 17, 402, 
	0, 574, 17, 405, 0, 17, 0, 566, 
	13, 399, 0, 562, 13, 396, 0, 13, 
	0, 393, 504, 504, 504, 504, 504, 0, 
	315, 459, 459, 459, 459, 459, 459, 459, 
	459, 0, 0, 504, 504, 504, 0, 330, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	0, 0, 504, 504, 504, 504, 504, 504, 
	0, 303, 447, 447, 447, 447, 447, 447, 
	447, 447, 0, 0, 504, 504, 504, 504, 
	0, 306, 3, 450, 372, 0, 450, 450, 
	450, 450, 450, 450, 450, 25, 25, 504, 
	504, 504, 504, 0, 297, 441, 441, 441, 
	441, 441, 441, 441, 441, 0, 0, 504, 
	504, 504, 0, 504, 121, 504, 504, 0, 
	336, 480, 480, 480, 480, 480, 480, 480, 
	480, 0, 0, 504, 504, 504, 504, 504, 
	0, 378, 0, 504, 504, 504, 0, 309, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	0, 0, 504, 0, 294, 438, 438, 438, 
	438, 438, 438, 438, 438, 0, 0, 504, 
	504, 504, 504, 504, 0, 339, 483, 483, 
	483, 483, 483, 483, 483, 483, 0, 0, 
	504, 504, 504, 504, 504, 0, 333, 477, 
	477, 477, 477, 477, 477, 477, 477, 0, 
	0, 504, 504, 504, 0, 321, 465, 465, 
	465, 465, 465, 465, 465, 465, 0, 0, 
	324, 468, 468, 468, 468, 468, 468, 468, 
	468, 0, 0, 327, 471, 471, 471, 471, 
	471, 471, 471, 471, 0, 0, 504, 504, 
	504, 0, 300, 3, 444, 375, 0, 444, 
	444, 444, 444, 444, 444, 444, 25, 25, 
	504, 504, 504, 0, 312, 456, 456, 456, 
	456, 456, 456, 456, 456, 0, 0, 318, 
	462, 462, 462, 462, 462, 462, 462, 462, 
	0, 0, 504, 504, 504, 0, 342, 486, 
	486, 486, 486, 486, 486, 486, 486, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 129, 127, 131, 119, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 123, 177, 175, 25, 25, 
	25, 179, 0, 0, 187, 185, 25, 25, 
	25, 189, 0, 0, 217, 25, 25, 219, 
	0, 0, 0, 0, 0, 0
};

static const short _dtext_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 21, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 21, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 21, 0, 
	0, 0, 21, 0, 0, 0, 21, 0, 
	0
};

static const short _dtext_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 23, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 23, 0, 0, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 23, 0, 0, 0, 23, 0, 
	0
};

static const short _dtext_eof_trans[] = {
	0, 1, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 62, 65, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 100, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 208, 208, 211, 208, 215, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 256, 256, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 256, 256, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 217, 217, 217, 217, 217, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 217, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 217, 208, 208, 208, 
	208, 208, 208, 208, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 215, 
	215, 215, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 211, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 211, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 211, 211, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 211, 
	211, 211, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 211, 211, 211, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 211, 
	211, 211, 699, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 211, 211, 211, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 211, 211, 
	211, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 211, 211, 211, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 211, 211, 
	211, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 211, 211, 211, 952, 952, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	211, 211, 211, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 211, 211, 
	211, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 211, 215, 215, 215, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 1097, 215, 215, 215, 
	1105, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	1158, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 215, 215, 215, 215, 215, 215, 215, 
	215, 208, 215, 208, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 1521, 1521, 1521, 1521, 1521, 
	1521, 1521, 1521, 1521, 1521, 1521, 1521, 1533, 
	1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 
	1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 
	1533, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 
	1551, 0, 1915, 1916, 1917, 1916, 1918, 1918, 
	1916, 1926, 1927, 1928, 1929, 1931, 1932, 1933, 
	1916, 1935, 1916, 1916, 0, 1948, 1948, 0, 
	1987, 1988, 1987, 1987, 208, 1987, 1990, 1997, 
	1998, 2001, 2003, 2003, 2005, 2006, 2007, 1987, 
	2010, 2010, 2010, 2010, 2010, 1988, 2014, 2016, 
	2018, 2020, 2014, 2016, 2024, 2026, 2028, 2030, 
	2028, 2030, 2028, 2028, 1988, 1988, 1988, 1988, 
	1988, 1988, 2041, 2041, 2041, 2041, 2041, 2041, 
	2041, 2041, 2041, 2041, 2041, 2041, 1988, 1988, 
	1988, 1988, 2056, 2056, 2056, 2056, 2056, 2056, 
	2056, 2056, 2056, 2056, 2056, 2056, 1988, 1988, 
	1988, 1988, 1988, 1988, 1988, 2074, 2074, 2074, 
	2074, 2074, 2074, 2074, 2074, 2074, 2074, 2074, 
	2074, 1988, 1988, 1988, 1988, 1988, 2090, 2093, 
	2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 
	2090, 2090, 2090, 1988, 1988, 1988, 1988, 1988, 
	2109, 2109, 2109, 2109, 2109, 2109, 2109, 2109, 
	2109, 2109, 2109, 2109, 1988, 1988, 1988, 1988, 
	2125, 2125, 2125, 2125, 2125, 1988, 1988, 1988, 
	1988, 2129, 2129, 2129, 2129, 2129, 2129, 2129, 
	2129, 2129, 2129, 2129, 2129, 1988, 1988, 1988, 
	1988, 1988, 2146, 1988, 1988, 1988, 2152, 2152, 
	2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152, 
	2152, 2152, 1988, 1988, 2165, 2165, 2165, 2165, 
	2165, 2165, 2165, 2165, 2165, 2165, 2165, 2165, 
	1988, 1988, 1988, 1988, 1988, 1988, 2182, 2182, 
	2182, 2182, 2182, 2182, 2182, 2182, 2182, 2182, 
	2182, 2182, 1988, 1988, 1988, 1988, 1988, 1988, 
	2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 
	2199, 2199, 2199, 2199, 1988, 1988, 1988, 2214, 
	2214, 2214, 2214, 2214, 2214, 2214, 2214, 2214, 
	2214, 2214, 2214, 2225, 2225, 2225, 2225, 2225, 
	2225, 2225, 2225, 2225, 2225, 2225, 2225, 2236, 
	2236, 2236, 2236, 2236, 2236, 2236, 2236, 2236, 
	2236, 2236, 2236, 1988, 1988, 1988, 1988, 2251, 
	2254, 2251, 2251, 2251, 2251, 2251, 2251, 2251, 
	2251, 2251, 2251, 2251, 1988, 1988, 1988, 1988, 
	2269, 2269, 2269, 2269, 2269, 2269, 2269, 2269, 
	2269, 2269, 2269, 2269, 2280, 2280, 2280, 2280, 
	2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280, 
	1988, 1988, 1988, 1988, 2295, 2295, 2295, 2295, 
	2295, 2295, 2295, 2295, 2295, 2295, 2295, 2295, 
	1987, 208, 2001, 2006, 2005, 2317, 2317, 2318, 
	2319, 2320, 2320, 2320, 2320, 2320, 1987, 1987, 
	2318, 2319, 1987, 1987, 2340, 2340, 0, 2346, 
	2346, 2346, 0, 2354, 2354, 2354, 0, 2360, 
	2360
};

static const int dtext_start = 1497;
static const int dtext_first_final = 1497;
static const int dtext_error = 0;

static const int dtext_en_basic_inline = 1516;
static const int dtext_en_inline = 1519;
static const int dtext_en_code = 1862;
static const int dtext_en_nodtext = 1866;
static const int dtext_en_table = 1870;
static const int dtext_en_main = 1497;


#line 788 "ext/dtext/dtext.cpp.rl"

static void dstack_push(StateMachine * sm, element_t element) {
  sm->dstack.push_back(element);
}

static element_t dstack_pop(StateMachine * sm) {
  if (sm->dstack.empty()) {
    g_debug("dstack pop empty stack");
    return DSTACK_EMPTY;
  } else {
    auto element = sm->dstack.back();
    sm->dstack.pop_back();
    return element;
  }
}

static element_t dstack_peek(const StateMachine * sm) {
  return sm->dstack.empty() ? DSTACK_EMPTY : sm->dstack.back();
}

static bool dstack_check(const StateMachine * sm, element_t expected_element) {
  return dstack_peek(sm) == expected_element;
}

// Return true if the given tag is currently open.
static bool dstack_is_open(const StateMachine * sm, element_t element) {
  return std::find(sm->dstack.begin(), sm->dstack.end(), element) != sm->dstack.end();
}

static int dstack_count(const StateMachine * sm, element_t element) {
  return std::count(sm->dstack.begin(), sm->dstack.end(), element);
}

static bool is_internal_url(StateMachine * sm, const std::string_view url) {
  if (url.starts_with("/")) {
    return true;
  } else if (sm->options.domain.empty() || url.empty()) {
    return false;
  } else {
    // Matches the domain name part of a URL.
    static const std::regex url_regex("^https?://(?:[^/?#]*@)?([^/?#:]+)", std::regex_constants::icase);

    std::match_results<std::string_view::const_iterator> matches;
    std::regex_search(url.begin(), url.end(), matches, url_regex);
    return matches[1] == sm->options.domain;
  }
}

static void append(StateMachine * sm, const auto c) {
  sm->output += c;
}

static void append(StateMachine * sm, const char * a, const char * b) {
  append(sm, std::string_view(a, b));
}

static void append_html_escaped(StateMachine * sm, char s) {
  switch (s) {
    case '<': append(sm, "&lt;"); break;
    case '>': append(sm, "&gt;"); break;
    case '&': append(sm, "&amp;"); break;
    case '"': append(sm, "&quot;"); break;
    default:  append(sm, s);
  }
}

static void append_html_escaped(StateMachine * sm, const std::string_view string) {
  for (const unsigned char c : string) {
    append_html_escaped(sm, c);
  }
}

static void append_uri_escaped(StateMachine * sm, const std::string_view string) {
  static const char hex[] = "0123456789ABCDEF";

  for (const unsigned char c : string) {
    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '-' || c == '_' || c == '.' || c == '~') {
      append(sm, c);
    } else {
      append(sm, '%');
      append(sm, hex[c >> 4]);
      append(sm, hex[c & 0x0F]);
    }
  }
}

static void append_relative_url(StateMachine * sm, const auto url) {
  if ((url[0] == '/' || url[0] == '#') && !sm->options.base_url.empty()) {
    append_html_escaped(sm, sm->options.base_url);
  }

  append_html_escaped(sm, url);
}

static void append_absolute_link(StateMachine * sm, const std::string_view url, const std::string_view title, bool internal_url, bool escape_title) {
  if (internal_url) {
    append(sm, "<a class=\"dtext-link\" href=\"");
  } else if (url == title) {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-external-link\" href=\"");
  } else {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-external-link dtext-named-external-link\" href=\"");
  }

  append_html_escaped(sm, url);
  append(sm, "\">");

  if (escape_title) {
    append_html_escaped(sm, title);
  } else {
    append(sm, title);
  }

  append(sm, "</a>");
}

static void append_mention(StateMachine * sm, const std::string_view name) {
  append(sm, "<a class=\"dtext-link dtext-user-mention-link\" data-user-name=\"");
  append_html_escaped(sm, name);
  append(sm, "\" href=\"");
  append_relative_url(sm, "/users?name=");
  append_uri_escaped(sm, name);
  append(sm, "\">@");
  append_html_escaped(sm, name);
  append(sm, "</a>");
}

static void append_id_link(StateMachine * sm, const char * title, const char * id_name, const char * url, const std::string_view id) {
  if (url[0] == '/') {
    append(sm, "<a class=\"dtext-link dtext-id-link dtext-");
    append(sm, id_name);
    append(sm, "-id-link\" href=\"");
    append_relative_url(sm, url);
  } else {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-id-link dtext-");
    append(sm, id_name);
    append(sm, "-id-link\" href=\"");
    append_html_escaped(sm, url);
  }

  append_uri_escaped(sm, id);
  append(sm, "\">");
  append(sm, title);
  append(sm, " #");
  append_html_escaped(sm, id);
  append(sm, "</a>");
}

static void append_bare_unnamed_url(StateMachine * sm, const std::string_view url) {
  auto [trimmed_url, leftovers] = trim_url(url);
  append_unnamed_url(sm, trimmed_url);
  append_html_escaped(sm, leftovers);
}

static void append_unnamed_url(StateMachine * sm, const std::string_view url) {
  DText::URL parsed_url(url);

  if (sm->options.internal_domains.find(std::string(parsed_url.domain)) != sm->options.internal_domains.end()) {
    append_internal_url(sm, parsed_url);
  } else {
    append_absolute_link(sm, url, url, parsed_url.domain == sm->options.domain);
  }
}

static void append_internal_url(StateMachine * sm, const DText::URL& url) {
  auto path_components = url.path_components();
  auto query = url.query;
  auto fragment = url.fragment;

  if (path_components.size() == 2) {
    auto controller = path_components.at(0);
    auto id = path_components.at(1);

    if (!id.empty() && std::all_of(id.begin(), id.end(), ::isdigit)) {
      if (controller == "post" && fragment.empty()) {
        // https://danbooru.donmai.us/posts/6000000#comment_2288996
        return append_id_link(sm, "post", "post", "/posts/", id);
      } else if (controller == "pool" && query.empty()) {
        // https://danbooru.donmai.us/pools/903?page=2
        return append_id_link(sm, "pool", "pool", "/pools/", id);
      } else if (controller == "comment") {
        return append_id_link(sm, "comment", "comment", "/comments/", id);
      } else if (controller == "forum") {
        return append_id_link(sm, "forum", "forum-post", "/forums/", id);
      } else if (controller == "forum" && query.empty() && fragment.empty()) {
        // https://danbooru.donmai.us/forum_topics/1234?page=2
        // https://danbooru.donmai.us/forum_topics/1234#forum_post_5678
        return append_id_link(sm, "topic", "forum-topic", "/forums/", id);
      } else if (controller == "user") {
        return append_id_link(sm, "user", "user", "/users/", id);
      } else if (controller == "artist") {
        return append_id_link(sm, "artist", "artist", "/artists/", id);
      } else if (controller == "wiki" && fragment.empty()) {
        // http://danbooru.donmai.us/wiki_pages/10933#dtext-self-upload
        return append_id_link(sm, "wiki", "wiki-page", "/wiki/", id);
      }
    } else if (controller == "wiki" && fragment.empty()) {
      return append_wiki_link(sm, {}, id, {}, id, {});
    }
  } else if (path_components.size() >= 3) {
    // http://danbooru.donmai.us/post/show/1234/touhou
    auto controller = path_components.at(0);
    auto action = path_components.at(1);
    auto id = path_components.at(2);

    if (!id.empty() && std::all_of(id.begin(), id.end(), ::isdigit)) {
      if (controller == "post" && action == "show") {
        return append_id_link(sm, "post", "post", "/posts/", id);
      }
    }
  }

  append_absolute_link(sm, url.url, url.url, url.domain == sm->options.domain);
}

static void append_named_url(StateMachine * sm, const std::string_view url, const std::string_view title) {
  auto parsed_title = sm->parse_basic_inline(title);

  // protocol-relative url; treat `//example.com` like `http://example.com`
  if (url.size() > 2 && url.starts_with("//")) {
    auto full_url = "http:" + std::string(url);
    append_absolute_link(sm, full_url, parsed_title, is_internal_url(sm, full_url), false);
  } else if (url[0] == '/' || url[0] == '#') {
    append(sm, "<a class=\"dtext-link\" href=\"");
    append_relative_url(sm, url);
    append(sm, "\">");
    append(sm, parsed_title);
    append(sm, "</a>");
  } else if (url == title) {
    append_unnamed_url(sm, url);
  } else {
    append_absolute_link(sm, url, parsed_title, is_internal_url(sm, url), false);
  }
}

static void append_bare_named_url(StateMachine * sm, const std::string_view url, std::string_view title) {
  auto [trimmed_url, leftovers] = trim_url(url);
  append_named_url(sm, trimmed_url, title);
  append_html_escaped(sm, leftovers);
}

static void append_post_search_link(StateMachine * sm, const std::string_view prefix, const std::string_view search, const std::string_view title, const std::string_view suffix) {
  auto normalized_title = std::string(title);

  append(sm, "<a class=\"dtext-link dtext-post-search-link\" href=\"");
  append_relative_url(sm, "/post?tags=");
  append_uri_escaped(sm, search);
  append(sm, "\">");

  // 19{{60s}} -> {{60s|1960s}}
  if (!prefix.empty()) {
    normalized_title.insert(0, prefix);
  }

  // {{pokemon_(creature)|}} -> {{pokemon_(creature)|pokemon}}
  if (title.empty()) {
    std::regex_replace(std::back_inserter(normalized_title), search.begin(), search.end(), tag_qualifier_regex, "");
  }

  // {{cat}}s -> {{cat|cats}}
  if (!suffix.empty()) {
    normalized_title.append(suffix);
  }

  append_html_escaped(sm, normalized_title);
  append(sm, "</a>");

  clear_matches(sm);
}

static void append_wiki_link(StateMachine * sm, const std::string_view prefix, const std::string_view tag, const std::string_view anchor, const std::string_view title, const std::string_view suffix) {
  auto normalized_tag = std::string(tag);
  auto title_string = std::string(title);

  // "Kantai Collection" -> "kantai_collection"
  std::transform(normalized_tag.cbegin(), normalized_tag.cend(), normalized_tag.begin(), [](unsigned char c) { return c == ' ' ? '_' : std::tolower(c); });

  // [[2019]] -> [[~2019]]
  if (std::all_of(normalized_tag.cbegin(), normalized_tag.cend(), ::isdigit)) {
    normalized_tag.insert(0, "~");
  }

  // Pipe trick: [[Kaga (Kantai Collection)|]] -> [[kaga_(kantai_collection)|Kaga]]
  if (title_string.empty()) {
    std::regex_replace(std::back_inserter(title_string), tag.cbegin(), tag.cend(), tag_qualifier_regex, "");
  }

  // 19[[60s]] -> [[60s|1960s]]
  if (!prefix.empty()) {
    title_string.insert(0, prefix);
  }

  // [[cat]]s -> [[cat|cats]]
  if (!suffix.empty()) {
    title_string.append(suffix);
  }

  append(sm, "<a class=\"dtext-link dtext-wiki-link\" href=\"");
  append_relative_url(sm, "/wiki/");
  append_uri_escaped(sm, normalized_tag);

  if (!anchor.empty()) {
    std::string normalized_anchor(anchor);
    std::transform(normalized_anchor.begin(), normalized_anchor.end(), normalized_anchor.begin(), [](char c) { return isalnum(c) ? tolower(c) : '-'; });
    append_html_escaped(sm, "#dtext-");
    append_html_escaped(sm, normalized_anchor);
  }

  append(sm, "\">");
  append_html_escaped(sm, title_string);
  append(sm, "</a>");

  sm->wiki_pages.insert(std::string(tag));

  clear_matches(sm);
}

static void append_paged_link(StateMachine * sm, const char * title, const char * tag, const char * href, const char * param) {
  append(sm, tag);
  append_relative_url(sm, href);
  append(sm, sm->a1, sm->a2);
  append(sm, param);
  append(sm, sm->b1, sm->b2);
  append(sm, "\">");
  append(sm, title);
  append(sm, sm->a1, sm->a2);
  append(sm, "/p");
  append(sm, sm->b1, sm->b2);
  append(sm, "</a>");
}

static void append_dmail_key_link(StateMachine * sm) {
  append(sm, "<a class=\"dtext-link dtext-id-link dtext-dmail-id-link\" href=\"");
  append_relative_url(sm, "/dmails/");
  append(sm, sm->a1, sm->a2);
  append(sm, "?key=");
  append_uri_escaped(sm, { sm->b1, sm->b2 });
  append(sm, "\">");
  append(sm, "dmail #");
  append(sm, sm->a1, sm->a2);
  append(sm, "</a>");
}

static void append_code_fence(StateMachine * sm, const std::string_view code, const std::string_view language) {
  if (language.empty()) {
    append_block(sm, "<pre>");
    append_html_escaped(sm, code);
    append_block(sm, "</pre>");
  } else {
    append_block(sm, "<pre class=\"language-");
    append_html_escaped(sm, language);
    append_block(sm, "\">");
    append_html_escaped(sm, code);
    append_block(sm, "</pre>");
  }
}

static void append_inline_code(StateMachine * sm, const std::string_view language = {}) {
  if (language.empty()) {
    dstack_open_element(sm, INLINE_CODE, "<code>");
  } else {
    dstack_open_element(sm, INLINE_CODE, "<code class=\"language-");
    append_html_escaped(sm, language);
    append(sm, "\">");
  }
}

static void append_block_code(StateMachine * sm, const std::string_view language = {}) {
  dstack_close_leaf_blocks(sm);

  if (language.empty()) {
    dstack_open_element(sm, BLOCK_CODE, "<pre>");
  } else {
    dstack_open_element(sm, BLOCK_CODE, "<pre class=\"language-");
    append_html_escaped(sm, language);
    append(sm, "\">");
  }
}

static void append_header(StateMachine * sm, char header, const std::string_view id) {
  static element_t blocks[] = { BLOCK_H1, BLOCK_H2, BLOCK_H3, BLOCK_H4, BLOCK_H5, BLOCK_H6 };
  element_t block = blocks[header - '1'];

  if (id.empty()) {
    dstack_open_element(sm, block, "<h");
    append_block(sm, header);
    append_block(sm, ">");
  } else {
    auto normalized_id = std::string(id);
    std::transform(id.begin(), id.end(), normalized_id.begin(), [](char c) { return isalnum(c) ? tolower(c) : '-'; });

    dstack_open_element(sm, block, "<h");
    append_block(sm, header);
    append_block(sm, " id=\"dtext-");
    append_block(sm, normalized_id);
    append_block(sm, "\">");
  }

  sm->header_mode = true;
}

static void append_block(StateMachine * sm, const auto s) {
  if (!sm->options.f_inline) {
    append(sm, s);
  }
}

static void append_block_html_escaped(StateMachine * sm, const std::string_view string) {
  if (!sm->options.f_inline) {
    append_html_escaped(sm, string);
  }
}

static void append_closing_p(StateMachine * sm) {
  g_debug("append closing p");

  if (sm->output.size() > 4 && sm->output.ends_with("<br>")) {
    g_debug("trim last <br>");
    sm->output.resize(sm->output.size() - 4);
  }

  if (sm->output.size() > 3 && sm->output.ends_with("<p>")) {
    g_debug("trim last <p>");
    sm->output.resize(sm->output.size() - 3);
    return;
  }

  append_block(sm, "</p>");
}

static void dstack_open_element(StateMachine * sm, element_t type, const char * html) {
  g_debug("opening %s", html);

  dstack_push(sm, type);

  if (type >= INLINE) {
    append(sm, html);
  } else {
    append_block(sm, html);
  }
}

static void dstack_open_element(StateMachine * sm, element_t type, std::string_view tag_name, const StateMachine::TagAttributes& tag_attributes) {
  dstack_push(sm, type);
  append_block(sm, "<");
  append_block(sm, tag_name);

  auto& permitted_names = permitted_attribute_names.at(tag_name);
  for (auto& [name, value] : tag_attributes) {
    if (permitted_names.find(name) != permitted_names.end()) {
      auto validate_value = permitted_attribute_values.at(name);

      if (validate_value(value)) {
        append_block(sm, " ");
        append_block_html_escaped(sm, name);
        append_block(sm, "=\"");
        append_block_html_escaped(sm, value);
        append_block(sm, "\"");
      }
    }
  }

  append_block(sm, ">");
  clear_tag_attributes(sm);
}

static bool dstack_close_element(StateMachine * sm, element_t type) {
  if (dstack_check(sm, type)) {
    dstack_rewind(sm);
    return true;
  } else if (type >= INLINE && dstack_peek(sm) >= INLINE) {
    g_debug("out-of-order close %s; closing %s instead", element_names[type], element_names[dstack_peek(sm)]);
    dstack_rewind(sm);
    return true;
  } else if (type >= INLINE) {
    g_debug("out-of-order closing %s", element_names[type]);
    append_html_escaped(sm, { sm->ts, sm->te });
    return false;
  } else {
    g_debug("out-of-order closing %s", element_names[type]);
    append_block_html_escaped(sm, { sm->ts, sm->te });
    return false;
  }
}

// Close the last open tag.
static void dstack_rewind(StateMachine * sm) {
  element_t element = dstack_pop(sm);
  g_debug("dstack rewind %s", element_names[element]);

  switch(element) {
    case BLOCK_P: append_closing_p(sm); break;
    case INLINE_SPOILER: append(sm, "</span>"); break;
    case BLOCK_SPOILER: append_block(sm, "</div>"); break;
    case BLOCK_QUOTE: append_block(sm, "</blockquote>"); break;
    case BLOCK_EXPAND: append_block(sm, "</div></details>"); break;
    case BLOCK_NODTEXT: append_block(sm, "</p>"); break;
    case BLOCK_CODE: append_block(sm, "</pre>"); break;
    case BLOCK_TD: append_block(sm, "</td>"); break;
    case BLOCK_TH: append_block(sm, "</th>"); break;

    case INLINE_NODTEXT: break;
    case INLINE_B: append(sm, "</strong>"); break;
    case INLINE_I: append(sm, "</em>"); break;
    case INLINE_U: append(sm, "</u>"); break;
    case INLINE_S: append(sm, "</s>"); break;
    case INLINE_TN: append(sm, "</span>"); break;
    case INLINE_CENTER: append(sm, "</div>"); break;
    case INLINE_COLOR: append(sm, "</span>"); break;
    case INLINE_CODE: append(sm, "</code>"); break;

    case BLOCK_TN: append_closing_p(sm); break;
    case BLOCK_CENTER: append_closing_p(sm); break;
    case BLOCK_COLOR: append_closing_p(sm); break;
    case BLOCK_TABLE: append_block(sm, "</table>"); break;
    case BLOCK_COLGROUP: append_block(sm, "</colgroup>"); break;
    case BLOCK_THEAD: append_block(sm, "</thead>"); break;
    case BLOCK_TBODY: append_block(sm, "</tbody>"); break;
    case BLOCK_TR: append_block(sm, "</tr>"); break;
    case BLOCK_UL: append_block(sm, "</ul>"); break;
    case BLOCK_LI: append_block(sm, "</li>"); break;
    case BLOCK_H6: append_block(sm, "</h6>"); sm->header_mode = false; break;
    case BLOCK_H5: append_block(sm, "</h5>"); sm->header_mode = false; break;
    case BLOCK_H4: append_block(sm, "</h4>"); sm->header_mode = false; break;
    case BLOCK_H3: append_block(sm, "</h3>"); sm->header_mode = false; break;
    case BLOCK_H2: append_block(sm, "</h2>"); sm->header_mode = false; break;
    case BLOCK_H1: append_block(sm, "</h1>"); sm->header_mode = false; break;

    // Should never happen.
    case INLINE: break;
    case DSTACK_EMPTY: break;
  } 
}

// container blocks: [spoiler], [quote], [expand], [tn], [center], [color]
// leaf blocks: [nodtext], [code], [table], [td]?, [th]?, <h1>, <p>, <li>, <ul>
static void dstack_close_leaf_blocks(StateMachine * sm) {
  g_debug("dstack close leaf blocks");

  while (!sm->dstack.empty() && !dstack_check(sm, BLOCK_QUOTE) && !dstack_check(sm, BLOCK_SPOILER) && !dstack_check(sm, BLOCK_EXPAND) && !dstack_check(sm, BLOCK_TN) && !dstack_check(sm, BLOCK_CENTER) && !dstack_check(sm, BLOCK_COLOR)) {
    dstack_rewind(sm);
  }
}

// Close all open tags up to and including the given tag.
static void dstack_close_until(StateMachine * sm, element_t element) {
  while (!sm->dstack.empty() && !dstack_check(sm, element)) {
    dstack_rewind(sm);
  }

  dstack_rewind(sm);
}

// Close all remaining open tags.
static void dstack_close_all(StateMachine * sm) {
  while (!sm->dstack.empty()) {
    dstack_rewind(sm);
  }
}

static void dstack_open_list(StateMachine * sm, int depth) {
  g_debug("open list");

  if (dstack_is_open(sm, BLOCK_LI)) {
    dstack_close_until(sm, BLOCK_LI);
  } else {
    dstack_close_leaf_blocks(sm);
  }

  while (dstack_count(sm, BLOCK_UL) < depth) {
    dstack_open_element(sm, BLOCK_UL, "<ul>");
  }

  while (dstack_count(sm, BLOCK_UL) > depth) {
    dstack_close_until(sm, BLOCK_UL);
  }

  dstack_open_element(sm, BLOCK_LI, "<li>");
}

static void dstack_close_list(StateMachine * sm) {
  while (dstack_is_open(sm, BLOCK_UL)) {
    dstack_close_until(sm, BLOCK_UL);
  }
}

static void save_tag_attribute(StateMachine * sm, const std::string_view name, const std::string_view value) {
  sm->tag_attributes[name] = value;
}

static void clear_tag_attributes(StateMachine * sm) {
  sm->tag_attributes.clear();
}

static void clear_matches(StateMachine * sm) {
  sm->a1 = NULL;
  sm->a2 = NULL;
  sm->b1 = NULL;
  sm->b2 = NULL;
  sm->c1 = NULL;
  sm->c2 = NULL;
  sm->d1 = NULL;
  sm->d2 = NULL;
  sm->e1 = NULL;
  sm->e2 = NULL;
}

// True if a mention is allowed to start after this character.
static bool is_mention_boundary(unsigned char c) {
  switch (c) {
    case '\0': return true;
    case '\r': return true;
    case '\n': return true;
    case ' ':  return true;
    case '/':  return true;
    case '"':  return true;
    case '\'': return true;
    case '(':  return true;
    case ')':  return true;
    case '[':  return true;
    case ']':  return true;
    case '{':  return true;
    case '}':  return true;
    default:   return false;
  }
}

// Trim trailing unbalanced ')' characters from the URL.
static std::tuple<std::string_view, std::string_view> trim_url(const std::string_view url) {
  std::string_view trimmed = url;

  while (!trimmed.empty() && trimmed.back() == ')' && std::count(trimmed.begin(), trimmed.end(), ')') > std::count(trimmed.begin(), trimmed.end(), '(')) {
    trimmed.remove_suffix(1);
  }

  return { trimmed, { trimmed.end(), url.end() } };
}

// Replace CRLF sequences with LF.
static void replace_newlines(const std::string_view input, std::string& output) {
  size_t pos, last = 0;

  while (std::string::npos != (pos = input.find("\r\n", last))) {
    output.append(input, last, pos - last);
    output.append("\n");
    last = pos + 2;
  }

  output.append(input, last, pos - last);
}

StateMachine::StateMachine(const auto string, int initial_state, const DTextOptions options) : options(options) {
  // Add null bytes to the beginning and end of the string as start and end of string markers.
  input.reserve(string.size());
  input.append(1, '\0');
  replace_newlines(string, input);
  input.append(1, '\0');

  output.reserve(string.size() * 1.5);
  stack.reserve(16);
  dstack.reserve(16);

  p = input.c_str();
  pb = input.c_str();
  pe = input.c_str() + input.size();
  eof = pe;
  cs = initial_state;
}

std::string StateMachine::parse_inline(const std::string_view dtext) {
  StateMachine sm(dtext, dtext_en_inline, options);
  return sm.parse();
}

std::string StateMachine::parse_basic_inline(const std::string_view dtext) {
  StateMachine sm(dtext, dtext_en_basic_inline, options);
  return sm.parse();
}

StateMachine::ParseResult StateMachine::parse_dtext(const std::string_view dtext, DTextOptions options) {
  StateMachine sm(dtext, dtext_en_main, options);
  return { sm.parse(), sm.wiki_pages };
}

std::string StateMachine::parse() {
  StateMachine* sm = this;
  g_debug("parse '%.*s'", (int)(sm->input.size() - 2), sm->input.c_str() + 1);

  
#line 6344 "ext/dtext/dtext.cpp"
	{
	( sm->top) = 0;
	( sm->ts) = 0;
	( sm->te) = 0;
	( sm->act) = 0;
	}

#line 1476 "ext/dtext/dtext.cpp.rl"
  
#line 6350 "ext/dtext/dtext.cpp"
	{
	int _klen;
	unsigned int _trans;
	short _widec;
	const unsigned char *_acts;
	unsigned int _nacts;
	const short *_keys;

	if ( ( sm->p) == ( sm->pe) )
		goto _test_eof;
	if (  sm->cs == 0 )
		goto _out;
_resume:
	_acts = _dtext_actions + _dtext_from_state_actions[ sm->cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 12:
#line 1 "NONE"
	{( sm->ts) = ( sm->p);}
	break;
#line 6370 "ext/dtext/dtext.cpp"
		}
	}

	_widec = (*( sm->p));
	_klen = _dtext_cond_lengths[ sm->cs];
	_keys = _dtext_cond_keys + (_dtext_cond_offsets[ sm->cs]*2);
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				switch ( _dtext_cond_spaces[_dtext_cond_offsets[ sm->cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = (short)(128 + ((*( sm->p)) - -128));
		if ( 
#line 82 "ext/dtext/dtext.cpp.rl"
 is_mention_boundary(p[-1])  ) _widec += 256;
		break;
	}
	case 1: {
		_widec = (short)(640 + ((*( sm->p)) - -128));
		if ( 
#line 83 "ext/dtext/dtext.cpp.rl"
 sm->options.f_mentions  ) _widec += 256;
		break;
	}
	case 2: {
		_widec = (short)(2688 + ((*( sm->p)) - -128));
		if ( 
#line 84 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_QUOTE)  ) _widec += 256;
		break;
	}
	case 3: {
		_widec = (short)(3200 + ((*( sm->p)) - -128));
		if ( 
#line 85 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_EXPAND)  ) _widec += 256;
		break;
	}
	case 4: {
		_widec = (short)(2176 + ((*( sm->p)) - -128));
		if ( 
#line 86 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_COLOR)  ) _widec += 256;
		break;
	}
	case 5: {
		_widec = (short)(1152 + ((*( sm->p)) - -128));
		if ( 
#line 82 "ext/dtext/dtext.cpp.rl"
 is_mention_boundary(p[-1])  ) _widec += 256;
		if ( 
#line 83 "ext/dtext/dtext.cpp.rl"
 sm->options.f_mentions  ) _widec += 512;
		break;
	}
				}
				break;
			}
		}
	}

	_keys = _dtext_trans_keys + _dtext_key_offsets[ sm->cs];
	_trans = _dtext_index_offsets[ sm->cs];

	_klen = _dtext_single_lengths[ sm->cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < *_mid )
				_upper = _mid - 1;
			else if ( _widec > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _dtext_range_lengths[ sm->cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _dtext_indicies[_trans];
_eof_trans:
	 sm->cs = _dtext_trans_targs[_trans];

	if ( _dtext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _dtext_actions + _dtext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 71 "ext/dtext/dtext.cpp.rl"
	{ sm->a1 = sm->p; }
	break;
	case 1:
#line 72 "ext/dtext/dtext.cpp.rl"
	{ sm->a2 = sm->p; }
	break;
	case 2:
#line 73 "ext/dtext/dtext.cpp.rl"
	{ sm->b1 = sm->p; }
	break;
	case 3:
#line 74 "ext/dtext/dtext.cpp.rl"
	{ sm->b2 = sm->p; }
	break;
	case 4:
#line 75 "ext/dtext/dtext.cpp.rl"
	{ sm->c1 = sm->p; }
	break;
	case 5:
#line 76 "ext/dtext/dtext.cpp.rl"
	{ sm->c2 = sm->p; }
	break;
	case 6:
#line 77 "ext/dtext/dtext.cpp.rl"
	{ sm->d1 = sm->p; }
	break;
	case 7:
#line 78 "ext/dtext/dtext.cpp.rl"
	{ sm->d2 = sm->p; }
	break;
	case 8:
#line 79 "ext/dtext/dtext.cpp.rl"
	{ sm->e1 = sm->p; }
	break;
	case 9:
#line 80 "ext/dtext/dtext.cpp.rl"
	{ sm->e2 = sm->p; }
	break;
	case 10:
#line 87 "ext/dtext/dtext.cpp.rl"
	{ save_tag_attribute(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }); }
	break;
	case 13:
#line 1 "NONE"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 14:
#line 282 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_B, "<strong>"); }}
	break;
	case 15:
#line 283 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_B); }}
	break;
	case 16:
#line 284 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_I, "<em>"); }}
	break;
	case 17:
#line 285 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_I); }}
	break;
	case 18:
#line 286 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_S, "<s>"); }}
	break;
	case 19:
#line 287 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_S); }}
	break;
	case 20:
#line 288 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_U, "<u>"); }}
	break;
	case 21:
#line 289 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_U); }}
	break;
	case 22:
#line 290 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 23:
#line 291 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 24:
#line 291 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 25:
#line 291 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 26:
#line 295 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 11;}
	break;
	case 27:
#line 296 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 12;}
	break;
	case 28:
#line 297 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 13;}
	break;
	case 29:
#line 298 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 14;}
	break;
	case 30:
#line 299 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 15;}
	break;
	case 31:
#line 300 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 16;}
	break;
	case 32:
#line 301 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 17;}
	break;
	case 33:
#line 302 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 18;}
	break;
	case 34:
#line 303 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 19;}
	break;
	case 35:
#line 304 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 20;}
	break;
	case 36:
#line 305 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 21;}
	break;
	case 37:
#line 306 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 22;}
	break;
	case 38:
#line 307 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 23;}
	break;
	case 39:
#line 308 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 24;}
	break;
	case 40:
#line 309 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 25;}
	break;
	case 41:
#line 310 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 26;}
	break;
	case 42:
#line 311 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 27;}
	break;
	case 43:
#line 334 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 35;}
	break;
	case 44:
#line 338 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 36;}
	break;
	case 45:
#line 346 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 38;}
	break;
	case 46:
#line 354 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 40;}
	break;
	case 47:
#line 369 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 43;}
	break;
	case 48:
#line 370 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 44;}
	break;
	case 49:
#line 371 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 45;}
	break;
	case 50:
#line 372 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 46;}
	break;
	case 51:
#line 373 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 47;}
	break;
	case 52:
#line 374 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 48;}
	break;
	case 53:
#line 375 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 49;}
	break;
	case 54:
#line 376 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 50;}
	break;
	case 55:
#line 378 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 51;}
	break;
	case 56:
#line 382 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 52;}
	break;
	case 57:
#line 392 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 53;}
	break;
	case 58:
#line 397 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 54;}
	break;
	case 59:
#line 407 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 55;}
	break;
	case 60:
#line 412 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 56;}
	break;
	case 61:
#line 419 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 57;}
	break;
	case 62:
#line 429 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 58;}
	break;
	case 63:
#line 437 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 59;}
	break;
	case 64:
#line 442 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 60;}
	break;
	case 65:
#line 459 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 63;}
	break;
	case 66:
#line 463 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 64;}
	break;
	case 67:
#line 474 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 65;}
	break;
	case 68:
#line 494 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 68;}
	break;
	case 69:
#line 501 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 69;}
	break;
	case 70:
#line 507 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 70;}
	break;
	case 71:
#line 514 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 71;}
	break;
	case 72:
#line 526 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 73;}
	break;
	case 73:
#line 532 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 74;}
	break;
	case 74:
#line 545 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 76;}
	break;
	case 75:
#line 563 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 77;}
	break;
	case 76:
#line 581 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 79;}
	break;
	case 77:
#line 583 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 80;}
	break;
	case 78:
#line 587 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 81;}
	break;
	case 79:
#line 338 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_named_url(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }}
	break;
	case 80:
#line 342 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_named_url(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 });
  }}
	break;
	case 81:
#line 350 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_unnamed_url(sm, { sm->a1, sm->a2 });
  }}
	break;
	case 82:
#line 358 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("delimited mention: <@%.*s>", (int)(sm->a2 - sm->a1), sm->a1);
    append_mention(sm, { sm->a1, sm->a2 });
  }}
	break;
	case 83:
#line 369 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_B, "<strong>"); }}
	break;
	case 84:
#line 370 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_B); }}
	break;
	case 85:
#line 371 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_I, "<em>"); }}
	break;
	case 86:
#line 372 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_I); }}
	break;
	case 87:
#line 373 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_S, "<s>"); }}
	break;
	case 88:
#line 374 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_S); }}
	break;
	case 89:
#line 375 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_U, "<u>"); }}
	break;
	case 90:
#line 376 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_U); }}
	break;
	case 91:
#line 378 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_TN, "<span class=\"tn\">");
  }}
	break;
	case 92:
#line 382 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/tn]");

    if (dstack_check(sm, INLINE_TN)) {
      dstack_close_element(sm, INLINE_TN);
    } else if (dstack_close_element(sm, BLOCK_TN)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 93:
#line 392 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [center]");
    dstack_open_element(sm, INLINE_CENTER, "<div class=\"center\">");
  }}
	break;
	case 94:
#line 397 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/center]");

    if (dstack_check(sm, INLINE_CENTER)) {
      dstack_close_element(sm, INLINE_CENTER);
    } else if (dstack_close_element(sm, BLOCK_CENTER)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 95:
#line 407 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [color]");
    dstack_open_element(sm, INLINE_COLOR, "<span style=\"color:#FF761C;\">");
  }}
	break;
	case 96:
#line 412 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [color=]");
    dstack_open_element(sm, INLINE_COLOR, "<span style=\"color:");
    append_html_escaped(sm, { sm->a1, sm->a2 });
    append(sm, "\">");
  }}
	break;
	case 97:
#line 419 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/color]");

    if (dstack_check(sm, INLINE_COLOR)) {
      dstack_close_element(sm, INLINE_COLOR);
    } else if (dstack_close_element(sm, BLOCK_COLOR)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 98:
#line 429 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (sm->header_mode) {
      append_html_escaped(sm, "<br>");
    } else {
      append(sm, "<br>");
    };
  }}
	break;
	case 99:
#line 437 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1862;goto _again;}}
  }}
	break;
	case 100:
#line 442 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1862;goto _again;}}
  }}
	break;
	case 101:
#line 447 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 102:
#line 453 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 103:
#line 459 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_SPOILER, "<span class=\"spoiler\">");
  }}
	break;
	case 104:
#line 463 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_is_open(sm, INLINE_SPOILER)) {
      dstack_close_element(sm, INLINE_SPOILER);
    } else if (dstack_is_open(sm, BLOCK_SPOILER)) {
      dstack_close_until(sm, BLOCK_SPOILER);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append_html_escaped(sm, { sm->ts, sm->te });
    }
  }}
	break;
	case 105:
#line 474 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1866;goto _again;}}
  }}
	break;
	case 106:
#line 482 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 107:
#line 494 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [quote]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 108:
#line 507 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [expand]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 109:
#line 520 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 110:
#line 526 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TH)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 111:
#line 532 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TD)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 112:
#line 577 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append(sm, ' ');
  }}
	break;
	case 113:
#line 587 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 114:
#line 295 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "post", "post", "/posts/", { sm->a1, sm->a2 }); }}
	break;
	case 115:
#line 296 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "forum", "forum-post", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 116:
#line 297 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "topic", "forum-topic", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 117:
#line 298 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "comment", "comment", "/comments/", { sm->a1, sm->a2 }); }}
	break;
	case 118:
#line 299 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "dmail", "dmail", "/dmails/", { sm->a1, sm->a2 }); }}
	break;
	case 119:
#line 300 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "pool", "pool", "/pools/", { sm->a1, sm->a2 }); }}
	break;
	case 120:
#line 301 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "user", "user", "/users/", { sm->a1, sm->a2 }); }}
	break;
	case 121:
#line 302 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "artist", "artist", "/artists/", { sm->a1, sm->a2 }); }}
	break;
	case 122:
#line 303 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "user report", "user-report", "/user_flags/", { sm->a1, sm->a2 }); }}
	break;
	case 123:
#line 304 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag alias", "tag-alias", "/tag_aliases?id=", { sm->a1, sm->a2 }); }}
	break;
	case 124:
#line 305 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag implication", "tag-implication", "/tag_implications?id=", { sm->a1, sm->a2 }); }}
	break;
	case 125:
#line 306 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag translation", "tag-translation", "/tag_translations?id=", { sm->a1, sm->a2 }); }}
	break;
	case 126:
#line 307 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "book", "book", "/pools/", { sm->a1, sm->a2 }); }}
	break;
	case 127:
#line 308 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "series", "series", "/series/", { sm->a1, sm->a2 }); }}
	break;
	case 128:
#line 309 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "mod action", "mod-action", "/mod_actions?id=", { sm->a1, sm->a2 }); }}
	break;
	case 129:
#line 310 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "record", "user-record", "/user_records?id=", { sm->a1, sm->a2 }); }}
	break;
	case 130:
#line 311 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "wiki", "wiki-page", "/wiki/", { sm->a1, sm->a2 }); }}
	break;
	case 131:
#line 313 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_dmail_key_link(sm); }}
	break;
	case 132:
#line 315 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_paged_link(sm, "topic #", "<a class=\"dtext-link dtext-id-link dtext-forum-topic-id-link\" href=\"", "/forums/", "?page="); }}
	break;
	case 133:
#line 316 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_paged_link(sm, "pixiv #", "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-id-link dtext-pixiv-id-link\" href=\"", "https://www.pixiv.net/artworks/", "#"); }}
	break;
	case 134:
#line 318 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_post_search_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->b1, sm->b2 }, { sm->d1, sm->d2 });
  }}
	break;
	case 135:
#line 322 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_post_search_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->d1, sm->d2 });
  }}
	break;
	case 136:
#line 326 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_wiki_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->b1, sm->b2 }, { sm->e1, sm->e2 });
  }}
	break;
	case 137:
#line 330 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_wiki_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->d1, sm->d2 }, { sm->e1, sm->e2 });
  }}
	break;
	case 138:
#line 334 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }}
	break;
	case 139:
#line 338 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_named_url(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }}
	break;
	case 140:
#line 346 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }}
	break;
	case 141:
#line 354 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_mention(sm, { sm->a1, sm->a2 + 1 });
  }}
	break;
	case 142:
#line 363 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline list");
    {( sm->p) = (( sm->ts + 1))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 143:
#line 397 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/center]");

    if (dstack_check(sm, INLINE_CENTER)) {
      dstack_close_element(sm, INLINE_CENTER);
    } else if (dstack_close_element(sm, BLOCK_CENTER)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 144:
#line 437 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1862;goto _again;}}
  }}
	break;
	case 145:
#line 442 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1862;goto _again;}}
  }}
	break;
	case 146:
#line 474 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1866;goto _again;}}
  }}
	break;
	case 147:
#line 488 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 148:
#line 501 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/quote]");
    dstack_close_until(sm, BLOCK_QUOTE);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 149:
#line 514 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/expand]");
    dstack_close_until(sm, BLOCK_EXPAND);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 150:
#line 538 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [hr] (pos: %ld)", sm->ts - sm->pb);
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 151:
#line 545 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 152:
#line 563 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }}
	break;
	case 153:
#line 583 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append(sm, std::string_view { sm->ts, sm->te });
  }}
	break;
	case 154:
#line 587 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 155:
#line 297 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_id_link(sm, "topic", "forum-topic", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 156:
#line 299 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_id_link(sm, "dmail", "dmail", "/dmails/", { sm->a1, sm->a2 }); }}
	break;
	case 157:
#line 334 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }}
	break;
	case 158:
#line 346 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }}
	break;
	case 159:
#line 437 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1862;goto _again;}}
  }}
	break;
	case 160:
#line 442 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1862;goto _again;}}
  }}
	break;
	case 161:
#line 474 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1866;goto _again;}}
  }}
	break;
	case 162:
#line 545 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 163:
#line 563 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }}
	break;
	case 164:
#line 583 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append(sm, std::string_view { sm->ts, sm->te });
  }}
	break;
	case 165:
#line 587 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 166:
#line 1 "NONE"
	{	switch( ( sm->act) ) {
	case 11:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "post", "post", "/posts/", { sm->a1, sm->a2 }); }
	break;
	case 12:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "forum", "forum-post", "/forums/", { sm->a1, sm->a2 }); }
	break;
	case 13:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "topic", "forum-topic", "/forums/", { sm->a1, sm->a2 }); }
	break;
	case 14:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "comment", "comment", "/comments/", { sm->a1, sm->a2 }); }
	break;
	case 15:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "dmail", "dmail", "/dmails/", { sm->a1, sm->a2 }); }
	break;
	case 16:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "pool", "pool", "/pools/", { sm->a1, sm->a2 }); }
	break;
	case 17:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "user", "user", "/users/", { sm->a1, sm->a2 }); }
	break;
	case 18:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "artist", "artist", "/artists/", { sm->a1, sm->a2 }); }
	break;
	case 19:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "user report", "user-report", "/user_flags/", { sm->a1, sm->a2 }); }
	break;
	case 20:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "tag alias", "tag-alias", "/tag_aliases?id=", { sm->a1, sm->a2 }); }
	break;
	case 21:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "tag implication", "tag-implication", "/tag_implications?id=", { sm->a1, sm->a2 }); }
	break;
	case 22:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "tag translation", "tag-translation", "/tag_translations?id=", { sm->a1, sm->a2 }); }
	break;
	case 23:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "book", "book", "/pools/", { sm->a1, sm->a2 }); }
	break;
	case 24:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "series", "series", "/series/", { sm->a1, sm->a2 }); }
	break;
	case 25:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "mod action", "mod-action", "/mod_actions?id=", { sm->a1, sm->a2 }); }
	break;
	case 26:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "record", "user-record", "/user_records?id=", { sm->a1, sm->a2 }); }
	break;
	case 27:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "wiki", "wiki-page", "/wiki/", { sm->a1, sm->a2 }); }
	break;
	case 35:
	{{( sm->p) = ((( sm->te)))-1;}
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }
	break;
	case 36:
	{{( sm->p) = ((( sm->te)))-1;}
    append_named_url(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }
	break;
	case 38:
	{{( sm->p) = ((( sm->te)))-1;}
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }
	break;
	case 40:
	{{( sm->p) = ((( sm->te)))-1;}
    append_mention(sm, { sm->a1, sm->a2 + 1 });
  }
	break;
	case 43:
	{{( sm->p) = ((( sm->te)))-1;} dstack_open_element(sm,  INLINE_B, "<strong>"); }
	break;
	case 44:
	{{( sm->p) = ((( sm->te)))-1;} dstack_close_element(sm, INLINE_B); }
	break;
	case 45:
	{{( sm->p) = ((( sm->te)))-1;} dstack_open_element(sm,  INLINE_I, "<em>"); }
	break;
	case 46:
	{{( sm->p) = ((( sm->te)))-1;} dstack_close_element(sm, INLINE_I); }
	break;
	case 47:
	{{( sm->p) = ((( sm->te)))-1;} dstack_open_element(sm,  INLINE_S, "<s>"); }
	break;
	case 48:
	{{( sm->p) = ((( sm->te)))-1;} dstack_close_element(sm, INLINE_S); }
	break;
	case 49:
	{{( sm->p) = ((( sm->te)))-1;} dstack_open_element(sm,  INLINE_U, "<u>"); }
	break;
	case 50:
	{{( sm->p) = ((( sm->te)))-1;} dstack_close_element(sm, INLINE_U); }
	break;
	case 51:
	{{( sm->p) = ((( sm->te)))-1;}
    dstack_open_element(sm, INLINE_TN, "<span class=\"tn\">");
  }
	break;
	case 52:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [/tn]");

    if (dstack_check(sm, INLINE_TN)) {
      dstack_close_element(sm, INLINE_TN);
    } else if (dstack_close_element(sm, BLOCK_TN)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }
	break;
	case 53:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [center]");
    dstack_open_element(sm, INLINE_CENTER, "<div class=\"center\">");
  }
	break;
	case 54:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [/center]");

    if (dstack_check(sm, INLINE_CENTER)) {
      dstack_close_element(sm, INLINE_CENTER);
    } else if (dstack_close_element(sm, BLOCK_CENTER)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }
	break;
	case 55:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [color]");
    dstack_open_element(sm, INLINE_COLOR, "<span style=\"color:#FF761C;\">");
  }
	break;
	case 56:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [color=]");
    dstack_open_element(sm, INLINE_COLOR, "<span style=\"color:");
    append_html_escaped(sm, { sm->a1, sm->a2 });
    append(sm, "\">");
  }
	break;
	case 57:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [/color]");

    if (dstack_check(sm, INLINE_COLOR)) {
      dstack_close_element(sm, INLINE_COLOR);
    } else if (dstack_close_element(sm, BLOCK_COLOR)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }
	break;
	case 58:
	{{( sm->p) = ((( sm->te)))-1;}
    if (sm->header_mode) {
      append_html_escaped(sm, "<br>");
    } else {
      append(sm, "<br>");
    };
  }
	break;
	case 59:
	{{( sm->p) = ((( sm->te)))-1;}
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1862;goto _again;}}
  }
	break;
	case 60:
	{{( sm->p) = ((( sm->te)))-1;}
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1862;goto _again;}}
  }
	break;
	case 63:
	{{( sm->p) = ((( sm->te)))-1;}
    dstack_open_element(sm, INLINE_SPOILER, "<span class=\"spoiler\">");
  }
	break;
	case 64:
	{{( sm->p) = ((( sm->te)))-1;}
    if (dstack_is_open(sm, INLINE_SPOILER)) {
      dstack_close_element(sm, INLINE_SPOILER);
    } else if (dstack_is_open(sm, BLOCK_SPOILER)) {
      dstack_close_until(sm, BLOCK_SPOILER);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append_html_escaped(sm, { sm->ts, sm->te });
    }
  }
	break;
	case 65:
	{{( sm->p) = ((( sm->te)))-1;}
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1866;goto _again;}}
  }
	break;
	case 68:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [quote]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }
	break;
	case 69:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [/quote]");
    dstack_close_until(sm, BLOCK_QUOTE);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }
	break;
	case 70:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [expand]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }
	break;
	case 71:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [/expand]");
    dstack_close_until(sm, BLOCK_EXPAND);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }
	break;
	case 73:
	{{( sm->p) = ((( sm->te)))-1;}
    if (dstack_close_element(sm, BLOCK_TH)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }
	break;
	case 74:
	{{( sm->p) = ((( sm->te)))-1;}
    if (dstack_close_element(sm, BLOCK_TD)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }
	break;
	case 76:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }
	break;
	case 77:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }
	break;
	case 80:
	{{( sm->p) = ((( sm->te)))-1;}
    append(sm, std::string_view { sm->ts, sm->te });
  }
	break;
	case 81:
	{{( sm->p) = ((( sm->te)))-1;}
    append_html_escaped(sm, (*( sm->p)));
  }
	break;
	default:
	{{( sm->p) = ((( sm->te)))-1;}}
	break;
	}
	}
	break;
	case 167:
#line 593 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_rewind(sm);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 168:
#line 598 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 169:
#line 600 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 170:
#line 600 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 171:
#line 600 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 172:
#line 606 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_rewind(sm);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 173:
#line 611 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 174:
#line 613 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 175:
#line 613 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 176:
#line 613 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 177:
#line 619 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_COLGROUP, "colgroup", sm->tag_attributes);
  }}
	break;
	case 178:
#line 623 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_COLGROUP);
  }}
	break;
	case 179:
#line 627 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_COL, "col", sm->tag_attributes);
    dstack_pop(sm); // XXX [col] has no end tag
  }}
	break;
	case 180:
#line 632 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_THEAD, "thead", sm->tag_attributes);
  }}
	break;
	case 181:
#line 636 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_THEAD);
  }}
	break;
	case 182:
#line 640 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TBODY, "tbody", sm->tag_attributes);
  }}
	break;
	case 183:
#line 644 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_TBODY);
  }}
	break;
	case 184:
#line 648 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TH, "th", sm->tag_attributes);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1519;goto _again;}}
  }}
	break;
	case 185:
#line 653 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TR, "tr", sm->tag_attributes);
  }}
	break;
	case 186:
#line 657 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_TR);
  }}
	break;
	case 187:
#line 661 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TD, "td", sm->tag_attributes);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1519;goto _again;}}
  }}
	break;
	case 188:
#line 666 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TABLE)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 189:
#line 672 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 190:
#line 672 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;}
	break;
	case 191:
#line 672 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}}
	break;
	case 192:
#line 691 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1862;goto _again;}}
  }}
	break;
	case 193:
#line 696 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1862;goto _again;}}
  }}
	break;
	case 194:
#line 701 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_code_fence(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }}
	break;
	case 195:
#line 720 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block [color]");
    dstack_open_element(sm, BLOCK_COLOR, "<p style=\"color:#FF761C;\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1519;goto _again;}}
  }}
	break;
	case 196:
#line 726 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block [color=]");
    dstack_open_element(sm, BLOCK_COLOR, "<p style=\"color:");
    append_block_html_escaped(sm, { sm->a1, sm->a2 });
    append_block(sm, "\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1519;goto _again;}}
  }}
	break;
	case 197:
#line 734 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1866;goto _again;}}
  }}
	break;
	case 198:
#line 740 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_TABLE, "<table class=\"highlightable\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1870;goto _again;}}
  }}
	break;
	case 199:
#line 746 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TN, "<p class=\"tn\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1519;goto _again;}}
  }}
	break;
	case 200:
#line 751 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block [center]");
    dstack_open_element(sm, BLOCK_CENTER, "<p class=\"center\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1519;goto _again;}}
  }}
	break;
	case 201:
#line 773 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1519;goto _again;}}
  }}
	break;
	case 202:
#line 676 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_header(sm, *sm->a1, { sm->b1, sm->b2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1519;goto _again;}}
  }}
	break;
	case 203:
#line 681 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_QUOTE, "<blockquote>");
  }}
	break;
	case 204:
#line 686 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_SPOILER, "<div class=\"spoiler\">");
  }}
	break;
	case 205:
#line 691 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1862;goto _again;}}
  }}
	break;
	case 206:
#line 696 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1862;goto _again;}}
  }}
	break;
	case 207:
#line 705 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_EXPAND, "<details>");
    append_block(sm, "<summary>Show</summary><div>");
  }}
	break;
	case 208:
#line 711 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block [expand=]");
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_EXPAND, "<details>");
    append_block(sm, "<summary>");
    append_block_html_escaped(sm, { sm->a1, sm->a2 });
    append_block(sm, "</summary><div>");
  }}
	break;
	case 209:
#line 734 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1866;goto _again;}}
  }}
	break;
	case 210:
#line 757 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("write '<hr>' (pos: %ld)", sm->ts - sm->pb);
    append_block(sm, "<hr>");
  }}
	break;
	case 211:
#line 762 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block list");
    dstack_open_list(sm, sm->a2 - sm->a1);
    {( sm->p) = (( sm->b1))-1;}
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1519;goto _again;}}
  }}
	break;
	case 212:
#line 769 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block blank line(s)");
  }}
	break;
	case 213:
#line 773 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1519;goto _again;}}
  }}
	break;
	case 214:
#line 691 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1862;goto _again;}}
  }}
	break;
	case 215:
#line 696 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1862;goto _again;}}
  }}
	break;
	case 216:
#line 734 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1866;goto _again;}}
  }}
	break;
	case 217:
#line 769 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("block blank line(s)");
  }}
	break;
	case 218:
#line 773 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1519;goto _again;}}
  }}
	break;
#line 8234 "ext/dtext/dtext.cpp"
		}
	}

_again:
	_acts = _dtext_actions + _dtext_to_state_actions[ sm->cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 11:
#line 1 "NONE"
	{( sm->ts) = 0;}
	break;
#line 8245 "ext/dtext/dtext.cpp"
		}
	}

	if (  sm->cs == 0 )
		goto _out;
	if ( ++( sm->p) != ( sm->pe) )
		goto _resume;
	_test_eof: {}
	if ( ( sm->p) == ( sm->eof) )
	{
	if ( _dtext_eof_trans[ sm->cs] > 0 ) {
		_trans = _dtext_eof_trans[ sm->cs] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 1477 "ext/dtext/dtext.cpp.rl"

  g_debug("EOF; closing stray blocks");
  dstack_close_all(sm);
  g_debug("done");

  return sm->output;
}

/* Everything below is optional, it's only needed to build bin/cdtext.exe. */
#ifdef CDTEXT

#include <glib.h>
#include <iostream>

static void parse_file(FILE* input, FILE* output) {
  std::stringstream ss;
  ss << std::cin.rdbuf();
  std::string dtext = ss.str();

  try {
    auto result = StateMachine::parse_dtext(dtext, options);

    if (fwrite(result.c_str(), 1, result.size(), output) != result.size()) {
      perror("fwrite failed");
      exit(1);
    }
  } catch (std::exception& e) {
    fprintf(stderr, "dtext parse error: %s\n", e.what());
    exit(1);
  }
}

int main(int argc, char* argv[]) {
  GError* error = NULL;
  bool opt_verbose = FALSE;
  bool opt_inline = FALSE;
  bool opt_no_mentions = FALSE;

  GOptionEntry options[] = {
    { "no-mentions", 'm', 0, G_OPTION_ARG_NONE, &opt_no_mentions, "Don't parse @mentions", NULL },
    { "inline",      'i', 0, G_OPTION_ARG_NONE, &opt_inline,      "Parse in inline mode", NULL },
    { "verbose",     'v', 0, G_OPTION_ARG_NONE, &opt_verbose,     "Print debug output", NULL },
    { NULL }
  };

  g_autoptr(GOptionContext) context = g_option_context_new("[FILE...]");
  g_option_context_add_main_entries(context, options, NULL);

  if (!g_option_context_parse(context, &argc, &argv, &error)) {
    fprintf(stderr, "option parsing failed: %s\n", error->message);
    g_clear_error(&error);
    return 1;
  }

  if (opt_verbose) {
    g_setenv("G_MESSAGES_DEBUG", "all", TRUE);
  }

  /* skip first argument (progname) */
  argc--, argv++;

  if (argc == 0) {
    parse_file(stdin, stdout, { .f_inline = opt_inline, .f_mentions = !opt_no_mentions });
    return 0;
  }

  for (const char* filename = *argv; argc > 0; argc--, argv++) {
    FILE* input = fopen(filename, "r");
    if (!input) {
      perror("fopen failed");
      return 1;
    }

    parse_file(input, stdout, opt_inline, !opt_no_mentions);
    fclose(input);
  }

  return 0;
}

#endif