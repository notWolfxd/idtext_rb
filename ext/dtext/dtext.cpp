
#line 1 "ext/dtext/dtext.cpp.rl"
#include "dtext.h"
#include "url.h"

#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <regex>

#ifdef DEBUG
#undef g_debug
#define STRINGIFY(x) XSTRINGIFY(x)
#define XSTRINGIFY(x) #x
#define g_debug(fmt, ...) fprintf(stderr, "\x1B[1;32mDEBUG\x1B[0m %-28.28s %-24.24s " fmt "\n", __FILE__ ":" STRINGIFY(__LINE__), __func__, ##__VA_ARGS__)
#else
#undef g_debug
#define g_debug(...)
#endif

static const size_t MAX_STACK_DEPTH = 512;

// Strip qualifier from tag: "Artoria Pendragon (Lancer) (Fate)" -> "Artoria Pendragon (Lancer)"
static const std::regex tag_qualifier_regex("[ _]\\([^)]+?\\)$");

// Permitted HTML attribute names.
static const std::unordered_map<std::string_view, const std::unordered_set<std::string_view>> permitted_attribute_names = {
  { "thead",    { "align" } },
  { "tbody",    { "align" } },
  { "tr",       { "align" } },
  { "td",       { "align", "colspan", "rowspan" } },
  { "th",       { "align", "colspan", "rowspan" } },
  { "col",      { "align", "span" } },
  { "colgroup", {} },
};

// Permitted HTML attribute values.
static const std::unordered_set<std::string_view> align_values = { "left", "center", "right", "justify" };
static const std::unordered_map<std::string_view, std::function<bool(std::string_view)>> permitted_attribute_values = {
  { "align",   [](auto value) { return align_values.find(value) != align_values.end(); } },
  { "span",    [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
  { "colspan", [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
  { "rowspan", [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
};


#line 785 "ext/dtext/dtext.cpp.rl"



#line 47 "ext/dtext/dtext.cpp"
static const unsigned char _dtext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 24, 1, 25, 1, 83, 1, 
	84, 1, 85, 1, 87, 1, 88, 1, 
	89, 1, 90, 1, 91, 1, 92, 1, 
	93, 1, 94, 1, 95, 1, 96, 1, 
	97, 1, 98, 1, 99, 1, 101, 1, 
	102, 1, 103, 1, 104, 1, 105, 1, 
	106, 1, 107, 1, 108, 1, 109, 1, 
	110, 1, 111, 1, 112, 1, 113, 1, 
	114, 1, 115, 1, 116, 1, 117, 1, 
	142, 1, 143, 1, 144, 1, 145, 1, 
	147, 1, 148, 1, 149, 1, 150, 1, 
	151, 1, 152, 1, 153, 1, 154, 1, 
	155, 1, 156, 1, 157, 1, 158, 1, 
	159, 1, 160, 1, 161, 1, 162, 1, 
	163, 1, 164, 1, 165, 1, 166, 1, 
	167, 1, 168, 1, 169, 1, 170, 1, 
	171, 1, 172, 1, 173, 1, 174, 1, 
	175, 1, 176, 1, 177, 1, 178, 1, 
	179, 1, 180, 1, 181, 1, 182, 1, 
	183, 1, 184, 1, 185, 1, 186, 1, 
	187, 1, 188, 1, 189, 1, 190, 1, 
	191, 1, 192, 1, 193, 1, 194, 1, 
	195, 1, 196, 1, 197, 1, 198, 1, 
	199, 1, 201, 1, 202, 1, 203, 1, 
	204, 1, 205, 1, 206, 1, 207, 1, 
	208, 1, 209, 1, 210, 1, 211, 1, 
	212, 1, 213, 1, 214, 1, 216, 1, 
	217, 1, 218, 1, 219, 1, 220, 1, 
	221, 1, 222, 2, 0, 1, 2, 0, 
	3, 2, 1, 84, 2, 1, 85, 2, 
	1, 86, 2, 1, 100, 2, 1, 110, 
	2, 1, 112, 2, 1, 118, 2, 1, 
	119, 2, 1, 120, 2, 1, 121, 2, 
	1, 122, 2, 1, 123, 2, 1, 124, 
	2, 1, 125, 2, 1, 126, 2, 1, 
	127, 2, 1, 128, 2, 1, 129, 2, 
	1, 130, 2, 1, 131, 2, 1, 132, 
	2, 1, 133, 2, 1, 134, 2, 1, 
	200, 2, 2, 3, 2, 3, 4, 2, 
	3, 5, 2, 3, 6, 2, 3, 7, 
	2, 3, 10, 2, 3, 83, 2, 3, 
	135, 2, 3, 136, 2, 3, 137, 2, 
	3, 146, 2, 3, 215, 2, 4, 5, 
	2, 5, 3, 2, 5, 7, 2, 6, 
	7, 2, 7, 3, 2, 7, 138, 2, 
	7, 139, 2, 8, 9, 2, 9, 3, 
	2, 9, 140, 2, 9, 141, 2, 10, 
	181, 2, 10, 183, 2, 10, 184, 2, 
	10, 186, 2, 10, 188, 2, 10, 189, 
	2, 10, 191, 2, 13, 0, 2, 13, 
	1, 2, 13, 3, 2, 13, 26, 2, 
	13, 27, 2, 13, 28, 2, 13, 29, 
	2, 13, 30, 2, 13, 31, 2, 13, 
	32, 2, 13, 33, 2, 13, 34, 2, 
	13, 35, 2, 13, 36, 2, 13, 37, 
	2, 13, 38, 2, 13, 39, 2, 13, 
	40, 2, 13, 41, 2, 13, 42, 2, 
	13, 43, 2, 13, 44, 2, 13, 46, 
	2, 13, 48, 2, 13, 49, 2, 13, 
	73, 2, 13, 75, 2, 13, 78, 2, 
	13, 79, 2, 13, 80, 2, 13, 81, 
	2, 13, 82, 3, 0, 1, 100, 3, 
	0, 1, 112, 3, 0, 1, 200, 3, 
	1, 2, 3, 3, 3, 4, 5, 3, 
	3, 6, 7, 3, 3, 10, 181, 3, 
	3, 10, 183, 3, 3, 10, 184, 3, 
	3, 10, 186, 3, 3, 10, 188, 3, 
	3, 10, 189, 3, 3, 10, 191, 3, 
	5, 7, 3, 3, 6, 7, 3, 3, 
	6, 7, 138, 3, 6, 7, 139, 3, 
	8, 9, 3, 3, 8, 9, 140, 3, 
	8, 9, 141, 3, 13, 0, 26, 3, 
	13, 0, 27, 3, 13, 0, 28, 3, 
	13, 0, 29, 3, 13, 0, 30, 3, 
	13, 0, 31, 3, 13, 0, 32, 3, 
	13, 0, 33, 3, 13, 0, 34, 3, 
	13, 0, 35, 3, 13, 0, 36, 3, 
	13, 0, 37, 3, 13, 0, 38, 3, 
	13, 0, 39, 3, 13, 0, 40, 3, 
	13, 0, 41, 3, 13, 0, 42, 3, 
	13, 0, 81, 3, 13, 1, 47, 3, 
	13, 1, 50, 3, 13, 2, 3, 3, 
	13, 3, 45, 3, 13, 3, 49, 3, 
	13, 3, 51, 3, 13, 3, 52, 3, 
	13, 3, 53, 3, 13, 3, 54, 3, 
	13, 3, 55, 3, 13, 3, 56, 3, 
	13, 3, 57, 3, 13, 3, 58, 3, 
	13, 3, 59, 3, 13, 3, 60, 3, 
	13, 3, 61, 3, 13, 3, 62, 3, 
	13, 3, 63, 3, 13, 3, 65, 3, 
	13, 3, 66, 3, 13, 3, 67, 3, 
	13, 3, 69, 3, 13, 3, 70, 3, 
	13, 3, 71, 3, 13, 3, 72, 3, 
	13, 3, 73, 3, 13, 3, 74, 3, 
	13, 3, 75, 3, 13, 3, 76, 3, 
	13, 3, 77, 3, 13, 8, 43, 3, 
	13, 8, 44, 3, 13, 43, 3, 3, 
	13, 44, 3, 3, 13, 46, 3, 4, 
	13, 0, 1, 47, 4, 13, 0, 1, 
	82, 4, 13, 2, 3, 45, 4, 13, 
	3, 1, 64, 4, 13, 3, 1, 68, 
	4, 13, 3, 1, 74, 5, 13, 3, 
	0, 1, 64, 5, 13, 3, 0, 1, 
	74
};

static const short _dtext_cond_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 3, 3, 3, 3, 4, 
	4, 4, 4, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 7, 7, 7, 7, 7, 
	7, 8, 8, 8, 8, 8, 8, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 13, 19, 20, 40, 60, 81, 
	102, 125, 148, 170, 196, 220, 245, 266, 
	293, 314, 335, 358, 381, 403, 429, 453, 
	478, 505, 526, 550, 551, 554, 556, 558, 
	561, 565, 568, 572, 573, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 589, 604, 
	624, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644, 644
};

static const char _dtext_cond_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 4, 6, 1, 20, 20, 21, 21, 
	23, 23, 22, 26, 24, 25, 21, 27, 
	21, 21, 23, 23, 22, 26, 24, 25, 
	27, 21, 24, 1, 3, 2, 2, 3, 
	4, 3, 4, 1, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 2, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 15, 20, 
	20, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
};

static const short _dtext_cond_keys[] = {
	62, 62, 93, 93, 93, 93, 62, 62, 
	62, 62, 93, 93, 93, 93, 93, 93, 
	93, 93, -128, -1, 1, 8, 14, 31, 
	33, 127, -128, -1, 1, 9, 11, 12, 
	14, 61, 62, 62, 63, 127, -128, -65, 
	-128, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -100, -99, -99, 
	-98, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -84, -83, -83, -82, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -128, -127, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -126, -125, -121, 
	-120, -111, -110, -109, -108, -100, -99, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -69, -68, -68, -67, -67, -66, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -120, -119, -119, -118, -68, -67, -67, 
	-66, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -100, -99, -99, 
	-98, -97, -96, -96, -95, -94, -93, -93, 
	-92, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -100, 
	-99, -99, -98, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -84, -83, -83, 
	-82, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -128, -127, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -126, 
	-125, -121, -120, -111, -110, -109, -108, -100, 
	-99, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -69, -68, -68, -67, -67, 
	-66, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -120, -119, -119, -118, -68, 
	-67, -67, -66, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -100, -99, -99, 
	-98, -97, -96, -96, -95, -94, -93, -93, 
	-92, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 99, 100, 100, 101, 114, 115, 115, 
	116, 122, 127, 127, -128, -65, -128, -100, 
	-99, -99, -98, -65, -128, -84, -82, -65, 
	-128, -128, -127, -65, -125, -121, -110, -109, 
	-99, -65, -128, -69, -68, -68, -67, -67, 
	-66, -65, -128, -120, -118, -68, -66, -65, 
	-128, -100, -98, -97, -95, -94, -92, -65, 
	-128, -65, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	1, 8, 14, 31, 48, 57, 65, 90, 
	97, 122, 127, 127, 60, 60, 64, 64, 
	64, 64, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	1, 8, 14, 31, 46, 46, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	0
};

static const char _dtext_cond_spaces[] = {
	4, 4, 2, 3, 2, 3, 4, 3, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0
};

static const short _dtext_key_offsets[] = {
	0, 0, 4, 10, 16, 18, 20, 22, 
	24, 26, 27, 29, 30, 34, 36, 38, 
	40, 42, 43, 49, 51, 53, 55, 57, 
	59, 60, 62, 63, 65, 67, 69, 71, 
	72, 77, 80, 82, 84, 86, 88, 90, 
	92, 94, 96, 98, 99, 103, 107, 109, 
	113, 116, 124, 131, 135, 139, 141, 143, 
	147, 154, 158, 164, 166, 168, 170, 172, 
	174, 178, 185, 189, 195, 197, 199, 201, 
	203, 205, 207, 208, 212, 214, 216, 218, 
	220, 222, 224, 227, 228, 232, 233, 235, 
	246, 257, 261, 265, 267, 271, 274, 282, 
	289, 291, 293, 297, 304, 308, 314, 316, 
	318, 320, 322, 324, 328, 335, 339, 345, 
	347, 349, 351, 353, 355, 357, 358, 360, 
	362, 364, 366, 367, 369, 371, 373, 375, 
	377, 379, 382, 383, 387, 388, 389, 399, 
	401, 403, 406, 409, 412, 416, 426, 430, 
	440, 441, 443, 444, 447, 449, 451, 453, 
	455, 456, 457, 459, 460, 463, 465, 467, 
	469, 471, 472, 480, 481, 482, 483, 484, 
	485, 486, 487, 488, 490, 492, 494, 498, 
	502, 508, 514, 516, 517, 521, 523, 525, 
	527, 529, 531, 533, 536, 540, 541, 543, 
	545, 547, 549, 550, 556, 558, 559, 561, 
	563, 565, 567, 569, 571, 574, 575, 577, 
	579, 581, 583, 584, 585, 589, 593, 595, 
	597, 599, 601, 602, 604, 606, 608, 610, 
	616, 617, 618, 619, 620, 624, 628, 630, 
	632, 634, 636, 637, 639, 641, 643, 645, 
	651, 652, 653, 654, 657, 662, 673, 685, 
	687, 689, 691, 693, 695, 697, 699, 701, 
	703, 704, 706, 708, 710, 712, 714, 715, 
	717, 719, 721, 723, 724, 726, 728, 730, 
	732, 734, 736, 739, 740, 742, 744, 746, 
	750, 753, 761, 768, 770, 772, 774, 776, 
	778, 780, 781, 783, 785, 796, 807, 818, 
	828, 830, 832, 834, 836, 838, 839, 841, 
	843, 845, 847, 849, 851, 854, 855, 857, 
	859, 861, 865, 868, 876, 883, 885, 887, 
	889, 891, 893, 895, 896, 897, 898, 908, 
	910, 912, 915, 918, 921, 925, 935, 939, 
	940, 941, 946, 948, 950, 953, 957, 960, 
	966, 970, 976, 984, 986, 1014, 1016, 1018, 
	1021, 1025, 1028, 1034, 1038, 1044, 1052, 1054, 
	1082, 1106, 1108, 1110, 1113, 1117, 1120, 1126, 
	1130, 1136, 1144, 1146, 1148, 1150, 1152, 1155, 
	1156, 1157, 1171, 1173, 1188, 1190, 1192, 1209, 
	1211, 1213, 1216, 1219, 1240, 1243, 1255, 1259, 
	1263, 1268, 1270, 1272, 1273, 1277, 1282, 1284, 
	1286, 1288, 1291, 1292, 1293, 1297, 1298, 1299, 
	1309, 1316, 1323, 1328, 1337, 1349, 1353, 1354, 
	1360, 1366, 1372, 1373, 1385, 1394, 1401, 1408, 
	1415, 1423, 1437, 1443, 1444, 1458, 1472, 1486, 
	1493, 1500, 1507, 1514, 1520, 1521, 1525, 1529, 
	1531, 1542, 1545, 1556, 1565, 1573, 1580, 1587, 
	1594, 1601, 1607, 1608, 1617, 1622, 1627, 1629, 
	1630, 1635, 1636, 1637, 1638, 1652, 1660, 1674, 
	1686, 1694, 1698, 1706, 1714, 1722, 1729, 1730, 
	1731, 1740, 1756, 1766, 1782, 1796, 1806, 1815, 
	1816, 1820, 1830, 1839, 1848, 1857, 1866, 1875, 
	1886, 1896, 1905, 1915, 1924, 1933, 1950, 1959, 
	1968, 1977, 1986, 1990, 1998, 2007, 2015, 2023, 
	2032, 2033, 2037, 2038, 2039, 2040, 2046, 2052, 
	2058, 2064, 2070, 2076, 2082, 2088, 2094, 2100, 
	2106, 2107, 2113, 2119, 2125, 2131, 2137, 2143, 
	2149, 2155, 2161, 2167, 2173, 2174, 2180, 2186, 
	2192, 2198, 2204, 2210, 2216, 2222, 2228, 2234, 
	2240, 2241, 2247, 2255, 2261, 2267, 2273, 2279, 
	2285, 2291, 2297, 2303, 2309, 2315, 2316, 2322, 
	2328, 2334, 2340, 2346, 2352, 2358, 2364, 2370, 
	2376, 2382, 2383, 2384, 2398, 2400, 2415, 2417, 
	2419, 2436, 2438, 2440, 2443, 2446, 2467, 2470, 
	2482, 2486, 2490, 2495, 2497, 2499, 2501, 2504, 
	2508, 2511, 2517, 2521, 2527, 2535, 2537, 2565, 
	2567, 2569, 2572, 2576, 2579, 2585, 2589, 2595, 
	2603, 2605, 2633, 2657, 2659, 2661, 2664, 2668, 
	2671, 2677, 2681, 2687, 2695, 2697, 2699, 2701, 
	2703, 2705, 2707, 2709, 2711, 2712, 2713, 2719, 
	2725, 2731, 2737, 2743, 2749, 2755, 2761, 2767, 
	2773, 2779, 2780, 2786, 2793, 2795, 2797, 2804, 
	2811, 2818, 2825, 2832, 2839, 2846, 2853, 2860, 
	2863, 2864, 2870, 2876, 2882, 2888, 2894, 2900, 
	2906, 2912, 2918, 2924, 2925, 2931, 2937, 2943, 
	2949, 2955, 2961, 2967, 2973, 2979, 2985, 2991, 
	2992, 2998, 3004, 3010, 3016, 3022, 3028, 3034, 
	3040, 3046, 3052, 3058, 3059, 3065, 3071, 3077, 
	3083, 3089, 3095, 3101, 3107, 3113, 3119, 3125, 
	3126, 3132, 3138, 3144, 3150, 3156, 3162, 3168, 
	3174, 3180, 3186, 3192, 3198, 3200, 3202, 3204, 
	3206, 3207, 3208, 3214, 3220, 3226, 3232, 3238, 
	3244, 3250, 3256, 3262, 3268, 3274, 3276, 3278, 
	3280, 3282, 3284, 3286, 3288, 3290, 3292, 3294, 
	3295, 3296, 3302, 3308, 3314, 3320, 3326, 3332, 
	3338, 3344, 3350, 3356, 3362, 3364, 3366, 3368, 
	3370, 3372, 3374, 3376, 3378, 3380, 3382, 3383, 
	3384, 3390, 3396, 3402, 3408, 3414, 3420, 3426, 
	3432, 3438, 3444, 3450, 3451, 3457, 3459, 3461, 
	3467, 3473, 3479, 3485, 3491, 3497, 3503, 3509, 
	3515, 3521, 3524, 3530, 3536, 3542, 3548, 3554, 
	3560, 3566, 3572, 3578, 3584, 3590, 3592, 3594, 
	3596, 3598, 3600, 3601, 3602, 3608, 3614, 3620, 
	3626, 3632, 3638, 3644, 3650, 3656, 3662, 3668, 
	3669, 3675, 3681, 3687, 3693, 3699, 3705, 3711, 
	3717, 3723, 3729, 3735, 3739, 3744, 3746, 3748, 
	3750, 3752, 3755, 3756, 3757, 3761, 3766, 3767, 
	3787, 3791, 3799, 3805, 3811, 3817, 3823, 3827, 
	3833, 3839, 3845, 3857, 3863, 3869, 3875, 3881, 
	3887, 3899, 3903, 3909, 3915, 3921, 3927, 3939, 
	3945, 3951, 3957, 3963, 3969, 3975, 3981, 3985, 
	3995, 3999, 4003, 4007, 4011, 4017, 4021, 4029, 
	4035, 4041, 4047, 4053, 4057, 4065, 4071, 4078, 
	4085, 4097, 4107, 4113, 4119, 4125, 4131, 4138, 
	4145, 4149, 4155, 4161, 4167, 4173, 4179, 4185, 
	4192, 4199, 4203, 4209, 4213, 4219, 4225, 4231, 
	4237, 4243, 4249, 4253, 4259, 4265, 4271, 4277, 
	4283, 4287, 4293, 4299, 4305, 4311, 4317, 4323, 
	4329, 4333, 4339, 4343, 4349, 4355, 4362, 4369, 
	4381, 4389, 4397, 4403, 4410, 4417, 4424, 4429, 
	4435, 4441, 4447, 4451, 4459, 4467, 4473, 4476, 
	4477, 4479, 4481, 4483, 4484, 4492, 4500, 4508, 
	4517, 4524, 4531, 4539, 4548, 4554, 4561, 4568, 
	4575, 4581, 4588, 4595, 4604, 4611, 4616, 4619, 
	4624, 4630, 4637, 4644, 4651, 4659, 4665, 4671, 
	4676, 4682, 4689, 4697, 4703, 4709, 4715, 4721, 
	4728, 4733, 4738, 4745, 4750, 4758, 4766, 4774, 
	4783, 4790, 4795, 4802, 4809, 4816, 4824, 4830, 
	4836, 4841, 4847, 4853, 4859, 4865, 4871, 4878, 
	4883, 4888, 4895, 4900, 4906, 4912, 4918, 4925, 
	4930, 4935, 4942, 4951, 4959, 4965, 4973, 4981, 
	4989, 4998, 5005, 5012, 5018, 5025, 5032, 5037, 
	5048, 5058, 5067, 5074, 5079, 5085, 5091, 5097, 
	5101, 5111, 5122, 5133, 5144, 5153, 5163, 5171, 
	5177, 5180, 5181, 5183, 5185, 5187, 5188, 5195, 
	5203, 5211, 5219, 5226, 5234, 5242, 5250, 5259, 
	5266, 5273, 5279, 5286, 5294, 5303, 5312, 5321, 
	5329, 5336, 5342, 5348, 5354, 5361, 5366, 5371, 
	5378, 5383, 5396, 5406, 5416, 5424, 5436, 5451, 
	5458, 5463, 5472, 5481, 5490, 5495, 5510, 5523, 
	5533, 5543, 5553, 5564, 5581, 5590, 5595, 5612, 
	5629, 5646, 5656, 5666, 5676, 5686, 5695, 5700, 
	5707, 5714, 5720, 5734, 5740, 5754, 5767, 5778, 
	5788, 5798, 5808, 5818, 5827, 5832, 5845, 5853, 
	5861, 5867, 5872, 5880, 5885, 5890, 5906, 5909, 
	5913, 5914, 5919, 5921, 5923, 5925, 5927, 5928, 
	5929, 5931, 5935, 5937, 5939, 5941, 5942, 5943, 
	5947, 5952, 5958, 5961, 5965, 5970, 5976, 5981, 
	5983, 5985, 5987, 5990, 5991, 5992, 5996, 5997, 
	6002, 6004, 6006, 6008, 6010, 6012, 6014, 6016, 
	6018, 6019, 6020, 6024, 6026, 6028, 6030, 6032, 
	6033, 6037, 6039, 6043, 6046, 6054, 6061, 6065, 
	6069, 6071, 6073, 6077, 6084, 6088, 6094, 6098, 
	6099, 6101, 6103, 6105, 6107, 6111, 6118, 6122, 
	6128, 6130, 6132, 6134, 6137, 6138, 6139, 6143, 
	6148, 6149, 6151, 6153, 6155, 6157, 6159, 6161, 
	6162, 6166, 6171, 6173, 6175, 6177, 6179, 6181, 
	6184, 6185, 6187, 6189, 6191, 6193, 6194, 6196, 
	6197, 6198, 6206, 6215, 6217, 6247, 6277, 6309, 
	6341, 6374, 6407, 6440, 6482, 6516, 6550, 6582, 
	6617, 6649, 6681, 6714, 6747, 6780, 6822, 6856, 
	6890, 6925, 6957, 6989, 6991, 6994, 6998, 7001, 
	7007, 7011, 7017, 7025, 7027, 7047, 7048, 7050, 
	7052, 7054, 7056, 7057, 7058, 7060, 7062, 7064, 
	7066, 7067, 7068, 7070, 7072, 7074, 7076, 7078, 
	7080, 7082, 7083, 7084, 7086, 7088, 7090, 7092, 
	7094, 7096, 7098, 7099, 7103, 7105, 7107, 7109, 
	7111, 7113, 7115, 7117, 7118, 7126, 7128, 7130, 
	7132, 7133, 7135, 7137, 7139, 7140, 7142, 7144, 
	7146, 7147, 7148, 7150, 7152, 7157, 7165, 7174, 
	7177, 7187, 7190, 7194, 7197, 7200, 7204, 7213, 
	7215, 7217, 7219, 7221, 7224, 7232, 7241, 7244, 
	7254, 7257, 7261, 7264, 7267, 7271, 7280, 7288, 
	7290, 7292, 7294, 7297, 7305, 7314, 7317, 7327, 
	7330, 7334, 7337, 7340, 7344, 7353, 7356, 7364, 
	7373, 7376, 7386, 7389, 7393, 7396, 7399, 7403, 
	7412, 7417, 7425, 7434, 7437, 7447, 7450, 7454, 
	7457, 7460, 7464, 7473, 7475, 7477, 7480, 7488, 
	7497, 7500, 7510, 7513, 7517, 7520, 7523, 7527, 
	7536, 7539, 7547, 7556, 7559, 7569, 7572, 7576, 
	7579, 7582, 7586, 7595, 7599, 7601, 7603, 7605, 
	7607, 7609, 7611, 7613, 7614, 7622, 7624, 7626, 
	7628, 7629, 7631, 7633, 7635, 7636, 7638, 7640, 
	7642, 7643, 7644, 7646, 7648, 7653, 7661, 7670, 
	7673, 7683, 7686, 7690, 7693, 7696, 7700, 7709, 
	7711, 7713, 7715, 7717, 7720, 7728, 7737, 7740, 
	7750, 7753, 7757, 7760, 7763, 7767, 7776, 7784, 
	7786, 7788, 7790, 7793, 7801, 7810, 7813, 7823, 
	7826, 7830, 7833, 7836, 7840, 7849, 7852, 7860, 
	7869, 7872, 7882, 7885, 7889, 7892, 7895, 7899, 
	7908, 7913, 7921, 7930, 7933, 7943, 7946, 7950, 
	7953, 7956, 7960, 7969, 7971, 7973, 7976, 7984, 
	7993, 7996, 8006, 8009, 8013, 8016, 8019, 8023, 
	8032, 8035, 8043, 8052, 8055, 8065, 8068, 8072, 
	8075, 8078, 8082, 8091, 8101, 8105, 8111, 8113, 
	8116, 8119, 8124, 8140, 8143, 8147, 8151, 8154, 
	8157, 8161, 8164, 8166, 8168, 8182, 8183, 8186, 
	8197, 8206, 8270, 8272, 8278, 8280, 8282, 8286, 
	8290, 8300, 8302, 8308, 8309, 8312, 8317, 8319, 
	8321, 8323, 8324, 8352, 8380, 8404, 8425, 8430, 
	8438, 8444, 8450, 8456, 8462, 8468, 8474, 8480, 
	8486, 8492, 8498, 8504, 8510, 8517, 8524, 8534, 
	8544, 8554, 8564, 8574, 8583, 8589, 8595, 8601, 
	8607, 8613, 8619, 8625, 8631, 8637, 8643, 8645, 
	8645, 8655, 8665, 8675, 8684, 8690, 8696, 8702, 
	8708, 8714, 8720, 8726, 8732, 8738, 8744, 8746, 
	8746, 8756, 8766, 8776, 8786, 8796, 8806, 8815, 
	8821, 8827, 8833, 8839, 8845, 8851, 8857, 8863, 
	8869, 8875, 8877, 8877, 8887, 8897, 8907, 8917, 
	8926, 8933, 8941, 8948, 8955, 8962, 8969, 8976, 
	8983, 8990, 8997, 9004, 9007, 9008, 9018, 9028, 
	9038, 9048, 9057, 9063, 9069, 9075, 9081, 9087, 
	9093, 9099, 9105, 9111, 9117, 9119, 9119, 9129, 
	9139, 9149, 9160, 9181, 9209, 9237, 9261, 9266, 
	9275, 9285, 9295, 9304, 9310, 9316, 9322, 9328, 
	9334, 9340, 9346, 9352, 9358, 9364, 9366, 9366, 
	9378, 9388, 9398, 9408, 9417, 9419, 9431, 9441, 
	9450, 9456, 9462, 9468, 9474, 9480, 9486, 9492, 
	9498, 9504, 9510, 9512, 9512, 9522, 9531, 9537, 
	9543, 9549, 9555, 9561, 9567, 9573, 9579, 9585, 
	9591, 9593, 9593, 9603, 9613, 9623, 9633, 9643, 
	9652, 9658, 9664, 9670, 9676, 9682, 9688, 9694, 
	9700, 9706, 9712, 9714, 9714, 9724, 9734, 9744, 
	9754, 9764, 9773, 9779, 9785, 9791, 9797, 9803, 
	9809, 9815, 9821, 9827, 9833, 9835, 9835, 9847, 
	9857, 9866, 9872, 9878, 9884, 9890, 9896, 9902, 
	9908, 9914, 9920, 9926, 9928, 9928, 9934, 9940, 
	9946, 9952, 9958, 9964, 9970, 9976, 9982, 9988, 
	9990, 9990, 9996, 10002, 10008, 10014, 10020, 10026, 
	10032, 10038, 10044, 10050, 10052, 10052, 10062, 10072, 
	10082, 10091, 10098, 10100, 10107, 10114, 10121, 10128, 
	10135, 10142, 10149, 10156, 10163, 10166, 10167, 10177, 
	10187, 10197, 10206, 10212, 10218, 10224, 10230, 10236, 
	10242, 10248, 10254, 10260, 10266, 10268, 10268, 10274, 
	10280, 10286, 10292, 10298, 10304, 10310, 10316, 10322, 
	10328, 10330, 10330, 10340, 10350, 10360, 10369, 10375, 
	10381, 10387, 10393, 10399, 10405, 10411, 10417, 10423, 
	10429, 10431, 10431, 10454, 10459, 10464, 10471, 10477, 
	10484, 10490, 10497, 10504, 10511, 10517, 10522, 10527, 
	10532, 10538, 10544, 10555, 10565, 10576, 10586, 10597, 
	10607, 10608, 10631, 10635, 10639, 10643, 10667, 10689, 
	10719, 10749, 10753, 10755, 10756, 10757, 10761, 10763, 
	10764, 10765, 10767, 10772
};

static const short _dtext_trans_keys[] = {
	0, 9, 10, 32, 0, 9, 10, 32, 
	60, 91, 67, 72, 84, 99, 104, 116, 
	69, 101, 78, 110, 84, 116, 69, 101, 
	82, 114, 62, 82, 114, 62, 0, 9, 
	10, 32, 65, 97, 66, 98, 76, 108, 
	69, 101, 62, 67, 72, 84, 99, 104, 
	116, 69, 101, 78, 110, 84, 116, 69, 
	101, 82, 114, 93, 82, 114, 93, 65, 
	97, 66, 98, 76, 108, 69, 101, 93, 
	0, 9, 10, 13, 32, 9, 32, 42, 
	76, 108, 79, 111, 67, 99, 75, 107, 
	81, 113, 85, 117, 79, 111, 84, 116, 
	69, 101, 62, 69, 79, 101, 111, 68, 
	76, 100, 108, 69, 101, 9, 32, 61, 
	62, 9, 32, 61, 9, 32, 48, 57, 
	65, 90, 97, 122, 62, 48, 57, 65, 
	90, 97, 122, 0, 9, 10, 32, 0, 
	9, 10, 32, 79, 111, 82, 114, 9, 
	32, 61, 62, 0, 9, 10, 13, 32, 
	61, 62, 0, 10, 13, 62, 0, 9, 
	10, 13, 32, 62, 88, 120, 80, 112, 
	65, 97, 78, 110, 68, 100, 9, 32, 
	61, 62, 0, 9, 10, 13, 32, 61, 
	62, 0, 10, 13, 62, 0, 9, 10, 
	13, 32, 62, 79, 111, 68, 100, 84, 
	116, 69, 101, 88, 120, 84, 116, 62, 
	0, 9, 10, 32, 80, 112, 79, 111, 
	73, 105, 76, 108, 69, 101, 82, 114, 
	62, 83, 115, 62, 65, 78, 97, 110, 
	62, 35, 46, 33, 35, 38, 45, 95, 
	47, 58, 65, 90, 97, 122, 33, 35, 
	38, 46, 95, 45, 58, 65, 90, 97, 
	122, 69, 79, 101, 111, 68, 76, 100, 
	108, 69, 101, 9, 32, 61, 93, 9, 
	32, 61, 9, 32, 48, 57, 65, 90, 
	97, 122, 93, 48, 57, 65, 90, 97, 
	122, 79, 111, 82, 114, 9, 32, 61, 
	93, 0, 9, 10, 13, 32, 61, 93, 
	0, 10, 13, 93, 0, 9, 10, 13, 
	32, 93, 88, 120, 80, 112, 65, 97, 
	78, 110, 68, 100, 9, 32, 61, 93, 
	0, 9, 10, 13, 32, 61, 93, 0, 
	10, 13, 93, 0, 9, 10, 13, 32, 
	93, 79, 111, 68, 100, 84, 116, 69, 
	101, 88, 120, 84, 116, 93, 85, 117, 
	79, 111, 84, 116, 69, 101, 93, 80, 
	112, 79, 111, 73, 105, 76, 108, 69, 
	101, 82, 114, 83, 93, 115, 93, 65, 
	78, 97, 110, 93, 96, 0, 9, 10, 
	32, 48, 57, 65, 90, 97, 122, 0, 
	10, 0, 10, 0, 10, 96, 0, 10, 
	96, 0, 10, 96, 0, 9, 10, 32, 
	0, 9, 10, 32, 48, 57, 65, 90, 
	97, 122, 0, 9, 10, 32, 66, 69, 
	73, 83, 85, 98, 101, 105, 115, 117, 
	62, 77, 109, 62, 62, 84, 116, 82, 
	114, 79, 111, 78, 110, 71, 103, 62, 
	62, 77, 109, 62, 62, 84, 116, 82, 
	114, 79, 111, 78, 110, 71, 103, 62, 
	66, 73, 83, 85, 98, 105, 115, 117, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	-128, -65, -128, -65, -128, -65, 0, 9, 
	10, 32, 0, 9, 10, 32, 0, 9, 
	10, 32, 60, 91, 72, 83, 84, 104, 
	115, 116, 82, 114, 62, 0, 9, 10, 
	32, 80, 112, 79, 111, 73, 105, 76, 
	108, 69, 101, 82, 114, 62, 83, 115, 
	0, 9, 10, 32, 62, 65, 97, 66, 
	98, 76, 108, 69, 101, 62, 72, 83, 
	84, 104, 115, 116, 82, 114, 93, 80, 
	112, 79, 111, 73, 105, 76, 108, 69, 
	101, 82, 114, 83, 93, 115, 93, 65, 
	97, 66, 98, 76, 108, 69, 101, 93, 
	47, 67, 84, 99, 116, 69, 79, 101, 
	111, 78, 110, 84, 116, 69, 101, 82, 
	114, 62, 76, 108, 79, 111, 82, 114, 
	2366, 2622, 68, 72, 78, 100, 104, 110, 
	62, 62, 62, 47, 67, 84, 99, 116, 
	69, 79, 101, 111, 78, 110, 84, 116, 
	69, 101, 82, 114, 93, 76, 108, 79, 
	111, 82, 114, 2397, 2653, 68, 72, 78, 
	100, 104, 110, 93, 93, 93, 9, 32, 
	42, 0, 9, 10, 13, 32, 47, 67, 
	72, 78, 83, 84, 99, 104, 110, 115, 
	116, 66, 67, 69, 81, 83, 84, 98, 
	99, 101, 113, 115, 116, 76, 108, 79, 
	111, 67, 99, 75, 107, 81, 113, 85, 
	117, 79, 111, 84, 116, 69, 101, 3165, 
	88, 120, 80, 112, 65, 97, 78, 110, 
	68, 100, 3646, 85, 117, 79, 111, 84, 
	116, 69, 101, 3134, 80, 112, 79, 111, 
	73, 105, 76, 108, 69, 101, 82, 114, 
	62, 83, 115, 62, 79, 111, 68, 100, 
	69, 101, 9, 32, 61, 62, 9, 32, 
	61, 9, 32, 48, 57, 65, 90, 97, 
	122, 62, 48, 57, 65, 90, 97, 122, 
	79, 111, 68, 100, 84, 116, 69, 101, 
	88, 120, 84, 116, 62, 49, 54, 35, 
	46, 33, 35, 38, 45, 95, 47, 58, 
	65, 90, 97, 122, 33, 35, 38, 46, 
	95, 45, 58, 65, 90, 97, 122, 47, 
	67, 72, 78, 83, 84, 99, 104, 110, 
	115, 116, 67, 69, 81, 83, 84, 99, 
	101, 113, 115, 116, 88, 120, 80, 112, 
	65, 97, 78, 110, 68, 100, 3677, 80, 
	112, 79, 111, 73, 105, 76, 108, 69, 
	101, 82, 114, 83, 93, 115, 93, 79, 
	111, 68, 100, 69, 101, 9, 32, 61, 
	93, 9, 32, 61, 9, 32, 48, 57, 
	65, 90, 97, 122, 93, 48, 57, 65, 
	90, 97, 122, 79, 111, 68, 100, 84, 
	116, 69, 101, 88, 120, 84, 116, 93, 
	96, 96, 0, 9, 10, 32, 48, 57, 
	65, 90, 97, 122, 0, 10, 0, 10, 
	0, 10, 96, 0, 10, 96, 0, 10, 
	96, 0, 9, 10, 32, 0, 9, 10, 
	32, 48, 57, 65, 90, 97, 122, 0, 
	9, 10, 32, 34, 58, 35, 47, 72, 
	91, 104, -128, -65, -128, -65, -99, -128, 
	-65, -128, -84, -82, -65, -128, -127, -65, 
	-125, -121, -110, -109, -99, -65, -68, -67, 
	-128, -65, -128, -120, -118, -68, -66, -65, 
	-128, -100, -98, -97, -95, -94, -92, -65, 
	-128, -65, -30, -29, -17, 32, 34, 35, 
	39, 44, 46, 60, 62, 63, 91, 93, 
	-128, -63, -62, -33, -32, -18, -16, -12, 
	-11, 0, 9, 13, 58, 59, -128, -65, 
	-128, -65, -99, -128, -65, -128, -84, -82, 
	-65, -128, -127, -65, -125, -121, -110, -109, 
	-99, -65, -68, -67, -128, -65, -128, -120, 
	-118, -68, -66, -65, -128, -100, -98, -97, 
	-95, -94, -92, -65, -128, -65, -30, -29, 
	-17, 32, 34, 35, 39, 44, 46, 60, 
	62, 63, 91, 93, -128, -63, -62, -33, 
	-32, -18, -16, -12, -11, 0, 9, 13, 
	58, 59, -30, -29, -17, 32, 34, 35, 
	39, 44, 46, 63, -128, -63, -62, -33, 
	-32, -18, -16, -12, -11, 0, 9, 13, 
	58, 59, -128, -65, -128, -65, -99, -128, 
	-65, -128, -84, -82, -65, -128, -127, -65, 
	-125, -121, -110, -109, -99, -65, -68, -67, 
	-128, -65, -128, -120, -118, -68, -66, -65, 
	-128, -100, -98, -97, -95, -94, -92, -65, 
	-128, -65, 84, 116, 84, 116, 80, 112, 
	58, 83, 115, 47, 47, 45, 95, -62, 
	-33, -32, -17, -16, -12, 48, 57, 65, 
	90, 97, 122, -128, -65, 45, 46, 95, 
	-62, -33, -32, -17, -16, -12, 48, 57, 
	65, 90, 97, 122, -128, -65, -128, -65, 
	-30, -29, -17, 45, 95, -62, -33, -32, 
	-18, -16, -12, 48, 57, 65, 90, 97, 
	122, -128, -65, -128, -65, -99, -128, -65, 
	-83, -128, -65, -30, -29, -17, 35, 46, 
	47, 58, 63, 95, -62, -33, -32, -18, 
	-16, -12, 45, 57, 65, 90, 97, 122, 
	-128, -127, -65, -128, -126, -125, -121, -120, 
	-111, -110, -109, -108, -100, -99, -65, -68, 
	-67, -128, -65, -119, -67, -128, -65, -99, 
	-96, -93, -128, -65, -128, -65, 48, 57, 
	58, 35, 47, 72, 104, 0, 32, 93, 
	9, 13, 84, 116, 84, 116, 80, 112, 
	58, 83, 115, 47, 47, 0, 32, 9, 
	13, 58, 91, 9, 32, 58, 60, 62, 
	92, 93, 124, 10, 13, 9, 32, 35, 
	93, 124, 10, 13, 9, 32, 35, 93, 
	124, 10, 13, 32, 93, 124, 9, 13, 
	9, 32, 35, 93, 124, 10, 13, 65, 
	90, 9, 32, 45, 93, 95, 124, 48, 
	57, 65, 90, 97, 122, 9, 32, 93, 
	124, 93, 9, 32, 93, 124, 10, 13, 
	9, 32, 93, 124, 10, 13, 9, 32, 
	93, 124, 10, 13, 93, 9, 32, 45, 
	93, 95, 124, 48, 57, 65, 90, 97, 
	122, 32, 45, 95, 48, 57, 65, 90, 
	97, 122, 9, 32, 35, 93, 124, 10, 
	13, 9, 32, 35, 93, 124, 10, 13, 
	9, 32, 35, 93, 124, 10, 13, 9, 
	32, 93, 124, 10, 13, 65, 90, 9, 
	32, 45, 93, 95, 124, 10, 13, 48, 
	57, 65, 90, 97, 122, 9, 32, 93, 
	124, 10, 13, 93, 9, 32, 45, 93, 
	95, 124, 10, 13, 48, 57, 65, 90, 
	97, 122, 9, 32, 45, 93, 95, 124, 
	10, 13, 48, 57, 65, 90, 97, 122, 
	9, 32, 45, 93, 95, 124, 10, 13, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	35, 93, 124, 10, 13, 9, 32, 62, 
	93, 124, 10, 13, 9, 32, 93, 95, 
	124, 10, 13, 9, 32, 60, 93, 124, 
	10, 13, 9, 32, 93, 124, 10, 13, 
	62, 9, 32, 35, 93, 9, 32, 35, 
	93, 65, 90, 9, 32, 45, 93, 95, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	93, 9, 32, 45, 93, 95, 48, 57, 
	65, 90, 97, 122, 32, 45, 95, 48, 
	57, 65, 90, 97, 122, 9, 32, 35, 
	58, 93, 124, 10, 13, 9, 32, 51, 
	93, 124, 10, 13, 9, 32, 35, 93, 
	124, 10, 13, 9, 32, 35, 93, 124, 
	10, 13, 9, 32, 35, 93, 124, 10, 
	13, 9, 32, 93, 124, 10, 13, 47, 
	95, 119, 124, 48, 57, 65, 90, 97, 
	122, 9, 32, 35, 93, 124, 9, 32, 
	35, 93, 124, 65, 90, 124, 9, 32, 
	35, 93, 124, 95, 124, 123, 0, 9, 
	32, 45, 58, 60, 62, 92, 124, 126, 
	10, 13, 123, 125, 0, 9, 32, 123, 
	124, 125, 10, 13, 0, 9, 32, 45, 
	58, 60, 62, 92, 123, 124, 125, 126, 
	10, 13, 0, 9, 32, 58, 60, 62, 
	92, 123, 124, 125, 10, 13, 0, 9, 
	32, 123, 124, 125, 10, 13, 9, 32, 
	124, 125, 0, 9, 10, 13, 32, 125, 
	11, 12, 0, 9, 10, 13, 32, 125, 
	11, 12, 0, 9, 10, 13, 32, 125, 
	11, 12, 0, 10, 13, 32, 125, 9, 
	12, 125, 125, 0, 9, 10, 13, 32, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 45, 58, 60, 62, 92, 123, 124, 
	125, 126, 11, 12, 0, 9, 10, 13, 
	32, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 45, 58, 60, 62, 92, 
	123, 124, 125, 126, 11, 12, 0, 9, 
	10, 13, 32, 58, 60, 62, 92, 123, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 124, 125, 11, 12, 125, 
	9, 32, 124, 125, 0, 9, 10, 13, 
	32, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 62, 125, 11, 12, 0, 
	9, 10, 13, 32, 95, 125, 11, 12, 
	0, 9, 10, 13, 32, 60, 125, 11, 
	12, 0, 9, 10, 13, 32, 124, 125, 
	11, 12, 0, 9, 10, 13, 32, 62, 
	125, 11, 12, 0, 9, 10, 13, 32, 
	58, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 123, 124, 125, 11, 12, 
	0, 9, 10, 13, 32, 51, 125, 11, 
	12, 0, 9, 10, 13, 32, 123, 124, 
	125, 11, 12, 0, 9, 10, 13, 32, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 47, 125, 11, 12, 0, 9, 10, 
	13, 32, 95, 119, 124, 125, 11, 12, 
	48, 57, 65, 90, 97, 122, 0, 9, 
	10, 13, 32, 124, 125, 11, 12, 0, 
	9, 10, 13, 32, 124, 125, 11, 12, 
	0, 9, 10, 13, 32, 95, 125, 11, 
	12, 0, 9, 10, 13, 32, 124, 125, 
	11, 12, 9, 32, 124, 125, 0, 9, 
	32, 123, 124, 125, 10, 13, 0, 9, 
	32, 58, 123, 124, 125, 10, 13, 0, 
	9, 32, 123, 124, 125, 10, 13, 0, 
	9, 32, 123, 124, 125, 10, 13, 95, 
	119, 124, 48, 57, 65, 90, 97, 122, 
	124, 9, 32, 124, 125, 95, 124, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 35, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 35, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	35, 48, 57, 65, 90, 97, 122, 45, 
	61, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 35, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 47, 47, 
	45, 95, -62, -33, -32, -17, -16, -12, 
	48, 57, 65, 90, 97, 122, -128, -65, 
	45, 46, 95, -62, -33, -32, -17, -16, 
	-12, 48, 57, 65, 90, 97, 122, -128, 
	-65, -128, -65, -30, -29, -17, 45, 95, 
	-62, -33, -32, -18, -16, -12, 48, 57, 
	65, 90, 97, 122, -128, -65, -128, -65, 
	-99, -128, -65, -83, -128, -65, -30, -29, 
	-17, 35, 46, 47, 58, 63, 95, -62, 
	-33, -32, -18, -16, -12, 45, 57, 65, 
	90, 97, 122, -128, -127, -65, -128, -126, 
	-125, -121, -120, -111, -110, -109, -108, -100, 
	-99, -65, -68, -67, -128, -65, -119, -67, 
	-128, -65, -99, -96, -93, -128, -65, -128, 
	-65, -128, -65, -128, -65, -99, -128, -65, 
	-128, -84, -82, -65, -128, -127, -65, -125, 
	-121, -110, -109, -99, -65, -68, -67, -128, 
	-65, -128, -120, -118, -68, -66, -65, -128, 
	-100, -98, -97, -95, -94, -92, -65, -128, 
	-65, -30, -29, -17, 32, 34, 35, 39, 
	44, 46, 60, 62, 63, 91, 93, -128, 
	-63, -62, -33, -32, -18, -16, -12, -11, 
	0, 9, 13, 58, 59, -128, -65, -128, 
	-65, -99, -128, -65, -128, -84, -82, -65, 
	-128, -127, -65, -125, -121, -110, -109, -99, 
	-65, -68, -67, -128, -65, -128, -120, -118, 
	-68, -66, -65, -128, -100, -98, -97, -95, 
	-94, -92, -65, -128, -65, -30, -29, -17, 
	32, 34, 35, 39, 44, 46, 60, 62, 
	63, 91, 93, -128, -63, -62, -33, -32, 
	-18, -16, -12, -11, 0, 9, 13, 58, 
	59, -30, -29, -17, 32, 34, 35, 39, 
	44, 46, 63, -128, -63, -62, -33, -32, 
	-18, -16, -12, -11, 0, 9, 13, 58, 
	59, -128, -65, -128, -65, -99, -128, -65, 
	-128, -84, -82, -65, -128, -127, -65, -125, 
	-121, -110, -109, -99, -65, -68, -67, -128, 
	-65, -128, -120, -118, -68, -66, -65, -128, 
	-100, -98, -97, -95, -94, -92, -65, -128, 
	-65, 48, 57, 65, 97, 67, 99, 84, 
	116, 73, 105, 79, 111, 78, 110, 32, 
	35, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 35, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 80, 112, 48, 57, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 65, 90, 97, 122, 
	47, 48, 57, 65, 90, 97, 122, 47, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 47, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 35, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 35, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 35, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	65, 73, 84, 97, 105, 116, 76, 108, 
	73, 105, 65, 97, 83, 115, 32, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 77, 109, 80, 112, 76, 108, 
	73, 105, 67, 99, 65, 97, 84, 116, 
	73, 105, 79, 111, 78, 110, 32, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 82, 114, 65, 97, 78, 110, 
	83, 115, 76, 108, 65, 97, 84, 116, 
	73, 105, 79, 111, 78, 110, 32, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 35, 48, 57, 65, 90, 97, 
	122, 80, 112, 48, 57, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 35, 82, 114, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 69, 101, 
	80, 112, 79, 111, 82, 114, 84, 116, 
	32, 35, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 35, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 93, 0, 10, 13, 40, 93, 
	72, 104, 84, 116, 84, 116, 80, 112, 
	58, 83, 115, 47, 47, 0, 32, 9, 
	13, 0, 32, 41, 9, 13, 58, 0, 
	10, 13, 66, 67, 69, 73, 81, 83, 
	84, 85, 93, 98, 99, 101, 105, 113, 
	115, 116, 117, 0, 10, 13, 93, 0, 
	10, 13, 69, 79, 93, 101, 111, 0, 
	10, 13, 78, 93, 110, 0, 10, 13, 
	84, 93, 116, 0, 10, 13, 69, 93, 
	101, 0, 10, 13, 82, 93, 114, 0, 
	10, 13, 93, 0, 10, 13, 76, 93, 
	108, 0, 10, 13, 79, 93, 111, 0, 
	10, 13, 82, 93, 114, 2397, 2653, -128, 
	-1, 1, 9, 11, 12, 14, 92, 94, 
	127, 0, 10, 13, 88, 93, 120, 0, 
	10, 13, 80, 93, 112, 0, 10, 13, 
	65, 93, 97, 0, 10, 13, 78, 93, 
	110, 0, 10, 13, 68, 93, 100, 3421, 
	3677, -128, -1, 1, 9, 11, 12, 14, 
	92, 94, 127, 0, 10, 13, 93, 0, 
	10, 13, 85, 93, 117, 0, 10, 13, 
	79, 93, 111, 0, 10, 13, 84, 93, 
	116, 0, 10, 13, 69, 93, 101, 2909, 
	3165, -128, -1, 1, 9, 11, 12, 14, 
	92, 94, 127, 0, 10, 13, 80, 93, 
	112, 0, 10, 13, 79, 93, 111, 0, 
	10, 13, 73, 93, 105, 0, 10, 13, 
	76, 93, 108, 0, 10, 13, 69, 93, 
	101, 0, 10, 13, 82, 93, 114, 0, 
	10, 13, 83, 93, 115, 0, 10, 13, 
	93, 0, 10, 13, 68, 72, 78, 93, 
	100, 104, 110, 0, 10, 13, 93, 0, 
	10, 13, 93, 0, 10, 13, 93, 0, 
	10, 13, 93, 0, 10, 13, 82, 93, 
	114, 0, 10, 13, 93, 0, 10, 13, 
	69, 79, 93, 101, 111, 0, 10, 13, 
	78, 93, 110, 0, 10, 13, 84, 93, 
	116, 0, 10, 13, 69, 93, 101, 0, 
	10, 13, 82, 93, 114, 0, 10, 13, 
	93, 0, 10, 13, 68, 76, 93, 100, 
	108, 0, 10, 13, 69, 93, 101, 0, 
	9, 10, 13, 32, 61, 93, 0, 9, 
	10, 13, 32, 61, 93, 0, 9, 10, 
	13, 32, 93, 48, 57, 65, 90, 97, 
	122, 0, 10, 13, 93, 48, 57, 65, 
	90, 97, 122, 0, 9, 10, 13, 32, 
	93, 0, 9, 10, 13, 32, 93, 0, 
	10, 13, 79, 93, 111, 0, 10, 13, 
	82, 93, 114, 0, 9, 10, 13, 32, 
	61, 93, 0, 9, 10, 13, 32, 61, 
	93, 0, 10, 13, 93, 0, 9, 10, 
	13, 32, 93, 0, 10, 13, 88, 93, 
	120, 0, 10, 13, 80, 93, 112, 0, 
	10, 13, 65, 93, 97, 0, 10, 13, 
	78, 93, 110, 0, 10, 13, 68, 93, 
	100, 0, 9, 10, 13, 32, 61, 93, 
	0, 9, 10, 13, 32, 61, 93, 0, 
	10, 13, 93, 0, 9, 10, 13, 32, 
	93, 0, 10, 13, 93, 0, 10, 13, 
	79, 93, 111, 0, 10, 13, 68, 93, 
	100, 0, 10, 13, 84, 93, 116, 0, 
	10, 13, 69, 93, 101, 0, 10, 13, 
	88, 93, 120, 0, 10, 13, 84, 93, 
	116, 0, 10, 13, 93, 0, 9, 10, 
	13, 32, 93, 0, 10, 13, 85, 93, 
	117, 0, 10, 13, 79, 93, 111, 0, 
	10, 13, 84, 93, 116, 0, 10, 13, 
	69, 93, 101, 0, 10, 13, 93, 0, 
	10, 13, 80, 93, 112, 0, 10, 13, 
	79, 93, 111, 0, 10, 13, 73, 93, 
	105, 0, 10, 13, 76, 93, 108, 0, 
	10, 13, 69, 93, 101, 0, 10, 13, 
	82, 93, 114, 0, 10, 13, 83, 93, 
	115, 0, 10, 13, 93, 0, 10, 13, 
	78, 93, 110, 0, 10, 13, 93, 0, 
	10, 13, 82, 93, 114, 0, 10, 13, 
	76, 93, 108, 0, 9, 10, 13, 32, 
	61, 93, 0, 9, 10, 13, 32, 61, 
	93, 0, 9, 10, 13, 32, 34, 35, 
	39, 47, 72, 93, 104, 0, 10, 13, 
	35, 47, 72, 93, 104, 0, 10, 13, 
	32, 34, 93, 9, 12, 0, 9, 10, 
	13, 32, 93, 0, 9, 10, 13, 32, 
	40, 93, 0, 9, 10, 13, 32, 91, 
	93, 0, 9, 10, 13, 32, 91, 93, 
	0, 10, 13, 47, 93, 0, 10, 13, 
	85, 93, 117, 0, 10, 13, 82, 93, 
	114, 0, 10, 13, 76, 93, 108, 0, 
	10, 13, 93, 0, 9, 10, 13, 32, 
	40, 91, 93, 0, 9, 10, 13, 32, 
	72, 91, 104, 0, 9, 10, 13, 32, 
	91, 9, 32, 91, 47, 85, 117, 82, 
	114, 76, 108, 93, 0, 9, 10, 13, 
	32, 84, 91, 116, 0, 9, 10, 13, 
	32, 84, 91, 116, 0, 9, 10, 13, 
	32, 80, 91, 112, 0, 9, 10, 13, 
	32, 58, 83, 91, 115, 0, 9, 10, 
	13, 32, 47, 91, 0, 9, 10, 13, 
	32, 47, 91, 0, 9, 10, 13, 32, 
	91, 11, 12, 0, 9, 10, 13, 32, 
	41, 91, 11, 12, 0, 32, 41, 47, 
	9, 13, 0, 32, 41, 85, 117, 9, 
	13, 0, 32, 41, 82, 114, 9, 13, 
	0, 32, 41, 76, 108, 9, 13, 0, 
	32, 41, 93, 9, 13, 0, 9, 10, 
	13, 32, 58, 91, 0, 9, 10, 13, 
	32, 91, 93, 0, 10, 13, 32, 34, 
	40, 93, 9, 12, 0, 32, 34, 72, 
	104, 9, 13, 0, 32, 34, 9, 13, 
	9, 32, 93, 0, 9, 10, 13, 32, 
	0, 9, 10, 13, 32, 91, 0, 32, 
	34, 84, 116, 9, 13, 0, 32, 34, 
	84, 116, 9, 13, 0, 32, 34, 80, 
	112, 9, 13, 0, 32, 34, 58, 83, 
	115, 9, 13, 0, 32, 34, 47, 9, 
	13, 0, 32, 34, 47, 9, 13, 0, 
	32, 34, 9, 13, 0, 32, 34, 41, 
	9, 13, 0, 9, 32, 41, 93, 10, 
	13, 0, 9, 10, 13, 32, 41, 11, 
	12, 0, 32, 34, 58, 9, 13, 0, 
	10, 13, 84, 93, 116, 0, 10, 13, 
	84, 93, 116, 0, 10, 13, 80, 93, 
	112, 0, 10, 13, 58, 83, 93, 115, 
	0, 10, 13, 47, 93, 0, 10, 13, 
	47, 93, 0, 10, 13, 32, 93, 9, 
	12, 0, 10, 13, 58, 93, 0, 9, 
	10, 13, 32, 93, 11, 12, 0, 10, 
	13, 35, 47, 72, 93, 104, 0, 10, 
	13, 32, 39, 93, 9, 12, 0, 10, 
	13, 32, 39, 40, 93, 9, 12, 0, 
	32, 39, 72, 104, 9, 13, 0, 32, 
	39, 9, 13, 0, 32, 39, 84, 116, 
	9, 13, 0, 32, 39, 84, 116, 9, 
	13, 0, 32, 39, 80, 112, 9, 13, 
	0, 32, 39, 58, 83, 115, 9, 13, 
	0, 32, 39, 47, 9, 13, 0, 32, 
	39, 47, 9, 13, 0, 32, 39, 9, 
	13, 0, 32, 39, 41, 9, 13, 0, 
	32, 39, 58, 9, 13, 0, 10, 13, 
	84, 93, 116, 0, 10, 13, 84, 93, 
	116, 0, 10, 13, 80, 93, 112, 0, 
	10, 13, 58, 83, 93, 115, 0, 10, 
	13, 47, 93, 0, 10, 13, 47, 93, 
	0, 10, 13, 32, 93, 9, 12, 0, 
	10, 13, 58, 93, 0, 10, 13, 84, 
	93, 116, 0, 10, 13, 84, 93, 116, 
	0, 10, 13, 80, 93, 112, 0, 10, 
	13, 58, 83, 93, 115, 0, 10, 13, 
	47, 93, 0, 10, 13, 47, 93, 0, 
	10, 13, 32, 93, 9, 12, 0, 9, 
	10, 13, 32, 40, 93, 11, 12, 0, 
	9, 32, 72, 93, 104, 10, 13, 0, 
	9, 32, 93, 10, 13, 0, 9, 32, 
	84, 93, 116, 10, 13, 0, 9, 32, 
	84, 93, 116, 10, 13, 0, 9, 32, 
	80, 93, 112, 10, 13, 0, 9, 32, 
	58, 83, 93, 115, 10, 13, 0, 9, 
	32, 47, 93, 10, 13, 0, 9, 32, 
	47, 93, 10, 13, 0, 9, 32, 93, 
	10, 13, 0, 9, 32, 41, 93, 10, 
	13, 0, 9, 32, 58, 93, 10, 13, 
	0, 10, 13, 58, 93, 0, 9, 10, 
	13, 32, 35, 40, 47, 72, 93, 104, 
	0, 9, 10, 13, 32, 35, 47, 72, 
	93, 104, 0, 9, 10, 13, 32, 91, 
	93, 11, 12, 0, 9, 10, 13, 32, 
	91, 93, 0, 10, 13, 47, 93, 0, 
	10, 13, 85, 93, 117, 0, 10, 13, 
	82, 93, 114, 0, 10, 13, 76, 93, 
	108, 0, 10, 13, 93, 0, 9, 10, 
	13, 32, 47, 91, 93, 11, 12, 0, 
	9, 10, 13, 32, 85, 91, 93, 117, 
	11, 12, 0, 9, 10, 13, 32, 82, 
	91, 93, 114, 11, 12, 0, 9, 10, 
	13, 32, 76, 91, 93, 108, 11, 12, 
	0, 9, 10, 13, 32, 91, 93, 11, 
	12, 0, 9, 10, 13, 32, 40, 91, 
	93, 11, 12, 0, 9, 32, 72, 91, 
	104, 10, 13, 0, 9, 32, 91, 10, 
	13, 9, 32, 91, 47, 85, 117, 82, 
	114, 76, 108, 93, 0, 9, 32, 47, 
	91, 10, 13, 0, 9, 32, 85, 91, 
	117, 10, 13, 0, 9, 32, 82, 91, 
	114, 10, 13, 0, 9, 32, 76, 91, 
	108, 10, 13, 0, 9, 32, 91, 93, 
	10, 13, 0, 9, 32, 84, 91, 116, 
	10, 13, 0, 9, 32, 84, 91, 116, 
	10, 13, 0, 9, 32, 80, 91, 112, 
	10, 13, 0, 9, 32, 58, 83, 91, 
	115, 10, 13, 0, 9, 32, 47, 91, 
	10, 13, 0, 9, 32, 47, 91, 10, 
	13, 0, 9, 32, 91, 10, 13, 0, 
	9, 32, 41, 91, 10, 13, 0, 9, 
	32, 41, 47, 91, 10, 13, 0, 9, 
	32, 41, 85, 91, 117, 10, 13, 0, 
	9, 32, 41, 82, 91, 114, 10, 13, 
	0, 9, 32, 41, 76, 91, 108, 10, 
	13, 0, 9, 32, 41, 91, 93, 10, 
	13, 0, 9, 32, 58, 91, 10, 13, 
	0, 10, 13, 84, 93, 116, 0, 10, 
	13, 84, 93, 116, 0, 10, 13, 80, 
	93, 112, 0, 10, 13, 58, 83, 93, 
	115, 0, 10, 13, 47, 93, 0, 10, 
	13, 47, 93, 0, 10, 13, 32, 93, 
	9, 12, 0, 10, 13, 58, 93, 0, 
	9, 10, 13, 32, 58, 60, 62, 92, 
	93, 124, 11, 12, 0, 9, 10, 13, 
	32, 35, 93, 124, 11, 12, 0, 9, 
	10, 13, 32, 35, 93, 124, 11, 12, 
	0, 10, 13, 32, 93, 124, 9, 12, 
	0, 9, 10, 13, 32, 35, 93, 124, 
	11, 12, 65, 90, 0, 9, 10, 13, 
	32, 45, 93, 95, 124, 48, 57, 65, 
	90, 97, 122, 0, 9, 10, 13, 32, 
	93, 124, 0, 10, 13, 40, 93, 0, 
	9, 10, 13, 32, 93, 124, 11, 12, 
	0, 9, 10, 13, 32, 93, 124, 11, 
	12, 0, 9, 10, 13, 32, 93, 124, 
	11, 12, 0, 10, 13, 40, 93, 0, 
	9, 10, 13, 32, 45, 93, 95, 124, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 32, 45, 93, 95, 48, 57, 65, 
	90, 97, 122, 0, 9, 10, 13, 32, 
	35, 93, 124, 11, 12, 0, 9, 10, 
	13, 32, 35, 93, 124, 11, 12, 0, 
	9, 10, 13, 32, 35, 93, 124, 11, 
	12, 0, 9, 10, 13, 32, 93, 124, 
	11, 12, 65, 90, 0, 9, 10, 13, 
	32, 45, 93, 95, 124, 11, 12, 48, 
	57, 65, 90, 97, 122, 0, 9, 10, 
	13, 32, 93, 124, 11, 12, 0, 10, 
	13, 40, 93, 0, 9, 10, 13, 32, 
	45, 93, 95, 124, 11, 12, 48, 57, 
	65, 90, 97, 122, 0, 9, 10, 13, 
	32, 45, 93, 95, 124, 11, 12, 48, 
	57, 65, 90, 97, 122, 0, 9, 10, 
	13, 32, 45, 93, 95, 124, 11, 12, 
	48, 57, 65, 90, 97, 122, 0, 9, 
	10, 13, 32, 35, 93, 124, 11, 12, 
	0, 9, 10, 13, 32, 62, 93, 124, 
	11, 12, 0, 9, 10, 13, 32, 93, 
	95, 124, 11, 12, 0, 9, 10, 13, 
	32, 60, 93, 124, 11, 12, 0, 9, 
	10, 13, 32, 93, 124, 11, 12, 0, 
	10, 13, 62, 93, 0, 9, 10, 13, 
	32, 35, 93, 0, 9, 10, 13, 32, 
	35, 93, 0, 10, 13, 93, 65, 90, 
	0, 9, 10, 13, 32, 45, 93, 95, 
	48, 57, 65, 90, 97, 122, 0, 9, 
	10, 13, 32, 93, 0, 9, 10, 13, 
	32, 45, 93, 95, 48, 57, 65, 90, 
	97, 122, 0, 10, 13, 32, 45, 93, 
	95, 48, 57, 65, 90, 97, 122, 0, 
	9, 10, 13, 32, 35, 58, 93, 124, 
	11, 12, 0, 9, 10, 13, 32, 51, 
	93, 124, 11, 12, 0, 9, 10, 13, 
	32, 35, 93, 124, 11, 12, 0, 9, 
	10, 13, 32, 35, 93, 124, 11, 12, 
	0, 9, 10, 13, 32, 35, 93, 124, 
	11, 12, 0, 9, 10, 13, 32, 93, 
	124, 11, 12, 0, 10, 13, 47, 93, 
	0, 10, 13, 93, 95, 119, 124, 48, 
	57, 65, 90, 97, 122, 0, 9, 10, 
	13, 32, 35, 93, 124, 0, 9, 10, 
	13, 32, 35, 93, 124, 0, 10, 13, 
	93, 65, 90, 0, 10, 13, 93, 124, 
	0, 9, 10, 13, 32, 35, 93, 124, 
	0, 10, 13, 93, 95, 0, 10, 13, 
	93, 124, 66, 67, 69, 73, 81, 83, 
	84, 85, 98, 99, 101, 105, 113, 115, 
	116, 117, 62, 76, 108, 77, 88, 109, 
	120, 62, 62, 80, 84, 112, 116, 82, 
	114, 79, 111, 78, 110, 71, 103, 62, 
	62, 9, 32, 9, 32, 72, 104, 82, 
	114, 69, 101, 70, 102, 61, 34, 35, 
	47, 72, 104, 0, 32, 34, 9, 13, 
	0, 32, 34, 62, 9, 13, 0, 10, 
	13, 0, 10, 13, 60, 0, 10, 13, 
	47, 60, 0, 10, 13, 60, 65, 97, 
	0, 10, 13, 60, 62, 84, 116, 84, 
	116, 80, 112, 58, 83, 115, 47, 47, 
	0, 32, 9, 13, 58, 62, 76, 82, 
	108, 114, 79, 111, 67, 99, 75, 107, 
	81, 113, 85, 117, 79, 111, 84, 116, 
	69, 101, 62, 62, 69, 79, 101, 111, 
	78, 110, 84, 116, 69, 101, 82, 114, 
	62, 68, 76, 100, 108, 69, 101, 9, 
	32, 61, 62, 9, 32, 61, 9, 32, 
	48, 57, 65, 90, 97, 122, 62, 48, 
	57, 65, 90, 97, 122, 0, 9, 10, 
	32, 0, 9, 10, 32, 79, 111, 82, 
	114, 9, 32, 61, 62, 0, 9, 10, 
	13, 32, 61, 62, 0, 10, 13, 62, 
	0, 9, 10, 13, 32, 62, 77, 88, 
	109, 120, 62, 80, 112, 65, 97, 78, 
	110, 68, 100, 9, 32, 61, 62, 0, 
	9, 10, 13, 32, 61, 62, 0, 10, 
	13, 62, 0, 9, 10, 13, 32, 62, 
	84, 116, 84, 116, 80, 112, 58, 83, 
	115, 47, 47, 0, 32, 9, 13, 0, 
	32, 62, 9, 13, 58, 79, 111, 68, 
	100, 84, 116, 69, 101, 88, 120, 84, 
	116, 62, 0, 9, 10, 32, 62, 80, 
	84, 112, 116, 79, 111, 73, 105, 76, 
	108, 69, 101, 82, 114, 62, 83, 115, 
	62, 82, 114, 79, 111, 78, 110, 71, 
	103, 62, 78, 110, 62, 62, 896, 1023, 
	1025, 1032, 1038, 1055, 1057, 1151, 1086, 896, 
	1023, 1025, 1033, 1035, 1036, 1038, 1151, 896, 
	959, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 961, 962, 991, 992, 1006, 1008, 
	1012, 1013, 1023, 1025, 1032, 1038, 1055, 1069, 
	1071, 1072, 1081, 1089, 1114, 1121, 1146, 994, 
	995, 1007, 1057, 1063, 1067, 1119, 1151, 896, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 925, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 941, 994, 
	995, 1007, 1057, 1063, 1067, 1119, 1151, 896, 
	959, 960, 961, 962, 991, 992, 1006, 1008, 
	1012, 1013, 1023, 1025, 1032, 1038, 1055, 1069, 
	1071, 1072, 1081, 1089, 1114, 1121, 1146, 896, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	897, 959, 960, 961, 962, 991, 992, 1006, 
	1008, 1012, 1013, 1023, 1025, 1032, 1038, 1055, 
	1069, 1071, 1072, 1081, 1089, 1114, 1121, 1146, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	896, 898, 899, 903, 904, 913, 914, 915, 
	916, 924, 925, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 956, 957, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 959, 960, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 905, 957, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 925, 928, 
	931, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 925, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 941, 994, 995, 1007, 1057, 1063, 
	1067, 1119, 1151, 896, 959, 960, 961, 962, 
	991, 992, 1006, 1008, 1012, 1013, 1023, 1025, 
	1032, 1038, 1055, 1069, 1071, 1072, 1081, 1089, 
	1114, 1121, 1146, 896, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 897, 959, 960, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 898, 899, 903, 
	904, 913, 914, 915, 916, 924, 925, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 956, 957, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	896, 959, 960, 961, 962, 991, 992, 1006, 
	1008, 1012, 1013, 1023, 1025, 1032, 1038, 1055, 
	1069, 1071, 1072, 1081, 1089, 1114, 1121, 1146, 
	905, 957, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 925, 928, 931, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1124, 1139, 1151, 896, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 896, 959, 925, 
	896, 959, 896, 940, 942, 959, 896, 897, 
	959, 899, 903, 914, 915, 925, 959, 956, 
	957, 896, 959, 896, 904, 906, 956, 958, 
	959, 896, 924, 926, 927, 929, 930, 932, 
	959, 896, 959, 994, 995, 1007, 1151, 962, 
	991, 992, 1006, 1008, 1012, 1025, 1032, 1038, 
	1055, 1072, 1081, 1089, 1114, 1121, 1146, 47, 
	67, 99, 79, 111, 68, 100, 69, 101, 
	62, 47, 67, 99, 79, 111, 68, 100, 
	69, 101, 93, 47, 78, 110, 79, 111, 
	68, 100, 84, 116, 69, 101, 88, 120, 
	84, 116, 62, 47, 78, 110, 79, 111, 
	68, 100, 84, 116, 69, 101, 88, 120, 
	84, 116, 93, 67, 84, 99, 116, 79, 
	111, 76, 108, 71, 103, 82, 114, 79, 
	111, 85, 117, 80, 112, 62, 65, 66, 
	72, 82, 97, 98, 104, 114, 66, 98, 
	76, 108, 69, 101, 62, 79, 111, 68, 
	100, 89, 121, 62, 69, 101, 65, 97, 
	68, 100, 62, 62, 79, 111, 76, 108, 
	9, 32, 62, 71, 103, 9, 32, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 9, 32, 34, 39, 48, 57, 65, 
	90, 97, 122, 0, 10, 13, 0, 10, 
	13, 34, 9, 32, 62, 0, 10, 13, 
	0, 10, 13, 39, 9, 32, 62, 48, 
	57, 65, 90, 97, 122, 82, 114, 79, 
	111, 85, 117, 80, 112, 9, 32, 62, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 62, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 62, 48, 57, 65, 90, 97, 122, 
	66, 68, 72, 82, 98, 100, 104, 114, 
	79, 111, 68, 100, 89, 121, 9, 32, 
	62, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	62, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 62, 48, 57, 65, 90, 97, 
	122, 9, 32, 62, 9, 32, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	9, 32, 34, 39, 48, 57, 65, 90, 
	97, 122, 0, 10, 13, 0, 10, 13, 
	34, 9, 32, 62, 0, 10, 13, 0, 
	10, 13, 39, 9, 32, 62, 48, 57, 
	65, 90, 97, 122, 9, 32, 62, 69, 
	101, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	62, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 62, 48, 57, 65, 90, 97, 
	122, 65, 97, 68, 100, 9, 32, 62, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 62, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 62, 48, 57, 65, 90, 97, 122, 
	9, 32, 62, 9, 32, 48, 57, 65, 
	90, 97, 122, 9, 32, 61, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 9, 
	32, 34, 39, 48, 57, 65, 90, 97, 
	122, 0, 10, 13, 0, 10, 13, 34, 
	9, 32, 62, 0, 10, 13, 0, 10, 
	13, 39, 9, 32, 62, 48, 57, 65, 
	90, 97, 122, 67, 84, 99, 116, 79, 
	111, 76, 108, 71, 103, 82, 114, 79, 
	111, 85, 117, 80, 112, 93, 65, 66, 
	72, 82, 97, 98, 104, 114, 66, 98, 
	76, 108, 69, 101, 93, 79, 111, 68, 
	100, 89, 121, 93, 69, 101, 65, 97, 
	68, 100, 93, 93, 79, 111, 76, 108, 
	9, 32, 71, 93, 103, 9, 32, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 9, 32, 34, 39, 48, 57, 65, 
	90, 97, 122, 0, 10, 13, 0, 10, 
	13, 34, 9, 32, 93, 0, 10, 13, 
	0, 10, 13, 39, 9, 32, 93, 48, 
	57, 65, 90, 97, 122, 82, 114, 79, 
	111, 85, 117, 80, 112, 9, 32, 93, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 93, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 93, 48, 57, 65, 90, 97, 122, 
	66, 68, 72, 82, 98, 100, 104, 114, 
	79, 111, 68, 100, 89, 121, 9, 32, 
	93, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	93, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 93, 48, 57, 65, 90, 97, 
	122, 9, 32, 93, 9, 32, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	9, 32, 34, 39, 48, 57, 65, 90, 
	97, 122, 0, 10, 13, 0, 10, 13, 
	34, 9, 32, 93, 0, 10, 13, 0, 
	10, 13, 39, 9, 32, 93, 48, 57, 
	65, 90, 97, 122, 9, 32, 69, 93, 
	101, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	93, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 93, 48, 57, 65, 90, 97, 
	122, 65, 97, 68, 100, 9, 32, 93, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 93, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 93, 48, 57, 65, 90, 97, 122, 
	9, 32, 93, 9, 32, 48, 57, 65, 
	90, 97, 122, 9, 32, 61, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 9, 
	32, 34, 39, 48, 57, 65, 90, 97, 
	122, 0, 10, 13, 0, 10, 13, 34, 
	9, 32, 93, 0, 10, 13, 0, 10, 
	13, 39, 9, 32, 93, 48, 57, 65, 
	90, 97, 122, 0, 9, 10, 32, 42, 
	60, 72, 91, 96, 104, 0, 9, 10, 
	32, 0, 9, 10, 32, 60, 91, 0, 
	10, 9, 32, 42, 0, 10, 13, 0, 
	9, 10, 13, 32, 66, 67, 69, 72, 
	78, 81, 83, 84, 98, 99, 101, 104, 
	110, 113, 115, 116, 32, 9, 13, 0, 
	9, 10, 32, 0, 9, 10, 32, 32, 
	9, 13, 32, 9, 13, 0, 9, 10, 
	32, 32, 9, 13, 49, 54, 9, 32, 
	67, 69, 72, 78, 81, 83, 84, 99, 
	101, 104, 110, 113, 115, 116, 96, 0, 
	60, 91, 47, 66, 69, 73, 83, 85, 
	98, 101, 105, 115, 117, 47, 66, 73, 
	83, 85, 98, 105, 115, 117, 0, 9, 
	10, 13, 32, 34, 65, 66, 67, 68, 
	70, 72, 77, 80, 82, 83, 84, 85, 
	87, 91, 97, 98, 99, 100, 102, 104, 
	109, 112, 114, 115, 116, 117, 119, 123, 
	828, 1084, 1344, 1600, 1856, 2112, -128, -63, 
	-62, -33, -32, -17, -16, -12, -11, 47, 
	48, 57, 58, 59, 61, 63, 69, 90, 
	92, 96, 101, 122, 124, 127, -128, -65, 
	-62, -33, -32, -17, -16, -12, -128, -65, 
	-128, -65, 0, 9, 10, 32, 0, 9, 
	10, 32, 0, 9, 10, 32, 42, 60, 
	72, 91, 96, 104, 0, 10, 0, 9, 
	10, 32, 60, 91, 10, 0, 10, 13, 
	0, 9, 10, 13, 32, 9, 32, 9, 
	32, 9, 32, 34, -30, -29, -17, 32, 
	34, 35, 39, 44, 46, 60, 62, 63, 
	91, 93, -128, -63, -62, -33, -32, -18, 
	-16, -12, -11, 0, 9, 13, 58, 59, 
	-30, -29, -17, 32, 34, 35, 39, 44, 
	46, 60, 62, 63, 91, 93, -128, -63, 
	-62, -33, -32, -18, -16, -12, -11, 0, 
	9, 13, 58, 59, -30, -29, -17, 32, 
	34, 35, 39, 44, 46, 63, -128, -63, 
	-62, -33, -32, -18, -16, -12, -11, 0, 
	9, 13, 58, 59, -30, -29, -17, 35, 
	46, 47, 58, 63, 95, -62, -33, -32, 
	-18, -16, -12, 45, 57, 65, 90, 97, 
	122, 35, 47, 63, 48, 57, 91, 123, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 125, 48, 
	57, 65, 90, 97, 122, 125, 48, 57, 
	65, 90, 97, 122, 82, 91, 114, 123, 
	48, 57, 65, 90, 97, 122, 84, 91, 
	116, 123, 48, 57, 65, 90, 97, 122, 
	73, 91, 105, 123, 48, 57, 65, 90, 
	97, 122, 83, 91, 115, 123, 48, 57, 
	65, 90, 97, 122, 84, 91, 116, 123, 
	48, 57, 65, 90, 97, 122, 32, 91, 
	123, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 79, 91, 111, 
	123, 48, 57, 65, 90, 97, 122, 79, 
	91, 111, 123, 48, 57, 65, 90, 97, 
	122, 75, 91, 107, 123, 48, 57, 65, 
	90, 97, 122, 32, 91, 123, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 79, 91, 111, 123, 48, 57, 
	65, 90, 97, 122, 77, 91, 109, 123, 
	48, 57, 65, 90, 97, 122, 77, 91, 
	109, 123, 48, 57, 65, 90, 97, 122, 
	69, 91, 101, 123, 48, 57, 65, 90, 
	97, 122, 78, 91, 110, 123, 48, 57, 
	65, 90, 97, 122, 84, 91, 116, 123, 
	48, 57, 65, 90, 97, 122, 32, 91, 
	123, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 77, 91, 109, 
	123, 48, 57, 65, 90, 97, 122, 65, 
	91, 97, 123, 48, 57, 66, 90, 98, 
	122, 73, 91, 105, 123, 48, 57, 65, 
	90, 97, 122, 76, 91, 108, 123, 48, 
	57, 65, 90, 97, 122, 32, 91, 123, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 45, 61, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 65, 90, 97, 122, 
	47, 48, 57, 65, 90, 97, 122, 47, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 47, 
	79, 91, 111, 123, 48, 57, 65, 90, 
	97, 122, 82, 91, 114, 123, 48, 57, 
	65, 90, 97, 122, 85, 91, 117, 123, 
	48, 57, 65, 90, 97, 122, 77, 91, 
	109, 123, 48, 57, 65, 90, 97, 122, 
	32, 91, 123, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 84, 
	91, 116, 123, 48, 57, 65, 90, 97, 
	122, 84, 91, 116, 123, 48, 57, 65, 
	90, 97, 122, 80, 91, 112, 123, 48, 
	57, 65, 90, 97, 122, 58, 83, 91, 
	115, 123, 48, 57, 65, 90, 97, 122, 
	-30, -29, -17, 35, 46, 47, 58, 63, 
	95, -62, -33, -32, -18, -16, -12, 45, 
	57, 65, 90, 97, 122, -30, -29, -17, 
	32, 34, 35, 39, 44, 46, 60, 62, 
	63, 91, 93, -128, -63, -62, -33, -32, 
	-18, -16, -12, -11, 0, 9, 13, 58, 
	59, -30, -29, -17, 32, 34, 35, 39, 
	44, 46, 60, 62, 63, 91, 93, -128, 
	-63, -62, -33, -32, -18, -16, -12, -11, 
	0, 9, 13, 58, 59, -30, -29, -17, 
	32, 34, 35, 39, 44, 46, 63, -128, 
	-63, -62, -33, -32, -18, -16, -12, -11, 
	0, 9, 13, 58, 59, 35, 47, 63, 
	48, 57, 58, 91, 123, 48, 57, 65, 
	90, 97, 122, 79, 91, 111, 123, 48, 
	57, 65, 90, 97, 122, 68, 91, 100, 
	123, 48, 57, 65, 90, 97, 122, 32, 
	91, 123, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 73, 79, 
	91, 105, 111, 123, 48, 57, 65, 90, 
	97, 122, 88, 91, 120, 123, 48, 57, 
	65, 90, 97, 122, 73, 91, 105, 123, 
	48, 57, 65, 90, 97, 122, 86, 91, 
	118, 123, 48, 57, 65, 90, 97, 122, 
	32, 91, 123, 48, 57, 65, 90, 97, 
	122, 48, 57, 79, 83, 91, 111, 115, 
	123, 48, 57, 65, 90, 97, 122, 76, 
	91, 108, 123, 48, 57, 65, 90, 97, 
	122, 32, 91, 123, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	84, 91, 116, 123, 48, 57, 65, 90, 
	97, 122, 32, 91, 123, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 69, 91, 101, 123, 48, 57, 65, 
	90, 97, 122, 67, 91, 99, 123, 48, 
	57, 65, 90, 97, 122, 79, 91, 111, 
	123, 48, 57, 65, 90, 97, 122, 82, 
	91, 114, 123, 48, 57, 65, 90, 97, 
	122, 68, 91, 100, 123, 48, 57, 65, 
	90, 97, 122, 32, 91, 123, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 69, 91, 101, 123, 48, 57, 
	65, 90, 97, 122, 82, 91, 114, 123, 
	48, 57, 65, 90, 97, 122, 73, 91, 
	105, 123, 48, 57, 65, 90, 97, 122, 
	69, 91, 101, 123, 48, 57, 65, 90, 
	97, 122, 83, 91, 115, 123, 48, 57, 
	65, 90, 97, 122, 32, 91, 123, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 79, 91, 97, 111, 
	123, 48, 57, 66, 90, 98, 122, 71, 
	91, 103, 123, 48, 57, 65, 90, 97, 
	122, 32, 91, 123, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 80, 91, 112, 123, 
	48, 57, 65, 90, 97, 122, 73, 91, 
	105, 123, 48, 57, 65, 90, 97, 122, 
	67, 91, 99, 123, 48, 57, 65, 90, 
	97, 122, 32, 91, 123, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 48, 57, 47, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 65, 90, 97, 122, 
	47, 48, 57, 65, 90, 97, 122, 47, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 47, 83, 
	91, 115, 123, 48, 57, 65, 90, 97, 
	122, 69, 91, 101, 123, 48, 57, 65, 
	90, 97, 122, 82, 91, 114, 123, 48, 
	57, 65, 90, 97, 122, 32, 91, 123, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 73, 91, 105, 123, 48, 57, 
	65, 90, 97, 122, 75, 91, 107, 123, 
	48, 57, 65, 90, 97, 122, 73, 91, 
	105, 123, 48, 57, 65, 90, 97, 122, 
	32, 91, 123, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 0, 
	10, 13, 47, 66, 67, 69, 73, 78, 
	81, 83, 84, 85, 91, 98, 99, 101, 
	105, 110, 113, 115, 116, 117, 0, 10, 
	13, 40, 93, 0, 10, 13, 40, 93, 
	0, 9, 10, 13, 32, 40, 93, 0, 
	9, 10, 13, 32, 93, 0, 9, 10, 
	13, 32, 40, 93, 0, 9, 10, 13, 
	32, 93, 0, 9, 10, 13, 32, 40, 
	93, 0, 9, 10, 13, 32, 40, 93, 
	0, 9, 10, 13, 32, 40, 93, 0, 
	9, 10, 13, 32, 91, 0, 32, 41, 
	9, 13, 0, 32, 34, 9, 13, 0, 
	32, 39, 9, 13, 0, 9, 32, 93, 
	10, 13, 0, 9, 32, 91, 10, 13, 
	0, 10, 13, 40, 93, 48, 57, 65, 
	90, 97, 122, 0, 10, 13, 93, 48, 
	57, 65, 90, 97, 122, 0, 10, 13, 
	40, 93, 48, 57, 65, 90, 97, 122, 
	0, 10, 13, 93, 48, 57, 65, 90, 
	97, 122, 0, 10, 13, 40, 93, 48, 
	57, 65, 90, 97, 122, 0, 10, 13, 
	93, 48, 57, 65, 90, 97, 122, 123, 
	47, 65, 66, 67, 69, 72, 73, 78, 
	81, 83, 84, 85, 97, 98, 99, 101, 
	104, 105, 110, 113, 115, 116, 117, 0, 
	9, 10, 32, 0, 9, 10, 32, 0, 
	9, 10, 32, 47, 65, 66, 67, 69, 
	72, 73, 78, 81, 83, 84, 85, 97, 
	98, 99, 101, 104, 105, 110, 113, 115, 
	116, 117, 1088, 994, 995, 1007, 1070, 1119, 
	1151, 962, 991, 992, 1006, 1008, 1012, 1025, 
	1032, 1038, 1055, 1072, 1081, 1089, 1114, 1121, 
	1146, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 961, 962, 991, 992, 1006, 1008, 
	1012, 1013, 1023, 1025, 1032, 1038, 1055, 1069, 
	1071, 1072, 1081, 1089, 1114, 1121, 1146, 994, 
	995, 1007, 1057, 1063, 1067, 1119, 1151, 896, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 0, 10, 60, 
	91, 60, 91, 47, 47, 0, 10, 60, 
	91, 60, 91, 47, 47, 60, 91, 47, 
	67, 84, 99, 116, 47, 67, 84, 99, 
	116, 0
};

static const char _dtext_single_lengths[] = {
	0, 4, 6, 6, 2, 2, 2, 2, 
	2, 1, 2, 1, 4, 2, 2, 2, 
	2, 1, 6, 2, 2, 2, 2, 2, 
	1, 2, 1, 2, 2, 2, 2, 1, 
	5, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 4, 4, 2, 4, 
	3, 2, 1, 4, 4, 2, 2, 4, 
	7, 4, 6, 2, 2, 2, 2, 2, 
	4, 7, 4, 6, 2, 2, 2, 2, 
	2, 2, 1, 4, 2, 2, 2, 2, 
	2, 2, 3, 1, 4, 1, 2, 5, 
	5, 4, 4, 2, 4, 3, 2, 1, 
	2, 2, 4, 7, 4, 6, 2, 2, 
	2, 2, 2, 4, 7, 4, 6, 2, 
	2, 2, 2, 2, 2, 1, 2, 2, 
	2, 2, 1, 2, 2, 2, 2, 2, 
	2, 3, 1, 4, 1, 1, 4, 2, 
	2, 3, 3, 3, 4, 4, 4, 10, 
	1, 2, 1, 3, 2, 2, 2, 2, 
	1, 1, 2, 1, 3, 2, 2, 2, 
	2, 1, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 4, 4, 
	6, 6, 2, 1, 4, 2, 2, 2, 
	2, 2, 2, 3, 4, 1, 2, 2, 
	2, 2, 1, 6, 2, 1, 2, 2, 
	2, 2, 2, 2, 3, 1, 2, 2, 
	2, 2, 1, 1, 4, 4, 2, 2, 
	2, 2, 1, 2, 2, 2, 2, 6, 
	1, 1, 1, 1, 4, 4, 2, 2, 
	2, 2, 1, 2, 2, 2, 2, 6, 
	1, 1, 1, 3, 5, 11, 12, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 2, 2, 2, 2, 2, 1, 2, 
	2, 2, 2, 1, 2, 2, 2, 2, 
	2, 2, 3, 1, 2, 2, 2, 4, 
	3, 2, 1, 2, 2, 2, 2, 2, 
	2, 1, 0, 2, 5, 5, 11, 10, 
	2, 2, 2, 2, 2, 1, 2, 2, 
	2, 2, 2, 2, 3, 1, 2, 2, 
	2, 4, 3, 2, 1, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 4, 2, 
	2, 3, 3, 3, 4, 4, 4, 1, 
	1, 5, 0, 0, 1, 0, 1, 0, 
	2, 0, 0, 0, 14, 0, 0, 1, 
	0, 1, 0, 2, 0, 0, 0, 14, 
	10, 0, 0, 1, 0, 1, 0, 2, 
	0, 0, 0, 2, 2, 2, 3, 1, 
	1, 2, 0, 3, 0, 0, 5, 0, 
	0, 1, 1, 9, 1, 0, 2, 2, 
	3, 0, 0, 1, 4, 3, 2, 2, 
	2, 3, 1, 1, 2, 1, 1, 8, 
	5, 5, 3, 5, 6, 4, 1, 4, 
	4, 4, 1, 6, 3, 5, 5, 5, 
	4, 6, 4, 1, 6, 6, 6, 5, 
	5, 5, 5, 4, 1, 4, 4, 0, 
	5, 3, 5, 3, 6, 5, 5, 5, 
	5, 4, 1, 3, 5, 5, 0, 1, 
	5, 1, 1, 1, 10, 6, 12, 10, 
	6, 4, 6, 6, 6, 5, 1, 1, 
	7, 14, 8, 14, 12, 8, 7, 1, 
	4, 8, 7, 7, 7, 7, 7, 9, 
	8, 7, 8, 7, 7, 9, 7, 7, 
	7, 7, 4, 6, 7, 6, 6, 3, 
	1, 4, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 2, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 2, 0, 3, 0, 0, 
	5, 0, 0, 1, 1, 9, 1, 0, 
	2, 2, 3, 0, 0, 0, 1, 0, 
	1, 0, 2, 0, 0, 0, 14, 0, 
	0, 1, 0, 1, 0, 2, 0, 0, 
	0, 14, 10, 0, 0, 1, 0, 1, 
	0, 2, 0, 0, 0, 0, 2, 2, 
	2, 2, 2, 2, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 2, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 6, 2, 2, 2, 2, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 2, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 2, 2, 2, 
	2, 2, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 4, 5, 2, 2, 2, 
	2, 3, 1, 1, 2, 3, 1, 20, 
	4, 8, 6, 6, 6, 6, 4, 6, 
	6, 6, 2, 6, 6, 6, 6, 6, 
	2, 4, 6, 6, 6, 6, 2, 6, 
	6, 6, 6, 6, 6, 6, 4, 10, 
	4, 4, 4, 4, 6, 4, 8, 6, 
	6, 6, 6, 4, 8, 6, 7, 7, 
	6, 4, 6, 6, 6, 6, 7, 7, 
	4, 6, 6, 6, 6, 6, 6, 7, 
	7, 4, 6, 4, 6, 6, 6, 6, 
	6, 6, 4, 6, 6, 6, 6, 6, 
	4, 6, 6, 6, 6, 6, 6, 6, 
	4, 6, 4, 6, 6, 7, 7, 12, 
	8, 6, 6, 7, 7, 7, 5, 6, 
	6, 6, 4, 8, 8, 6, 3, 1, 
	2, 2, 2, 1, 8, 8, 8, 9, 
	7, 7, 6, 7, 4, 5, 5, 5, 
	4, 7, 7, 7, 5, 3, 3, 5, 
	6, 5, 5, 5, 6, 4, 4, 3, 
	4, 5, 6, 4, 6, 6, 6, 7, 
	5, 5, 5, 5, 6, 8, 6, 7, 
	5, 3, 5, 5, 5, 6, 4, 4, 
	3, 4, 4, 6, 6, 6, 7, 5, 
	5, 5, 5, 6, 6, 6, 7, 5, 
	5, 5, 7, 6, 4, 6, 6, 6, 
	7, 5, 5, 4, 5, 5, 5, 11, 
	10, 7, 7, 5, 6, 6, 6, 4, 
	8, 9, 9, 9, 7, 8, 6, 4, 
	3, 1, 2, 2, 2, 1, 5, 6, 
	6, 6, 5, 6, 6, 6, 7, 5, 
	5, 4, 5, 6, 7, 7, 7, 6, 
	5, 6, 6, 6, 7, 5, 5, 5, 
	5, 11, 8, 8, 6, 8, 9, 7, 
	5, 7, 7, 7, 5, 9, 7, 8, 
	8, 8, 7, 9, 7, 5, 9, 9, 
	9, 8, 8, 8, 8, 7, 5, 7, 
	7, 4, 8, 6, 8, 7, 9, 8, 
	8, 8, 8, 7, 5, 7, 8, 8, 
	4, 5, 8, 5, 5, 16, 3, 4, 
	1, 5, 2, 2, 2, 2, 1, 1, 
	2, 4, 2, 2, 2, 1, 1, 4, 
	3, 4, 3, 4, 5, 6, 5, 2, 
	2, 2, 3, 1, 1, 2, 1, 5, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 4, 2, 2, 2, 2, 1, 
	4, 2, 4, 3, 2, 1, 4, 4, 
	2, 2, 4, 7, 4, 6, 4, 1, 
	2, 2, 2, 2, 4, 7, 4, 6, 
	2, 2, 2, 3, 1, 1, 2, 3, 
	1, 2, 2, 2, 2, 2, 2, 1, 
	4, 5, 2, 2, 2, 2, 2, 3, 
	1, 2, 2, 2, 2, 1, 2, 1, 
	1, 0, 1, 0, 8, 8, 8, 8, 
	9, 9, 9, 8, 10, 10, 8, 11, 
	8, 8, 9, 9, 9, 8, 10, 10, 
	11, 8, 10, 0, 1, 0, 1, 0, 
	2, 0, 0, 0, 4, 1, 2, 2, 
	2, 2, 1, 1, 2, 2, 2, 2, 
	1, 1, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 2, 2, 2, 2, 2, 
	2, 2, 1, 4, 2, 2, 2, 2, 
	2, 2, 2, 1, 8, 2, 2, 2, 
	1, 2, 2, 2, 1, 2, 2, 2, 
	1, 1, 2, 2, 5, 2, 3, 3, 
	4, 3, 4, 3, 3, 4, 3, 2, 
	2, 2, 2, 3, 2, 3, 3, 4, 
	3, 4, 3, 3, 4, 3, 8, 2, 
	2, 2, 3, 2, 3, 3, 4, 3, 
	4, 3, 3, 4, 3, 3, 2, 3, 
	3, 4, 3, 4, 3, 3, 4, 3, 
	5, 2, 3, 3, 4, 3, 4, 3, 
	3, 4, 3, 2, 2, 3, 2, 3, 
	3, 4, 3, 4, 3, 3, 4, 3, 
	3, 2, 3, 3, 4, 3, 4, 3, 
	3, 4, 3, 4, 2, 2, 2, 2, 
	2, 2, 2, 1, 8, 2, 2, 2, 
	1, 2, 2, 2, 1, 2, 2, 2, 
	1, 1, 2, 2, 5, 2, 3, 3, 
	4, 3, 4, 3, 3, 4, 3, 2, 
	2, 2, 2, 3, 2, 3, 3, 4, 
	3, 4, 3, 3, 4, 3, 8, 2, 
	2, 2, 3, 2, 3, 3, 4, 3, 
	4, 3, 3, 4, 3, 3, 2, 3, 
	3, 4, 3, 4, 3, 3, 4, 3, 
	5, 2, 3, 3, 4, 3, 4, 3, 
	3, 4, 3, 2, 2, 3, 2, 3, 
	3, 4, 3, 4, 3, 3, 4, 3, 
	3, 2, 3, 3, 4, 3, 4, 3, 
	3, 4, 3, 10, 4, 6, 2, 3, 
	3, 5, 16, 1, 4, 4, 1, 1, 
	4, 1, 0, 2, 14, 1, 3, 11, 
	9, 40, 0, 0, 0, 0, 4, 4, 
	10, 2, 6, 1, 3, 5, 2, 2, 
	2, 1, 14, 14, 10, 9, 3, 2, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 4, 4, 
	4, 4, 4, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	4, 4, 4, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	4, 4, 4, 4, 4, 4, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 3, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 4, 4, 4, 
	4, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 4, 
	4, 5, 9, 14, 14, 10, 3, 3, 
	4, 4, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 6, 
	4, 4, 4, 3, 0, 6, 4, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 4, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 4, 4, 4, 4, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 6, 4, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 4, 4, 4, 
	3, 1, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 4, 4, 
	4, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 4, 4, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 23, 5, 5, 7, 6, 7, 
	6, 7, 7, 7, 6, 3, 3, 3, 
	4, 4, 5, 4, 5, 4, 5, 4, 
	1, 23, 4, 4, 4, 24, 6, 8, 
	8, 4, 2, 1, 1, 4, 2, 1, 
	1, 2, 5, 5
};

static const char _dtext_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 0, 0, 0, 0, 0, 3, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 3, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 1, 1, 1, 2, 1, 3, 
	1, 3, 4, 1, 7, 1, 1, 1, 
	2, 1, 3, 1, 3, 4, 1, 7, 
	7, 1, 1, 1, 2, 1, 3, 1, 
	3, 4, 1, 0, 0, 0, 0, 0, 
	0, 6, 1, 6, 1, 1, 6, 1, 
	1, 1, 1, 6, 1, 6, 1, 1, 
	1, 1, 1, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 1, 
	1, 1, 1, 2, 3, 0, 0, 1, 
	1, 1, 0, 3, 3, 1, 1, 1, 
	2, 4, 1, 0, 4, 4, 4, 1, 
	1, 1, 1, 1, 0, 0, 0, 1, 
	3, 0, 3, 3, 1, 1, 1, 1, 
	1, 1, 0, 3, 0, 0, 1, 0, 
	0, 0, 0, 0, 2, 1, 1, 1, 
	1, 0, 1, 1, 1, 1, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 0, 1, 1, 1, 1, 3, 
	0, 0, 0, 0, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 6, 1, 6, 1, 1, 
	6, 1, 1, 1, 1, 6, 1, 6, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 3, 1, 3, 4, 1, 7, 1, 
	1, 1, 2, 1, 3, 1, 3, 4, 
	1, 7, 7, 1, 1, 1, 2, 1, 
	3, 1, 3, 4, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 3, 3, 0, 1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 1, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 3, 0, 1, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 5, 0, 0, 0, 0, 0, 
	5, 0, 0, 0, 0, 0, 5, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 1, 1, 1, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 1, 0, 1, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 1, 2, 3, 0, 
	0, 1, 1, 1, 0, 3, 3, 1, 
	1, 1, 2, 4, 1, 0, 4, 4, 
	4, 1, 1, 1, 1, 1, 0, 0, 
	0, 1, 3, 0, 3, 3, 1, 1, 
	1, 1, 1, 1, 0, 3, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 4, 4, 1, 11, 11, 12, 12, 
	12, 12, 12, 17, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 17, 12, 12, 
	12, 12, 11, 1, 1, 2, 1, 3, 
	1, 3, 4, 1, 8, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 3, 0, 
	3, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 3, 3, 0, 3, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 0, 3, 3, 0, 3, 0, 
	0, 0, 0, 0, 3, 0, 3, 3, 
	0, 3, 0, 0, 0, 0, 0, 3, 
	0, 3, 3, 0, 3, 0, 0, 0, 
	0, 0, 3, 0, 0, 0, 3, 3, 
	0, 3, 0, 0, 0, 0, 0, 3, 
	0, 3, 3, 0, 3, 0, 0, 0, 
	0, 0, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 3, 0, 
	3, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 3, 3, 0, 3, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 0, 3, 3, 0, 3, 0, 
	0, 0, 0, 0, 3, 0, 3, 3, 
	0, 3, 0, 0, 0, 0, 0, 3, 
	0, 3, 3, 0, 3, 0, 0, 0, 
	0, 0, 3, 0, 0, 0, 3, 3, 
	0, 3, 0, 0, 0, 0, 0, 3, 
	0, 3, 3, 0, 3, 0, 0, 0, 
	0, 0, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 1, 1, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 12, 1, 3, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 7, 7, 7, 6, 1, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 1, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 1, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 1, 0, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 1, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 1, 0, 3, 3, 
	3, 3, 6, 7, 7, 7, 1, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 0, 3, 
	3, 3, 3, 3, 1, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 1, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	1, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 1, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 1, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 1, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 1, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 1, 0, 3, 3, 3, 
	3, 3, 1, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 1, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 1, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	1, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 3, 3, 3, 3, 3, 3, 
	0, 0, 0, 0, 0, 0, 8, 11, 
	11, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
};

static const short _dtext_index_offsets[] = {
	0, 0, 5, 12, 19, 22, 25, 28, 
	31, 34, 36, 39, 41, 46, 49, 52, 
	55, 58, 60, 67, 70, 73, 76, 79, 
	82, 84, 87, 89, 92, 95, 98, 101, 
	103, 109, 113, 116, 119, 122, 125, 128, 
	131, 134, 137, 140, 142, 147, 152, 155, 
	160, 164, 170, 175, 180, 185, 188, 191, 
	196, 204, 209, 216, 219, 222, 225, 228, 
	231, 236, 244, 249, 256, 259, 262, 265, 
	268, 271, 274, 276, 281, 284, 287, 290, 
	293, 296, 299, 303, 305, 310, 312, 315, 
	324, 333, 338, 343, 346, 351, 355, 361, 
	366, 369, 372, 377, 385, 390, 397, 400, 
	403, 406, 409, 412, 417, 425, 430, 437, 
	440, 443, 446, 449, 452, 455, 457, 460, 
	463, 466, 469, 471, 474, 477, 480, 483, 
	486, 489, 493, 495, 500, 502, 504, 512, 
	515, 518, 522, 526, 530, 535, 543, 548, 
	559, 561, 564, 566, 570, 573, 576, 579, 
	582, 584, 586, 589, 591, 595, 598, 601, 
	604, 607, 609, 618, 620, 622, 624, 626, 
	628, 630, 632, 634, 636, 638, 640, 645, 
	650, 657, 664, 667, 669, 674, 677, 680, 
	683, 686, 689, 692, 696, 701, 703, 706, 
	709, 712, 715, 717, 724, 727, 729, 732, 
	735, 738, 741, 744, 747, 751, 753, 756, 
	759, 762, 765, 767, 769, 774, 779, 782, 
	785, 788, 791, 793, 796, 799, 802, 805, 
	812, 814, 816, 818, 820, 825, 830, 833, 
	836, 839, 842, 844, 847, 850, 853, 856, 
	863, 865, 867, 869, 873, 879, 891, 904, 
	907, 910, 913, 916, 919, 922, 925, 928, 
	931, 933, 936, 939, 942, 945, 948, 950, 
	953, 956, 959, 962, 964, 967, 970, 973, 
	976, 979, 982, 986, 988, 991, 994, 997, 
	1002, 1006, 1012, 1017, 1020, 1023, 1026, 1029, 
	1032, 1035, 1037, 1039, 1042, 1051, 1060, 1072, 
	1083, 1086, 1089, 1092, 1095, 1098, 1100, 1103, 
	1106, 1109, 1112, 1115, 1118, 1122, 1124, 1127, 
	1130, 1133, 1138, 1142, 1148, 1153, 1156, 1159, 
	1162, 1165, 1168, 1171, 1173, 1175, 1177, 1185, 
	1188, 1191, 1195, 1199, 1203, 1208, 1216, 1221, 
	1223, 1225, 1231, 1233, 1235, 1238, 1241, 1244, 
	1248, 1252, 1256, 1261, 1263, 1285, 1287, 1289, 
	1292, 1295, 1298, 1302, 1306, 1310, 1315, 1317, 
	1339, 1357, 1359, 1361, 1364, 1367, 1370, 1374, 
	1378, 1382, 1387, 1389, 1392, 1395, 1398, 1402, 
	1404, 1406, 1415, 1417, 1427, 1429, 1431, 1443, 
	1445, 1447, 1450, 1453, 1469, 1472, 1479, 1483, 
	1487, 1492, 1494, 1496, 1498, 1503, 1508, 1511, 
	1514, 1517, 1521, 1523, 1525, 1529, 1531, 1533, 
	1543, 1550, 1557, 1562, 1570, 1580, 1585, 1587, 
	1593, 1599, 1605, 1607, 1617, 1624, 1631, 1638, 
	1645, 1652, 1663, 1669, 1671, 1682, 1693, 1704, 
	1711, 1718, 1725, 1732, 1738, 1740, 1745, 1750, 
	1752, 1761, 1765, 1774, 1781, 1789, 1796, 1803, 
	1810, 1817, 1823, 1825, 1832, 1838, 1844, 1846, 
	1848, 1854, 1856, 1858, 1860, 1873, 1881, 1895, 
	1907, 1915, 1920, 1928, 1936, 1944, 1951, 1953, 
	1955, 1964, 1980, 1990, 2006, 2020, 2030, 2039, 
	2041, 2046, 2056, 2065, 2074, 2083, 2092, 2101, 
	2112, 2122, 2131, 2141, 2150, 2159, 2173, 2182, 
	2191, 2200, 2209, 2214, 2222, 2231, 2239, 2247, 
	2254, 2256, 2261, 2263, 2265, 2267, 2271, 2275, 
	2279, 2283, 2287, 2291, 2295, 2299, 2303, 2307, 
	2311, 2313, 2317, 2321, 2325, 2329, 2333, 2337, 
	2341, 2345, 2349, 2353, 2357, 2359, 2363, 2367, 
	2371, 2375, 2379, 2383, 2387, 2391, 2395, 2399, 
	2403, 2405, 2409, 2415, 2419, 2423, 2427, 2431, 
	2435, 2439, 2443, 2447, 2451, 2455, 2457, 2461, 
	2465, 2469, 2473, 2477, 2481, 2485, 2489, 2493, 
	2497, 2501, 2503, 2505, 2514, 2516, 2526, 2528, 
	2530, 2542, 2544, 2546, 2549, 2552, 2568, 2571, 
	2578, 2582, 2586, 2591, 2593, 2595, 2597, 2600, 
	2603, 2606, 2610, 2614, 2618, 2623, 2625, 2647, 
	2649, 2651, 2654, 2657, 2660, 2664, 2668, 2672, 
	2677, 2679, 2701, 2719, 2721, 2723, 2726, 2729, 
	2732, 2736, 2740, 2744, 2749, 2751, 2753, 2756, 
	2759, 2762, 2765, 2768, 2771, 2773, 2775, 2779, 
	2783, 2787, 2791, 2795, 2799, 2803, 2807, 2811, 
	2815, 2819, 2821, 2825, 2830, 2833, 2835, 2840, 
	2845, 2850, 2855, 2860, 2865, 2870, 2875, 2880, 
	2883, 2885, 2889, 2893, 2897, 2901, 2905, 2909, 
	2913, 2917, 2921, 2925, 2927, 2931, 2935, 2939, 
	2943, 2947, 2951, 2955, 2959, 2963, 2967, 2971, 
	2973, 2977, 2981, 2985, 2989, 2993, 2997, 3001, 
	3005, 3009, 3013, 3017, 3019, 3023, 3027, 3031, 
	3035, 3039, 3043, 3047, 3051, 3055, 3059, 3063, 
	3065, 3069, 3073, 3077, 3081, 3085, 3089, 3093, 
	3097, 3101, 3105, 3109, 3116, 3119, 3122, 3125, 
	3128, 3130, 3132, 3136, 3140, 3144, 3148, 3152, 
	3156, 3160, 3164, 3168, 3172, 3176, 3179, 3182, 
	3185, 3188, 3191, 3194, 3197, 3200, 3203, 3206, 
	3208, 3210, 3214, 3218, 3222, 3226, 3230, 3234, 
	3238, 3242, 3246, 3250, 3254, 3257, 3260, 3263, 
	3266, 3269, 3272, 3275, 3278, 3281, 3284, 3286, 
	3288, 3292, 3296, 3300, 3304, 3308, 3312, 3316, 
	3320, 3324, 3328, 3332, 3334, 3338, 3341, 3343, 
	3347, 3351, 3355, 3359, 3363, 3367, 3371, 3375, 
	3379, 3383, 3387, 3391, 3395, 3399, 3403, 3407, 
	3411, 3415, 3419, 3423, 3427, 3431, 3434, 3437, 
	3440, 3443, 3446, 3448, 3450, 3454, 3458, 3462, 
	3466, 3470, 3474, 3478, 3482, 3486, 3490, 3494, 
	3496, 3500, 3504, 3508, 3512, 3516, 3520, 3524, 
	3528, 3532, 3536, 3540, 3545, 3551, 3554, 3557, 
	3560, 3563, 3567, 3569, 3571, 3575, 3580, 3582, 
	3603, 3608, 3617, 3624, 3631, 3638, 3645, 3650, 
	3657, 3664, 3671, 3679, 3686, 3693, 3700, 3707, 
	3714, 3722, 3727, 3734, 3741, 3748, 3755, 3763, 
	3770, 3777, 3784, 3791, 3798, 3805, 3812, 3817, 
	3828, 3833, 3838, 3843, 3848, 3855, 3860, 3869, 
	3876, 3883, 3890, 3897, 3902, 3911, 3918, 3926, 
	3934, 3944, 3952, 3959, 3966, 3973, 3980, 3988, 
	3996, 4001, 4008, 4015, 4022, 4029, 4036, 4043, 
	4051, 4059, 4064, 4071, 4076, 4083, 4090, 4097, 
	4104, 4111, 4118, 4123, 4130, 4137, 4144, 4151, 
	4158, 4163, 4170, 4177, 4184, 4191, 4198, 4205, 
	4212, 4217, 4224, 4229, 4236, 4243, 4251, 4259, 
	4272, 4281, 4289, 4296, 4304, 4312, 4320, 4326, 
	4333, 4340, 4347, 4352, 4361, 4370, 4377, 4381, 
	4383, 4386, 4389, 4392, 4394, 4403, 4412, 4421, 
	4431, 4439, 4447, 4455, 4464, 4470, 4477, 4484, 
	4491, 4497, 4505, 4513, 4522, 4529, 4534, 4538, 
	4544, 4551, 4558, 4565, 4572, 4580, 4586, 4592, 
	4597, 4603, 4610, 4618, 4624, 4631, 4638, 4645, 
	4653, 4659, 4665, 4672, 4678, 4686, 4695, 4703, 
	4712, 4719, 4724, 4731, 4738, 4745, 4753, 4759, 
	4765, 4770, 4776, 4782, 4789, 4796, 4803, 4811, 
	4817, 4823, 4830, 4836, 4843, 4850, 4857, 4865, 
	4871, 4877, 4884, 4893, 4901, 4907, 4915, 4923, 
	4931, 4940, 4947, 4954, 4960, 4967, 4974, 4980, 
	4992, 5003, 5012, 5020, 5026, 5033, 5040, 5047, 
	5052, 5062, 5073, 5084, 5095, 5104, 5114, 5122, 
	5128, 5132, 5134, 5137, 5140, 5143, 5145, 5152, 
	5160, 5168, 5176, 5183, 5191, 5199, 5207, 5216, 
	5223, 5230, 5236, 5243, 5251, 5260, 5269, 5278, 
	5286, 5293, 5300, 5307, 5314, 5322, 5328, 5334, 
	5341, 5347, 5360, 5370, 5380, 5388, 5399, 5412, 
	5420, 5426, 5435, 5444, 5453, 5459, 5472, 5483, 
	5493, 5503, 5513, 5523, 5537, 5546, 5552, 5566, 
	5580, 5594, 5604, 5614, 5624, 5634, 5643, 5649, 
	5657, 5665, 5671, 5683, 5690, 5702, 5713, 5724, 
	5734, 5744, 5754, 5764, 5773, 5779, 5790, 5799, 
	5808, 5814, 5820, 5829, 5835, 5841, 5858, 5862, 
	5867, 5869, 5875, 5878, 5881, 5884, 5887, 5889, 
	5891, 5894, 5899, 5902, 5905, 5908, 5910, 5912, 
	5917, 5922, 5928, 5932, 5937, 5943, 5950, 5956, 
	5959, 5962, 5965, 5969, 5971, 5973, 5977, 5979, 
	5985, 5988, 5991, 5994, 5997, 6000, 6003, 6006, 
	6009, 6011, 6013, 6018, 6021, 6024, 6027, 6030, 
	6032, 6037, 6040, 6045, 6049, 6055, 6060, 6065, 
	6070, 6073, 6076, 6081, 6089, 6094, 6101, 6106, 
	6108, 6111, 6114, 6117, 6120, 6125, 6133, 6138, 
	6145, 6148, 6151, 6154, 6158, 6160, 6162, 6166, 
	6171, 6173, 6176, 6179, 6182, 6185, 6188, 6191, 
	6193, 6198, 6204, 6207, 6210, 6213, 6216, 6219, 
	6223, 6225, 6228, 6231, 6234, 6237, 6239, 6242, 
	6244, 6246, 6251, 6257, 6259, 6279, 6299, 6320, 
	6341, 6363, 6385, 6407, 6433, 6456, 6479, 6500, 
	6524, 6545, 6566, 6588, 6610, 6632, 6658, 6681, 
	6704, 6728, 6749, 6771, 6773, 6776, 6779, 6782, 
	6786, 6790, 6794, 6799, 6801, 6814, 6816, 6819, 
	6822, 6825, 6828, 6830, 6832, 6835, 6838, 6841, 
	6844, 6846, 6848, 6851, 6854, 6857, 6860, 6863, 
	6866, 6869, 6871, 6873, 6876, 6879, 6882, 6885, 
	6888, 6891, 6894, 6896, 6901, 6904, 6907, 6910, 
	6913, 6916, 6919, 6922, 6924, 6933, 6936, 6939, 
	6942, 6944, 6947, 6950, 6953, 6955, 6958, 6961, 
	6964, 6966, 6968, 6971, 6974, 6980, 6986, 6993, 
	6997, 7005, 7009, 7014, 7018, 7022, 7027, 7034, 
	7037, 7040, 7043, 7046, 7050, 7056, 7063, 7067, 
	7075, 7079, 7084, 7088, 7092, 7097, 7104, 7113, 
	7116, 7119, 7122, 7126, 7132, 7139, 7143, 7151, 
	7155, 7160, 7164, 7168, 7173, 7180, 7184, 7190, 
	7197, 7201, 7209, 7213, 7218, 7222, 7226, 7231, 
	7238, 7244, 7250, 7257, 7261, 7269, 7273, 7278, 
	7282, 7286, 7291, 7298, 7301, 7304, 7308, 7314, 
	7321, 7325, 7333, 7337, 7342, 7346, 7350, 7355, 
	7362, 7366, 7372, 7379, 7383, 7391, 7395, 7400, 
	7404, 7408, 7413, 7420, 7425, 7428, 7431, 7434, 
	7437, 7440, 7443, 7446, 7448, 7457, 7460, 7463, 
	7466, 7468, 7471, 7474, 7477, 7479, 7482, 7485, 
	7488, 7490, 7492, 7495, 7498, 7504, 7510, 7517, 
	7521, 7529, 7533, 7538, 7542, 7546, 7551, 7558, 
	7561, 7564, 7567, 7570, 7574, 7580, 7587, 7591, 
	7599, 7603, 7608, 7612, 7616, 7621, 7628, 7637, 
	7640, 7643, 7646, 7650, 7656, 7663, 7667, 7675, 
	7679, 7684, 7688, 7692, 7697, 7704, 7708, 7714, 
	7721, 7725, 7733, 7737, 7742, 7746, 7750, 7755, 
	7762, 7768, 7774, 7781, 7785, 7793, 7797, 7802, 
	7806, 7810, 7815, 7822, 7825, 7828, 7832, 7838, 
	7845, 7849, 7857, 7861, 7866, 7870, 7874, 7879, 
	7886, 7890, 7896, 7903, 7907, 7915, 7919, 7924, 
	7928, 7932, 7937, 7944, 7955, 7960, 7967, 7970, 
	7974, 7978, 7984, 8001, 8004, 8009, 8014, 8017, 
	8020, 8025, 8028, 8030, 8033, 8048, 8050, 8054, 
	8066, 8076, 8129, 8131, 8135, 8137, 8139, 8144, 
	8149, 8160, 8163, 8170, 8172, 8176, 8182, 8185, 
	8188, 8191, 8193, 8215, 8237, 8255, 8271, 8276, 
	8282, 8286, 8290, 8294, 8298, 8302, 8306, 8310, 
	8314, 8318, 8322, 8326, 8330, 8335, 8340, 8348, 
	8356, 8364, 8372, 8380, 8387, 8391, 8395, 8399, 
	8403, 8407, 8411, 8415, 8419, 8423, 8427, 8429, 
	8430, 8438, 8446, 8454, 8461, 8465, 8469, 8473, 
	8477, 8481, 8485, 8489, 8493, 8497, 8501, 8503, 
	8504, 8512, 8520, 8528, 8536, 8544, 8552, 8559, 
	8563, 8567, 8571, 8575, 8579, 8583, 8587, 8591, 
	8595, 8599, 8601, 8602, 8610, 8618, 8626, 8634, 
	8641, 8646, 8652, 8657, 8662, 8667, 8672, 8677, 
	8682, 8687, 8692, 8697, 8700, 8702, 8710, 8718, 
	8726, 8734, 8741, 8745, 8749, 8753, 8757, 8761, 
	8765, 8769, 8773, 8777, 8781, 8783, 8784, 8792, 
	8800, 8808, 8817, 8833, 8855, 8877, 8895, 8900, 
	8907, 8915, 8923, 8930, 8934, 8938, 8942, 8946, 
	8950, 8954, 8958, 8962, 8966, 8970, 8972, 8973, 
	8983, 8991, 8999, 9007, 9014, 9016, 9026, 9034, 
	9041, 9045, 9049, 9053, 9057, 9061, 9065, 9069, 
	9073, 9077, 9081, 9083, 9084, 9092, 9099, 9103, 
	9107, 9111, 9115, 9119, 9123, 9127, 9131, 9135, 
	9139, 9141, 9142, 9150, 9158, 9166, 9174, 9182, 
	9189, 9193, 9197, 9201, 9205, 9209, 9213, 9217, 
	9221, 9225, 9229, 9231, 9232, 9240, 9248, 9256, 
	9264, 9272, 9279, 9283, 9287, 9291, 9295, 9299, 
	9303, 9307, 9311, 9315, 9319, 9321, 9322, 9332, 
	9340, 9347, 9351, 9355, 9359, 9363, 9367, 9371, 
	9375, 9379, 9383, 9387, 9389, 9390, 9394, 9398, 
	9402, 9406, 9410, 9414, 9418, 9422, 9426, 9430, 
	9432, 9433, 9437, 9441, 9445, 9449, 9453, 9457, 
	9461, 9465, 9469, 9473, 9475, 9476, 9484, 9492, 
	9500, 9507, 9512, 9514, 9519, 9524, 9529, 9534, 
	9539, 9544, 9549, 9554, 9559, 9562, 9564, 9572, 
	9580, 9588, 9595, 9599, 9603, 9607, 9611, 9615, 
	9619, 9623, 9627, 9631, 9635, 9637, 9638, 9642, 
	9646, 9650, 9654, 9658, 9662, 9666, 9670, 9674, 
	9678, 9680, 9681, 9689, 9697, 9705, 9712, 9716, 
	9720, 9724, 9728, 9732, 9736, 9740, 9744, 9748, 
	9752, 9754, 9755, 9779, 9785, 9791, 9799, 9806, 
	9814, 9821, 9829, 9837, 9845, 9852, 9857, 9862, 
	9867, 9873, 9879, 9888, 9896, 9905, 9913, 9922, 
	9930, 9932, 9956, 9961, 9966, 9971, 9996, 10011, 
	10031, 10051, 10056, 10059, 10061, 10063, 10068, 10071, 
	10073, 10075, 10078, 10084
};

static const short _dtext_indicies[] = {
	1, 2, 1, 2, 0, 1, 4, 1, 
	4, 5, 6, 3, 7, 8, 9, 7, 
	8, 9, 3, 10, 10, 3, 11, 11, 
	3, 12, 12, 3, 13, 13, 3, 14, 
	14, 3, 15, 3, 16, 16, 3, 17, 
	3, 18, 17, 18, 17, 3, 19, 19, 
	3, 20, 20, 3, 21, 21, 3, 22, 
	22, 3, 23, 3, 24, 25, 26, 24, 
	25, 26, 3, 27, 27, 3, 28, 28, 
	3, 29, 29, 3, 30, 30, 3, 31, 
	31, 3, 15, 3, 32, 32, 3, 17, 
	3, 33, 33, 3, 34, 34, 3, 35, 
	35, 3, 36, 36, 3, 23, 3, 3, 
	38, 3, 3, 38, 37, 39, 39, 40, 
	3, 41, 41, 3, 42, 42, 3, 43, 
	43, 3, 44, 44, 3, 45, 45, 3, 
	46, 46, 3, 47, 47, 3, 48, 48, 
	3, 49, 49, 3, 50, 3, 10, 51, 
	10, 51, 3, 52, 53, 52, 53, 3, 
	54, 54, 3, 55, 55, 56, 57, 3, 
	55, 55, 56, 3, 56, 56, 58, 58, 
	58, 3, 60, 59, 59, 59, 3, 62, 
	63, 62, 63, 61, 65, 66, 65, 66, 
	64, 67, 67, 3, 68, 68, 3, 69, 
	69, 70, 71, 3, 3, 73, 3, 3, 
	73, 74, 75, 72, 3, 3, 3, 77, 
	76, 3, 74, 3, 3, 74, 75, 72, 
	78, 78, 3, 79, 79, 3, 80, 80, 
	3, 81, 81, 3, 82, 82, 3, 83, 
	83, 84, 85, 3, 3, 87, 3, 3, 
	87, 88, 89, 86, 3, 3, 3, 91, 
	90, 3, 88, 3, 3, 88, 89, 86, 
	92, 92, 3, 93, 93, 3, 94, 94, 
	3, 95, 95, 3, 96, 96, 3, 97, 
	97, 3, 98, 3, 100, 101, 100, 101, 
	99, 102, 102, 3, 103, 103, 3, 104, 
	104, 3, 105, 105, 3, 106, 106, 3, 
	107, 107, 3, 108, 109, 109, 3, 108, 
	3, 19, 110, 19, 110, 3, 111, 3, 
	112, 113, 3, 114, 114, 114, 114, 114, 
	114, 114, 114, 3, 115, 115, 115, 116, 
	115, 115, 115, 115, 3, 27, 117, 27, 
	117, 3, 118, 119, 118, 119, 3, 120, 
	120, 3, 121, 121, 122, 57, 3, 121, 
	121, 122, 3, 122, 122, 123, 123, 123, 
	3, 60, 124, 124, 124, 3, 125, 125, 
	3, 126, 126, 3, 127, 127, 128, 71, 
	3, 3, 130, 3, 3, 130, 131, 75, 
	129, 3, 3, 3, 77, 132, 3, 131, 
	3, 3, 131, 75, 129, 133, 133, 3, 
	134, 134, 3, 135, 135, 3, 136, 136, 
	3, 137, 137, 3, 138, 138, 139, 85, 
	3, 3, 141, 3, 3, 141, 142, 89, 
	140, 3, 3, 3, 91, 143, 3, 142, 
	3, 3, 142, 89, 140, 144, 144, 3, 
	145, 145, 3, 146, 146, 3, 147, 147, 
	3, 148, 148, 3, 149, 149, 3, 98, 
	3, 150, 150, 3, 151, 151, 3, 152, 
	152, 3, 153, 153, 3, 50, 3, 154, 
	154, 3, 155, 155, 3, 156, 156, 3, 
	157, 157, 3, 158, 158, 3, 159, 159, 
	3, 160, 108, 160, 3, 108, 3, 33, 
	161, 33, 161, 3, 111, 3, 162, 3, 
	163, 164, 163, 164, 165, 165, 165, 3, 
	167, 167, 166, 169, 169, 168, 169, 169, 
	170, 168, 169, 169, 171, 168, 169, 169, 
	172, 168, 173, 172, 173, 172, 168, 174, 
	175, 174, 175, 176, 176, 176, 3, 177, 
	178, 177, 178, 3, 180, 181, 182, 183, 
	184, 180, 181, 182, 183, 184, 179, 185, 
	179, 182, 182, 179, 186, 179, 187, 188, 
	188, 179, 189, 189, 179, 190, 190, 179, 
	191, 191, 179, 180, 180, 179, 192, 179, 
	193, 179, 194, 194, 179, 195, 179, 196, 
	197, 197, 179, 198, 198, 179, 199, 199, 
	179, 200, 200, 179, 201, 201, 179, 202, 
	179, 203, 204, 205, 206, 203, 204, 205, 
	206, 179, 185, 179, 186, 179, 187, 179, 
	192, 179, 193, 179, 195, 179, 196, 179, 
	202, 179, 208, 207, 209, 207, 211, 210, 
	212, 213, 212, 213, 207, 213, 215, 213, 
	215, 214, 212, 217, 212, 217, 218, 219, 
	216, 220, 221, 222, 220, 221, 222, 216, 
	223, 223, 216, 224, 216, 225, 224, 225, 
	224, 216, 226, 226, 216, 227, 227, 216, 
	228, 228, 216, 229, 229, 216, 230, 230, 
	216, 231, 231, 216, 232, 233, 233, 216, 
	234, 232, 234, 232, 216, 232, 216, 235, 
	235, 216, 236, 236, 216, 237, 237, 216, 
	238, 238, 216, 239, 216, 240, 241, 242, 
	240, 241, 242, 216, 243, 243, 216, 224, 
	216, 244, 244, 216, 245, 245, 216, 246, 
	246, 216, 247, 247, 216, 248, 248, 216, 
	249, 249, 216, 250, 232, 250, 216, 232, 
	216, 251, 251, 216, 252, 252, 216, 253, 
	253, 216, 254, 254, 216, 239, 216, 256, 
	255, 257, 258, 257, 258, 255, 259, 260, 
	259, 260, 207, 261, 261, 207, 262, 262, 
	207, 263, 263, 207, 264, 264, 207, 265, 
	207, 266, 266, 207, 267, 267, 207, 268, 
	268, 207, 269, 269, 207, 270, 271, 272, 
	270, 271, 272, 207, 273, 207, 274, 207, 
	275, 207, 276, 255, 277, 278, 277, 278, 
	255, 279, 280, 279, 280, 207, 281, 281, 
	207, 282, 282, 207, 283, 283, 207, 284, 
	284, 207, 265, 207, 285, 285, 207, 286, 
	286, 207, 287, 287, 207, 269, 269, 207, 
	288, 289, 290, 288, 289, 290, 207, 273, 
	207, 274, 207, 275, 207, 291, 291, 292, 
	216, 216, 294, 216, 216, 294, 293, 295, 
	296, 220, 297, 221, 222, 296, 220, 297, 
	221, 222, 216, 298, 257, 299, 300, 301, 
	258, 298, 257, 299, 300, 301, 258, 216, 
	302, 302, 216, 303, 303, 207, 304, 304, 
	207, 305, 305, 207, 306, 306, 207, 307, 
	307, 207, 308, 308, 207, 309, 309, 207, 
	310, 310, 207, 311, 207, 312, 312, 216, 
	313, 313, 207, 314, 314, 207, 315, 315, 
	207, 316, 316, 207, 317, 207, 318, 318, 
	207, 319, 319, 207, 320, 320, 207, 321, 
	321, 207, 311, 207, 322, 322, 216, 323, 
	323, 207, 324, 324, 207, 325, 325, 207, 
	326, 326, 207, 327, 327, 207, 328, 329, 
	329, 207, 328, 207, 330, 330, 216, 331, 
	331, 216, 332, 332, 216, 333, 333, 334, 
	335, 216, 333, 333, 334, 216, 334, 334, 
	336, 336, 336, 216, 338, 337, 337, 337, 
	216, 339, 339, 216, 340, 340, 216, 341, 
	341, 216, 342, 342, 216, 343, 343, 216, 
	344, 344, 216, 335, 216, 345, 216, 346, 
	347, 216, 348, 348, 348, 348, 348, 348, 
	348, 348, 216, 349, 349, 349, 350, 349, 
	349, 349, 349, 216, 351, 352, 240, 353, 
	241, 242, 352, 240, 353, 241, 242, 216, 
	277, 354, 306, 355, 278, 277, 354, 306, 
	355, 278, 216, 356, 356, 216, 357, 357, 
	216, 358, 358, 216, 359, 359, 216, 360, 
	360, 216, 317, 216, 361, 361, 216, 362, 
	362, 216, 363, 363, 216, 364, 364, 216, 
	365, 365, 216, 366, 366, 216, 367, 328, 
	367, 216, 328, 216, 368, 368, 216, 369, 
	369, 216, 370, 370, 216, 371, 371, 372, 
	335, 216, 371, 371, 372, 216, 372, 372, 
	373, 373, 373, 216, 338, 374, 374, 374, 
	216, 375, 375, 216, 376, 376, 216, 377, 
	377, 216, 378, 378, 216, 379, 379, 216, 
	380, 380, 216, 335, 216, 381, 216, 382, 
	216, 383, 384, 383, 384, 385, 385, 385, 
	216, 387, 387, 386, 389, 389, 388, 389, 
	389, 390, 388, 389, 389, 391, 388, 389, 
	389, 392, 388, 393, 392, 393, 392, 388, 
	394, 395, 394, 395, 396, 396, 396, 216, 
	397, 398, 397, 398, 216, 400, 399, 401, 
	214, 402, 403, 404, 405, 404, 214, 407, 
	406, 408, 406, 409, 408, 406, 407, 407, 
	406, 410, 408, 406, 407, 407, 407, 406, 
	411, 412, 408, 406, 407, 407, 407, 406, 
	407, 407, 407, 407, 406, 413, 406, 414, 
	415, 416, 406, 418, 406, 418, 418, 418, 
	406, 406, 418, 406, 406, 406, 408, 413, 
	417, 406, 406, 418, 407, 419, 406, 420, 
	406, 421, 420, 406, 419, 419, 406, 422, 
	420, 406, 419, 419, 419, 406, 423, 424, 
	420, 406, 419, 419, 419, 406, 419, 419, 
	419, 419, 406, 425, 406, 426, 427, 428, 
	406, 430, 407, 430, 430, 430, 406, 406, 
	431, 406, 406, 406, 420, 425, 429, 406, 
	406, 430, 419, 434, 435, 436, 207, 431, 
	407, 431, 431, 431, 431, 207, 432, 433, 
	437, 207, 207, 431, 438, 438, 207, 432, 
	207, 439, 432, 207, 438, 438, 207, 440, 
	432, 207, 438, 438, 438, 207, 441, 442, 
	432, 207, 438, 438, 438, 207, 438, 438, 
	438, 438, 207, 433, 207, 443, 443, 214, 
	444, 444, 214, 445, 445, 214, 446, 447, 
	447, 214, 448, 214, 449, 214, 453, 453, 
	450, 451, 452, 453, 453, 453, 214, 453, 
	214, 453, 454, 453, 450, 451, 452, 453, 
	453, 453, 214, 450, 214, 451, 214, 457, 
	458, 459, 461, 461, 455, 456, 460, 461, 
	461, 461, 207, 461, 207, 455, 207, 462, 
	455, 207, 463, 461, 207, 457, 458, 459, 
	407, 454, 419, 464, 431, 461, 455, 456, 
	460, 461, 461, 461, 207, 465, 455, 207, 
	463, 461, 463, 461, 463, 461, 207, 466, 
	467, 455, 207, 463, 463, 461, 207, 463, 
	463, 463, 461, 207, 456, 207, 468, 207, 
	446, 214, 469, 469, 470, 470, 214, 214, 
	214, 472, 214, 471, 473, 473, 214, 474, 
	474, 214, 475, 475, 214, 476, 477, 477, 
	214, 478, 214, 479, 214, 214, 214, 214, 
	471, 476, 214, 480, 210, 482, 482, 484, 
	485, 486, 487, 210, 488, 483, 481, 490, 
	490, 492, 493, 494, 491, 489, 495, 495, 
	496, 497, 498, 491, 489, 491, 207, 207, 
	491, 489, 490, 490, 492, 493, 494, 491, 
	499, 489, 500, 501, 502, 504, 502, 505, 
	503, 503, 503, 207, 506, 506, 497, 498, 
	207, 507, 207, 509, 509, 510, 207, 207, 
	508, 512, 512, 513, 207, 207, 511, 514, 
	514, 515, 207, 207, 511, 516, 207, 506, 
	517, 502, 497, 502, 498, 503, 503, 503, 
	207, 502, 502, 502, 503, 503, 503, 207, 
	490, 490, 492, 493, 518, 491, 489, 519, 
	519, 520, 521, 210, 210, 508, 522, 522, 
	523, 524, 210, 210, 508, 512, 512, 513, 
	210, 210, 525, 511, 526, 527, 528, 530, 
	528, 210, 210, 529, 529, 529, 511, 531, 
	531, 532, 210, 210, 511, 533, 210, 531, 
	534, 528, 532, 528, 210, 210, 529, 529, 
	529, 511, 512, 535, 528, 513, 528, 210, 
	210, 529, 529, 529, 511, 514, 536, 528, 
	515, 528, 210, 210, 529, 529, 529, 511, 
	490, 490, 492, 493, 537, 491, 489, 509, 
	509, 538, 510, 210, 210, 508, 512, 512, 
	513, 539, 210, 210, 511, 512, 512, 540, 
	513, 210, 210, 511, 512, 512, 513, 541, 
	210, 511, 542, 210, 543, 543, 544, 493, 
	210, 545, 545, 546, 497, 210, 547, 210, 
	548, 549, 550, 504, 550, 551, 551, 551, 
	210, 552, 552, 497, 210, 552, 553, 550, 
	497, 550, 551, 551, 551, 210, 550, 550, 
	550, 551, 551, 551, 210, 490, 490, 492, 
	554, 493, 555, 491, 489, 509, 509, 556, 
	510, 210, 210, 508, 557, 557, 558, 559, 
	210, 210, 511, 560, 560, 561, 532, 210, 
	210, 511, 490, 490, 492, 493, 562, 491, 
	489, 509, 509, 510, 563, 210, 508, 542, 
	210, 565, 566, 567, 564, 564, 564, 210, 
	568, 568, 569, 493, 494, 210, 570, 570, 
	571, 497, 498, 210, 499, 210, 564, 210, 
	568, 568, 569, 493, 518, 210, 572, 210, 
	565, 210, 573, 210, 207, 573, 573, 575, 
	576, 577, 578, 579, 580, 575, 207, 207, 
	574, 207, 582, 582, 207, 583, 584, 207, 
	581, 207, 585, 585, 586, 587, 588, 589, 
	590, 207, 591, 592, 586, 207, 581, 207, 
	582, 582, 587, 588, 589, 590, 207, 593, 
	584, 207, 581, 207, 582, 582, 594, 595, 
	596, 207, 581, 582, 582, 583, 584, 207, 
	207, 598, 207, 207, 598, 600, 599, 597, 
	207, 602, 207, 207, 602, 604, 603, 601, 
	207, 605, 207, 207, 605, 606, 603, 601, 
	207, 207, 207, 603, 207, 603, 601, 607, 
	207, 608, 207, 207, 609, 207, 207, 609, 
	610, 611, 599, 597, 207, 613, 207, 207, 
	613, 614, 615, 616, 617, 618, 597, 619, 
	620, 614, 599, 612, 207, 622, 207, 207, 
	622, 601, 583, 623, 603, 621, 207, 624, 
	207, 207, 624, 625, 626, 627, 628, 629, 
	601, 591, 630, 625, 603, 621, 207, 622, 
	207, 207, 622, 626, 627, 628, 629, 601, 
	593, 623, 603, 621, 207, 622, 207, 207, 
	622, 631, 595, 632, 603, 621, 207, 622, 
	207, 207, 622, 583, 623, 603, 601, 633, 
	207, 582, 582, 583, 634, 207, 207, 622, 
	207, 207, 622, 601, 635, 623, 603, 621, 
	207, 598, 207, 207, 598, 636, 600, 599, 
	597, 207, 602, 207, 207, 602, 637, 604, 
	603, 601, 207, 602, 207, 207, 602, 638, 
	604, 603, 601, 207, 602, 207, 207, 602, 
	639, 604, 603, 601, 207, 602, 207, 207, 
	602, 631, 604, 603, 601, 207, 622, 207, 
	207, 622, 640, 601, 641, 623, 603, 621, 
	207, 622, 207, 207, 622, 601, 595, 623, 
	603, 621, 207, 598, 207, 207, 598, 642, 
	600, 599, 597, 207, 622, 207, 207, 622, 
	601, 643, 623, 603, 621, 207, 598, 207, 
	207, 598, 644, 600, 599, 597, 207, 602, 
	207, 207, 602, 631, 604, 603, 601, 207, 
	598, 207, 207, 598, 645, 646, 647, 600, 
	599, 642, 642, 642, 597, 207, 602, 207, 
	207, 602, 631, 604, 603, 601, 207, 622, 
	207, 207, 622, 595, 623, 603, 601, 207, 
	602, 207, 207, 602, 648, 604, 603, 601, 
	207, 602, 207, 207, 602, 649, 604, 603, 
	601, 582, 582, 583, 650, 207, 207, 582, 
	582, 207, 635, 584, 207, 581, 207, 582, 
	582, 651, 207, 641, 584, 207, 581, 207, 
	582, 582, 207, 595, 584, 207, 581, 207, 
	582, 582, 207, 643, 584, 207, 581, 652, 
	653, 654, 594, 594, 594, 207, 594, 207, 
	582, 582, 595, 584, 207, 655, 207, 652, 
	207, 656, 210, 657, 658, 658, 210, 659, 
	659, 659, 207, 660, 660, 660, 207, 661, 
	661, 661, 207, 662, 662, 662, 207, 663, 
	663, 663, 207, 664, 664, 664, 207, 665, 
	665, 665, 207, 666, 666, 666, 207, 667, 
	667, 667, 207, 668, 668, 668, 210, 669, 
	210, 670, 671, 671, 210, 672, 672, 672, 
	207, 673, 673, 673, 207, 674, 674, 674, 
	207, 675, 675, 675, 207, 676, 676, 676, 
	207, 677, 677, 677, 207, 678, 678, 678, 
	207, 679, 679, 679, 207, 680, 680, 680, 
	207, 681, 681, 681, 210, 682, 210, 683, 
	684, 684, 210, 685, 685, 685, 207, 686, 
	686, 686, 207, 687, 687, 687, 207, 688, 
	688, 688, 207, 689, 689, 689, 207, 690, 
	690, 690, 207, 691, 691, 691, 207, 692, 
	692, 692, 207, 693, 693, 693, 207, 694, 
	694, 694, 210, 695, 210, 696, 697, 697, 
	210, 699, 699, 699, 699, 699, 698, 700, 
	700, 700, 207, 701, 701, 701, 207, 702, 
	702, 702, 207, 703, 703, 703, 207, 704, 
	704, 704, 207, 705, 705, 705, 207, 706, 
	706, 706, 207, 707, 707, 707, 207, 708, 
	708, 708, 207, 709, 709, 709, 210, 710, 
	210, 711, 712, 712, 210, 713, 713, 713, 
	207, 714, 714, 714, 207, 715, 715, 715, 
	207, 716, 716, 716, 207, 717, 717, 717, 
	207, 718, 718, 718, 207, 719, 719, 719, 
	207, 720, 720, 720, 207, 721, 721, 721, 
	207, 722, 722, 722, 210, 723, 210, 724, 
	210, 728, 728, 725, 726, 727, 728, 728, 
	728, 210, 728, 210, 728, 729, 728, 725, 
	726, 727, 728, 728, 728, 210, 725, 210, 
	726, 210, 732, 733, 734, 736, 736, 730, 
	731, 735, 736, 736, 736, 207, 736, 207, 
	730, 207, 737, 730, 207, 738, 736, 207, 
	732, 733, 734, 739, 729, 740, 741, 742, 
	736, 730, 731, 735, 736, 736, 736, 207, 
	743, 730, 207, 738, 736, 738, 736, 738, 
	736, 207, 744, 745, 730, 207, 738, 738, 
	736, 207, 738, 738, 738, 736, 207, 731, 
	207, 739, 746, 747, 746, 748, 747, 746, 
	739, 739, 746, 749, 747, 746, 739, 739, 
	739, 746, 750, 751, 747, 746, 739, 739, 
	739, 746, 739, 739, 739, 739, 746, 752, 
	746, 753, 754, 755, 746, 757, 746, 757, 
	757, 757, 746, 746, 757, 746, 746, 746, 
	747, 752, 756, 746, 746, 757, 739, 740, 
	746, 758, 746, 759, 758, 746, 740, 740, 
	746, 760, 758, 746, 740, 740, 740, 746, 
	761, 762, 758, 746, 740, 740, 740, 746, 
	740, 740, 740, 740, 746, 763, 746, 764, 
	765, 766, 746, 768, 739, 768, 768, 768, 
	746, 746, 742, 746, 746, 746, 758, 763, 
	767, 746, 746, 768, 740, 771, 772, 773, 
	207, 742, 739, 742, 742, 742, 742, 207, 
	769, 770, 774, 207, 207, 742, 775, 775, 
	207, 769, 207, 776, 769, 207, 775, 775, 
	207, 777, 769, 207, 775, 775, 775, 207, 
	778, 779, 769, 207, 775, 775, 775, 207, 
	775, 775, 775, 775, 207, 770, 207, 780, 
	207, 781, 781, 210, 782, 782, 210, 783, 
	783, 210, 784, 784, 210, 785, 785, 210, 
	786, 786, 210, 787, 210, 788, 210, 789, 
	790, 790, 210, 791, 791, 791, 207, 792, 
	792, 792, 207, 793, 793, 793, 207, 794, 
	794, 794, 207, 795, 795, 795, 207, 796, 
	796, 796, 207, 797, 797, 797, 207, 798, 
	798, 798, 207, 799, 799, 799, 207, 800, 
	800, 800, 210, 801, 210, 802, 803, 803, 
	210, 804, 805, 806, 806, 210, 807, 807, 
	210, 808, 210, 804, 809, 810, 810, 210, 
	804, 811, 812, 812, 210, 804, 813, 814, 
	814, 210, 804, 815, 816, 816, 210, 804, 
	817, 818, 818, 210, 804, 819, 820, 820, 
	210, 804, 821, 822, 822, 210, 804, 823, 
	824, 824, 210, 804, 825, 826, 826, 210, 
	804, 825, 210, 804, 210, 826, 826, 826, 
	210, 824, 824, 824, 210, 822, 822, 822, 
	210, 820, 820, 820, 210, 818, 818, 818, 
	210, 816, 816, 816, 210, 814, 814, 814, 
	210, 812, 812, 812, 210, 810, 810, 810, 
	210, 806, 806, 806, 210, 827, 210, 828, 
	829, 829, 210, 830, 830, 830, 207, 831, 
	831, 831, 207, 832, 832, 832, 207, 833, 
	833, 833, 207, 834, 834, 834, 207, 835, 
	835, 835, 207, 836, 836, 836, 207, 837, 
	837, 837, 207, 838, 838, 838, 207, 839, 
	839, 839, 210, 840, 210, 841, 842, 842, 
	210, 843, 843, 843, 207, 844, 844, 844, 
	207, 845, 845, 845, 207, 846, 846, 846, 
	207, 847, 847, 847, 207, 848, 848, 848, 
	207, 849, 849, 849, 207, 850, 850, 850, 
	207, 851, 851, 851, 207, 852, 852, 852, 
	210, 853, 210, 854, 855, 855, 210, 856, 
	856, 856, 207, 857, 857, 857, 207, 858, 
	858, 858, 207, 859, 859, 859, 207, 860, 
	860, 860, 207, 861, 861, 861, 207, 862, 
	862, 862, 207, 863, 863, 863, 207, 864, 
	864, 864, 207, 865, 865, 865, 210, 866, 
	210, 867, 868, 868, 210, 869, 869, 869, 
	207, 870, 870, 870, 207, 871, 871, 871, 
	207, 872, 872, 872, 207, 873, 873, 873, 
	207, 874, 874, 874, 207, 875, 875, 875, 
	207, 876, 876, 876, 207, 877, 877, 877, 
	207, 878, 878, 878, 210, 879, 880, 881, 
	879, 880, 881, 210, 882, 882, 210, 883, 
	883, 210, 884, 884, 210, 885, 885, 210, 
	886, 210, 887, 210, 888, 889, 889, 210, 
	890, 890, 890, 207, 891, 891, 891, 207, 
	892, 892, 892, 207, 893, 893, 893, 207, 
	894, 894, 894, 207, 895, 895, 895, 207, 
	896, 896, 896, 207, 897, 897, 897, 207, 
	898, 898, 898, 207, 899, 899, 899, 210, 
	900, 900, 210, 901, 901, 210, 902, 902, 
	210, 903, 903, 210, 904, 904, 210, 905, 
	905, 210, 906, 906, 210, 907, 907, 210, 
	908, 908, 210, 909, 909, 210, 910, 210, 
	911, 210, 912, 913, 913, 210, 914, 914, 
	914, 207, 915, 915, 915, 207, 916, 916, 
	916, 207, 917, 917, 917, 207, 918, 918, 
	918, 207, 919, 919, 919, 207, 920, 920, 
	920, 207, 921, 921, 921, 207, 922, 922, 
	922, 207, 923, 923, 923, 210, 924, 924, 
	210, 925, 925, 210, 926, 926, 210, 927, 
	927, 210, 928, 928, 210, 929, 929, 210, 
	930, 930, 210, 931, 931, 210, 932, 932, 
	210, 933, 933, 210, 934, 210, 935, 210, 
	936, 937, 937, 210, 938, 938, 938, 207, 
	939, 939, 939, 207, 940, 940, 940, 207, 
	941, 941, 941, 207, 942, 942, 942, 207, 
	943, 943, 943, 207, 944, 944, 944, 207, 
	945, 945, 945, 207, 946, 946, 946, 207, 
	947, 947, 947, 210, 948, 210, 949, 950, 
	950, 210, 952, 952, 951, 953, 951, 954, 
	954, 954, 207, 955, 955, 955, 207, 956, 
	956, 956, 207, 957, 957, 957, 207, 958, 
	958, 958, 207, 959, 959, 959, 207, 960, 
	960, 960, 207, 961, 961, 961, 207, 962, 
	962, 962, 207, 963, 963, 963, 210, 964, 
	965, 965, 210, 966, 967, 967, 210, 968, 
	968, 968, 207, 969, 969, 969, 207, 970, 
	970, 970, 207, 971, 971, 971, 207, 972, 
	972, 972, 207, 973, 973, 973, 207, 974, 
	974, 974, 207, 975, 975, 975, 207, 976, 
	976, 976, 207, 977, 977, 977, 210, 978, 
	978, 210, 979, 979, 210, 980, 980, 210, 
	981, 981, 210, 982, 982, 210, 983, 210, 
	984, 210, 985, 986, 986, 210, 987, 987, 
	987, 207, 988, 988, 988, 207, 989, 989, 
	989, 207, 990, 990, 990, 207, 991, 991, 
	991, 207, 992, 992, 992, 207, 993, 993, 
	993, 207, 994, 994, 994, 207, 995, 995, 
	995, 207, 996, 996, 996, 210, 997, 210, 
	998, 999, 999, 210, 1000, 1000, 1000, 207, 
	1001, 1001, 1001, 207, 1002, 1002, 1002, 207, 
	1003, 1003, 1003, 207, 1004, 1004, 1004, 207, 
	1005, 1005, 1005, 207, 1006, 1006, 1006, 207, 
	1007, 1007, 1007, 207, 1008, 1008, 1008, 207, 
	1009, 1009, 1009, 210, 207, 207, 207, 1011, 
	1010, 207, 207, 207, 1012, 1011, 1010, 1013, 
	1013, 207, 1014, 1014, 207, 1015, 1015, 207, 
	1016, 1016, 207, 1017, 1018, 1018, 207, 1019, 
	207, 1020, 207, 207, 207, 207, 1021, 207, 
	207, 1022, 207, 1021, 1017, 207, 214, 214, 
	214, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 
	1030, 1011, 1023, 1024, 1025, 1026, 1027, 1028, 
	1029, 1030, 1010, 214, 214, 214, 1031, 1010, 
	214, 214, 214, 1032, 1033, 1011, 1032, 1033, 
	1010, 214, 214, 214, 1034, 1011, 1034, 1010, 
	214, 214, 214, 1035, 1011, 1035, 1010, 214, 
	214, 214, 1036, 1011, 1036, 1010, 214, 214, 
	214, 1037, 1011, 1037, 1010, 214, 214, 214, 
	1038, 1010, 214, 214, 214, 1039, 1011, 1039, 
	1010, 214, 214, 214, 1040, 1011, 1040, 1010, 
	214, 214, 214, 1041, 1011, 1041, 1010, 1042, 
	1042, 1010, 1010, 1010, 1010, 1010, 214, 214, 
	214, 214, 1043, 1011, 1043, 1010, 214, 214, 
	214, 1044, 1011, 1044, 1010, 214, 214, 214, 
	1045, 1011, 1045, 1010, 214, 214, 214, 1046, 
	1011, 1046, 1010, 214, 214, 214, 1047, 1011, 
	1047, 1010, 1011, 1048, 1010, 1010, 1010, 1010, 
	1010, 214, 214, 214, 214, 1049, 1010, 214, 
	214, 214, 1050, 1011, 1050, 1010, 214, 214, 
	214, 1051, 1011, 1051, 1010, 214, 214, 214, 
	1052, 1011, 1052, 1010, 214, 214, 214, 1053, 
	1011, 1053, 1010, 1011, 1054, 1010, 1010, 1010, 
	1010, 1010, 214, 214, 214, 214, 1055, 1056, 
	1055, 1010, 214, 214, 214, 1057, 1011, 1057, 
	1010, 214, 214, 214, 1058, 1011, 1058, 1010, 
	214, 214, 214, 1059, 1011, 1059, 1010, 214, 
	214, 214, 1060, 1011, 1060, 1010, 214, 214, 
	214, 1061, 1011, 1061, 1010, 214, 214, 214, 
	1062, 1063, 1062, 1010, 214, 214, 214, 1063, 
	1010, 214, 214, 214, 1064, 1065, 1066, 1011, 
	1064, 1065, 1066, 1010, 214, 214, 214, 1067, 
	1010, 214, 214, 214, 1068, 1010, 214, 214, 
	214, 1069, 1010, 214, 214, 214, 1070, 1010, 
	214, 214, 214, 1071, 1072, 1071, 1010, 214, 
	214, 214, 1073, 1010, 214, 214, 214, 1074, 
	1075, 1011, 1074, 1075, 1010, 214, 214, 214, 
	1076, 1011, 1076, 1010, 214, 214, 214, 1077, 
	1011, 1077, 1010, 214, 214, 214, 1078, 1011, 
	1078, 1010, 214, 214, 214, 1079, 1011, 1079, 
	1010, 214, 214, 214, 1080, 1010, 214, 214, 
	214, 1081, 1082, 1011, 1081, 1082, 1010, 214, 
	214, 214, 1083, 1011, 1083, 1010, 214, 1084, 
	214, 214, 1084, 1085, 1086, 1010, 214, 1084, 
	214, 214, 1084, 1085, 1011, 1010, 214, 1085, 
	214, 214, 1085, 1011, 1087, 1087, 1087, 1010, 
	214, 214, 214, 1089, 1088, 1088, 1088, 1010, 
	1091, 1092, 1091, 1090, 1092, 1011, 1010, 1094, 
	1095, 1094, 1093, 1095, 1011, 1010, 214, 214, 
	214, 1096, 1011, 1096, 1010, 214, 214, 214, 
	1097, 1011, 1097, 1010, 214, 1098, 214, 214, 
	1098, 1099, 1100, 1010, 214, 1102, 214, 214, 
	1102, 1103, 1104, 1101, 214, 214, 214, 1106, 
	1105, 214, 1103, 214, 214, 1103, 1104, 1101, 
	214, 214, 214, 1107, 1011, 1107, 1010, 214, 
	214, 214, 1108, 1011, 1108, 1010, 214, 214, 
	214, 1109, 1011, 1109, 1010, 214, 214, 214, 
	1110, 1011, 1110, 1010, 214, 214, 214, 1111, 
	1011, 1111, 1010, 214, 1112, 214, 214, 1112, 
	1113, 1114, 1010, 214, 1116, 214, 214, 1116, 
	1117, 1118, 1115, 214, 214, 214, 1120, 1119, 
	214, 1117, 214, 214, 1117, 1118, 1115, 214, 
	214, 214, 1121, 1010, 214, 214, 214, 1122, 
	1011, 1122, 1010, 214, 214, 214, 1123, 1011, 
	1123, 1010, 214, 214, 214, 1124, 1011, 1124, 
	1010, 214, 214, 214, 1125, 1011, 1125, 1010, 
	214, 214, 214, 1126, 1011, 1126, 1010, 214, 
	214, 214, 1127, 1011, 1127, 1010, 214, 214, 
	214, 1128, 1010, 1130, 1131, 1130, 1129, 1131, 
	1011, 1010, 214, 214, 214, 1132, 1011, 1132, 
	1010, 214, 214, 214, 1133, 1011, 1133, 1010, 
	214, 214, 214, 1134, 1011, 1134, 1010, 214, 
	214, 214, 1135, 1011, 1135, 1010, 214, 214, 
	214, 1136, 1010, 214, 214, 214, 1137, 1138, 
	1137, 1010, 214, 214, 214, 1139, 1011, 1139, 
	1010, 214, 214, 214, 1140, 1011, 1140, 1010, 
	214, 214, 214, 1141, 1011, 1141, 1010, 214, 
	214, 214, 1142, 1011, 1142, 1010, 214, 214, 
	214, 1143, 1011, 1143, 1010, 214, 214, 214, 
	1144, 1145, 1144, 1010, 214, 214, 214, 1145, 
	1010, 214, 214, 214, 1146, 1011, 1146, 1010, 
	214, 214, 214, 1147, 1010, 214, 214, 214, 
	1148, 1149, 1148, 1010, 214, 214, 214, 1150, 
	1011, 1150, 1010, 214, 1151, 214, 214, 1151, 
	1152, 1153, 1010, 214, 1151, 214, 214, 1151, 
	1152, 1011, 1010, 214, 1152, 214, 214, 1152, 
	1154, 1155, 1156, 1155, 1157, 1011, 1157, 1010, 
	214, 214, 214, 1158, 1158, 1159, 1011, 1159, 
	1010, 214, 214, 214, 1010, 1161, 1162, 1010, 
	1160, 214, 1163, 214, 214, 1163, 1164, 1010, 
	214, 1166, 214, 214, 1166, 1167, 1168, 1165, 
	214, 1170, 214, 214, 1170, 1171, 1172, 1169, 
	214, 1173, 214, 214, 1173, 1174, 1011, 1010, 
	214, 214, 214, 1175, 1011, 1010, 214, 214, 
	214, 1176, 1011, 1176, 1010, 214, 214, 214, 
	1177, 1011, 1177, 1010, 214, 214, 214, 1178, 
	1011, 1178, 1010, 214, 214, 214, 1179, 1010, 
	214, 1170, 214, 214, 1170, 1180, 1171, 1172, 
	1169, 214, 1182, 214, 214, 1182, 1183, 1184, 
	1183, 1181, 207, 1182, 207, 207, 1182, 1184, 
	1181, 1185, 1185, 1186, 207, 1187, 207, 1188, 
	1188, 207, 1189, 1189, 207, 1190, 1190, 207, 
	1191, 207, 214, 1182, 214, 214, 1182, 1192, 
	1184, 1192, 1181, 214, 1182, 214, 214, 1182, 
	1193, 1184, 1193, 1181, 214, 1182, 214, 214, 
	1182, 1194, 1184, 1194, 1181, 214, 1182, 214, 
	214, 1182, 1195, 1196, 1184, 1196, 1181, 214, 
	1182, 214, 214, 1182, 1197, 1184, 1181, 214, 
	1182, 214, 214, 1182, 1198, 1184, 1181, 214, 
	1182, 214, 214, 1182, 1200, 1181, 1199, 214, 
	1182, 214, 214, 1182, 1201, 1200, 1181, 1199, 
	214, 214, 1022, 1202, 214, 1021, 214, 214, 
	1022, 1203, 1203, 214, 1021, 214, 214, 1022, 
	1204, 1204, 214, 1021, 214, 214, 1022, 1205, 
	1205, 214, 1021, 214, 214, 1022, 1206, 214, 
	1021, 214, 1182, 214, 214, 1182, 1195, 1184, 
	1181, 214, 1170, 214, 214, 1170, 1171, 1168, 
	1165, 214, 214, 214, 1010, 1161, 1207, 1162, 
	1010, 1160, 214, 214, 1209, 1210, 1210, 214, 
	1208, 207, 207, 1209, 207, 1208, 1211, 1211, 
	1212, 207, 207, 1214, 207, 207, 1214, 1213, 
	207, 1182, 207, 207, 1182, 1184, 1213, 214, 
	214, 1209, 1215, 1215, 214, 1208, 214, 214, 
	1209, 1216, 1216, 214, 1208, 214, 214, 1209, 
	1217, 1217, 214, 1208, 214, 214, 1209, 1218, 
	1219, 1219, 214, 1208, 214, 214, 1209, 1220, 
	214, 1208, 214, 214, 1209, 1221, 214, 1208, 
	214, 214, 1223, 214, 1222, 214, 214, 1223, 
	1224, 214, 1222, 214, 1211, 1211, 1022, 1225, 
	214, 1021, 214, 1214, 214, 214, 1214, 1227, 
	1213, 1226, 214, 214, 1209, 1218, 214, 1208, 
	214, 214, 214, 1228, 1011, 1228, 1010, 214, 
	214, 214, 1229, 1011, 1229, 1010, 214, 214, 
	214, 1230, 1011, 1230, 1010, 214, 214, 214, 
	1231, 1232, 1011, 1232, 1010, 214, 214, 214, 
	1233, 1011, 1010, 214, 214, 214, 1234, 1011, 
	1010, 214, 214, 214, 1010, 1162, 1010, 1160, 
	214, 214, 214, 1231, 1011, 1010, 214, 1161, 
	214, 214, 1161, 1164, 1010, 1235, 214, 214, 
	214, 1236, 1236, 1237, 1011, 1237, 1010, 214, 
	214, 214, 1010, 1161, 1239, 1010, 1238, 214, 
	214, 214, 1010, 1161, 1240, 1239, 1010, 1238, 
	214, 214, 1209, 1242, 1242, 214, 1241, 207, 
	207, 1209, 207, 1241, 214, 214, 1209, 1243, 
	1243, 214, 1241, 214, 214, 1209, 1244, 1244, 
	214, 1241, 214, 214, 1209, 1245, 1245, 214, 
	1241, 214, 214, 1209, 1246, 1247, 1247, 214, 
	1241, 214, 214, 1209, 1248, 214, 1241, 214, 
	214, 1209, 1249, 214, 1241, 214, 214, 1223, 
	214, 1250, 214, 214, 1223, 1251, 214, 1250, 
	214, 214, 1209, 1246, 214, 1241, 214, 214, 
	214, 1252, 1011, 1252, 1010, 214, 214, 214, 
	1253, 1011, 1253, 1010, 214, 214, 214, 1254, 
	1011, 1254, 1010, 214, 214, 214, 1255, 1256, 
	1011, 1256, 1010, 214, 214, 214, 1257, 1011, 
	1010, 214, 214, 214, 1258, 1011, 1010, 214, 
	214, 214, 1010, 1239, 1010, 1238, 214, 214, 
	214, 1255, 1011, 1010, 214, 214, 214, 1259, 
	1011, 1259, 1010, 214, 214, 214, 1260, 1011, 
	1260, 1010, 214, 214, 214, 1261, 1011, 1261, 
	1010, 214, 214, 214, 1262, 1263, 1011, 1263, 
	1010, 214, 214, 214, 1264, 1011, 1010, 214, 
	214, 214, 1265, 1011, 1010, 214, 214, 214, 
	1010, 1266, 1010, 1235, 214, 1161, 214, 214, 
	1161, 1267, 1164, 1010, 1235, 214, 1209, 1209, 
	1269, 1270, 1269, 214, 1268, 207, 1209, 1209, 
	1270, 207, 1268, 214, 1209, 1209, 1271, 1270, 
	1271, 214, 1268, 214, 1209, 1209, 1272, 1270, 
	1272, 214, 1268, 214, 1209, 1209, 1273, 1270, 
	1273, 214, 1268, 214, 1209, 1209, 1274, 1275, 
	1270, 1275, 214, 1268, 214, 1209, 1209, 1276, 
	1270, 214, 1268, 214, 1209, 1209, 1277, 1270, 
	214, 1268, 214, 1209, 1209, 1279, 214, 1278, 
	214, 1209, 1209, 1280, 1279, 214, 1278, 214, 
	1209, 1209, 1274, 1270, 214, 1268, 214, 214, 
	214, 1262, 1011, 1010, 214, 1281, 214, 214, 
	1281, 1282, 1012, 1282, 1283, 1011, 1283, 1010, 
	214, 1281, 214, 214, 1281, 1282, 1282, 1283, 
	1011, 1283, 1010, 214, 1285, 214, 214, 1285, 
	1286, 1287, 1010, 1284, 214, 1288, 214, 214, 
	1288, 1289, 1011, 1010, 214, 214, 214, 1290, 
	1011, 1010, 214, 214, 214, 1291, 1011, 1291, 
	1010, 214, 214, 214, 1292, 1011, 1292, 1010, 
	214, 214, 214, 1293, 1011, 1293, 1010, 214, 
	214, 214, 1294, 1010, 214, 1285, 214, 214, 
	1285, 1295, 1286, 1287, 1010, 1284, 214, 1285, 
	214, 214, 1285, 1296, 1286, 1287, 1296, 1010, 
	1284, 214, 1285, 214, 214, 1285, 1297, 1286, 
	1287, 1297, 1010, 1284, 214, 1285, 214, 214, 
	1285, 1298, 1286, 1287, 1298, 1010, 1284, 214, 
	1285, 214, 214, 1285, 1286, 1294, 1010, 1284, 
	214, 1285, 214, 214, 1285, 1299, 1286, 1287, 
	1010, 1284, 214, 1301, 1301, 1302, 1303, 1302, 
	214, 1300, 207, 1301, 1301, 1303, 207, 1300, 
	1304, 1304, 1305, 207, 1306, 207, 1307, 1307, 
	207, 1308, 1308, 207, 1309, 1309, 207, 1310, 
	207, 207, 1301, 1301, 1311, 1303, 207, 1300, 
	207, 1301, 1301, 1312, 1303, 1312, 207, 1300, 
	207, 1301, 1301, 1313, 1303, 1313, 207, 1300, 
	207, 1301, 1301, 1314, 1303, 1314, 207, 1300, 
	207, 1301, 1301, 1303, 1310, 207, 1300, 214, 
	1301, 1301, 1315, 1303, 1315, 214, 1300, 214, 
	1301, 1301, 1316, 1303, 1316, 214, 1300, 214, 
	1301, 1301, 1317, 1303, 1317, 214, 1300, 214, 
	1301, 1301, 1318, 1319, 1303, 1319, 214, 1300, 
	214, 1301, 1301, 1320, 1303, 214, 1300, 214, 
	1301, 1301, 1321, 1303, 214, 1300, 214, 1301, 
	1301, 1323, 214, 1322, 214, 1301, 1301, 1324, 
	1323, 214, 1322, 214, 1301, 1301, 1324, 1325, 
	1323, 214, 1322, 214, 1301, 1301, 1324, 1326, 
	1323, 1326, 214, 1322, 214, 1301, 1301, 1324, 
	1327, 1323, 1327, 214, 1322, 214, 1301, 1301, 
	1324, 1328, 1323, 1328, 214, 1322, 214, 1301, 
	1301, 1324, 1323, 1329, 214, 1322, 214, 1301, 
	1301, 1318, 1303, 214, 1300, 214, 214, 214, 
	1330, 1011, 1330, 1010, 214, 214, 214, 1331, 
	1011, 1331, 1010, 214, 214, 214, 1332, 1011, 
	1332, 1010, 214, 214, 214, 1333, 1334, 1011, 
	1334, 1010, 214, 214, 214, 1335, 1011, 1010, 
	214, 214, 214, 1336, 1011, 1010, 214, 214, 
	214, 1010, 1287, 1010, 1284, 214, 214, 214, 
	1333, 1011, 1010, 481, 1338, 483, 483, 1338, 
	1340, 1341, 1342, 1343, 1011, 1344, 1339, 1337, 
	489, 1346, 491, 491, 1346, 1348, 1349, 1350, 
	1347, 1345, 489, 1351, 491, 491, 1351, 1352, 
	1349, 1353, 1347, 1345, 489, 491, 491, 1347, 
	1011, 1010, 1347, 1345, 489, 1346, 491, 491, 
	1346, 1348, 1349, 1350, 1347, 1354, 1345, 214, 
	1355, 214, 214, 1356, 1357, 1359, 1357, 1360, 
	1358, 1358, 1358, 1010, 214, 1361, 214, 214, 
	1361, 1349, 1353, 1010, 214, 214, 214, 1012, 
	1362, 1010, 508, 1364, 214, 214, 1364, 1365, 
	1010, 1010, 1363, 511, 1367, 214, 214, 1367, 
	1368, 1010, 1010, 1366, 511, 1369, 214, 214, 
	1369, 1370, 1010, 1010, 1366, 214, 214, 214, 
	1012, 1371, 1010, 214, 1361, 214, 214, 1372, 
	1357, 1349, 1357, 1353, 1358, 1358, 1358, 1010, 
	214, 214, 214, 1357, 1357, 1011, 1357, 1358, 
	1358, 1358, 1010, 489, 1346, 491, 491, 1346, 
	1348, 1349, 1373, 1347, 1345, 508, 1374, 214, 
	214, 1374, 1375, 1376, 1010, 1010, 1363, 508, 
	1377, 214, 214, 1377, 1378, 1379, 1010, 1010, 
	1363, 511, 1367, 214, 214, 1367, 1368, 1010, 
	1010, 1380, 1366, 511, 1381, 214, 214, 1382, 
	1383, 1385, 1383, 1010, 1010, 1384, 1384, 1384, 
	1366, 511, 1386, 214, 214, 1386, 1387, 1010, 
	1010, 1366, 214, 214, 214, 1012, 1388, 1010, 
	511, 1386, 214, 214, 1389, 1383, 1387, 1383, 
	1010, 1010, 1384, 1384, 1384, 1366, 511, 1367, 
	214, 214, 1390, 1383, 1368, 1383, 1010, 1010, 
	1384, 1384, 1384, 1366, 511, 1369, 214, 214, 
	1391, 1383, 1370, 1383, 1010, 1010, 1384, 1384, 
	1384, 1366, 489, 1346, 491, 491, 1346, 1348, 
	1349, 1392, 1347, 1345, 508, 1364, 214, 214, 
	1364, 1393, 1365, 1010, 1010, 1363, 511, 1367, 
	214, 214, 1367, 1368, 1394, 1010, 1010, 1366, 
	511, 1367, 214, 214, 1367, 1395, 1368, 1010, 
	1010, 1366, 511, 1367, 214, 214, 1367, 1368, 
	1396, 1010, 1366, 214, 214, 214, 1397, 1011, 
	1010, 214, 1398, 214, 214, 1398, 1399, 1349, 
	1010, 214, 1400, 214, 214, 1400, 1401, 1349, 
	1010, 214, 214, 214, 1011, 1402, 1010, 214, 
	1403, 214, 214, 1404, 1405, 1359, 1405, 1406, 
	1406, 1406, 1010, 214, 1407, 214, 214, 1407, 
	1349, 1010, 214, 1407, 214, 214, 1408, 1405, 
	1349, 1405, 1406, 1406, 1406, 1010, 214, 214, 
	214, 1405, 1405, 1011, 1405, 1406, 1406, 1406, 
	1010, 489, 1346, 491, 491, 1346, 1348, 1409, 
	1349, 1410, 1347, 1345, 508, 1364, 214, 214, 
	1364, 1411, 1365, 1010, 1010, 1363, 511, 1412, 
	214, 214, 1412, 1413, 1414, 1010, 1010, 1366, 
	511, 1415, 214, 214, 1415, 1416, 1387, 1010, 
	1010, 1366, 489, 1346, 491, 491, 1346, 1348, 
	1349, 1417, 1347, 1345, 508, 1364, 214, 214, 
	1364, 1365, 1418, 1010, 1363, 214, 214, 214, 
	1397, 1011, 1010, 214, 214, 214, 1011, 1420, 
	1421, 1422, 1419, 1419, 1419, 1010, 214, 1423, 
	214, 214, 1423, 1424, 1349, 1350, 1010, 214, 
	1425, 214, 214, 1425, 1426, 1349, 1353, 1010, 
	214, 214, 214, 1011, 1354, 1010, 214, 214, 
	214, 1011, 1419, 1010, 214, 1423, 214, 214, 
	1423, 1424, 1349, 1373, 1010, 214, 214, 214, 
	1011, 1427, 1010, 214, 214, 214, 1011, 1420, 
	1010, 1428, 257, 1429, 1430, 300, 1431, 258, 
	1432, 1428, 257, 1429, 1430, 300, 1431, 258, 
	1432, 214, 1433, 302, 302, 214, 1430, 312, 
	1430, 312, 214, 1434, 214, 1435, 322, 1436, 
	322, 1436, 214, 1437, 1437, 214, 1438, 1438, 
	214, 1439, 1439, 214, 1440, 1440, 214, 1433, 
	214, 1441, 214, 1442, 1442, 214, 1442, 1442, 
	1443, 1443, 214, 1444, 1444, 214, 1445, 1445, 
	214, 1446, 1446, 214, 1447, 214, 1448, 214, 
	1449, 1449, 1450, 1450, 214, 214, 214, 1452, 
	214, 1451, 214, 214, 1452, 1453, 214, 1451, 
	214, 214, 214, 1454, 214, 214, 214, 1456, 
	1455, 214, 214, 214, 1457, 1456, 1455, 214, 
	214, 214, 1456, 1458, 1458, 1455, 214, 214, 
	214, 1456, 1459, 1455, 1460, 1460, 214, 1461, 
	1461, 214, 1462, 1462, 214, 1463, 1464, 1464, 
	214, 1465, 214, 1466, 214, 214, 214, 214, 
	1451, 1463, 214, 1467, 1468, 1469, 1468, 1469, 
	214, 1470, 1470, 214, 1471, 1471, 214, 1472, 
	1472, 214, 1473, 1473, 214, 1474, 1474, 214, 
	1475, 1475, 214, 1476, 1476, 214, 1477, 1477, 
	214, 1478, 214, 1479, 214, 1480, 1481, 1480, 
	1481, 214, 1482, 1482, 214, 1483, 1483, 214, 
	1484, 1484, 214, 1485, 1485, 214, 1486, 214, 
	1487, 1488, 1487, 1488, 214, 1489, 1489, 214, 
	1490, 1490, 1491, 1492, 214, 1490, 1490, 1491, 
	214, 1491, 1491, 1493, 1493, 1493, 214, 1495, 
	1494, 1494, 1494, 214, 1091, 1496, 1091, 1496, 
	1090, 1094, 1497, 1094, 1497, 1093, 1498, 1498, 
	214, 1499, 1499, 214, 1500, 1500, 1501, 1502, 
	214, 214, 1504, 214, 214, 1504, 1505, 1506, 
	1503, 214, 214, 214, 1508, 1507, 214, 1505, 
	214, 214, 1505, 1506, 1503, 1509, 1510, 1509, 
	1510, 214, 1511, 214, 1512, 1512, 214, 1513, 
	1513, 214, 1514, 1514, 214, 1515, 1515, 214, 
	1516, 1516, 1517, 1518, 214, 214, 1520, 214, 
	214, 1520, 1521, 1522, 1519, 214, 214, 214, 
	1524, 1523, 214, 1521, 214, 214, 1521, 1522, 
	1519, 1525, 1525, 214, 1526, 1526, 214, 1527, 
	1527, 214, 1528, 1529, 1529, 214, 1530, 214, 
	1531, 214, 214, 214, 214, 1532, 214, 214, 
	1533, 214, 1532, 1528, 214, 1534, 1534, 214, 
	1535, 1535, 214, 1536, 1536, 214, 1537, 1537, 
	214, 1538, 1538, 214, 1539, 1539, 214, 1540, 
	214, 1130, 1541, 1130, 1541, 1129, 1542, 1543, 
	1544, 1543, 1544, 214, 1545, 1545, 214, 1546, 
	1546, 214, 1547, 1547, 214, 1548, 1548, 214, 
	1549, 1549, 214, 1550, 1551, 1551, 214, 1550, 
	214, 1552, 1552, 214, 1553, 1553, 214, 1554, 
	1554, 214, 1555, 1555, 214, 1467, 214, 1556, 
	1556, 214, 1557, 214, 1558, 214, 1559, 1559, 
	1559, 1559, 214, 1561, 1560, 1560, 1560, 1560, 
	214, 1562, 214, 1566, 1567, 1568, 1562, 1571, 
	1562, 1562, 1570, 1563, 1564, 1565, 1569, 1563, 
	1570, 1570, 1562, 1570, 1570, 1570, 207, 1574, 
	1575, 1576, 1563, 1563, 1563, 1563, 1578, 1563, 
	1572, 1573, 1577, 1563, 1578, 1578, 1563, 1578, 
	1578, 1578, 207, 1574, 1575, 1576, 1563, 1563, 
	1563, 1563, 1578, 1578, 1563, 1572, 1573, 1577, 
	1563, 1578, 1578, 1563, 1578, 1578, 1578, 207, 
	1574, 1575, 1576, 1563, 1563, 1563, 1563, 1578, 
	1572, 1563, 1572, 1573, 1577, 1563, 1578, 1578, 
	1563, 1578, 1578, 1578, 207, 1579, 1574, 1575, 
	1576, 1563, 1563, 1563, 1563, 1578, 1572, 1563, 
	1572, 1573, 1577, 1563, 1578, 1578, 1563, 1578, 
	1578, 1578, 207, 1563, 1574, 1575, 1576, 1563, 
	1563, 1563, 1563, 1578, 1578, 1563, 1572, 1573, 
	1577, 1563, 1578, 1578, 1563, 1578, 1578, 1578, 
	207, 1580, 1574, 1575, 1576, 1563, 1563, 1563, 
	1563, 1578, 1572, 1563, 1572, 1573, 1577, 1563, 
	1578, 1578, 1563, 1578, 1578, 1578, 207, 1574, 
	1575, 1576, 1563, 1563, 1563, 1563, 1578, 1563, 
	1578, 1563, 1578, 1563, 1578, 1563, 1572, 1573, 
	1577, 1563, 1578, 1578, 1563, 1578, 1578, 1578, 
	207, 1581, 1582, 1574, 1575, 1576, 1563, 1563, 
	1563, 1563, 1578, 1572, 1563, 1572, 1573, 1577, 
	1563, 1578, 1578, 1563, 1578, 1578, 1578, 207, 
	1563, 1563, 1574, 1575, 1576, 1563, 1563, 1563, 
	1563, 1578, 1578, 1563, 1572, 1573, 1577, 1563, 
	1578, 1578, 1563, 1578, 1578, 1578, 207, 1574, 
	1575, 1576, 1563, 1563, 1563, 1563, 1578, 1573, 
	1563, 1572, 1573, 1577, 1563, 1578, 1578, 1563, 
	1578, 1578, 1578, 207, 1563, 1563, 1563, 1574, 
	1575, 1576, 1563, 1563, 1563, 1563, 1578, 1578, 
	1563, 1572, 1573, 1577, 1563, 1578, 1578, 1563, 
	1578, 1578, 1578, 207, 1574, 1575, 1576, 1563, 
	1563, 1563, 1563, 1578, 1570, 1563, 1572, 1573, 
	1577, 1563, 1578, 1578, 1563, 1578, 1578, 1578, 
	207, 1574, 1575, 1576, 1563, 1563, 1563, 1563, 
	1578, 1564, 1563, 1572, 1573, 1577, 1563, 1578, 
	1578, 1563, 1578, 1578, 1578, 207, 1583, 1574, 
	1575, 1576, 1563, 1563, 1563, 1563, 1578, 1564, 
	1563, 1572, 1573, 1577, 1563, 1578, 1578, 1563, 
	1578, 1578, 1578, 207, 1562, 1574, 1575, 1576, 
	1563, 1563, 1563, 1563, 1578, 1570, 1563, 1572, 
	1573, 1577, 1563, 1578, 1578, 1563, 1578, 1578, 
	1578, 207, 1584, 1574, 1575, 1576, 1563, 1563, 
	1563, 1563, 1578, 1564, 1563, 1572, 1573, 1577, 
	1563, 1578, 1578, 1563, 1578, 1578, 1578, 207, 
	1574, 1575, 1576, 1563, 1563, 1563, 1563, 1578, 
	1562, 1570, 1562, 1570, 1562, 1570, 1563, 1572, 
	1573, 1577, 1563, 1578, 1578, 1563, 1578, 1578, 
	1578, 207, 1585, 1586, 1574, 1575, 1576, 1563, 
	1563, 1563, 1563, 1578, 1564, 1563, 1572, 1573, 
	1577, 1563, 1578, 1578, 1563, 1578, 1578, 1578, 
	207, 1562, 1562, 1574, 1575, 1576, 1563, 1563, 
	1563, 1563, 1578, 1570, 1563, 1572, 1573, 1577, 
	1563, 1578, 1578, 1563, 1578, 1578, 1578, 207, 
	1562, 1562, 1562, 1574, 1575, 1576, 1563, 1563, 
	1563, 1563, 1578, 1570, 1563, 1572, 1573, 1577, 
	1563, 1578, 1578, 1563, 1578, 1578, 1578, 207, 
	1574, 1575, 1576, 1563, 1563, 1563, 1563, 1578, 
	1565, 1563, 1572, 1573, 1577, 1563, 1578, 1578, 
	1563, 1578, 1578, 1578, 207, 1566, 1567, 1568, 
	1562, 1571, 1562, 1562, 1562, 1562, 1570, 1563, 
	1564, 1565, 1569, 1563, 1570, 1570, 1562, 1570, 
	1570, 1570, 207, 1587, 214, 1588, 1587, 214, 
	1562, 1562, 214, 1589, 1587, 214, 1562, 1562, 
	1562, 214, 1590, 1591, 1587, 214, 1562, 1562, 
	1562, 214, 1562, 1562, 1562, 1562, 214, 1592, 
	214, 1593, 1594, 1595, 1562, 1587, 1592, 1596, 
	1562, 1562, 1562, 1562, 1562, 214, 1598, 1597, 
	1599, 1599, 1597, 1600, 1600, 1597, 1601, 1601, 
	1597, 1602, 1602, 1597, 1603, 1597, 1604, 1597, 
	1605, 1605, 1597, 1606, 1606, 1597, 1607, 1607, 
	1597, 1608, 1608, 1597, 1603, 1597, 1610, 1609, 
	1611, 1611, 1609, 1612, 1612, 1609, 1613, 1613, 
	1609, 1614, 1614, 1609, 1615, 1615, 1609, 1616, 
	1616, 1609, 1617, 1617, 1609, 1618, 1609, 1619, 
	1609, 1620, 1620, 1609, 1621, 1621, 1609, 1622, 
	1622, 1609, 1623, 1623, 1609, 1624, 1624, 1609, 
	1625, 1625, 1609, 1626, 1626, 1609, 1618, 1609, 
	1628, 1629, 1628, 1629, 1627, 1630, 1630, 1627, 
	1631, 1631, 1627, 1632, 1632, 1627, 1633, 1633, 
	1627, 1634, 1634, 1627, 1635, 1635, 1627, 1636, 
	1636, 1627, 1637, 1627, 1638, 1639, 1640, 1641, 
	1638, 1639, 1640, 1641, 1627, 1642, 1642, 1627, 
	1643, 1643, 1627, 1644, 1644, 1627, 1645, 1627, 
	1646, 1646, 1627, 1647, 1647, 1627, 1648, 1648, 
	1627, 1649, 1627, 1650, 1650, 1627, 1651, 1651, 
	1627, 1652, 1652, 1627, 1653, 1627, 1654, 1627, 
	1655, 1655, 1627, 1656, 1656, 1627, 1657, 1657, 
	1658, 1659, 1659, 1627, 1657, 1657, 1660, 1660, 
	1660, 1627, 1661, 1661, 1663, 1662, 1662, 1662, 
	1627, 1664, 1664, 1665, 1627, 1665, 1665, 1666, 
	1667, 1668, 1668, 1668, 1627, 1627, 1627, 1627, 
	1669, 1627, 1627, 1627, 1671, 1670, 1672, 1672, 
	1673, 1627, 1627, 1627, 1627, 1674, 1627, 1627, 
	1627, 1671, 1675, 1676, 1676, 1678, 1677, 1677, 
	1677, 1627, 1679, 1679, 1627, 1680, 1680, 1627, 
	1681, 1681, 1627, 1682, 1682, 1627, 1683, 1683, 
	1684, 1627, 1683, 1683, 1685, 1685, 1685, 1627, 
	1686, 1686, 1688, 1687, 1687, 1687, 1627, 1689, 
	1689, 1690, 1627, 1690, 1690, 1691, 1692, 1693, 
	1693, 1693, 1627, 1627, 1627, 1627, 1694, 1627, 
	1627, 1627, 1696, 1695, 1697, 1697, 1698, 1627, 
	1627, 1627, 1627, 1699, 1627, 1627, 1627, 1696, 
	1700, 1701, 1701, 1703, 1702, 1702, 1702, 1627, 
	1704, 1705, 1706, 1707, 1704, 1705, 1706, 1707, 
	1627, 1708, 1708, 1627, 1709, 1709, 1627, 1710, 
	1710, 1627, 1711, 1711, 1712, 1627, 1711, 1711, 
	1713, 1713, 1713, 1627, 1714, 1714, 1716, 1715, 
	1715, 1715, 1627, 1717, 1717, 1718, 1627, 1718, 
	1718, 1719, 1720, 1721, 1721, 1721, 1627, 1627, 
	1627, 1627, 1722, 1627, 1627, 1627, 1724, 1723, 
	1725, 1725, 1726, 1627, 1627, 1627, 1627, 1727, 
	1627, 1627, 1627, 1724, 1728, 1729, 1729, 1731, 
	1730, 1730, 1730, 1627, 1732, 1732, 1733, 1627, 
	1732, 1732, 1734, 1734, 1734, 1627, 1735, 1735, 
	1737, 1736, 1736, 1736, 1627, 1738, 1738, 1739, 
	1627, 1739, 1739, 1740, 1741, 1742, 1742, 1742, 
	1627, 1627, 1627, 1627, 1743, 1627, 1627, 1627, 
	1745, 1744, 1746, 1746, 1747, 1627, 1627, 1627, 
	1627, 1748, 1627, 1627, 1627, 1745, 1749, 1750, 
	1750, 1752, 1751, 1751, 1751, 1627, 1753, 1753, 
	1754, 1755, 1755, 1627, 1753, 1753, 1756, 1756, 
	1756, 1627, 1757, 1757, 1759, 1758, 1758, 1758, 
	1627, 1760, 1760, 1761, 1627, 1761, 1761, 1762, 
	1763, 1764, 1764, 1764, 1627, 1627, 1627, 1627, 
	1765, 1627, 1627, 1627, 1767, 1766, 1768, 1768, 
	1769, 1627, 1627, 1627, 1627, 1770, 1627, 1627, 
	1627, 1767, 1771, 1772, 1772, 1774, 1773, 1773, 
	1773, 1627, 1775, 1775, 1627, 1776, 1776, 1627, 
	1777, 1777, 1778, 1627, 1777, 1777, 1779, 1779, 
	1779, 1627, 1780, 1780, 1782, 1781, 1781, 1781, 
	1627, 1783, 1783, 1784, 1627, 1784, 1784, 1785, 
	1786, 1787, 1787, 1787, 1627, 1627, 1627, 1627, 
	1788, 1627, 1627, 1627, 1790, 1789, 1791, 1791, 
	1792, 1627, 1627, 1627, 1627, 1793, 1627, 1627, 
	1627, 1790, 1794, 1795, 1795, 1797, 1796, 1796, 
	1796, 1627, 1798, 1798, 1799, 1627, 1798, 1798, 
	1800, 1800, 1800, 1627, 1801, 1801, 1803, 1802, 
	1802, 1802, 1627, 1804, 1804, 1805, 1627, 1805, 
	1805, 1806, 1807, 1808, 1808, 1808, 1627, 1627, 
	1627, 1627, 1809, 1627, 1627, 1627, 1811, 1810, 
	1812, 1812, 1813, 1627, 1627, 1627, 1627, 1814, 
	1627, 1627, 1627, 1811, 1815, 1816, 1816, 1818, 
	1817, 1817, 1817, 1627, 1819, 1820, 1819, 1820, 
	1627, 1821, 1821, 1627, 1822, 1822, 1627, 1823, 
	1823, 1627, 1824, 1824, 1627, 1825, 1825, 1627, 
	1826, 1826, 1627, 1827, 1827, 1627, 1637, 1627, 
	1828, 1829, 1830, 1831, 1828, 1829, 1830, 1831, 
	1627, 1832, 1832, 1627, 1833, 1833, 1627, 1834, 
	1834, 1627, 1645, 1627, 1835, 1835, 1627, 1836, 
	1836, 1627, 1837, 1837, 1627, 1649, 1627, 1838, 
	1838, 1627, 1839, 1839, 1627, 1840, 1840, 1627, 
	1653, 1627, 1654, 1627, 1841, 1841, 1627, 1842, 
	1842, 1627, 1843, 1843, 1844, 1658, 1844, 1627, 
	1843, 1843, 1845, 1845, 1845, 1627, 1846, 1846, 
	1848, 1847, 1847, 1847, 1627, 1849, 1849, 1850, 
	1627, 1850, 1850, 1851, 1852, 1853, 1853, 1853, 
	1627, 1627, 1627, 1627, 1854, 1627, 1627, 1627, 
	1856, 1855, 1857, 1857, 1673, 1627, 1627, 1627, 
	1627, 1858, 1627, 1627, 1627, 1856, 1859, 1860, 
	1860, 1678, 1861, 1861, 1861, 1627, 1862, 1862, 
	1627, 1863, 1863, 1627, 1864, 1864, 1627, 1865, 
	1865, 1627, 1866, 1866, 1684, 1627, 1866, 1866, 
	1867, 1867, 1867, 1627, 1868, 1868, 1870, 1869, 
	1869, 1869, 1627, 1871, 1871, 1872, 1627, 1872, 
	1872, 1873, 1874, 1875, 1875, 1875, 1627, 1627, 
	1627, 1627, 1876, 1627, 1627, 1627, 1878, 1877, 
	1879, 1879, 1698, 1627, 1627, 1627, 1627, 1880, 
	1627, 1627, 1627, 1878, 1881, 1882, 1882, 1703, 
	1883, 1883, 1883, 1627, 1884, 1885, 1886, 1887, 
	1884, 1885, 1886, 1887, 1627, 1888, 1888, 1627, 
	1889, 1889, 1627, 1890, 1890, 1627, 1891, 1891, 
	1712, 1627, 1891, 1891, 1892, 1892, 1892, 1627, 
	1893, 1893, 1895, 1894, 1894, 1894, 1627, 1896, 
	1896, 1897, 1627, 1897, 1897, 1898, 1899, 1900, 
	1900, 1900, 1627, 1627, 1627, 1627, 1901, 1627, 
	1627, 1627, 1903, 1902, 1904, 1904, 1726, 1627, 
	1627, 1627, 1627, 1905, 1627, 1627, 1627, 1903, 
	1906, 1907, 1907, 1731, 1908, 1908, 1908, 1627, 
	1909, 1909, 1733, 1627, 1909, 1909, 1910, 1910, 
	1910, 1627, 1911, 1911, 1913, 1912, 1912, 1912, 
	1627, 1914, 1914, 1915, 1627, 1915, 1915, 1916, 
	1917, 1918, 1918, 1918, 1627, 1627, 1627, 1627, 
	1919, 1627, 1627, 1627, 1921, 1920, 1922, 1922, 
	1747, 1627, 1627, 1627, 1627, 1923, 1627, 1627, 
	1627, 1921, 1924, 1925, 1925, 1752, 1926, 1926, 
	1926, 1627, 1927, 1927, 1928, 1754, 1928, 1627, 
	1927, 1927, 1929, 1929, 1929, 1627, 1930, 1930, 
	1932, 1931, 1931, 1931, 1627, 1933, 1933, 1934, 
	1627, 1934, 1934, 1935, 1936, 1937, 1937, 1937, 
	1627, 1627, 1627, 1627, 1938, 1627, 1627, 1627, 
	1940, 1939, 1941, 1941, 1769, 1627, 1627, 1627, 
	1627, 1942, 1627, 1627, 1627, 1940, 1943, 1944, 
	1944, 1774, 1945, 1945, 1945, 1627, 1946, 1946, 
	1627, 1947, 1947, 1627, 1948, 1948, 1778, 1627, 
	1948, 1948, 1949, 1949, 1949, 1627, 1950, 1950, 
	1952, 1951, 1951, 1951, 1627, 1953, 1953, 1954, 
	1627, 1954, 1954, 1955, 1956, 1957, 1957, 1957, 
	1627, 1627, 1627, 1627, 1958, 1627, 1627, 1627, 
	1960, 1959, 1961, 1961, 1792, 1627, 1627, 1627, 
	1627, 1962, 1627, 1627, 1627, 1960, 1963, 1964, 
	1964, 1797, 1965, 1965, 1965, 1627, 1966, 1966, 
	1799, 1627, 1966, 1966, 1967, 1967, 1967, 1627, 
	1968, 1968, 1970, 1969, 1969, 1969, 1627, 1971, 
	1971, 1972, 1627, 1972, 1972, 1973, 1974, 1975, 
	1975, 1975, 1627, 1627, 1627, 1627, 1976, 1627, 
	1627, 1627, 1978, 1977, 1979, 1979, 1813, 1627, 
	1627, 1627, 1627, 1980, 1627, 1627, 1627, 1978, 
	1981, 1982, 1982, 1818, 1983, 1983, 1983, 1627, 
	1, 1985, 1, 1985, 1986, 1987, 1988, 1989, 
	1990, 1988, 1984, 1, 2, 1, 2, 1991, 
	1, 4, 1, 4, 5, 6, 1992, 18, 
	18, 1993, 39, 39, 40, 1992, 1994, 1994, 
	1994, 1995, 1994, 38, 1994, 1994, 38, 37, 
	1996, 1997, 1998, 8, 1999, 45, 2000, 2001, 
	1996, 1997, 1998, 8, 1999, 45, 2000, 2001, 
	1992, 50, 50, 2002, 62, 63, 62, 63, 
	2003, 65, 66, 65, 66, 2004, 2006, 2006, 
	2005, 85, 85, 2007, 100, 101, 100, 101, 
	2008, 108, 108, 2009, 2010, 1992, 2012, 2012, 
	2011, 2013, 2014, 25, 2015, 2016, 2017, 2018, 
	2013, 2014, 25, 2015, 2016, 2017, 2018, 1992, 
	2019, 1992, 2021, 2022, 2023, 2020, 2025, 201, 
	2026, 194, 2027, 2028, 201, 2026, 194, 2027, 
	2028, 2024, 2029, 2030, 2031, 2032, 2033, 2030, 
	2031, 2032, 2033, 2024, 2038, 2039, 2040, 2041, 
	2039, 2042, 2045, 2046, 2047, 2048, 2049, 2050, 
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 
	2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 
	2053, 2054, 2055, 2056, 2057, 2059, 2060, 2061, 
	2034, 2034, 2034, 2062, 2034, 2035, 2036, 2037, 
	2034, 2043, 2034, 2034, 2043, 2034, 2043, 2034, 
	2044, 208, 2063, 209, 211, 2065, 2064, 209, 
	2063, 211, 2063, 212, 213, 212, 213, 207, 
	213, 215, 213, 215, 2063, 212, 217, 2067, 
	217, 2068, 2069, 2070, 2071, 2072, 2070, 2066, 
	225, 225, 2073, 212, 213, 2067, 213, 2075, 
	2076, 2074, 2078, 2077, 2079, 2079, 2079, 2080, 
	2079, 294, 2079, 2079, 294, 293, 311, 311, 
	2081, 317, 317, 2082, 2084, 2084, 2083, 2063, 
	2085, 414, 415, 416, 2086, 418, 2086, 418, 
	418, 418, 2086, 2086, 418, 2086, 2086, 2086, 
	408, 413, 417, 2086, 2086, 418, 407, 426, 
	427, 428, 2086, 430, 407, 430, 430, 430, 
	2086, 2086, 431, 2086, 2086, 2086, 420, 425, 
	429, 2086, 2086, 430, 419, 434, 435, 436, 
	2086, 431, 407, 431, 431, 431, 431, 2086, 
	432, 433, 437, 2086, 2086, 431, 438, 457, 
	458, 459, 407, 454, 419, 464, 431, 461, 
	455, 456, 460, 461, 461, 461, 2086, 407, 
	419, 431, 468, 2086, 2088, 2089, 2087, 2087, 
	2087, 2064, 2091, 2091, 2091, 2090, 2093, 2093, 
	2093, 2092, 2095, 2095, 2095, 2094, 2097, 2097, 
	2097, 2096, 2098, 2098, 2098, 2090, 2099, 2099, 
	2099, 2092, 2101, 2101, 2101, 2100, 2103, 2103, 
	2103, 2102, 2105, 2105, 2105, 2104, 2107, 2107, 
	2107, 2106, 2108, 2108, 2108, 2104, 2109, 2109, 
	2109, 2106, 2110, 2108, 2108, 2108, 2104, 608, 
	2105, 2105, 2105, 2104, 2111, 2088, 2111, 2089, 
	2087, 2087, 2087, 2064, 2112, 2088, 2112, 2089, 
	2087, 2087, 2087, 2064, 2113, 2088, 2113, 2089, 
	2087, 2087, 2087, 2064, 2114, 2088, 2114, 2089, 
	2087, 2087, 2087, 2064, 2115, 2088, 2115, 2089, 
	2087, 2087, 2087, 2064, 2116, 2088, 2089, 2087, 
	2087, 2087, 2064, 2118, 668, 668, 2117, 2119, 
	667, 667, 2117, 2120, 666, 666, 2117, 2121, 
	665, 665, 2117, 2122, 664, 664, 2117, 2123, 
	663, 663, 2117, 2124, 662, 662, 2117, 2125, 
	661, 661, 2117, 2126, 660, 660, 2117, 2127, 
	659, 659, 2117, 2127, 2117, 2117, 2128, 2088, 
	2128, 2089, 2087, 2087, 2087, 2064, 2129, 2088, 
	2129, 2089, 2087, 2087, 2087, 2064, 2130, 2088, 
	2130, 2089, 2087, 2087, 2087, 2064, 2131, 2088, 
	2089, 2087, 2087, 2087, 2064, 2133, 681, 681, 
	2132, 2134, 680, 680, 2132, 2135, 679, 679, 
	2132, 2136, 678, 678, 2132, 2137, 677, 677, 
	2132, 2138, 676, 676, 2132, 2139, 675, 675, 
	2132, 2140, 674, 674, 2132, 2141, 673, 673, 
	2132, 2142, 672, 672, 2132, 2142, 2132, 2132, 
	2143, 2088, 2143, 2089, 2087, 2087, 2087, 2064, 
	2144, 2088, 2144, 2089, 2087, 2087, 2087, 2064, 
	2145, 2088, 2145, 2089, 2087, 2087, 2087, 2064, 
	2146, 2088, 2146, 2089, 2087, 2087, 2087, 2064, 
	2147, 2088, 2147, 2089, 2087, 2087, 2087, 2064, 
	2148, 2088, 2148, 2089, 2087, 2087, 2087, 2064, 
	2149, 2088, 2089, 2087, 2087, 2087, 2064, 2151, 
	694, 694, 2150, 2152, 693, 693, 2150, 2153, 
	692, 692, 2150, 2154, 691, 691, 2150, 2155, 
	690, 690, 2150, 2156, 689, 689, 2150, 2157, 
	688, 688, 2150, 2158, 687, 687, 2150, 2159, 
	686, 686, 2150, 2160, 685, 685, 2150, 2160, 
	2150, 2150, 2161, 2088, 2161, 2089, 2087, 2087, 
	2087, 2064, 2162, 2088, 2162, 2089, 2087, 2087, 
	2087, 2064, 2163, 2088, 2163, 2089, 2087, 2087, 
	2087, 2064, 2164, 2088, 2164, 2089, 2087, 2087, 
	2087, 2064, 2165, 2088, 2089, 2087, 2087, 2087, 
	2064, 2167, 2168, 709, 709, 2166, 2170, 2170, 
	2170, 2170, 2170, 2169, 2167, 2171, 708, 708, 
	2166, 2167, 2172, 707, 707, 2166, 2167, 2173, 
	706, 706, 2166, 2167, 2174, 705, 705, 2166, 
	2167, 2175, 704, 704, 2166, 2167, 2176, 703, 
	703, 2166, 2167, 2177, 702, 702, 2166, 2167, 
	2178, 701, 701, 2166, 2167, 2179, 700, 700, 
	2166, 2167, 2179, 2166, 2167, 2166, 2180, 2088, 
	2180, 2089, 2087, 2087, 2087, 2064, 2181, 2088, 
	2181, 2089, 2087, 2087, 2087, 2064, 2182, 2088, 
	2182, 2089, 2087, 2087, 2087, 2064, 2183, 2088, 
	2183, 2089, 2087, 2087, 2087, 2064, 2184, 2088, 
	2089, 2087, 2087, 2087, 2064, 2186, 722, 722, 
	2185, 2187, 721, 721, 2185, 2188, 720, 720, 
	2185, 2189, 719, 719, 2185, 2190, 718, 718, 
	2185, 2191, 717, 717, 2185, 2192, 716, 716, 
	2185, 2193, 715, 715, 2185, 2194, 714, 714, 
	2185, 2195, 713, 713, 2185, 2195, 2185, 2185, 
	2196, 2088, 2196, 2089, 2087, 2087, 2087, 2064, 
	2197, 2088, 2197, 2089, 2087, 2087, 2087, 2064, 
	2198, 2088, 2198, 2089, 2087, 2087, 2087, 2064, 
	2199, 2200, 2088, 2200, 2089, 2087, 2087, 2087, 
	2064, 732, 733, 734, 739, 729, 740, 741, 
	742, 736, 730, 731, 735, 736, 736, 736, 
	2201, 753, 754, 755, 2201, 757, 2201, 757, 
	757, 757, 2201, 2201, 757, 2201, 2201, 2201, 
	747, 752, 756, 2201, 2201, 757, 739, 764, 
	765, 766, 2201, 768, 739, 768, 768, 768, 
	2201, 2201, 742, 2201, 2201, 2201, 758, 763, 
	767, 2201, 2201, 768, 740, 771, 772, 773, 
	2201, 742, 739, 742, 742, 742, 742, 2201, 
	769, 770, 774, 2201, 2201, 742, 775, 739, 
	740, 742, 780, 2201, 2199, 2088, 2089, 2087, 
	2087, 2087, 2064, 2202, 2088, 2202, 2089, 2087, 
	2087, 2087, 2064, 2203, 2088, 2203, 2089, 2087, 
	2087, 2087, 2064, 2204, 2088, 2089, 2087, 2087, 
	2087, 2064, 2206, 800, 800, 2205, 2207, 799, 
	799, 2205, 2208, 798, 798, 2205, 2209, 797, 
	797, 2205, 2210, 796, 796, 2205, 2211, 795, 
	795, 2205, 2212, 794, 794, 2205, 2213, 793, 
	793, 2205, 2214, 792, 792, 2205, 2215, 791, 
	791, 2205, 2215, 2205, 2205, 2216, 2217, 2088, 
	2216, 2217, 2089, 2087, 2087, 2087, 2064, 2218, 
	2088, 2218, 2089, 2087, 2087, 2087, 2064, 2219, 
	2088, 2219, 2089, 2087, 2087, 2087, 2064, 2220, 
	2088, 2220, 2089, 2087, 2087, 2087, 2064, 2221, 
	2088, 2089, 2087, 2087, 2087, 2064, 2223, 2222, 
	2224, 2225, 2088, 2224, 2225, 2089, 2087, 2087, 
	2087, 2064, 2226, 2088, 2226, 2089, 2087, 2087, 
	2087, 2064, 2227, 2088, 2089, 2087, 2087, 2087, 
	2064, 2229, 839, 839, 2228, 2230, 838, 838, 
	2228, 2231, 837, 837, 2228, 2232, 836, 836, 
	2228, 2233, 835, 835, 2228, 2234, 834, 834, 
	2228, 2235, 833, 833, 2228, 2236, 832, 832, 
	2228, 2237, 831, 831, 2228, 2238, 830, 830, 
	2228, 2238, 2228, 2228, 2239, 2088, 2239, 2089, 
	2087, 2087, 2087, 2064, 2240, 2088, 2089, 2087, 
	2087, 2087, 2064, 2242, 852, 852, 2241, 2243, 
	851, 851, 2241, 2244, 850, 850, 2241, 2245, 
	849, 849, 2241, 2246, 848, 848, 2241, 2247, 
	847, 847, 2241, 2248, 846, 846, 2241, 2249, 
	845, 845, 2241, 2250, 844, 844, 2241, 2251, 
	843, 843, 2241, 2251, 2241, 2241, 2252, 2088, 
	2252, 2089, 2087, 2087, 2087, 2064, 2253, 2088, 
	2253, 2089, 2087, 2087, 2087, 2064, 2254, 2088, 
	2254, 2089, 2087, 2087, 2087, 2064, 2255, 2088, 
	2255, 2089, 2087, 2087, 2087, 2064, 2256, 2088, 
	2256, 2089, 2087, 2087, 2087, 2064, 2257, 2088, 
	2089, 2087, 2087, 2087, 2064, 2259, 865, 865, 
	2258, 2260, 864, 864, 2258, 2261, 863, 863, 
	2258, 2262, 862, 862, 2258, 2263, 861, 861, 
	2258, 2264, 860, 860, 2258, 2265, 859, 859, 
	2258, 2266, 858, 858, 2258, 2267, 857, 857, 
	2258, 2268, 856, 856, 2258, 2268, 2258, 2258, 
	2269, 2088, 2269, 2089, 2087, 2087, 2087, 2064, 
	2270, 2088, 2270, 2089, 2087, 2087, 2087, 2064, 
	2271, 2088, 2271, 2089, 2087, 2087, 2087, 2064, 
	2272, 2088, 2272, 2089, 2087, 2087, 2087, 2064, 
	2273, 2088, 2273, 2089, 2087, 2087, 2087, 2064, 
	2274, 2088, 2089, 2087, 2087, 2087, 2064, 2276, 
	878, 878, 2275, 2277, 877, 877, 2275, 2278, 
	876, 876, 2275, 2279, 875, 875, 2275, 2280, 
	874, 874, 2275, 2281, 873, 873, 2275, 2282, 
	872, 872, 2275, 2283, 871, 871, 2275, 2284, 
	870, 870, 2275, 2285, 869, 869, 2275, 2285, 
	2275, 2275, 2286, 2287, 2088, 2286, 2287, 2089, 
	2087, 2087, 2087, 2064, 2288, 2088, 2288, 2089, 
	2087, 2087, 2087, 2064, 2289, 2088, 2089, 2087, 
	2087, 2087, 2064, 2291, 899, 899, 2290, 2292, 
	898, 898, 2290, 2293, 897, 897, 2290, 2294, 
	896, 896, 2290, 2295, 895, 895, 2290, 2296, 
	894, 894, 2290, 2297, 893, 893, 2290, 2298, 
	892, 892, 2290, 2299, 891, 891, 2290, 2300, 
	890, 890, 2290, 2300, 2290, 2290, 2302, 923, 
	923, 2301, 2303, 922, 922, 2301, 2304, 921, 
	921, 2301, 2305, 920, 920, 2301, 2306, 919, 
	919, 2301, 2307, 918, 918, 2301, 2308, 917, 
	917, 2301, 2309, 916, 916, 2301, 2310, 915, 
	915, 2301, 2311, 914, 914, 2301, 2311, 2301, 
	2301, 2313, 947, 947, 2312, 2314, 946, 946, 
	2312, 2315, 945, 945, 2312, 2316, 944, 944, 
	2312, 2317, 943, 943, 2312, 2318, 942, 942, 
	2312, 2319, 941, 941, 2312, 2320, 940, 940, 
	2312, 2321, 939, 939, 2312, 2322, 938, 938, 
	2312, 2322, 2312, 2312, 2323, 2088, 2323, 2089, 
	2087, 2087, 2087, 2064, 2324, 2088, 2324, 2089, 
	2087, 2087, 2087, 2064, 2325, 2088, 2325, 2089, 
	2087, 2087, 2087, 2064, 2326, 2088, 2089, 2087, 
	2087, 2087, 2064, 2328, 2329, 963, 963, 2327, 
	2331, 2330, 2328, 2332, 962, 962, 2327, 2328, 
	2333, 961, 961, 2327, 2328, 2334, 960, 960, 
	2327, 2328, 2335, 959, 959, 2327, 2328, 2336, 
	958, 958, 2327, 2328, 2337, 957, 957, 2327, 
	2328, 2338, 956, 956, 2327, 2328, 2339, 955, 
	955, 2327, 2328, 2340, 954, 954, 2327, 2328, 
	2340, 2327, 2328, 2327, 2341, 2088, 2341, 2089, 
	2087, 2087, 2087, 2064, 2342, 2088, 2342, 2089, 
	2087, 2087, 2087, 2064, 2343, 2088, 2343, 2089, 
	2087, 2087, 2087, 2064, 2344, 2088, 2089, 2087, 
	2087, 2087, 2064, 2346, 977, 977, 2345, 2347, 
	976, 976, 2345, 2348, 975, 975, 2345, 2349, 
	974, 974, 2345, 2350, 973, 973, 2345, 2351, 
	972, 972, 2345, 2352, 971, 971, 2345, 2353, 
	970, 970, 2345, 2354, 969, 969, 2345, 2355, 
	968, 968, 2345, 2355, 2345, 2345, 2357, 996, 
	996, 2356, 2358, 995, 995, 2356, 2359, 994, 
	994, 2356, 2360, 993, 993, 2356, 2361, 992, 
	992, 2356, 2362, 991, 991, 2356, 2363, 990, 
	990, 2356, 2364, 989, 989, 2356, 2365, 988, 
	988, 2356, 2366, 987, 987, 2356, 2366, 2356, 
	2356, 2367, 2088, 2367, 2089, 2087, 2087, 2087, 
	2064, 2368, 2088, 2368, 2089, 2087, 2087, 2087, 
	2064, 2369, 2088, 2369, 2089, 2087, 2087, 2087, 
	2064, 2370, 2088, 2089, 2087, 2087, 2087, 2064, 
	2372, 1009, 1009, 2371, 2373, 1008, 1008, 2371, 
	2374, 1007, 1007, 2371, 2375, 1006, 1006, 2371, 
	2376, 1005, 1005, 2371, 2377, 1004, 1004, 2371, 
	2378, 1003, 1003, 2371, 2379, 1002, 1002, 2371, 
	2380, 1001, 1001, 2371, 2381, 1000, 1000, 2371, 
	2381, 2371, 2371, 2063, 2063, 2063, 2383, 2384, 
	2385, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 
	1338, 2384, 2385, 2386, 2387, 2388, 2389, 2390, 
	2391, 2392, 2382, 207, 207, 207, 1012, 1011, 
	1010, 2077, 2078, 2077, 1012, 1011, 1010, 2082, 
	2393, 2082, 2082, 2393, 1012, 1011, 1010, 2082, 
	2393, 2082, 2082, 2393, 1011, 1010, 2081, 2394, 
	2081, 2081, 2394, 1012, 1011, 1010, 2081, 2394, 
	2081, 2081, 2394, 1011, 1010, 1091, 1092, 1091, 
	2395, 1092, 1012, 1011, 1010, 1094, 1095, 1094, 
	2396, 1095, 1012, 1011, 1010, 1130, 1131, 1130, 
	2397, 1131, 1012, 1011, 1010, 2398, 1182, 2398, 
	2398, 1182, 1184, 1181, 207, 207, 1022, 207, 
	1021, 2398, 2398, 1209, 2398, 1208, 2398, 2398, 
	1209, 2398, 1241, 2398, 1209, 1209, 1270, 2398, 
	1268, 2398, 1301, 1301, 1303, 2398, 1300, 2090, 
	2090, 2090, 2400, 2402, 2401, 2401, 2401, 2399, 
	2092, 2092, 2092, 2405, 2404, 2404, 2404, 2403, 
	2094, 2094, 2094, 2400, 2402, 2406, 2406, 2406, 
	2399, 2096, 2096, 2096, 2405, 2407, 2407, 2407, 
	2403, 2090, 2090, 2090, 2400, 2402, 2408, 2408, 
	2408, 2399, 2092, 2092, 2092, 2405, 2409, 2409, 
	2409, 2403, 573, 2063, 2410, 2411, 2412, 2413, 
	2414, 2415, 1509, 2416, 1473, 2417, 2418, 2419, 
	2411, 2412, 2413, 2414, 2415, 1509, 2416, 1473, 
	2417, 2418, 2419, 2063, 1091, 1496, 1091, 1496, 
	2395, 1094, 1497, 1094, 1497, 2396, 1130, 1541, 
	1130, 1541, 2397, 2410, 2411, 2412, 2413, 2414, 
	2415, 1509, 2416, 1473, 2417, 2418, 2419, 2411, 
	2412, 2413, 2414, 2415, 1509, 2416, 1473, 2417, 
	2418, 2419, 2420, 2063, 2423, 2424, 2425, 2428, 
	2428, 2427, 2421, 2422, 2426, 2427, 2427, 2427, 
	2427, 2427, 2063, 1574, 1575, 1576, 1563, 1563, 
	1563, 1563, 1578, 1563, 1572, 1573, 1577, 1563, 
	1578, 1578, 1563, 1578, 1578, 1578, 2429, 1566, 
	1567, 1568, 1562, 1571, 1562, 1562, 1570, 1563, 
	1564, 1565, 1569, 1563, 1570, 1570, 1562, 1570, 
	1570, 1570, 2429, 2431, 2432, 2433, 2434, 2430, 
	2436, 2437, 2435, 1598, 2435, 1604, 2435, 2439, 
	2440, 2441, 2442, 2438, 2444, 2445, 2443, 1610, 
	2443, 1619, 2443, 2447, 2448, 2446, 2450, 2451, 
	2452, 2451, 2452, 2449, 2453, 2454, 2455, 2454, 
	2455, 2449, 0
};

static const short _dtext_trans_targs[] = {
	1547, 1548, 1, 1547, 2, 3, 18, 4, 
	10, 13, 5, 6, 7, 8, 9, 1547, 
	11, 12, 1550, 14, 15, 16, 17, 1547, 
	19, 25, 27, 20, 21, 22, 23, 24, 
	26, 28, 29, 30, 31, 1552, 1553, 32, 
	33, 35, 36, 37, 38, 39, 40, 41, 
	42, 43, 1555, 45, 46, 53, 47, 48, 
	49, 1557, 50, 50, 1556, 1547, 1547, 51, 
	1547, 1547, 52, 54, 55, 56, 58, 1547, 
	57, 56, 58, 1547, 57, 1547, 60, 61, 
	62, 63, 64, 65, 67, 1559, 66, 65, 
	67, 1558, 66, 1558, 69, 70, 71, 72, 
	73, 74, 1560, 1547, 1547, 75, 77, 78, 
	79, 80, 81, 82, 1561, 83, 85, 1547, 
	87, 1563, 88, 88, 1563, 90, 91, 96, 
	92, 93, 94, 95, 95, 97, 98, 99, 
	101, 100, 99, 101, 100, 103, 104, 105, 
	106, 107, 108, 110, 109, 108, 110, 109, 
	112, 113, 114, 115, 116, 117, 119, 120, 
	121, 122, 124, 125, 126, 127, 128, 129, 
	130, 132, 134, 135, 134, 141, 136, 137, 
	136, 137, 138, 139, 140, 1547, 135, 142, 
	141, 135, 142, 1566, 144, 145, 146, 147, 
	152, 1566, 1566, 1566, 148, 149, 150, 151, 
	1566, 1566, 155, 1566, 1566, 157, 158, 159, 
	160, 153, 1566, 163, 164, 165, 166, 1569, 
	1571, 171, 1569, 172, 1574, 174, 1569, 175, 
	1569, 176, 177, 195, 178, 181, 190, 179, 
	180, 1577, 182, 183, 184, 185, 186, 187, 
	188, 189, 1569, 191, 192, 193, 194, 1569, 
	196, 198, 206, 197, 199, 200, 201, 202, 
	203, 204, 205, 207, 208, 209, 210, 1569, 
	212, 213, 223, 214, 219, 215, 216, 217, 
	218, 1579, 220, 221, 222, 1569, 224, 225, 
	226, 1569, 1569, 1569, 228, 229, 239, 230, 
	235, 231, 232, 233, 234, 236, 237, 238, 
	240, 241, 242, 244, 243, 1580, 1581, 246, 
	276, 283, 247, 257, 263, 268, 248, 249, 
	250, 251, 252, 253, 254, 255, 256, 1582, 
	258, 259, 260, 261, 262, 1583, 264, 265, 
	266, 267, 269, 270, 271, 272, 273, 274, 
	1569, 275, 277, 278, 279, 280, 281, 1569, 
	282, 282, 1569, 284, 285, 286, 287, 288, 
	289, 291, 292, 1584, 293, 293, 1584, 295, 
	310, 317, 296, 302, 297, 298, 299, 300, 
	301, 303, 304, 305, 306, 307, 308, 309, 
	311, 312, 313, 314, 315, 316, 316, 318, 
	319, 320, 321, 322, 323, 325, 326, 327, 
	326, 333, 328, 329, 328, 329, 330, 331, 
	332, 1569, 327, 334, 333, 327, 334, 335, 
	336, 337, 1586, 1587, 371, 396, 1569, 1586, 
	338, 341, 343, 345, 346, 339, 340, 342, 
	344, 347, 348, 1587, 349, 352, 354, 356, 
	357, 350, 351, 353, 355, 358, 359, 360, 
	361, 362, 363, 365, 367, 370, 1588, 364, 
	366, 368, 369, 372, 373, 374, 375, 395, 
	376, 377, 378, 380, 381, 379, 382, 383, 
	384, 385, 388, 390, 393, 1589, 386, 387, 
	394, 389, 391, 392, 1590, 397, 398, 397, 
	1569, 399, 400, 401, 402, 405, 403, 404, 
	407, 408, 407, 410, 421, 431, 444, 448, 
	451, 408, 409, 410, 411, 414, 415, 409, 
	411, 414, 415, 412, 413, 419, 420, 412, 
	414, 415, 413, 1592, 416, 415, 418, 416, 
	417, 418, 417, 418, 1594, 419, 422, 423, 
	424, 427, 423, 424, 427, 425, 426, 428, 
	429, 425, 427, 426, 427, 1596, 428, 430, 
	430, 432, 433, 434, 435, 436, 437, 438, 
	439, 438, 439, 440, 441, 442, 443, 440, 
	441, 442, 421, 445, 446, 447, 424, 427, 
	447, 424, 449, 450, 452, 455, 456, 457, 
	453, 454, 453, 454, 458, 460, 461, 463, 
	464, 499, 500, 502, 503, 461, 462, 466, 
	471, 462, 463, 464, 499, 500, 502, 493, 
	471, 493, 465, 472, 498, 467, 466, 469, 
	470, 467, 468, 469, 470, 468, 470, 1598, 
	1600, 473, 466, 479, 474, 473, 476, 477, 
	481, 487, 490, 493, 479, 474, 475, 479, 
	475, 476, 477, 481, 487, 490, 479, 478, 
	480, 1602, 1604, 482, 483, 484, 485, 486, 
	488, 489, 478, 491, 492, 494, 495, 496, 
	497, 494, 1605, 501, 504, 505, 506, 507, 
	509, 1612, 519, 1623, 510, 511, 512, 513, 
	514, 515, 516, 517, 518, 521, 1628, 531, 
	1639, 522, 523, 524, 525, 526, 527, 528, 
	529, 530, 533, 1647, 543, 1658, 534, 535, 
	536, 537, 538, 539, 540, 541, 542, 545, 
	1664, 556, 1569, 1665, 1676, 547, 548, 549, 
	550, 551, 552, 553, 554, 555, 558, 1682, 
	568, 1693, 559, 560, 561, 562, 563, 564, 
	565, 566, 567, 570, 571, 572, 574, 575, 
	573, 576, 577, 578, 579, 582, 584, 587, 
	1698, 580, 581, 1699, 1700, 621, 610, 583, 
	585, 586, 1569, 588, 591, 593, 595, 596, 
	589, 590, 592, 594, 597, 598, 599, 602, 
	604, 606, 607, 600, 601, 603, 605, 608, 
	609, 611, 612, 613, 615, 617, 620, 1701, 
	614, 616, 618, 619, 1702, 623, 624, 625, 
	626, 627, 628, 629, 630, 1707, 640, 1718, 
	631, 632, 633, 634, 635, 636, 637, 638, 
	639, 642, 643, 666, 644, 646, 665, 645, 
	1724, 647, 664, 648, 663, 649, 662, 650, 
	661, 651, 660, 652, 659, 653, 658, 654, 
	657, 655, 656, 668, 1728, 678, 1739, 669, 
	670, 671, 672, 673, 674, 675, 676, 677, 
	680, 1742, 690, 1753, 681, 682, 683, 684, 
	685, 686, 687, 688, 689, 692, 1760, 702, 
	1771, 693, 694, 695, 696, 697, 698, 699, 
	700, 701, 704, 1778, 714, 1789, 705, 706, 
	707, 708, 709, 710, 711, 712, 713, 716, 
	733, 756, 717, 718, 719, 720, 721, 722, 
	1793, 732, 1804, 723, 724, 725, 726, 727, 
	728, 729, 730, 731, 734, 735, 736, 737, 
	738, 739, 740, 741, 742, 743, 744, 745, 
	1805, 755, 1816, 746, 747, 748, 749, 750, 
	751, 752, 753, 754, 757, 758, 759, 760, 
	761, 762, 763, 764, 765, 766, 767, 768, 
	1817, 778, 1828, 769, 770, 771, 772, 773, 
	774, 775, 776, 777, 780, 1833, 792, 1569, 
	782, 1834, 1845, 783, 784, 785, 786, 787, 
	788, 789, 790, 791, 794, 805, 1850, 804, 
	1861, 795, 796, 797, 798, 799, 800, 801, 
	802, 803, 806, 807, 808, 809, 810, 811, 
	812, 1862, 822, 1873, 813, 814, 815, 816, 
	817, 818, 819, 820, 821, 824, 1878, 834, 
	1889, 825, 826, 827, 828, 829, 830, 831, 
	832, 833, 835, 836, 837, 838, 839, 840, 
	841, 842, 846, 843, 844, 845, 1569, 848, 
	849, 859, 865, 866, 871, 879, 883, 1891, 
	850, 855, 851, 852, 853, 854, 1892, 856, 
	857, 858, 1891, 860, 861, 862, 863, 864, 
	1893, 1891, 867, 868, 869, 870, 1895, 872, 
	1891, 873, 874, 875, 876, 877, 878, 1891, 
	880, 881, 882, 1891, 1891, 1891, 1891, 885, 
	1891, 1891, 887, 892, 888, 889, 890, 891, 
	1891, 893, 900, 894, 895, 896, 1898, 897, 
	897, 1897, 1569, 1569, 898, 1569, 1569, 899, 
	901, 902, 903, 905, 1891, 904, 903, 905, 
	1891, 904, 1891, 907, 908, 909, 910, 911, 
	912, 914, 1891, 913, 912, 914, 1891, 913, 
	1891, 1891, 917, 918, 919, 920, 921, 922, 
	1899, 1569, 1569, 923, 925, 926, 927, 928, 
	1891, 930, 1891, 931, 932, 933, 934, 935, 
	936, 1891, 938, 1891, 940, 1891, 941, 942, 
	943, 1047, 944, 1004, 1005, 1027, 945, 996, 
	945, 946, 979, 946, 947, 948, 978, 956, 
	955, 948, 949, 950, 955, 949, 950, 951, 
	952, 953, 954, 1891, 956, 957, 958, 964, 
	959, 958, 959, 960, 961, 962, 963, 1569, 
	965, 966, 967, 968, 977, 969, 970, 971, 
	972, 1900, 973, 974, 975, 976, 1901, 980, 
	981, 982, 985, 982, 983, 957, 984, 986, 
	987, 988, 989, 995, 990, 991, 992, 993, 
	1902, 994, 971, 1900, 997, 998, 999, 1000, 
	1003, 1001, 1002, 1004, 1006, 1019, 1006, 1007, 
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 
	1015, 1016, 1017, 1903, 1020, 1021, 1022, 1023, 
	1026, 1024, 1025, 1028, 1029, 1030, 1031, 1046, 
	1032, 1033, 1034, 1035, 1036, 1037, 983, 1038, 
	1039, 1040, 1041, 1045, 1042, 1043, 1044, 994, 
	1904, 1048, 1049, 1089, 1049, 1050, 1056, 1061, 
	1050, 1051, 1052, 1053, 1054, 1055, 1891, 1057, 
	1058, 1059, 1060, 1062, 1063, 1064, 1075, 1070, 
	1064, 1065, 1066, 1067, 1068, 1069, 1569, 1071, 
	1072, 1073, 1074, 1076, 1077, 1078, 1079, 1088, 
	1080, 1081, 1082, 1083, 1905, 1084, 1085, 1086, 
	1087, 1901, 1090, 1091, 1092, 1093, 1096, 1094, 
	1095, 1098, 1097, 1100, 1111, 1121, 1134, 1138, 
	1141, 1098, 1099, 1100, 1101, 1104, 1105, 1099, 
	1101, 1105, 1102, 1103, 1109, 1110, 1102, 1104, 
	1105, 1103, 1906, 1106, 1105, 1108, 1106, 1107, 
	1108, 1107, 1108, 1908, 1109, 1112, 1113, 1114, 
	1117, 1113, 1114, 1117, 1115, 1116, 1118, 1119, 
	1115, 1117, 1116, 1117, 1910, 1118, 1120, 1120, 
	1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 
	1128, 1129, 1130, 1131, 1132, 1133, 1130, 1131, 
	1132, 1111, 1135, 1136, 1137, 1114, 1117, 1137, 
	1114, 1139, 1140, 1142, 1145, 1146, 1147, 1143, 
	1144, 1143, 1144, 1148, 1150, 1151, 1152, 1153, 
	1159, 1569, 1569, 1569, 1154, 1155, 1156, 1157, 
	1158, 1569, 1161, 1162, 1163, 1164, 1165, 1166, 
	1167, 1168, 1175, 1168, 1169, 1170, 1171, 1171, 
	1172, 1173, 1174, 1569, 1176, 1177, 1178, 1179, 
	1182, 1180, 1181, 1569, 1184, 1193, 1185, 1186, 
	1187, 1188, 1189, 1190, 1191, 1192, 1569, 1569, 
	1195, 1200, 1196, 1197, 1198, 1199, 1569, 1201, 
	1208, 1202, 1203, 1204, 1915, 1205, 1205, 1914, 
	1206, 1207, 1209, 1210, 1211, 1213, 1569, 1212, 
	1211, 1213, 1569, 1212, 1569, 1215, 1216, 1569, 
	1217, 1218, 1219, 1220, 1221, 1223, 1569, 1222, 
	1221, 1223, 1569, 1222, 1569, 1225, 1226, 1227, 
	1228, 1232, 1229, 1230, 1231, 1569, 1234, 1235, 
	1236, 1237, 1238, 1239, 1916, 1240, 1569, 1242, 
	1249, 1243, 1244, 1245, 1246, 1247, 1569, 1248, 
	1250, 1251, 1252, 1253, 1255, 1569, 1569, 1258, 
	1258, 1569, 1260, 1261, 1272, 1273, 1274, 1276, 
	1278, 1281, 1920, 1282, 1262, 1263, 1264, 1266, 
	1268, 1270, 1919, 1265, 1267, 1269, 1271, 1275, 
	1277, 1279, 1280, 1259, 1285, 1287, 1289, 1290, 
	1283, 1284, 1286, 1288, 1291, 1921, 1294, 1295, 
	1296, 1297, 1298, 1921, 1300, 1301, 1302, 1303, 
	1304, 1925, 1306, 1307, 1308, 1309, 1310, 1311, 
	1312, 1313, 1925, 1315, 1316, 1317, 1318, 1319, 
	1320, 1321, 1322, 1929, 1324, 1332, 1325, 1326, 
	1327, 1328, 1329, 1330, 1331, 1929, 1333, 1337, 
	1341, 1345, 1334, 1335, 1336, 1929, 1338, 1339, 
	1340, 1929, 1342, 1343, 1344, 1929, 1929, 1347, 
	1348, 1349, 1929, 1359, 1350, 1351, 1350, 1352, 
	1351, 1352, 1353, 1356, 1358, 1354, 1354, 1355, 
	1349, 1929, 1357, 1357, 1349, 1358, 1929, 1360, 
	1361, 1362, 1363, 1364, 1929, 1365, 1366, 1365, 
	1367, 1366, 1367, 1368, 1371, 1373, 1369, 1369, 
	1370, 1364, 1929, 1372, 1372, 1364, 1373, 1929, 
	1375, 1389, 1400, 1424, 1376, 1377, 1378, 1379, 
	1929, 1380, 1381, 1380, 1382, 1381, 1382, 1383, 
	1386, 1388, 1384, 1384, 1385, 1379, 1929, 1387, 
	1387, 1379, 1388, 1929, 1390, 1929, 1391, 1392, 
	1391, 1393, 1392, 1393, 1394, 1397, 1399, 1395, 
	1395, 1396, 1390, 1929, 1398, 1398, 1390, 1399, 
	1929, 1401, 1929, 1411, 1402, 1403, 1402, 1404, 
	1403, 1404, 1405, 1408, 1410, 1406, 1406, 1407, 
	1401, 1929, 1409, 1409, 1401, 1410, 1929, 1412, 
	1413, 1414, 1929, 1415, 1416, 1415, 1417, 1416, 
	1417, 1418, 1421, 1423, 1419, 1419, 1420, 1414, 
	1929, 1422, 1422, 1414, 1423, 1929, 1425, 1929, 
	1426, 1427, 1426, 1428, 1427, 1428, 1429, 1432, 
	1434, 1430, 1430, 1431, 1425, 1929, 1433, 1433, 
	1425, 1434, 1929, 1436, 1444, 1437, 1438, 1439, 
	1440, 1441, 1442, 1443, 1445, 1449, 1453, 1457, 
	1446, 1447, 1448, 1450, 1451, 1452, 1454, 1455, 
	1456, 1459, 1460, 1461, 1471, 1462, 1463, 1462, 
	1464, 1463, 1464, 1465, 1468, 1470, 1466, 1466, 
	1467, 1461, 1469, 1469, 1461, 1470, 1472, 1473, 
	1474, 1475, 1476, 1477, 1478, 1477, 1479, 1478, 
	1479, 1480, 1483, 1485, 1481, 1481, 1482, 1476, 
	1484, 1484, 1476, 1485, 1487, 1501, 1512, 1536, 
	1488, 1489, 1490, 1491, 1492, 1493, 1492, 1494, 
	1493, 1494, 1495, 1498, 1500, 1496, 1496, 1497, 
	1491, 1499, 1499, 1491, 1500, 1502, 1503, 1504, 
	1503, 1505, 1504, 1505, 1506, 1509, 1511, 1507, 
	1507, 1508, 1502, 1510, 1510, 1502, 1511, 1513, 
	1523, 1514, 1515, 1514, 1516, 1515, 1516, 1517, 
	1520, 1522, 1518, 1518, 1519, 1513, 1521, 1521, 
	1513, 1522, 1524, 1525, 1526, 1527, 1528, 1527, 
	1529, 1528, 1529, 1530, 1533, 1535, 1531, 1531, 
	1532, 1526, 1534, 1534, 1526, 1535, 1537, 1538, 
	1539, 1538, 1540, 1539, 1540, 1541, 1544, 1546, 
	1542, 1542, 1543, 1537, 1545, 1545, 1537, 1546, 
	1547, 1549, 1551, 1554, 1562, 1564, 1565, 1547, 
	1547, 1547, 1547, 1552, 34, 44, 59, 68, 
	76, 84, 1547, 1547, 1547, 1547, 1558, 1547, 
	1547, 1547, 86, 1547, 1563, 89, 102, 111, 
	118, 123, 131, 133, 1566, 1566, 1567, 1568, 
	1566, 143, 154, 156, 161, 162, 167, 168, 
	169, 170, 1569, 1570, 1572, 1573, 1574, 1575, 
	1576, 1569, 1585, 1591, 0, 1606, 1624, 1640, 
	1659, 1677, 1694, 1704, 1719, 1754, 1772, 1790, 
	1846, 1874, 1890, 1912, 1913, 1917, 1918, 1569, 
	1569, 173, 1569, 1578, 243, 245, 290, 294, 
	324, 1569, 1569, 211, 227, 1569, 1569, 1569, 
	1580, 1569, 1569, 1569, 1584, 335, 1569, 1591, 
	406, 459, 1569, 1593, 1569, 1593, 1569, 1595, 
	1569, 1595, 1597, 1597, 1569, 1599, 1569, 1599, 
	1569, 1601, 1569, 1601, 1603, 1603, 1600, 1607, 
	1608, 1609, 1610, 1611, 508, 1569, 1613, 1614, 
	1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 
	1625, 1626, 1627, 520, 1569, 1629, 1630, 1631, 
	1632, 1633, 1634, 1635, 1636, 1637, 1638, 1641, 
	1642, 1643, 1644, 1645, 1646, 532, 1569, 1648, 
	1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 
	1657, 1660, 1661, 1662, 1663, 544, 1569, 546, 
	1666, 1569, 1665, 1667, 1668, 1669, 1670, 1671, 
	1672, 1673, 1674, 1675, 1678, 1679, 1680, 1681, 
	557, 1569, 1683, 1684, 1685, 1686, 1687, 1688, 
	1689, 1690, 1691, 1692, 1695, 1696, 1697, 569, 
	1703, 1569, 1705, 1706, 622, 1569, 1708, 1709, 
	1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 
	1720, 1725, 1721, 1722, 1723, 641, 1569, 1724, 
	1726, 1740, 1727, 667, 1569, 1729, 1730, 1731, 
	1732, 1733, 1734, 1735, 1736, 1737, 1738, 1741, 
	679, 1569, 1743, 1744, 1745, 1746, 1747, 1748, 
	1749, 1750, 1751, 1752, 1755, 1756, 1757, 1758, 
	1759, 691, 1569, 1761, 1762, 1763, 1764, 1765, 
	1766, 1767, 1768, 1769, 1770, 1773, 1774, 1775, 
	1776, 1777, 703, 1569, 1779, 1780, 1781, 1782, 
	1783, 1784, 1785, 1786, 1787, 1788, 1791, 1829, 
	1792, 715, 1569, 1794, 1795, 1796, 1797, 1798, 
	1799, 1800, 1801, 1802, 1803, 1569, 1806, 1807, 
	1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 
	1569, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 
	1825, 1826, 1827, 1830, 1831, 1832, 779, 1569, 
	781, 1835, 1569, 1834, 1836, 1837, 1838, 1839, 
	1840, 1841, 1842, 1843, 1844, 1847, 1848, 1849, 
	793, 1569, 1851, 1852, 1853, 1854, 1855, 1856, 
	1857, 1858, 1859, 1860, 1569, 1863, 1864, 1865, 
	1866, 1867, 1868, 1869, 1870, 1871, 1872, 1875, 
	1876, 1877, 823, 1569, 1879, 1880, 1881, 1882, 
	1883, 1884, 1885, 1886, 1887, 1888, 835, 847, 
	884, 886, 906, 915, 916, 924, 929, 937, 
	939, 1894, 1896, 1569, 1569, 1569, 1569, 835, 
	837, 1907, 836, 835, 1907, 836, 1909, 1909, 
	1911, 1911, 1149, 1160, 1183, 1194, 1214, 1224, 
	1233, 1241, 1254, 1256, 1257, 1259, 1283, 1284, 
	1286, 1288, 1291, 1260, 1292, 1569, 1921, 1921, 
	1922, 1923, 1924, 1921, 1293, 1299, 1925, 1925, 
	1926, 1927, 1928, 1925, 1305, 1314, 1929, 1930, 
	1931, 1929, 1323, 1346, 1374, 1435, 1458, 1486
};

static const short _dtext_trans_actions[] = {
	271, 27, 0, 273, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 239, 
	0, 0, 0, 0, 0, 0, 0, 235, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 5, 5, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 1, 0, 446, 267, 227, 0, 
	265, 225, 0, 0, 0, 0, 0, 231, 
	1, 1, 1, 547, 0, 350, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 275, 0, 3, 0, 0, 0, 0, 
	0, 0, 27, 269, 233, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 237, 
	3, 551, 5, 0, 7, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 275, 275, 1, 5, 353, 
	0, 7, 0, 0, 0, 229, 3, 3, 
	0, 0, 0, 51, 0, 0, 0, 0, 
	0, 31, 35, 39, 0, 0, 0, 0, 
	43, 29, 0, 33, 37, 0, 0, 0, 
	0, 0, 41, 0, 0, 0, 0, 173, 
	533, 0, 169, 0, 524, 0, 171, 0, 
	167, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 95, 0, 0, 0, 0, 109, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 165, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 85, 0, 0, 
	0, 113, 111, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 5, 5, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	99, 0, 0, 0, 0, 0, 0, 103, 
	1, 0, 293, 0, 0, 0, 0, 0, 
	0, 1, 3, 551, 5, 0, 7, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 275, 
	275, 1, 5, 353, 0, 7, 0, 0, 
	0, 93, 3, 3, 0, 0, 0, 0, 
	3, 0, 699, 841, 5, 0, 155, 449, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 703, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 703, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 703, 0, 0, 
	0, 0, 0, 0, 703, 5, 5, 0, 
	371, 0, 0, 0, 0, 0, 0, 0, 
	0, 5, 5, 5, 5, 5, 5, 5, 
	5, 0, 7, 0, 7, 7, 7, 0, 
	0, 0, 0, 9, 11, 11, 0, 0, 
	11, 11, 0, 0, 13, 398, 398, 0, 
	15, 15, 0, 0, 0, 0, 7, 559, 
	362, 559, 398, 13, 398, 9, 395, 395, 
	0, 0, 395, 0, 0, 0, 0, 15, 
	0, 7, 13, 0, 0, 0, 0, 7, 
	7, 0, 0, 9, 11, 11, 0, 0, 
	0, 0, 0, 7, 13, 365, 7, 365, 
	0, 0, 7, 0, 0, 0, 0, 0, 
	7, 7, 0, 0, 0, 0, 5, 5, 
	5, 5, 5, 5, 5, 0, 7, 7, 
	7, 0, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 7, 7, 9, 389, 9, 
	389, 0, 11, 0, 11, 0, 0, 0, 
	0, 555, 356, 555, 9, 389, 9, 9, 
	9, 9, 9, 9, 389, 0, 359, 359, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	359, 0, 7, 7, 9, 0, 0, 0, 
	0, 7, 9, 7, 9, 9, 9, 9, 
	0, 0, 7, 0, 0, 0, 0, 0, 
	0, 647, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 667, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 631, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	635, 1, 153, 5, 27, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 623, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	512, 0, 0, 27, 512, 0, 0, 0, 
	0, 0, 157, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 512, 
	0, 0, 0, 0, 512, 0, 0, 0, 
	0, 0, 0, 0, 0, 675, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 3, 0, 0, 0, 
	5, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 639, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 619, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 679, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 671, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	655, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	659, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	663, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 627, 1, 151, 
	0, 5, 27, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 643, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 651, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 683, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 7, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 281, 0, 
	0, 0, 0, 0, 0, 0, 0, 715, 
	0, 0, 0, 0, 0, 0, 755, 0, 
	0, 0, 763, 0, 0, 0, 0, 0, 
	799, 723, 0, 0, 0, 0, 791, 0, 
	731, 0, 0, 0, 0, 0, 0, 779, 
	0, 0, 0, 807, 803, 747, 739, 0, 
	711, 767, 0, 0, 0, 0, 0, 0, 
	751, 0, 0, 0, 0, 0, 771, 1, 
	0, 851, 161, 91, 0, 159, 89, 0, 
	0, 0, 0, 0, 759, 1, 1, 1, 
	861, 0, 846, 0, 0, 0, 0, 0, 
	0, 0, 795, 1, 1, 1, 867, 0, 
	856, 719, 0, 0, 0, 0, 0, 0, 
	783, 163, 101, 0, 0, 0, 0, 0, 
	787, 0, 727, 0, 0, 0, 0, 0, 
	0, 775, 0, 743, 0, 735, 0, 0, 
	0, 7, 0, 5, 0, 5, 5, 5, 
	0, 7, 7, 0, 7, 1, 1, 1, 
	278, 0, 3, 3, 7, 0, 0, 0, 
	0, 0, 0, 827, 0, 0, 3, 1, 
	3, 0, 0, 0, 0, 0, 0, 53, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 691, 0, 0, 0, 0, 509, 0, 
	0, 7, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	691, 0, 1, 831, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 5, 0, 7, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 691, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 7, 0, 0, 1, 7, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	691, 0, 1, 1, 0, 3, 3, 7, 
	0, 0, 0, 0, 0, 0, 707, 0, 
	0, 0, 0, 0, 0, 3, 1, 3, 
	0, 0, 0, 0, 0, 0, 57, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 691, 0, 0, 0, 
	0, 515, 0, 0, 0, 0, 0, 0, 
	0, 5, 5, 5, 5, 5, 5, 5, 
	5, 0, 7, 0, 7, 7, 7, 0, 
	0, 0, 9, 11, 11, 0, 0, 392, 
	11, 0, 819, 13, 398, 595, 0, 15, 
	401, 0, 7, 823, 0, 7, 559, 362, 
	559, 398, 13, 595, 9, 395, 395, 0, 
	0, 591, 0, 7, 819, 0, 15, 0, 
	7, 13, 0, 0, 0, 0, 7, 7, 
	0, 0, 9, 11, 11, 0, 0, 0, 
	0, 0, 7, 13, 365, 7, 365, 0, 
	0, 7, 0, 0, 0, 0, 0, 7, 
	7, 0, 0, 0, 0, 0, 0, 0, 
	0, 61, 65, 69, 0, 0, 0, 0, 
	0, 73, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 3, 0, 5, 0, 
	7, 0, 0, 55, 0, 0, 0, 0, 
	0, 0, 0, 59, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 105, 87, 
	0, 0, 0, 0, 0, 0, 79, 0, 
	0, 0, 0, 0, 27, 1, 0, 446, 
	0, 0, 0, 0, 0, 0, 83, 1, 
	1, 1, 539, 0, 290, 0, 0, 63, 
	0, 0, 0, 0, 0, 0, 107, 1, 
	1, 1, 543, 0, 296, 0, 0, 0, 
	0, 0, 0, 0, 0, 284, 0, 0, 
	0, 0, 0, 0, 27, 0, 67, 0, 
	0, 0, 0, 0, 0, 0, 97, 0, 
	0, 0, 0, 0, 0, 75, 71, 1, 
	0, 287, 0, 0, 0, 0, 0, 0, 
	0, 0, 695, 0, 0, 0, 0, 0, 
	0, 0, 695, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 183, 0, 0, 
	0, 0, 0, 175, 0, 0, 0, 0, 
	0, 193, 0, 0, 0, 0, 0, 0, 
	0, 0, 185, 0, 0, 0, 0, 0, 
	0, 0, 0, 223, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 197, 0, 0, 
	0, 0, 0, 0, 0, 217, 0, 0, 
	0, 207, 0, 0, 0, 203, 213, 0, 
	0, 0, 199, 0, 1, 3, 0, 3, 
	0, 0, 0, 0, 5, 5, 0, 7, 
	21, 425, 5, 0, 368, 0, 567, 0, 
	0, 0, 0, 0, 195, 1, 3, 0, 
	3, 0, 0, 0, 0, 5, 5, 0, 
	7, 21, 422, 5, 0, 368, 0, 563, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	205, 1, 3, 0, 3, 0, 0, 0, 
	0, 5, 5, 0, 7, 21, 431, 5, 
	0, 368, 0, 575, 0, 215, 1, 3, 
	0, 3, 0, 0, 0, 0, 5, 5, 
	0, 7, 21, 440, 5, 0, 368, 0, 
	587, 0, 209, 0, 1, 3, 0, 3, 
	0, 0, 0, 0, 5, 5, 0, 7, 
	21, 434, 5, 0, 368, 0, 579, 0, 
	0, 0, 201, 1, 3, 0, 3, 0, 
	0, 0, 0, 5, 5, 0, 7, 21, 
	428, 5, 0, 368, 0, 571, 0, 211, 
	1, 3, 0, 3, 0, 0, 0, 0, 
	5, 5, 0, 7, 21, 437, 5, 0, 
	368, 0, 583, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 3, 0, 
	3, 0, 0, 0, 0, 5, 5, 0, 
	7, 21, 5, 0, 368, 0, 0, 0, 
	0, 0, 0, 1, 3, 0, 3, 0, 
	0, 0, 0, 5, 5, 0, 7, 21, 
	5, 0, 368, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 3, 0, 3, 
	0, 0, 0, 0, 5, 5, 0, 7, 
	21, 5, 0, 368, 0, 0, 1, 3, 
	0, 3, 0, 0, 0, 0, 5, 5, 
	0, 7, 21, 5, 0, 368, 0, 0, 
	0, 1, 3, 0, 3, 0, 0, 0, 
	0, 5, 5, 0, 7, 21, 5, 0, 
	368, 0, 0, 0, 0, 1, 3, 0, 
	3, 0, 0, 0, 0, 5, 5, 0, 
	7, 21, 5, 0, 368, 0, 0, 1, 
	3, 0, 3, 0, 0, 0, 0, 5, 
	5, 0, 7, 21, 5, 0, 368, 0, 
	241, 27, 443, 27, 27, 27, 27, 261, 
	263, 259, 386, 0, 0, 0, 0, 0, 
	0, 0, 245, 251, 249, 255, 0, 253, 
	257, 247, 1, 243, 0, 0, 0, 0, 
	0, 0, 0, 0, 47, 45, 27, 27, 
	49, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 117, 0, 536, 536, 530, 536, 
	527, 115, 536, 687, 0, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 836, 836, 536, 536, 536, 149, 
	147, 0, 145, 524, 1, 0, 0, 0, 
	0, 141, 143, 0, 0, 127, 81, 383, 
	0, 137, 139, 135, 0, 1, 119, 533, 
	3, 3, 611, 17, 416, 0, 615, 17, 
	419, 0, 17, 0, 603, 13, 407, 0, 
	599, 13, 404, 0, 13, 0, 398, 533, 
	533, 533, 533, 533, 0, 320, 473, 473, 
	473, 473, 473, 473, 473, 473, 0, 0, 
	533, 533, 533, 0, 335, 488, 488, 488, 
	488, 488, 488, 488, 488, 0, 0, 533, 
	533, 533, 533, 533, 533, 0, 308, 461, 
	461, 461, 461, 461, 461, 461, 461, 0, 
	0, 533, 533, 533, 533, 0, 311, 3, 
	464, 374, 0, 464, 464, 464, 464, 464, 
	464, 464, 27, 27, 533, 533, 533, 533, 
	0, 302, 455, 455, 455, 455, 455, 455, 
	455, 455, 0, 0, 533, 533, 533, 0, 
	533, 123, 533, 533, 0, 341, 494, 494, 
	494, 494, 494, 494, 494, 494, 0, 0, 
	533, 533, 533, 533, 533, 0, 380, 0, 
	533, 533, 533, 0, 314, 467, 467, 467, 
	467, 467, 467, 467, 467, 0, 0, 533, 
	0, 299, 452, 452, 452, 452, 452, 452, 
	452, 452, 0, 0, 533, 533, 533, 533, 
	533, 0, 344, 497, 497, 497, 497, 497, 
	497, 497, 497, 0, 0, 533, 533, 533, 
	533, 533, 0, 338, 491, 491, 491, 491, 
	491, 491, 491, 491, 0, 0, 533, 533, 
	533, 0, 326, 479, 479, 479, 479, 479, 
	479, 479, 479, 0, 0, 329, 482, 482, 
	482, 482, 482, 482, 482, 482, 0, 0, 
	332, 485, 485, 485, 485, 485, 485, 485, 
	485, 0, 0, 533, 533, 533, 0, 305, 
	3, 458, 377, 0, 458, 458, 458, 458, 
	458, 458, 458, 27, 27, 533, 533, 533, 
	0, 317, 470, 470, 470, 470, 470, 470, 
	470, 470, 0, 0, 323, 476, 476, 476, 
	476, 476, 476, 476, 476, 0, 0, 533, 
	533, 533, 0, 347, 500, 500, 500, 500, 
	500, 500, 500, 500, 0, 0, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 521, 518, 131, 129, 133, 121, 410, 
	410, 811, 607, 19, 503, 413, 815, 506, 
	811, 503, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 125, 179, 177, 
	27, 27, 27, 181, 0, 0, 189, 187, 
	27, 27, 27, 191, 0, 0, 219, 27, 
	27, 221, 0, 0, 0, 0, 0, 0
};

static const short _dtext_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 23, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 23, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 23, 0, 0, 0, 23, 0, 0, 
	0, 23, 0, 0
};

static const short _dtext_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 25, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 25, 0, 
	0, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 25, 0, 0, 0, 25, 0, 0, 
	0, 25, 0, 0
};

static const short _dtext_eof_trans[] = {
	0, 1, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 62, 65, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 100, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 208, 208, 211, 208, 215, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 256, 256, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 256, 256, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 217, 217, 217, 217, 217, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 217, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 217, 208, 208, 208, 
	208, 208, 208, 208, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 215, 
	215, 215, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 211, 211, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 211, 211, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 211, 
	211, 211, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 211, 211, 211, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 211, 
	211, 211, 699, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 211, 211, 211, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 211, 211, 
	211, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 211, 211, 211, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 211, 211, 
	211, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 211, 211, 211, 952, 952, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	211, 211, 211, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 211, 211, 
	211, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 211, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 1091, 1094, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 1130, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 208, 208, 208, 
	208, 208, 208, 208, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 208, 208, 208, 
	208, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 208, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 208, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 1091, 1094, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	1130, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 1598, 1598, 1598, 
	1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 
	1598, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 
	1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 
	1610, 1610, 1610, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 
	1628, 1628, 1628, 0, 1992, 1993, 1994, 1993, 
	1995, 1995, 1993, 2003, 2004, 2005, 2006, 2008, 
	2009, 2010, 1993, 2012, 1993, 1993, 0, 2025, 
	2025, 0, 2064, 2065, 2064, 2064, 208, 2064, 
	2067, 2074, 2075, 2078, 2080, 2080, 2082, 2083, 
	2084, 2064, 2087, 2087, 2087, 2087, 2087, 2065, 
	2091, 2093, 2095, 2097, 2091, 2093, 2101, 2103, 
	2105, 2107, 2105, 2107, 2105, 2105, 2065, 2065, 
	2065, 2065, 2065, 2065, 2118, 2118, 2118, 2118, 
	2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 
	2065, 2065, 2065, 2065, 2133, 2133, 2133, 2133, 
	2133, 2133, 2133, 2133, 2133, 2133, 2133, 2133, 
	2065, 2065, 2065, 2065, 2065, 2065, 2065, 2151, 
	2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 
	2151, 2151, 2151, 2065, 2065, 2065, 2065, 2065, 
	2167, 2170, 2167, 2167, 2167, 2167, 2167, 2167, 
	2167, 2167, 2167, 2167, 2167, 2065, 2065, 2065, 
	2065, 2065, 2186, 2186, 2186, 2186, 2186, 2186, 
	2186, 2186, 2186, 2186, 2186, 2186, 2065, 2065, 
	2065, 2065, 2202, 2202, 2202, 2202, 2202, 2065, 
	2065, 2065, 2065, 2206, 2206, 2206, 2206, 2206, 
	2206, 2206, 2206, 2206, 2206, 2206, 2206, 2065, 
	2065, 2065, 2065, 2065, 2223, 2065, 2065, 2065, 
	2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 
	2229, 2229, 2229, 2229, 2065, 2065, 2242, 2242, 
	2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242, 
	2242, 2242, 2065, 2065, 2065, 2065, 2065, 2065, 
	2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259, 
	2259, 2259, 2259, 2259, 2065, 2065, 2065, 2065, 
	2065, 2065, 2276, 2276, 2276, 2276, 2276, 2276, 
	2276, 2276, 2276, 2276, 2276, 2276, 2065, 2065, 
	2065, 2291, 2291, 2291, 2291, 2291, 2291, 2291, 
	2291, 2291, 2291, 2291, 2291, 2302, 2302, 2302, 
	2302, 2302, 2302, 2302, 2302, 2302, 2302, 2302, 
	2302, 2313, 2313, 2313, 2313, 2313, 2313, 2313, 
	2313, 2313, 2313, 2313, 2313, 2065, 2065, 2065, 
	2065, 2328, 2331, 2328, 2328, 2328, 2328, 2328, 
	2328, 2328, 2328, 2328, 2328, 2328, 2065, 2065, 
	2065, 2065, 2346, 2346, 2346, 2346, 2346, 2346, 
	2346, 2346, 2346, 2346, 2346, 2346, 2357, 2357, 
	2357, 2357, 2357, 2357, 2357, 2357, 2357, 2357, 
	2357, 2357, 2065, 2065, 2065, 2065, 2372, 2372, 
	2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 
	2372, 2372, 2064, 208, 2078, 2083, 2083, 2082, 
	2082, 2396, 2397, 2398, 2399, 208, 2399, 2399, 
	2399, 2399, 2091, 2093, 2095, 2097, 2091, 2093, 
	2064, 2064, 2396, 2397, 2398, 2064, 2064, 2430, 
	2430, 0, 2436, 2436, 2436, 0, 2444, 2444, 
	2444, 0, 2450, 2450
};

static const int dtext_start = 1547;
static const int dtext_first_final = 1547;
static const int dtext_error = 0;

static const int dtext_en_basic_inline = 1566;
static const int dtext_en_inline = 1569;
static const int dtext_en_code = 1921;
static const int dtext_en_nodtext = 1925;
static const int dtext_en_table = 1929;
static const int dtext_en_main = 1547;


#line 788 "ext/dtext/dtext.cpp.rl"

static void dstack_push(StateMachine * sm, element_t element) {
  sm->dstack.push_back(element);
}

static element_t dstack_pop(StateMachine * sm) {
  if (sm->dstack.empty()) {
    g_debug("dstack pop empty stack");
    return DSTACK_EMPTY;
  } else {
    auto element = sm->dstack.back();
    sm->dstack.pop_back();
    return element;
  }
}

static element_t dstack_peek(const StateMachine * sm) {
  return sm->dstack.empty() ? DSTACK_EMPTY : sm->dstack.back();
}

static bool dstack_check(const StateMachine * sm, element_t expected_element) {
  return dstack_peek(sm) == expected_element;
}

// Return true if the given tag is currently open.
static bool dstack_is_open(const StateMachine * sm, element_t element) {
  return std::find(sm->dstack.begin(), sm->dstack.end(), element) != sm->dstack.end();
}

static int dstack_count(const StateMachine * sm, element_t element) {
  return std::count(sm->dstack.begin(), sm->dstack.end(), element);
}

static bool is_internal_url(StateMachine * sm, const std::string_view url) {
  if (url.starts_with("/")) {
    return true;
  } else if (sm->options.domain.empty() || url.empty()) {
    return false;
  } else {
    // Matches the domain name part of a URL.
    static const std::regex url_regex("^https?://(?:[^/?#]*@)?([^/?#:]+)", std::regex_constants::icase);

    std::match_results<std::string_view::const_iterator> matches;
    std::regex_search(url.begin(), url.end(), matches, url_regex);
    return matches[1] == sm->options.domain;
  }
}

static void append(StateMachine * sm, const auto c) {
  sm->output += c;
}

static void append(StateMachine * sm, const char * a, const char * b) {
  append(sm, std::string_view(a, b));
}

static void append_html_escaped(StateMachine * sm, char s) {
  switch (s) {
    case '<': append(sm, "&lt;"); break;
    case '>': append(sm, "&gt;"); break;
    case '&': append(sm, "&amp;"); break;
    case '"': append(sm, "&quot;"); break;
    default:  append(sm, s);
  }
}

static void append_html_escaped(StateMachine * sm, const std::string_view string) {
  for (const unsigned char c : string) {
    append_html_escaped(sm, c);
  }
}

static void append_uri_escaped(StateMachine * sm, const std::string_view string) {
  static const char hex[] = "0123456789ABCDEF";

  for (const unsigned char c : string) {
    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '-' || c == '_' || c == '.' || c == '~') {
      append(sm, c);
    } else {
      append(sm, '%');
      append(sm, hex[c >> 4]);
      append(sm, hex[c & 0x0F]);
    }
  }
}

static void append_relative_url(StateMachine * sm, const auto url) {
  if ((url[0] == '/' || url[0] == '#') && !sm->options.base_url.empty()) {
    append_html_escaped(sm, sm->options.base_url);
  }

  append_html_escaped(sm, url);
}

static void append_absolute_link(StateMachine * sm, const std::string_view url, const std::string_view title, bool internal_url, bool escape_title) {
  if (internal_url) {
    append(sm, "<a class=\"dtext-link\" href=\"");
  } else if (url == title) {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-external-link\" href=\"");
  } else {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-external-link dtext-named-external-link\" href=\"");
  }

  append_html_escaped(sm, url);
  append(sm, "\">");

  if (escape_title) {
    append_html_escaped(sm, title);
  } else {
    append(sm, title);
  }

  append(sm, "</a>");
}

static void append_mention(StateMachine * sm, const std::string_view name) {
  append(sm, "<a class=\"dtext-link dtext-user-mention-link\" data-user-name=\"");
  append_html_escaped(sm, name);
  append(sm, "\" href=\"");
  append_relative_url(sm, "/users?name=");
  append_uri_escaped(sm, name);
  append(sm, "\">@");
  append_html_escaped(sm, name);
  append(sm, "</a>");
}

static void append_id_link(StateMachine * sm, const char * title, const char * id_name, const char * url, const std::string_view id) {
  if (url[0] == '/') {
    append(sm, "<a class=\"dtext-link dtext-id-link dtext-");
    append(sm, id_name);
    append(sm, "-id-link\" href=\"");
    append_relative_url(sm, url);
  } else {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-id-link dtext-");
    append(sm, id_name);
    append(sm, "-id-link\" href=\"");
    append_html_escaped(sm, url);
  }

  append_uri_escaped(sm, id);
  append(sm, "\">");
  append(sm, title);
  append(sm, " #");
  append_html_escaped(sm, id);
  append(sm, "</a>");
}

static void append_bare_unnamed_url(StateMachine * sm, const std::string_view url) {
  auto [trimmed_url, leftovers] = trim_url(url);
  append_unnamed_url(sm, trimmed_url);
  append_html_escaped(sm, leftovers);
}

static void append_unnamed_url(StateMachine * sm, const std::string_view url) {
  DText::URL parsed_url(url);

  if (sm->options.internal_domains.find(std::string(parsed_url.domain)) != sm->options.internal_domains.end()) {
    append_internal_url(sm, parsed_url);
  } else {
    append_absolute_link(sm, url, url, parsed_url.domain == sm->options.domain);
  }
}

static void append_internal_url(StateMachine * sm, const DText::URL& url) {
  auto path_components = url.path_components();
  auto query = url.query;
  auto fragment = url.fragment;

  if (path_components.size() == 2) {
    auto controller = path_components.at(0);
    auto id = path_components.at(1);

    if (!id.empty() && std::all_of(id.begin(), id.end(), ::isdigit)) {
      if (controller == "post" && fragment.empty()) {
        // https://danbooru.donmai.us/posts/6000000#comment_2288996
        return append_id_link(sm, "post", "post", "/posts/", id);
      } else if (controller == "pool" && query.empty()) {
        // https://danbooru.donmai.us/pools/903?page=2
        return append_id_link(sm, "pool", "pool", "/pools/", id);
      } else if (controller == "comment") {
        return append_id_link(sm, "comment", "comment", "/comments/", id);
      } else if (controller == "forum") {
        return append_id_link(sm, "forum", "forum-post", "/forums/", id);
      } else if (controller == "forum" && query.empty() && fragment.empty()) {
        // https://danbooru.donmai.us/forum_topics/1234?page=2
        // https://danbooru.donmai.us/forum_topics/1234#forum_post_5678
        return append_id_link(sm, "topic", "forum-topic", "/forums/", id);
      } else if (controller == "user") {
        return append_id_link(sm, "user", "user", "/users/", id);
      } else if (controller == "artist") {
        return append_id_link(sm, "artist", "artist", "/artists/", id);
      } else if (controller == "wiki" && fragment.empty()) {
        // http://danbooru.donmai.us/wiki_pages/10933#dtext-self-upload
        return append_id_link(sm, "wiki", "wiki-page", "/wiki/", id);
      }
    } else if (controller == "wiki" && fragment.empty()) {
      return append_wiki_link(sm, {}, id, {}, id, {});
    }
  } else if (path_components.size() >= 3) {
    // http://danbooru.donmai.us/post/show/1234/touhou
    auto controller = path_components.at(0);
    auto action = path_components.at(1);
    auto id = path_components.at(2);

    if (!id.empty() && std::all_of(id.begin(), id.end(), ::isdigit)) {
      if (controller == "post" && action == "show") {
        return append_id_link(sm, "post", "post", "/posts/", id);
      }
    }
  }

  append_absolute_link(sm, url.url, url.url, url.domain == sm->options.domain);
}

static void append_named_url(StateMachine * sm, const std::string_view url, const std::string_view title) {
  auto parsed_title = sm->parse_basic_inline(title);

  // protocol-relative url; treat `//example.com` like `http://example.com`
  if (url.size() > 2 && url.starts_with("//")) {
    auto full_url = "http:" + std::string(url);
    append_absolute_link(sm, full_url, parsed_title, is_internal_url(sm, full_url), false);
  } else if (url[0] == '/' || url[0] == '#') {
    append(sm, "<a class=\"dtext-link\" href=\"");
    append_relative_url(sm, url);
    append(sm, "\">");
    append(sm, parsed_title);
    append(sm, "</a>");
  } else if (url == title) {
    append_unnamed_url(sm, url);
  } else {
    append_absolute_link(sm, url, parsed_title, is_internal_url(sm, url), false);
  }
}

static void append_bare_named_url(StateMachine * sm, const std::string_view url, std::string_view title) {
  auto [trimmed_url, leftovers] = trim_url(url);
  append_named_url(sm, trimmed_url, title);
  append_html_escaped(sm, leftovers);
}

static void append_post_search_link(StateMachine * sm, const std::string_view prefix, const std::string_view search, const std::string_view title, const std::string_view suffix) {
  auto normalized_title = std::string(title);

  append(sm, "<a class=\"dtext-link dtext-post-search-link\" href=\"");
  append_relative_url(sm, "/post?tags=");
  append_uri_escaped(sm, search);
  append(sm, "\">");

  // 19{{60s}} -> {{60s|1960s}}
  if (!prefix.empty()) {
    normalized_title.insert(0, prefix);
  }

  // {{pokemon_(creature)|}} -> {{pokemon_(creature)|pokemon}}
  if (title.empty()) {
    std::regex_replace(std::back_inserter(normalized_title), search.begin(), search.end(), tag_qualifier_regex, "");
  }

  // {{cat}}s -> {{cat|cats}}
  if (!suffix.empty()) {
    normalized_title.append(suffix);
  }

  append_html_escaped(sm, normalized_title);
  append(sm, "</a>");

  clear_matches(sm);
}

static void append_wiki_link(StateMachine * sm, const std::string_view prefix, const std::string_view tag, const std::string_view anchor, const std::string_view title, const std::string_view suffix) {
  auto normalized_tag = std::string(tag);
  auto title_string = std::string(title);

  // "Kantai Collection" -> "kantai_collection"
  std::transform(normalized_tag.cbegin(), normalized_tag.cend(), normalized_tag.begin(), [](unsigned char c) { return c == ' ' ? '_' : std::tolower(c); });

  // [[2019]] -> [[~2019]]
  if (std::all_of(normalized_tag.cbegin(), normalized_tag.cend(), ::isdigit)) {
    normalized_tag.insert(0, "~");
  }

  // Pipe trick: [[Kaga (Kantai Collection)|]] -> [[kaga_(kantai_collection)|Kaga]]
  if (title_string.empty()) {
    std::regex_replace(std::back_inserter(title_string), tag.cbegin(), tag.cend(), tag_qualifier_regex, "");
  }

  // 19[[60s]] -> [[60s|1960s]]
  if (!prefix.empty()) {
    title_string.insert(0, prefix);
  }

  // [[cat]]s -> [[cat|cats]]
  if (!suffix.empty()) {
    title_string.append(suffix);
  }

  append(sm, "<a class=\"dtext-link dtext-wiki-link\" href=\"");
  append_relative_url(sm, "/wiki/");
  append_uri_escaped(sm, normalized_tag);

  if (!anchor.empty()) {
    std::string normalized_anchor(anchor);
    std::transform(normalized_anchor.begin(), normalized_anchor.end(), normalized_anchor.begin(), [](char c) { return isalnum(c) ? tolower(c) : '-'; });
    append_html_escaped(sm, "#dtext-");
    append_html_escaped(sm, normalized_anchor);
  }

  append(sm, "\">");
  append_html_escaped(sm, title_string);
  append(sm, "</a>");

  sm->wiki_pages.insert(std::string(tag));

  clear_matches(sm);
}

static void append_paged_link(StateMachine * sm, const char * title, const char * tag, const char * href, const char * param) {
  append(sm, tag);
  append_relative_url(sm, href);
  append(sm, sm->a1, sm->a2);
  append(sm, param);
  append(sm, sm->b1, sm->b2);
  append(sm, "\">");
  append(sm, title);
  append(sm, sm->a1, sm->a2);
  append(sm, "/p");
  append(sm, sm->b1, sm->b2);
  append(sm, "</a>");
}

static void append_dmail_key_link(StateMachine * sm) {
  append(sm, "<a class=\"dtext-link dtext-id-link dtext-dmail-id-link\" href=\"");
  append_relative_url(sm, "/dmails/");
  append(sm, sm->a1, sm->a2);
  append(sm, "?key=");
  append_uri_escaped(sm, { sm->b1, sm->b2 });
  append(sm, "\">");
  append(sm, "dmail #");
  append(sm, sm->a1, sm->a2);
  append(sm, "</a>");
}

static void append_code_fence(StateMachine * sm, const std::string_view code, const std::string_view language) {
  if (language.empty()) {
    append_block(sm, "<pre>");
    append_html_escaped(sm, code);
    append_block(sm, "</pre>");
  } else {
    append_block(sm, "<pre class=\"language-");
    append_html_escaped(sm, language);
    append_block(sm, "\">");
    append_html_escaped(sm, code);
    append_block(sm, "</pre>");
  }
}

static void append_inline_code(StateMachine * sm, const std::string_view language = {}) {
  if (language.empty()) {
    dstack_open_element(sm, INLINE_CODE, "<code>");
  } else {
    dstack_open_element(sm, INLINE_CODE, "<code class=\"language-");
    append_html_escaped(sm, language);
    append(sm, "\">");
  }
}

static void append_block_code(StateMachine * sm, const std::string_view language = {}) {
  dstack_close_leaf_blocks(sm);

  if (language.empty()) {
    dstack_open_element(sm, BLOCK_CODE, "<pre>");
  } else {
    dstack_open_element(sm, BLOCK_CODE, "<pre class=\"language-");
    append_html_escaped(sm, language);
    append(sm, "\">");
  }
}

static void append_header(StateMachine * sm, char header, const std::string_view id) {
  static element_t blocks[] = { BLOCK_H1, BLOCK_H2, BLOCK_H3, BLOCK_H4, BLOCK_H5, BLOCK_H6 };
  element_t block = blocks[header - '1'];

  if (id.empty()) {
    dstack_open_element(sm, block, "<h");
    append_block(sm, header);
    append_block(sm, ">");
  } else {
    auto normalized_id = std::string(id);
    std::transform(id.begin(), id.end(), normalized_id.begin(), [](char c) { return isalnum(c) ? tolower(c) : '-'; });

    dstack_open_element(sm, block, "<h");
    append_block(sm, header);
    append_block(sm, " id=\"dtext-");
    append_block(sm, normalized_id);
    append_block(sm, "\">");
  }

  sm->header_mode = true;
}

static void append_block(StateMachine * sm, const auto s) {
  if (!sm->options.f_inline) {
    append(sm, s);
  }
}

static void append_block_html_escaped(StateMachine * sm, const std::string_view string) {
  if (!sm->options.f_inline) {
    append_html_escaped(sm, string);
  }
}

static void append_closing_p(StateMachine * sm) {
  g_debug("append closing p");

  if (sm->output.size() > 4 && sm->output.ends_with("<br>")) {
    g_debug("trim last <br>");
    sm->output.resize(sm->output.size() - 4);
  }

  if (sm->output.size() > 3 && sm->output.ends_with("<p>")) {
    g_debug("trim last <p>");
    sm->output.resize(sm->output.size() - 3);
    return;
  }

  append_block(sm, "</p>");
}

static void dstack_open_element(StateMachine * sm, element_t type, const char * html) {
  g_debug("opening %s", html);

  dstack_push(sm, type);

  if (type >= INLINE) {
    append(sm, html);
  } else {
    append_block(sm, html);
  }
}

static void dstack_open_element(StateMachine * sm, element_t type, std::string_view tag_name, const StateMachine::TagAttributes& tag_attributes) {
  dstack_push(sm, type);
  append_block(sm, "<");
  append_block(sm, tag_name);

  auto& permitted_names = permitted_attribute_names.at(tag_name);
  for (auto& [name, value] : tag_attributes) {
    if (permitted_names.find(name) != permitted_names.end()) {
      auto validate_value = permitted_attribute_values.at(name);

      if (validate_value(value)) {
        append_block(sm, " ");
        append_block_html_escaped(sm, name);
        append_block(sm, "=\"");
        append_block_html_escaped(sm, value);
        append_block(sm, "\"");
      }
    }
  }

  append_block(sm, ">");
  clear_tag_attributes(sm);
}

static bool dstack_close_element(StateMachine * sm, element_t type) {
  if (dstack_check(sm, type)) {
    dstack_rewind(sm);
    return true;
  } else if (type >= INLINE && dstack_peek(sm) >= INLINE) {
    g_debug("out-of-order close %s; closing %s instead", element_names[type], element_names[dstack_peek(sm)]);
    dstack_rewind(sm);
    return true;
  } else if (type >= INLINE) {
    g_debug("out-of-order closing %s", element_names[type]);
    append_html_escaped(sm, { sm->ts, sm->te });
    return false;
  } else {
    g_debug("out-of-order closing %s", element_names[type]);
    append_block_html_escaped(sm, { sm->ts, sm->te });
    return false;
  }
}

// Close the last open tag.
static void dstack_rewind(StateMachine * sm) {
  element_t element = dstack_pop(sm);
  g_debug("dstack rewind %s", element_names[element]);

  switch(element) {
    case BLOCK_P: append_closing_p(sm); break;
    case INLINE_SPOILER: append(sm, "</span>"); break;
    case BLOCK_SPOILER: append_block(sm, "</div>"); break;
    case BLOCK_QUOTE: append_block(sm, "</blockquote>"); break;
    case BLOCK_EXPAND: append_block(sm, "</div></details>"); break;
    case BLOCK_NODTEXT: append_block(sm, "</p>"); break;
    case BLOCK_CODE: append_block(sm, "</pre>"); break;
    case BLOCK_TD: append_block(sm, "</td>"); break;
    case BLOCK_TH: append_block(sm, "</th>"); break;

    case INLINE_NODTEXT: break;
    case INLINE_B: append(sm, "</strong>"); break;
    case INLINE_I: append(sm, "</em>"); break;
    case INLINE_U: append(sm, "</u>"); break;
    case INLINE_S: append(sm, "</s>"); break;
    case INLINE_TN: append(sm, "</span>"); break;
    case INLINE_CENTER: append(sm, "</div>"); break;
    case INLINE_COLOR: append(sm, "</span>"); break;
    case INLINE_CODE: append(sm, "</code>"); break;

    case BLOCK_TN: append_closing_p(sm); break;
    case BLOCK_CENTER: append_closing_p(sm); break;
    case BLOCK_COLOR: append_closing_p(sm); break;
    case BLOCK_TABLE: append_block(sm, "</table>"); break;
    case BLOCK_COLGROUP: append_block(sm, "</colgroup>"); break;
    case BLOCK_THEAD: append_block(sm, "</thead>"); break;
    case BLOCK_TBODY: append_block(sm, "</tbody>"); break;
    case BLOCK_TR: append_block(sm, "</tr>"); break;
    case BLOCK_UL: append_block(sm, "</ul>"); break;
    case BLOCK_LI: append_block(sm, "</li>"); break;
    case BLOCK_H6: append_block(sm, "</h6>"); sm->header_mode = false; break;
    case BLOCK_H5: append_block(sm, "</h5>"); sm->header_mode = false; break;
    case BLOCK_H4: append_block(sm, "</h4>"); sm->header_mode = false; break;
    case BLOCK_H3: append_block(sm, "</h3>"); sm->header_mode = false; break;
    case BLOCK_H2: append_block(sm, "</h2>"); sm->header_mode = false; break;
    case BLOCK_H1: append_block(sm, "</h1>"); sm->header_mode = false; break;

    // Should never happen.
    case INLINE: break;
    case DSTACK_EMPTY: break;
  } 
}

// container blocks: [spoiler], [quote], [expand], [tn], [center], [color]
// leaf blocks: [nodtext], [code], [table], [td]?, [th]?, <h1>, <p>, <li>, <ul>
static void dstack_close_leaf_blocks(StateMachine * sm) {
  g_debug("dstack close leaf blocks");

  while (!sm->dstack.empty() && !dstack_check(sm, BLOCK_QUOTE) && !dstack_check(sm, BLOCK_SPOILER) && !dstack_check(sm, BLOCK_EXPAND) && !dstack_check(sm, BLOCK_TN) && !dstack_check(sm, BLOCK_CENTER) && !dstack_check(sm, BLOCK_COLOR)) {
    dstack_rewind(sm);
  }
}

// Close all open tags up to and including the given tag.
static void dstack_close_until(StateMachine * sm, element_t element) {
  while (!sm->dstack.empty() && !dstack_check(sm, element)) {
    dstack_rewind(sm);
  }

  dstack_rewind(sm);
}

// Close all remaining open tags.
static void dstack_close_all(StateMachine * sm) {
  while (!sm->dstack.empty()) {
    dstack_rewind(sm);
  }
}

static void dstack_open_list(StateMachine * sm, int depth) {
  g_debug("open list");

  if (dstack_is_open(sm, BLOCK_LI)) {
    dstack_close_until(sm, BLOCK_LI);
  } else {
    dstack_close_leaf_blocks(sm);
  }

  while (dstack_count(sm, BLOCK_UL) < depth) {
    dstack_open_element(sm, BLOCK_UL, "<ul>");
  }

  while (dstack_count(sm, BLOCK_UL) > depth) {
    dstack_close_until(sm, BLOCK_UL);
  }

  dstack_open_element(sm, BLOCK_LI, "<li>");
}

static void dstack_close_list(StateMachine * sm) {
  while (dstack_is_open(sm, BLOCK_UL)) {
    dstack_close_until(sm, BLOCK_UL);
  }
}

static void save_tag_attribute(StateMachine * sm, const std::string_view name, const std::string_view value) {
  sm->tag_attributes[name] = value;
}

static void clear_tag_attributes(StateMachine * sm) {
  sm->tag_attributes.clear();
}

static void clear_matches(StateMachine * sm) {
  sm->a1 = NULL;
  sm->a2 = NULL;
  sm->b1 = NULL;
  sm->b2 = NULL;
  sm->c1 = NULL;
  sm->c2 = NULL;
  sm->d1 = NULL;
  sm->d2 = NULL;
  sm->e1 = NULL;
  sm->e2 = NULL;
}

// True if a mention is allowed to start after this character.
static bool is_mention_boundary(unsigned char c) {
  switch (c) {
    case '\0': return true;
    case '\r': return true;
    case '\n': return true;
    case ' ':  return true;
    case '/':  return true;
    case '"':  return true;
    case '\'': return true;
    case '(':  return true;
    case ')':  return true;
    case '[':  return true;
    case ']':  return true;
    case '{':  return true;
    case '}':  return true;
    default:   return false;
  }
}

// Trim trailing unbalanced ')' characters from the URL.
static std::tuple<std::string_view, std::string_view> trim_url(const std::string_view url) {
  std::string_view trimmed = url;

  while (!trimmed.empty() && trimmed.back() == ')' && std::count(trimmed.begin(), trimmed.end(), ')') > std::count(trimmed.begin(), trimmed.end(), '(')) {
    trimmed.remove_suffix(1);
  }

  return { trimmed, { trimmed.end(), url.end() } };
}

// Replace CRLF sequences with LF.
static void replace_newlines(const std::string_view input, std::string& output) {
  size_t pos, last = 0;

  while (std::string::npos != (pos = input.find("\r\n", last))) {
    output.append(input, last, pos - last);
    output.append("\n");
    last = pos + 2;
  }

  output.append(input, last, pos - last);
}

StateMachine::StateMachine(const auto string, int initial_state, const DTextOptions options) : options(options) {
  // Add null bytes to the beginning and end of the string as start and end of string markers.
  input.reserve(string.size());
  input.append(1, '\0');
  replace_newlines(string, input);
  input.append(1, '\0');

  output.reserve(string.size() * 1.5);
  stack.reserve(16);
  dstack.reserve(16);

  p = input.c_str();
  pb = input.c_str();
  pe = input.c_str() + input.size();
  eof = pe;
  cs = initial_state;
}

std::string StateMachine::parse_inline(const std::string_view dtext) {
  StateMachine sm(dtext, dtext_en_inline, options);
  return sm.parse();
}

std::string StateMachine::parse_basic_inline(const std::string_view dtext) {
  StateMachine sm(dtext, dtext_en_basic_inline, options);
  return sm.parse();
}

StateMachine::ParseResult StateMachine::parse_dtext(const std::string_view dtext, DTextOptions options) {
  StateMachine sm(dtext, dtext_en_main, options);
  return { sm.parse(), sm.wiki_pages };
}

std::string StateMachine::parse() {
  StateMachine* sm = this;
  g_debug("parse '%.*s'", (int)(sm->input.size() - 2), sm->input.c_str() + 1);

  
#line 6548 "ext/dtext/dtext.cpp"
	{
	( sm->top) = 0;
	( sm->ts) = 0;
	( sm->te) = 0;
	( sm->act) = 0;
	}

#line 1476 "ext/dtext/dtext.cpp.rl"
  
#line 6554 "ext/dtext/dtext.cpp"
	{
	int _klen;
	unsigned int _trans;
	short _widec;
	const unsigned char *_acts;
	unsigned int _nacts;
	const short *_keys;

	if ( ( sm->p) == ( sm->pe) )
		goto _test_eof;
	if (  sm->cs == 0 )
		goto _out;
_resume:
	_acts = _dtext_actions + _dtext_from_state_actions[ sm->cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 12:
#line 1 "NONE"
	{( sm->ts) = ( sm->p);}
	break;
#line 6574 "ext/dtext/dtext.cpp"
		}
	}

	_widec = (*( sm->p));
	_klen = _dtext_cond_lengths[ sm->cs];
	_keys = _dtext_cond_keys + (_dtext_cond_offsets[ sm->cs]*2);
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				switch ( _dtext_cond_spaces[_dtext_cond_offsets[ sm->cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = (short)(128 + ((*( sm->p)) - -128));
		if ( 
#line 82 "ext/dtext/dtext.cpp.rl"
 is_mention_boundary(p[-1])  ) _widec += 256;
		break;
	}
	case 1: {
		_widec = (short)(640 + ((*( sm->p)) - -128));
		if ( 
#line 83 "ext/dtext/dtext.cpp.rl"
 sm->options.f_mentions  ) _widec += 256;
		break;
	}
	case 2: {
		_widec = (short)(2688 + ((*( sm->p)) - -128));
		if ( 
#line 84 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_QUOTE)  ) _widec += 256;
		break;
	}
	case 3: {
		_widec = (short)(3200 + ((*( sm->p)) - -128));
		if ( 
#line 85 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_EXPAND)  ) _widec += 256;
		break;
	}
	case 4: {
		_widec = (short)(2176 + ((*( sm->p)) - -128));
		if ( 
#line 86 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_COLOR)  ) _widec += 256;
		break;
	}
	case 5: {
		_widec = (short)(1152 + ((*( sm->p)) - -128));
		if ( 
#line 82 "ext/dtext/dtext.cpp.rl"
 is_mention_boundary(p[-1])  ) _widec += 256;
		if ( 
#line 83 "ext/dtext/dtext.cpp.rl"
 sm->options.f_mentions  ) _widec += 512;
		break;
	}
				}
				break;
			}
		}
	}

	_keys = _dtext_trans_keys + _dtext_key_offsets[ sm->cs];
	_trans = _dtext_index_offsets[ sm->cs];

	_klen = _dtext_single_lengths[ sm->cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < *_mid )
				_upper = _mid - 1;
			else if ( _widec > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _dtext_range_lengths[ sm->cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _dtext_indicies[_trans];
_eof_trans:
	 sm->cs = _dtext_trans_targs[_trans];

	if ( _dtext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _dtext_actions + _dtext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 71 "ext/dtext/dtext.cpp.rl"
	{ sm->a1 = sm->p; }
	break;
	case 1:
#line 72 "ext/dtext/dtext.cpp.rl"
	{ sm->a2 = sm->p; }
	break;
	case 2:
#line 73 "ext/dtext/dtext.cpp.rl"
	{ sm->b1 = sm->p; }
	break;
	case 3:
#line 74 "ext/dtext/dtext.cpp.rl"
	{ sm->b2 = sm->p; }
	break;
	case 4:
#line 75 "ext/dtext/dtext.cpp.rl"
	{ sm->c1 = sm->p; }
	break;
	case 5:
#line 76 "ext/dtext/dtext.cpp.rl"
	{ sm->c2 = sm->p; }
	break;
	case 6:
#line 77 "ext/dtext/dtext.cpp.rl"
	{ sm->d1 = sm->p; }
	break;
	case 7:
#line 78 "ext/dtext/dtext.cpp.rl"
	{ sm->d2 = sm->p; }
	break;
	case 8:
#line 79 "ext/dtext/dtext.cpp.rl"
	{ sm->e1 = sm->p; }
	break;
	case 9:
#line 80 "ext/dtext/dtext.cpp.rl"
	{ sm->e2 = sm->p; }
	break;
	case 10:
#line 87 "ext/dtext/dtext.cpp.rl"
	{ save_tag_attribute(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }); }
	break;
	case 13:
#line 1 "NONE"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 14:
#line 282 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_B, "<strong>"); }}
	break;
	case 15:
#line 283 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_B); }}
	break;
	case 16:
#line 284 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_I, "<em>"); }}
	break;
	case 17:
#line 285 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_I); }}
	break;
	case 18:
#line 286 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_S, "<s>"); }}
	break;
	case 19:
#line 287 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_S); }}
	break;
	case 20:
#line 288 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_U, "<u>"); }}
	break;
	case 21:
#line 289 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_U); }}
	break;
	case 22:
#line 290 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 23:
#line 291 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 24:
#line 291 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 25:
#line 291 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 26:
#line 295 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 11;}
	break;
	case 27:
#line 296 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 12;}
	break;
	case 28:
#line 297 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 13;}
	break;
	case 29:
#line 298 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 14;}
	break;
	case 30:
#line 299 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 15;}
	break;
	case 31:
#line 300 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 16;}
	break;
	case 32:
#line 301 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 17;}
	break;
	case 33:
#line 302 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 18;}
	break;
	case 34:
#line 303 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 19;}
	break;
	case 35:
#line 304 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 20;}
	break;
	case 36:
#line 305 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 21;}
	break;
	case 37:
#line 306 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 22;}
	break;
	case 38:
#line 307 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 23;}
	break;
	case 39:
#line 308 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 24;}
	break;
	case 40:
#line 309 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 25;}
	break;
	case 41:
#line 310 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 26;}
	break;
	case 42:
#line 311 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 27;}
	break;
	case 43:
#line 326 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 33;}
	break;
	case 44:
#line 330 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 34;}
	break;
	case 45:
#line 334 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 35;}
	break;
	case 46:
#line 338 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 36;}
	break;
	case 47:
#line 342 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 37;}
	break;
	case 48:
#line 346 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 38;}
	break;
	case 49:
#line 350 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 39;}
	break;
	case 50:
#line 354 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 40;}
	break;
	case 51:
#line 369 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 43;}
	break;
	case 52:
#line 370 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 44;}
	break;
	case 53:
#line 371 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 45;}
	break;
	case 54:
#line 372 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 46;}
	break;
	case 55:
#line 373 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 47;}
	break;
	case 56:
#line 374 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 48;}
	break;
	case 57:
#line 375 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 49;}
	break;
	case 58:
#line 376 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 50;}
	break;
	case 59:
#line 378 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 51;}
	break;
	case 60:
#line 382 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 52;}
	break;
	case 61:
#line 392 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 53;}
	break;
	case 62:
#line 397 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 54;}
	break;
	case 63:
#line 407 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 55;}
	break;
	case 64:
#line 412 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 56;}
	break;
	case 65:
#line 419 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 57;}
	break;
	case 66:
#line 429 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 58;}
	break;
	case 67:
#line 437 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 59;}
	break;
	case 68:
#line 442 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 60;}
	break;
	case 69:
#line 459 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 63;}
	break;
	case 70:
#line 463 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 64;}
	break;
	case 71:
#line 474 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 65;}
	break;
	case 72:
#line 494 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 68;}
	break;
	case 73:
#line 501 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 69;}
	break;
	case 74:
#line 507 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 70;}
	break;
	case 75:
#line 514 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 71;}
	break;
	case 76:
#line 526 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 73;}
	break;
	case 77:
#line 532 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 74;}
	break;
	case 78:
#line 545 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 76;}
	break;
	case 79:
#line 563 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 77;}
	break;
	case 80:
#line 581 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 79;}
	break;
	case 81:
#line 583 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 80;}
	break;
	case 82:
#line 587 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 81;}
	break;
	case 83:
#line 338 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_named_url(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }}
	break;
	case 84:
#line 342 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_named_url(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 });
  }}
	break;
	case 85:
#line 350 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_unnamed_url(sm, { sm->a1, sm->a2 });
  }}
	break;
	case 86:
#line 358 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("delimited mention: <@%.*s>", (int)(sm->a2 - sm->a1), sm->a1);
    append_mention(sm, { sm->a1, sm->a2 });
  }}
	break;
	case 87:
#line 369 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_B, "<strong>"); }}
	break;
	case 88:
#line 370 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_B); }}
	break;
	case 89:
#line 371 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_I, "<em>"); }}
	break;
	case 90:
#line 372 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_I); }}
	break;
	case 91:
#line 373 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_S, "<s>"); }}
	break;
	case 92:
#line 374 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_S); }}
	break;
	case 93:
#line 375 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_U, "<u>"); }}
	break;
	case 94:
#line 376 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_U); }}
	break;
	case 95:
#line 378 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_TN, "<span class=\"tn\">");
  }}
	break;
	case 96:
#line 382 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/tn]");

    if (dstack_check(sm, INLINE_TN)) {
      dstack_close_element(sm, INLINE_TN);
    } else if (dstack_close_element(sm, BLOCK_TN)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 97:
#line 392 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [center]");
    dstack_open_element(sm, INLINE_CENTER, "<div class=\"center\">");
  }}
	break;
	case 98:
#line 397 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/center]");

    if (dstack_check(sm, INLINE_CENTER)) {
      dstack_close_element(sm, INLINE_CENTER);
    } else if (dstack_close_element(sm, BLOCK_CENTER)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 99:
#line 407 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [color]");
    dstack_open_element(sm, INLINE_COLOR, "<span style=\"color:#FF761C;\">");
  }}
	break;
	case 100:
#line 412 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [color=]");
    dstack_open_element(sm, INLINE_COLOR, "<span style=\"color:");
    append_html_escaped(sm, { sm->a1, sm->a2 });
    append(sm, "\">");
  }}
	break;
	case 101:
#line 419 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/color]");

    if (dstack_check(sm, INLINE_COLOR)) {
      dstack_close_element(sm, INLINE_COLOR);
    } else if (dstack_close_element(sm, BLOCK_COLOR)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 102:
#line 429 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (sm->header_mode) {
      append_html_escaped(sm, "<br>");
    } else {
      append(sm, "<br>");
    };
  }}
	break;
	case 103:
#line 437 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1921;goto _again;}}
  }}
	break;
	case 104:
#line 442 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1921;goto _again;}}
  }}
	break;
	case 105:
#line 447 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 106:
#line 453 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 107:
#line 459 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_SPOILER, "<span class=\"spoiler\">");
  }}
	break;
	case 108:
#line 463 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_is_open(sm, INLINE_SPOILER)) {
      dstack_close_element(sm, INLINE_SPOILER);
    } else if (dstack_is_open(sm, BLOCK_SPOILER)) {
      dstack_close_until(sm, BLOCK_SPOILER);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append_html_escaped(sm, { sm->ts, sm->te });
    }
  }}
	break;
	case 109:
#line 474 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1925;goto _again;}}
  }}
	break;
	case 110:
#line 482 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 111:
#line 494 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [quote]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 112:
#line 507 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [expand]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 113:
#line 520 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 114:
#line 526 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TH)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 115:
#line 532 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TD)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 116:
#line 577 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append(sm, ' ');
  }}
	break;
	case 117:
#line 587 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 118:
#line 295 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "post", "post", "/posts/", { sm->a1, sm->a2 }); }}
	break;
	case 119:
#line 296 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "forum", "forum-post", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 120:
#line 297 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "topic", "forum-topic", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 121:
#line 298 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "comment", "comment", "/comments/", { sm->a1, sm->a2 }); }}
	break;
	case 122:
#line 299 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "dmail", "dmail", "/dmails/", { sm->a1, sm->a2 }); }}
	break;
	case 123:
#line 300 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "pool", "pool", "/pools/", { sm->a1, sm->a2 }); }}
	break;
	case 124:
#line 301 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "user", "user", "/users/", { sm->a1, sm->a2 }); }}
	break;
	case 125:
#line 302 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "artist", "artist", "/artists/", { sm->a1, sm->a2 }); }}
	break;
	case 126:
#line 303 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "user report", "user-report", "/user_flags/", { sm->a1, sm->a2 }); }}
	break;
	case 127:
#line 304 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag alias", "tag-alias", "/tag_aliases?id=", { sm->a1, sm->a2 }); }}
	break;
	case 128:
#line 305 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag implication", "tag-implication", "/tag_implications?id=", { sm->a1, sm->a2 }); }}
	break;
	case 129:
#line 306 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag translation", "tag-translation", "/tag_translations?id=", { sm->a1, sm->a2 }); }}
	break;
	case 130:
#line 307 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "book", "book", "/pools/", { sm->a1, sm->a2 }); }}
	break;
	case 131:
#line 308 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "series", "series", "/series/", { sm->a1, sm->a2 }); }}
	break;
	case 132:
#line 309 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "mod action", "mod-action", "/mod_actions?id=", { sm->a1, sm->a2 }); }}
	break;
	case 133:
#line 310 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "record", "user-record", "/user_records?id=", { sm->a1, sm->a2 }); }}
	break;
	case 134:
#line 311 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "wiki", "wiki-page", "/wiki/", { sm->a1, sm->a2 }); }}
	break;
	case 135:
#line 313 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_dmail_key_link(sm); }}
	break;
	case 136:
#line 315 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_paged_link(sm, "topic #", "<a class=\"dtext-link dtext-id-link dtext-forum-topic-id-link\" href=\"", "/forums/", "?page="); }}
	break;
	case 137:
#line 316 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_paged_link(sm, "pixiv #", "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-id-link dtext-pixiv-id-link\" href=\"", "https://www.pixiv.net/artworks/", "#"); }}
	break;
	case 138:
#line 318 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_post_search_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->b1, sm->b2 }, { sm->d1, sm->d2 });
  }}
	break;
	case 139:
#line 322 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_post_search_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->d1, sm->d2 });
  }}
	break;
	case 140:
#line 326 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_wiki_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->b1, sm->b2 }, { sm->e1, sm->e2 });
  }}
	break;
	case 141:
#line 330 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_wiki_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->d1, sm->d2 }, { sm->e1, sm->e2 });
  }}
	break;
	case 142:
#line 334 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }}
	break;
	case 143:
#line 342 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_named_url(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 });
  }}
	break;
	case 144:
#line 346 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }}
	break;
	case 145:
#line 354 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_mention(sm, { sm->a1, sm->a2 + 1 });
  }}
	break;
	case 146:
#line 363 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline list");
    {( sm->p) = (( sm->ts + 1))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 147:
#line 397 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/center]");

    if (dstack_check(sm, INLINE_CENTER)) {
      dstack_close_element(sm, INLINE_CENTER);
    } else if (dstack_close_element(sm, BLOCK_CENTER)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 148:
#line 437 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1921;goto _again;}}
  }}
	break;
	case 149:
#line 442 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1921;goto _again;}}
  }}
	break;
	case 150:
#line 474 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1925;goto _again;}}
  }}
	break;
	case 151:
#line 488 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 152:
#line 501 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/quote]");
    dstack_close_until(sm, BLOCK_QUOTE);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 153:
#line 514 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/expand]");
    dstack_close_until(sm, BLOCK_EXPAND);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 154:
#line 538 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [hr] (pos: %ld)", sm->ts - sm->pb);
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 155:
#line 545 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 156:
#line 563 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }}
	break;
	case 157:
#line 583 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append(sm, std::string_view { sm->ts, sm->te });
  }}
	break;
	case 158:
#line 587 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 159:
#line 297 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_id_link(sm, "topic", "forum-topic", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 160:
#line 299 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_id_link(sm, "dmail", "dmail", "/dmails/", { sm->a1, sm->a2 }); }}
	break;
	case 161:
#line 334 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }}
	break;
	case 162:
#line 346 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }}
	break;
	case 163:
#line 437 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1921;goto _again;}}
  }}
	break;
	case 164:
#line 442 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1921;goto _again;}}
  }}
	break;
	case 165:
#line 474 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1925;goto _again;}}
  }}
	break;
	case 166:
#line 545 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 167:
#line 563 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }}
	break;
	case 168:
#line 583 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append(sm, std::string_view { sm->ts, sm->te });
  }}
	break;
	case 169:
#line 587 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 170:
#line 1 "NONE"
	{	switch( ( sm->act) ) {
	case 11:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "post", "post", "/posts/", { sm->a1, sm->a2 }); }
	break;
	case 12:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "forum", "forum-post", "/forums/", { sm->a1, sm->a2 }); }
	break;
	case 13:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "topic", "forum-topic", "/forums/", { sm->a1, sm->a2 }); }
	break;
	case 14:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "comment", "comment", "/comments/", { sm->a1, sm->a2 }); }
	break;
	case 15:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "dmail", "dmail", "/dmails/", { sm->a1, sm->a2 }); }
	break;
	case 16:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "pool", "pool", "/pools/", { sm->a1, sm->a2 }); }
	break;
	case 17:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "user", "user", "/users/", { sm->a1, sm->a2 }); }
	break;
	case 18:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "artist", "artist", "/artists/", { sm->a1, sm->a2 }); }
	break;
	case 19:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "user report", "user-report", "/user_flags/", { sm->a1, sm->a2 }); }
	break;
	case 20:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "tag alias", "tag-alias", "/tag_aliases?id=", { sm->a1, sm->a2 }); }
	break;
	case 21:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "tag implication", "tag-implication", "/tag_implications?id=", { sm->a1, sm->a2 }); }
	break;
	case 22:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "tag translation", "tag-translation", "/tag_translations?id=", { sm->a1, sm->a2 }); }
	break;
	case 23:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "book", "book", "/pools/", { sm->a1, sm->a2 }); }
	break;
	case 24:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "series", "series", "/series/", { sm->a1, sm->a2 }); }
	break;
	case 25:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "mod action", "mod-action", "/mod_actions?id=", { sm->a1, sm->a2 }); }
	break;
	case 26:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "record", "user-record", "/user_records?id=", { sm->a1, sm->a2 }); }
	break;
	case 27:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "wiki", "wiki-page", "/wiki/", { sm->a1, sm->a2 }); }
	break;
	case 33:
	{{( sm->p) = ((( sm->te)))-1;}
    append_wiki_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->b1, sm->b2 }, { sm->e1, sm->e2 });
  }
	break;
	case 34:
	{{( sm->p) = ((( sm->te)))-1;}
    append_wiki_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->d1, sm->d2 }, { sm->e1, sm->e2 });
  }
	break;
	case 35:
	{{( sm->p) = ((( sm->te)))-1;}
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }
	break;
	case 36:
	{{( sm->p) = ((( sm->te)))-1;}
    append_named_url(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }
	break;
	case 37:
	{{( sm->p) = ((( sm->te)))-1;}
    append_named_url(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 });
  }
	break;
	case 38:
	{{( sm->p) = ((( sm->te)))-1;}
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }
	break;
	case 39:
	{{( sm->p) = ((( sm->te)))-1;}
    append_unnamed_url(sm, { sm->a1, sm->a2 });
  }
	break;
	case 40:
	{{( sm->p) = ((( sm->te)))-1;}
    append_mention(sm, { sm->a1, sm->a2 + 1 });
  }
	break;
	case 43:
	{{( sm->p) = ((( sm->te)))-1;} dstack_open_element(sm,  INLINE_B, "<strong>"); }
	break;
	case 44:
	{{( sm->p) = ((( sm->te)))-1;} dstack_close_element(sm, INLINE_B); }
	break;
	case 45:
	{{( sm->p) = ((( sm->te)))-1;} dstack_open_element(sm,  INLINE_I, "<em>"); }
	break;
	case 46:
	{{( sm->p) = ((( sm->te)))-1;} dstack_close_element(sm, INLINE_I); }
	break;
	case 47:
	{{( sm->p) = ((( sm->te)))-1;} dstack_open_element(sm,  INLINE_S, "<s>"); }
	break;
	case 48:
	{{( sm->p) = ((( sm->te)))-1;} dstack_close_element(sm, INLINE_S); }
	break;
	case 49:
	{{( sm->p) = ((( sm->te)))-1;} dstack_open_element(sm,  INLINE_U, "<u>"); }
	break;
	case 50:
	{{( sm->p) = ((( sm->te)))-1;} dstack_close_element(sm, INLINE_U); }
	break;
	case 51:
	{{( sm->p) = ((( sm->te)))-1;}
    dstack_open_element(sm, INLINE_TN, "<span class=\"tn\">");
  }
	break;
	case 52:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [/tn]");

    if (dstack_check(sm, INLINE_TN)) {
      dstack_close_element(sm, INLINE_TN);
    } else if (dstack_close_element(sm, BLOCK_TN)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }
	break;
	case 53:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [center]");
    dstack_open_element(sm, INLINE_CENTER, "<div class=\"center\">");
  }
	break;
	case 54:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [/center]");

    if (dstack_check(sm, INLINE_CENTER)) {
      dstack_close_element(sm, INLINE_CENTER);
    } else if (dstack_close_element(sm, BLOCK_CENTER)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }
	break;
	case 55:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [color]");
    dstack_open_element(sm, INLINE_COLOR, "<span style=\"color:#FF761C;\">");
  }
	break;
	case 56:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [color=]");
    dstack_open_element(sm, INLINE_COLOR, "<span style=\"color:");
    append_html_escaped(sm, { sm->a1, sm->a2 });
    append(sm, "\">");
  }
	break;
	case 57:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [/color]");

    if (dstack_check(sm, INLINE_COLOR)) {
      dstack_close_element(sm, INLINE_COLOR);
    } else if (dstack_close_element(sm, BLOCK_COLOR)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }
	break;
	case 58:
	{{( sm->p) = ((( sm->te)))-1;}
    if (sm->header_mode) {
      append_html_escaped(sm, "<br>");
    } else {
      append(sm, "<br>");
    };
  }
	break;
	case 59:
	{{( sm->p) = ((( sm->te)))-1;}
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1921;goto _again;}}
  }
	break;
	case 60:
	{{( sm->p) = ((( sm->te)))-1;}
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1921;goto _again;}}
  }
	break;
	case 63:
	{{( sm->p) = ((( sm->te)))-1;}
    dstack_open_element(sm, INLINE_SPOILER, "<span class=\"spoiler\">");
  }
	break;
	case 64:
	{{( sm->p) = ((( sm->te)))-1;}
    if (dstack_is_open(sm, INLINE_SPOILER)) {
      dstack_close_element(sm, INLINE_SPOILER);
    } else if (dstack_is_open(sm, BLOCK_SPOILER)) {
      dstack_close_until(sm, BLOCK_SPOILER);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append_html_escaped(sm, { sm->ts, sm->te });
    }
  }
	break;
	case 65:
	{{( sm->p) = ((( sm->te)))-1;}
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1925;goto _again;}}
  }
	break;
	case 68:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [quote]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }
	break;
	case 69:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [/quote]");
    dstack_close_until(sm, BLOCK_QUOTE);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }
	break;
	case 70:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [expand]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }
	break;
	case 71:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [/expand]");
    dstack_close_until(sm, BLOCK_EXPAND);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }
	break;
	case 73:
	{{( sm->p) = ((( sm->te)))-1;}
    if (dstack_close_element(sm, BLOCK_TH)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }
	break;
	case 74:
	{{( sm->p) = ((( sm->te)))-1;}
    if (dstack_close_element(sm, BLOCK_TD)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }
	break;
	case 76:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }
	break;
	case 77:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }
	break;
	case 80:
	{{( sm->p) = ((( sm->te)))-1;}
    append(sm, std::string_view { sm->ts, sm->te });
  }
	break;
	case 81:
	{{( sm->p) = ((( sm->te)))-1;}
    append_html_escaped(sm, (*( sm->p)));
  }
	break;
	default:
	{{( sm->p) = ((( sm->te)))-1;}}
	break;
	}
	}
	break;
	case 171:
#line 593 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_rewind(sm);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 172:
#line 598 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 173:
#line 600 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 174:
#line 600 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 175:
#line 600 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 176:
#line 606 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_rewind(sm);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 177:
#line 611 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 178:
#line 613 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 179:
#line 613 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 180:
#line 613 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 181:
#line 619 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_COLGROUP, "colgroup", sm->tag_attributes);
  }}
	break;
	case 182:
#line 623 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_COLGROUP);
  }}
	break;
	case 183:
#line 627 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_COL, "col", sm->tag_attributes);
    dstack_pop(sm); // XXX [col] has no end tag
  }}
	break;
	case 184:
#line 632 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_THEAD, "thead", sm->tag_attributes);
  }}
	break;
	case 185:
#line 636 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_THEAD);
  }}
	break;
	case 186:
#line 640 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TBODY, "tbody", sm->tag_attributes);
  }}
	break;
	case 187:
#line 644 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_TBODY);
  }}
	break;
	case 188:
#line 648 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TH, "th", sm->tag_attributes);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1569;goto _again;}}
  }}
	break;
	case 189:
#line 653 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TR, "tr", sm->tag_attributes);
  }}
	break;
	case 190:
#line 657 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_TR);
  }}
	break;
	case 191:
#line 661 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TD, "td", sm->tag_attributes);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1569;goto _again;}}
  }}
	break;
	case 192:
#line 666 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TABLE)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 193:
#line 672 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 194:
#line 672 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;}
	break;
	case 195:
#line 672 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}}
	break;
	case 196:
#line 691 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1921;goto _again;}}
  }}
	break;
	case 197:
#line 696 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1921;goto _again;}}
  }}
	break;
	case 198:
#line 701 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_code_fence(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }}
	break;
	case 199:
#line 720 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block [color]");
    dstack_open_element(sm, BLOCK_COLOR, "<p style=\"color:#FF761C;\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1569;goto _again;}}
  }}
	break;
	case 200:
#line 726 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block [color=]");
    dstack_open_element(sm, BLOCK_COLOR, "<p style=\"color:");
    append_block_html_escaped(sm, { sm->a1, sm->a2 });
    append_block(sm, "\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1569;goto _again;}}
  }}
	break;
	case 201:
#line 734 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1925;goto _again;}}
  }}
	break;
	case 202:
#line 740 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_TABLE, "<table class=\"highlightable\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1929;goto _again;}}
  }}
	break;
	case 203:
#line 746 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TN, "<p class=\"tn\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1569;goto _again;}}
  }}
	break;
	case 204:
#line 751 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block [center]");
    dstack_open_element(sm, BLOCK_CENTER, "<p class=\"center\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1569;goto _again;}}
  }}
	break;
	case 205:
#line 773 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1569;goto _again;}}
  }}
	break;
	case 206:
#line 676 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_header(sm, *sm->a1, { sm->b1, sm->b2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1569;goto _again;}}
  }}
	break;
	case 207:
#line 681 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_QUOTE, "<blockquote>");
  }}
	break;
	case 208:
#line 686 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_SPOILER, "<div class=\"spoiler\">");
  }}
	break;
	case 209:
#line 691 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1921;goto _again;}}
  }}
	break;
	case 210:
#line 696 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1921;goto _again;}}
  }}
	break;
	case 211:
#line 705 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_EXPAND, "<details>");
    append_block(sm, "<summary>Show</summary><div>");
  }}
	break;
	case 212:
#line 711 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block [expand=]");
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_EXPAND, "<details>");
    append_block(sm, "<summary>");
    append_block_html_escaped(sm, { sm->a1, sm->a2 });
    append_block(sm, "</summary><div>");
  }}
	break;
	case 213:
#line 734 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1925;goto _again;}}
  }}
	break;
	case 214:
#line 757 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("write '<hr>' (pos: %ld)", sm->ts - sm->pb);
    append_block(sm, "<hr>");
  }}
	break;
	case 215:
#line 762 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block list");
    dstack_open_list(sm, sm->a2 - sm->a1);
    {( sm->p) = (( sm->b1))-1;}
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1569;goto _again;}}
  }}
	break;
	case 216:
#line 769 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block blank line(s)");
  }}
	break;
	case 217:
#line 773 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1569;goto _again;}}
  }}
	break;
	case 218:
#line 691 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1921;goto _again;}}
  }}
	break;
	case 219:
#line 696 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1921;goto _again;}}
  }}
	break;
	case 220:
#line 734 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1925;goto _again;}}
  }}
	break;
	case 221:
#line 769 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("block blank line(s)");
  }}
	break;
	case 222:
#line 773 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1569;goto _again;}}
  }}
	break;
#line 8470 "ext/dtext/dtext.cpp"
		}
	}

_again:
	_acts = _dtext_actions + _dtext_to_state_actions[ sm->cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 11:
#line 1 "NONE"
	{( sm->ts) = 0;}
	break;
#line 8481 "ext/dtext/dtext.cpp"
		}
	}

	if (  sm->cs == 0 )
		goto _out;
	if ( ++( sm->p) != ( sm->pe) )
		goto _resume;
	_test_eof: {}
	if ( ( sm->p) == ( sm->eof) )
	{
	if ( _dtext_eof_trans[ sm->cs] > 0 ) {
		_trans = _dtext_eof_trans[ sm->cs] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 1477 "ext/dtext/dtext.cpp.rl"

  g_debug("EOF; closing stray blocks");
  dstack_close_all(sm);
  g_debug("done");

  return sm->output;
}

/* Everything below is optional, it's only needed to build bin/cdtext.exe. */
#ifdef CDTEXT

#include <glib.h>
#include <iostream>

static void parse_file(FILE* input, FILE* output) {
  std::stringstream ss;
  ss << std::cin.rdbuf();
  std::string dtext = ss.str();

  try {
    auto result = StateMachine::parse_dtext(dtext, options);

    if (fwrite(result.c_str(), 1, result.size(), output) != result.size()) {
      perror("fwrite failed");
      exit(1);
    }
  } catch (std::exception& e) {
    fprintf(stderr, "dtext parse error: %s\n", e.what());
    exit(1);
  }
}

int main(int argc, char* argv[]) {
  GError* error = NULL;
  bool opt_verbose = FALSE;
  bool opt_inline = FALSE;
  bool opt_no_mentions = FALSE;

  GOptionEntry options[] = {
    { "no-mentions", 'm', 0, G_OPTION_ARG_NONE, &opt_no_mentions, "Don't parse @mentions", NULL },
    { "inline",      'i', 0, G_OPTION_ARG_NONE, &opt_inline,      "Parse in inline mode", NULL },
    { "verbose",     'v', 0, G_OPTION_ARG_NONE, &opt_verbose,     "Print debug output", NULL },
    { NULL }
  };

  g_autoptr(GOptionContext) context = g_option_context_new("[FILE...]");
  g_option_context_add_main_entries(context, options, NULL);

  if (!g_option_context_parse(context, &argc, &argv, &error)) {
    fprintf(stderr, "option parsing failed: %s\n", error->message);
    g_clear_error(&error);
    return 1;
  }

  if (opt_verbose) {
    g_setenv("G_MESSAGES_DEBUG", "all", TRUE);
  }

  /* skip first argument (progname) */
  argc--, argv++;

  if (argc == 0) {
    parse_file(stdin, stdout, { .f_inline = opt_inline, .f_mentions = !opt_no_mentions });
    return 0;
  }

  for (const char* filename = *argv; argc > 0; argc--, argv++) {
    FILE* input = fopen(filename, "r");
    if (!input) {
      perror("fopen failed");
      return 1;
    }

    parse_file(input, stdout, opt_inline, !opt_no_mentions);
    fclose(input);
  }

  return 0;
}

#endif