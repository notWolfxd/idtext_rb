
#line 1 "ext/dtext/dtext.cpp.rl"
#include "dtext.h"
#include "url.h"

#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <regex>

#ifdef DEBUG
#undef g_debug
#define STRINGIFY(x) XSTRINGIFY(x)
#define XSTRINGIFY(x) #x
#define g_debug(fmt, ...) fprintf(stderr, "\x1B[1;32mDEBUG\x1B[0m %-28.28s %-24.24s " fmt "\n", __FILE__ ":" STRINGIFY(__LINE__), __func__, ##__VA_ARGS__)
#else
#undef g_debug
#define g_debug(...)
#endif

static const size_t MAX_STACK_DEPTH = 512;

// Strip qualifier from tag: "Artoria Pendragon (Lancer) (Fate)" -> "Artoria Pendragon (Lancer)"
static const std::regex tag_qualifier_regex("[ _]\\([^)]+?\\)$");

// Permitted HTML attribute names.
static const std::unordered_map<std::string_view, const std::unordered_set<std::string_view>> permitted_attribute_names = {
  { "thead",    { "align" } },
  { "tbody",    { "align" } },
  { "tr",       { "align" } },
  { "td",       { "align", "colspan", "rowspan" } },
  { "th",       { "align", "colspan", "rowspan" } },
  { "col",      { "align", "span" } },
  { "colgroup", {} },
};

// Permitted HTML attribute values.
static const std::unordered_set<std::string_view> align_values = { "left", "center", "right", "justify" };
static const std::unordered_map<std::string_view, std::function<bool(std::string_view)>> permitted_attribute_values = {
  { "align",   [](auto value) { return align_values.find(value) != align_values.end(); } },
  { "span",    [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
  { "colspan", [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
  { "rowspan", [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
};


#line 801 "ext/dtext/dtext.cpp.rl"



#line 47 "ext/dtext/dtext.cpp"
static const unsigned char _dtext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 10, 1, 11, 1, 
	12, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 1, 24, 1, 
	25, 1, 26, 1, 27, 1, 28, 1, 
	29, 1, 65, 1, 66, 1, 68, 1, 
	70, 1, 71, 1, 72, 1, 73, 1, 
	74, 1, 75, 1, 76, 1, 77, 1, 
	78, 1, 79, 1, 80, 1, 81, 1, 
	82, 1, 84, 1, 85, 1, 86, 1, 
	87, 1, 88, 1, 89, 1, 90, 1, 
	91, 1, 92, 1, 93, 1, 94, 1, 
	95, 1, 96, 1, 97, 1, 98, 1, 
	99, 1, 100, 1, 125, 1, 126, 1, 
	127, 1, 128, 1, 130, 1, 131, 1, 
	132, 1, 133, 1, 134, 1, 135, 1, 
	136, 1, 137, 1, 138, 1, 139, 1, 
	140, 1, 141, 1, 142, 1, 143, 1, 
	144, 1, 145, 1, 146, 1, 147, 1, 
	148, 1, 149, 1, 150, 1, 151, 1, 
	152, 1, 153, 1, 154, 1, 155, 1, 
	156, 1, 157, 1, 158, 1, 159, 1, 
	160, 1, 161, 1, 162, 1, 163, 1, 
	164, 1, 165, 1, 166, 1, 167, 1, 
	168, 1, 169, 1, 170, 1, 171, 1, 
	172, 1, 173, 1, 174, 1, 175, 1, 
	176, 1, 177, 1, 178, 1, 179, 1, 
	180, 1, 181, 1, 182, 1, 184, 1, 
	185, 1, 186, 1, 187, 1, 188, 1, 
	189, 1, 190, 1, 191, 1, 192, 1, 
	193, 1, 194, 1, 195, 1, 196, 1, 
	197, 1, 199, 1, 200, 1, 201, 1, 
	202, 1, 203, 1, 204, 1, 205, 2, 
	0, 1, 2, 0, 10, 2, 1, 11, 
	2, 1, 68, 2, 1, 69, 2, 1, 
	83, 2, 1, 93, 2, 1, 95, 2, 
	1, 101, 2, 1, 102, 2, 1, 103, 
	2, 1, 104, 2, 1, 105, 2, 1, 
	106, 2, 1, 107, 2, 1, 108, 2, 
	1, 109, 2, 1, 110, 2, 1, 111, 
	2, 1, 112, 2, 1, 113, 2, 1, 
	114, 2, 1, 115, 2, 1, 116, 2, 
	1, 117, 2, 1, 183, 2, 2, 3, 
	2, 2, 12, 2, 3, 4, 2, 3, 
	5, 2, 3, 6, 2, 3, 7, 2, 
	3, 11, 2, 3, 14, 2, 3, 65, 
	2, 3, 66, 2, 3, 118, 2, 3, 
	119, 2, 3, 120, 2, 3, 129, 2, 
	3, 198, 2, 4, 5, 2, 5, 7, 
	2, 5, 11, 2, 6, 7, 2, 7, 
	11, 2, 7, 121, 2, 7, 122, 2, 
	9, 123, 2, 9, 124, 2, 13, 67, 
	2, 14, 164, 2, 14, 166, 2, 14, 
	167, 2, 14, 169, 2, 14, 171, 2, 
	14, 172, 2, 14, 174, 2, 17, 0, 
	2, 17, 1, 2, 17, 3, 2, 17, 
	30, 2, 17, 31, 2, 17, 32, 2, 
	17, 33, 2, 17, 34, 2, 17, 35, 
	2, 17, 36, 2, 17, 37, 2, 17, 
	38, 2, 17, 39, 2, 17, 40, 2, 
	17, 41, 2, 17, 42, 2, 17, 43, 
	2, 17, 44, 2, 17, 45, 2, 17, 
	46, 2, 17, 48, 2, 17, 51, 2, 
	17, 60, 2, 17, 61, 2, 17, 62, 
	2, 17, 63, 2, 17, 64, 3, 0, 
	1, 83, 3, 0, 1, 95, 3, 0, 
	1, 183, 3, 1, 2, 3, 3, 3, 
	4, 5, 3, 3, 6, 7, 3, 3, 
	7, 11, 3, 3, 14, 164, 3, 3, 
	14, 166, 3, 3, 14, 167, 3, 3, 
	14, 169, 3, 3, 14, 171, 3, 3, 
	14, 172, 3, 3, 14, 174, 3, 3, 
	66, 13, 3, 5, 7, 11, 3, 6, 
	7, 11, 3, 6, 7, 121, 3, 6, 
	7, 122, 3, 8, 9, 123, 3, 8, 
	9, 124, 3, 17, 0, 30, 3, 17, 
	0, 31, 3, 17, 0, 32, 3, 17, 
	0, 33, 3, 17, 0, 34, 3, 17, 
	0, 35, 3, 17, 0, 36, 3, 17, 
	0, 37, 3, 17, 0, 38, 3, 17, 
	0, 39, 3, 17, 0, 40, 3, 17, 
	0, 41, 3, 17, 0, 42, 3, 17, 
	0, 43, 3, 17, 0, 44, 3, 17, 
	0, 45, 3, 17, 0, 46, 3, 17, 
	0, 63, 3, 17, 1, 52, 3, 17, 
	2, 3, 3, 17, 3, 47, 3, 17, 
	3, 49, 3, 17, 11, 53, 3, 17, 
	11, 54, 3, 17, 11, 55, 3, 17, 
	11, 57, 3, 17, 13, 50, 4, 3, 
	6, 7, 11, 4, 17, 0, 1, 64, 
	4, 17, 0, 13, 50, 4, 17, 2, 
	3, 47, 4, 17, 2, 13, 50, 4, 
	17, 11, 1, 56, 4, 17, 11, 1, 
	58, 4, 17, 11, 1, 59, 5, 17, 
	11, 0, 1, 56, 5, 17, 11, 0, 
	1, 59
};

static const short _dtext_cond_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 3, 3, 3, 3, 4, 
	4, 4, 4, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 7, 7, 7, 7, 7, 7, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 13, 19, 20, 40, 
	60, 81, 102, 125, 148, 170, 196, 220, 
	245, 266, 293, 314, 335, 358, 381, 403, 
	429, 453, 478, 505, 526, 550, 551, 554, 
	556, 558, 561, 565, 568, 572, 573, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 586, 586, 586, 586, 
	586, 586, 586, 586, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 589, 604, 624, 
	644, 644, 644, 644, 644, 644, 644, 644, 
	644, 644, 644
};

static const char _dtext_cond_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 4, 6, 1, 20, 20, 
	21, 21, 23, 23, 22, 26, 24, 25, 
	21, 27, 21, 21, 23, 23, 22, 26, 
	24, 25, 27, 21, 24, 1, 3, 2, 
	2, 3, 4, 3, 4, 1, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 15, 20, 20, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
};

static const short _dtext_cond_keys[] = {
	62, 62, 93, 93, 93, 93, 62, 62, 
	62, 62, 93, 93, 93, 93, 93, 93, 
	93, 93, -128, -1, 1, 8, 14, 31, 
	33, 127, -128, -1, 1, 9, 11, 12, 
	14, 61, 62, 62, 63, 127, -128, -65, 
	-128, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -100, -99, -99, 
	-98, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -84, -83, -83, -82, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -128, -127, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -126, -125, -121, 
	-120, -111, -110, -109, -108, -100, -99, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -69, -68, -68, -67, -67, -66, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -120, -119, -119, -118, -68, -67, -67, 
	-66, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -100, -99, -99, 
	-98, -97, -96, -96, -95, -94, -93, -93, 
	-92, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -100, 
	-99, -99, -98, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -84, -83, -83, 
	-82, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -128, -127, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -126, 
	-125, -121, -120, -111, -110, -109, -108, -100, 
	-99, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -69, -68, -68, -67, -67, 
	-66, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -120, -119, -119, -118, -68, 
	-67, -67, -66, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -100, -99, -99, 
	-98, -97, -96, -96, -95, -94, -93, -93, 
	-92, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 99, 100, 100, 101, 114, 115, 115, 
	116, 122, 127, 127, -128, -65, -128, -100, 
	-99, -99, -98, -65, -128, -84, -82, -65, 
	-128, -128, -127, -65, -125, -121, -110, -109, 
	-99, -65, -128, -69, -68, -68, -67, -67, 
	-66, -65, -128, -120, -118, -68, -66, -65, 
	-128, -100, -98, -97, -95, -94, -92, -65, 
	-128, -65, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	1, 8, 14, 31, 48, 57, 65, 90, 
	97, 122, 127, 127, 60, 60, 64, 64, 
	64, 64, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	1, 8, 14, 31, 46, 46, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	0
};

static const char _dtext_cond_spaces[] = {
	4, 4, 2, 3, 2, 3, 4, 3, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0
};

static const short _dtext_key_offsets[] = {
	0, 0, 4, 10, 16, 18, 20, 22, 
	24, 26, 27, 29, 30, 34, 36, 38, 
	40, 42, 43, 49, 51, 53, 55, 57, 
	59, 60, 62, 63, 65, 67, 69, 71, 
	72, 77, 80, 82, 84, 86, 88, 90, 
	92, 94, 96, 98, 99, 103, 107, 109, 
	113, 116, 124, 131, 135, 139, 141, 143, 
	147, 154, 158, 164, 166, 168, 170, 172, 
	174, 178, 185, 189, 195, 197, 199, 201, 
	203, 205, 207, 208, 212, 214, 216, 218, 
	220, 222, 224, 227, 228, 232, 233, 235, 
	246, 257, 261, 265, 267, 271, 274, 282, 
	289, 291, 293, 297, 304, 308, 314, 316, 
	318, 320, 322, 324, 328, 335, 339, 345, 
	347, 349, 351, 353, 355, 357, 358, 360, 
	362, 364, 366, 367, 369, 371, 373, 375, 
	377, 379, 382, 383, 387, 388, 389, 399, 
	401, 403, 406, 409, 412, 416, 426, 430, 
	440, 441, 443, 444, 447, 449, 451, 453, 
	455, 456, 457, 459, 460, 463, 465, 467, 
	469, 471, 472, 480, 481, 482, 483, 484, 
	485, 486, 487, 488, 490, 492, 494, 498, 
	502, 508, 514, 516, 517, 521, 523, 525, 
	527, 529, 531, 533, 536, 540, 541, 543, 
	545, 547, 549, 550, 556, 558, 559, 561, 
	563, 565, 567, 569, 571, 574, 575, 577, 
	579, 581, 583, 584, 585, 589, 593, 595, 
	597, 599, 601, 602, 604, 606, 608, 610, 
	616, 617, 618, 619, 620, 624, 628, 630, 
	632, 634, 636, 637, 639, 641, 643, 645, 
	651, 652, 653, 654, 657, 662, 673, 685, 
	687, 689, 691, 693, 695, 697, 699, 701, 
	703, 704, 706, 708, 710, 712, 714, 715, 
	717, 719, 721, 723, 724, 726, 728, 730, 
	732, 734, 736, 739, 740, 742, 744, 746, 
	750, 753, 761, 768, 770, 772, 774, 776, 
	778, 780, 781, 783, 785, 796, 807, 818, 
	828, 830, 832, 834, 836, 838, 839, 841, 
	843, 845, 847, 849, 851, 854, 855, 857, 
	859, 861, 865, 868, 876, 883, 885, 887, 
	889, 891, 893, 895, 896, 897, 898, 908, 
	910, 912, 915, 918, 921, 925, 935, 939, 
	940, 941, 946, 948, 950, 953, 957, 960, 
	966, 970, 976, 984, 986, 1014, 1016, 1018, 
	1021, 1025, 1028, 1034, 1038, 1044, 1052, 1054, 
	1082, 1106, 1108, 1110, 1113, 1117, 1120, 1126, 
	1130, 1136, 1144, 1146, 1148, 1150, 1152, 1155, 
	1156, 1157, 1171, 1173, 1188, 1190, 1192, 1209, 
	1211, 1213, 1216, 1219, 1240, 1243, 1255, 1259, 
	1263, 1268, 1270, 1272, 1273, 1277, 1282, 1284, 
	1286, 1288, 1291, 1292, 1293, 1297, 1298, 1299, 
	1309, 1316, 1323, 1328, 1337, 1349, 1353, 1354, 
	1360, 1366, 1372, 1373, 1385, 1394, 1401, 1408, 
	1415, 1423, 1437, 1443, 1444, 1458, 1472, 1486, 
	1493, 1500, 1507, 1514, 1520, 1521, 1525, 1529, 
	1531, 1542, 1545, 1556, 1565, 1573, 1580, 1587, 
	1594, 1601, 1607, 1608, 1617, 1622, 1627, 1629, 
	1630, 1635, 1636, 1637, 1638, 1652, 1660, 1674, 
	1686, 1694, 1698, 1706, 1714, 1722, 1729, 1730, 
	1731, 1740, 1756, 1766, 1782, 1796, 1806, 1815, 
	1816, 1820, 1830, 1839, 1848, 1857, 1866, 1875, 
	1886, 1896, 1905, 1915, 1924, 1933, 1950, 1959, 
	1968, 1977, 1986, 1990, 1998, 2007, 2015, 2023, 
	2032, 2033, 2037, 2038, 2039, 2040, 2046, 2052, 
	2058, 2064, 2070, 2076, 2082, 2088, 2094, 2100, 
	2106, 2107, 2113, 2119, 2125, 2131, 2137, 2143, 
	2149, 2155, 2161, 2167, 2173, 2174, 2180, 2186, 
	2192, 2198, 2204, 2210, 2216, 2222, 2228, 2234, 
	2240, 2241, 2247, 2255, 2261, 2267, 2273, 2279, 
	2285, 2291, 2297, 2303, 2309, 2315, 2316, 2322, 
	2328, 2334, 2340, 2346, 2352, 2358, 2364, 2370, 
	2376, 2382, 2383, 2384, 2398, 2400, 2415, 2417, 
	2419, 2436, 2438, 2440, 2443, 2446, 2467, 2470, 
	2482, 2486, 2490, 2495, 2497, 2499, 2501, 2504, 
	2508, 2511, 2517, 2521, 2527, 2535, 2537, 2565, 
	2567, 2569, 2572, 2576, 2579, 2585, 2589, 2595, 
	2603, 2605, 2633, 2657, 2659, 2661, 2664, 2668, 
	2671, 2677, 2681, 2687, 2695, 2697, 2699, 2701, 
	2703, 2705, 2707, 2709, 2711, 2712, 2713, 2719, 
	2725, 2731, 2737, 2743, 2749, 2755, 2761, 2767, 
	2773, 2779, 2780, 2786, 2793, 2795, 2797, 2804, 
	2811, 2818, 2825, 2832, 2839, 2846, 2853, 2860, 
	2863, 2864, 2870, 2876, 2882, 2888, 2894, 2900, 
	2906, 2912, 2918, 2924, 2925, 2931, 2937, 2943, 
	2949, 2955, 2961, 2967, 2973, 2979, 2985, 2991, 
	2992, 2998, 3004, 3010, 3016, 3022, 3028, 3034, 
	3040, 3046, 3052, 3058, 3059, 3065, 3071, 3077, 
	3083, 3089, 3095, 3101, 3107, 3113, 3119, 3125, 
	3126, 3132, 3138, 3144, 3150, 3156, 3162, 3168, 
	3174, 3180, 3186, 3192, 3198, 3200, 3202, 3204, 
	3206, 3207, 3208, 3214, 3220, 3226, 3232, 3238, 
	3244, 3250, 3256, 3262, 3268, 3274, 3276, 3278, 
	3280, 3282, 3284, 3286, 3288, 3290, 3292, 3294, 
	3295, 3296, 3302, 3308, 3314, 3320, 3326, 3332, 
	3338, 3344, 3350, 3356, 3362, 3364, 3366, 3368, 
	3370, 3372, 3374, 3376, 3378, 3380, 3382, 3383, 
	3384, 3390, 3396, 3402, 3408, 3414, 3420, 3426, 
	3432, 3438, 3444, 3450, 3451, 3457, 3459, 3461, 
	3467, 3473, 3479, 3485, 3491, 3497, 3503, 3509, 
	3515, 3521, 3524, 3530, 3536, 3542, 3548, 3554, 
	3560, 3566, 3572, 3578, 3584, 3590, 3592, 3594, 
	3596, 3598, 3600, 3601, 3602, 3608, 3614, 3620, 
	3626, 3632, 3638, 3644, 3650, 3656, 3662, 3668, 
	3669, 3675, 3681, 3687, 3693, 3699, 3705, 3711, 
	3717, 3723, 3729, 3735, 3739, 3740, 3744, 3749, 
	3751, 3753, 3755, 3758, 3759, 3760, 3764, 3765, 
	3789, 3795, 3799, 3807, 3813, 3819, 3825, 3831, 
	3835, 3843, 3849, 3857, 3863, 3869, 3875, 3881, 
	3887, 3899, 3905, 3911, 3917, 3923, 3929, 3940, 
	3946, 3950, 3956, 3962, 3968, 3974, 3980, 3986, 
	3992, 3998, 4004, 4010, 4021, 4027, 4033, 4039, 
	4045, 4051, 4057, 4063, 4067, 4083, 4089, 4095, 
	4101, 4107, 4113, 4117, 4123, 4129, 4135, 4139, 
	4145, 4151, 4157, 4161, 4169, 4175, 4181, 4187, 
	4193, 4197, 4205, 4211, 4218, 4225, 4237, 4247, 
	4251, 4255, 4263, 4269, 4276, 4283, 4287, 4293, 
	4299, 4305, 4311, 4317, 4323, 4330, 4337, 4341, 
	4347, 4355, 4361, 4367, 4374, 4379, 4384, 4391, 
	4398, 4404, 4409, 4415, 4418, 4422, 4429, 4436, 
	4442, 4448, 4454, 4461, 4466, 4471, 4478, 4483, 
	4489, 4498, 4504, 4511, 4518, 4525, 4532, 4539, 
	4547, 4553, 4559, 4564, 4570, 4575, 4579, 4585, 
	4591, 4597, 4603, 4609, 4615, 4619, 4623, 4629, 
	4635, 4641, 4647, 4651, 4657, 4663, 4669, 4675, 
	4681, 4687, 4693, 4697, 4713, 4719, 4723, 4729, 
	4735, 4742, 4749, 4761, 4769, 4777, 4783, 4789, 
	4795, 4798, 4799, 4801, 4803, 4805, 4806, 4812, 
	4822, 4831, 4837, 4844, 4851, 4858, 4864, 4872, 
	4880, 4888, 4897, 4904, 4911, 4919, 4926, 4932, 
	4937, 4940, 4945, 4954, 4960, 4967, 4975, 4982, 
	4989, 4996, 5004, 5010, 5016, 5021, 5027, 5033, 
	5039, 5045, 5052, 5057, 5062, 5069, 5074, 5082, 
	5090, 5098, 5104, 5109, 5118, 5124, 5131, 5138, 
	5145, 5153, 5159, 5165, 5170, 5176, 5182, 5188, 
	5194, 5201, 5206, 5211, 5218, 5223, 5229, 5235, 
	5241, 5248, 5253, 5258, 5265, 5272, 5278, 5288, 
	5295, 5303, 5311, 5319, 5328, 5335, 5342, 5348, 
	5355, 5360, 5366, 5372, 5375, 5376, 5378, 5380, 
	5382, 5383, 5390, 5398, 5406, 5414, 5421, 5423, 
	5425, 5427, 5430, 5431, 5432, 5436, 5437, 5450, 
	5460, 5470, 5478, 5490, 5505, 5512, 5514, 5523, 
	5532, 5541, 5543, 5558, 5571, 5581, 5591, 5601, 
	5612, 5629, 5638, 5640, 5657, 5674, 5691, 5701, 
	5711, 5721, 5731, 5740, 5745, 5752, 5759, 5765, 
	5779, 5785, 5799, 5812, 5823, 5833, 5843, 5853, 
	5863, 5872, 5877, 5890, 5898, 5906, 5912, 5917, 
	5925, 5930, 5935, 5951, 5954, 5958, 5959, 5964, 
	5966, 5968, 5970, 5972, 5973, 5974, 5976, 5980, 
	5982, 5984, 5986, 5987, 5988, 5992, 5997, 6003, 
	6006, 6010, 6015, 6021, 6026, 6028, 6030, 6032, 
	6035, 6036, 6037, 6041, 6042, 6047, 6049, 6051, 
	6053, 6055, 6057, 6059, 6061, 6063, 6064, 6065, 
	6069, 6071, 6073, 6075, 6077, 6078, 6082, 6084, 
	6088, 6091, 6099, 6106, 6108, 6110, 6114, 6121, 
	6125, 6131, 6135, 6136, 6138, 6140, 6142, 6144, 
	6148, 6155, 6159, 6165, 6167, 6169, 6171, 6174, 
	6175, 6176, 6180, 6185, 6186, 6188, 6190, 6192, 
	6194, 6196, 6198, 6199, 6204, 6206, 6208, 6210, 
	6212, 6214, 6217, 6218, 6220, 6222, 6224, 6226, 
	6227, 6229, 6230, 6231, 6239, 6248, 6250, 6280, 
	6310, 6342, 6374, 6407, 6440, 6473, 6515, 6549, 
	6583, 6615, 6650, 6682, 6714, 6747, 6780, 6813, 
	6855, 6889, 6923, 6958, 6990, 7022, 7024, 7027, 
	7031, 7034, 7040, 7044, 7050, 7058, 7060, 7080, 
	7081, 7083, 7085, 7087, 7089, 7090, 7091, 7093, 
	7095, 7097, 7099, 7100, 7101, 7103, 7105, 7107, 
	7109, 7111, 7113, 7115, 7116, 7117, 7119, 7121, 
	7123, 7125, 7127, 7129, 7131, 7132, 7136, 7138, 
	7140, 7142, 7144, 7146, 7148, 7150, 7151, 7159, 
	7161, 7163, 7165, 7166, 7168, 7170, 7172, 7173, 
	7175, 7177, 7179, 7180, 7181, 7183, 7185, 7190, 
	7198, 7207, 7210, 7220, 7223, 7227, 7230, 7233, 
	7237, 7246, 7248, 7250, 7252, 7254, 7257, 7265, 
	7274, 7277, 7287, 7290, 7294, 7297, 7300, 7304, 
	7313, 7321, 7323, 7325, 7327, 7330, 7338, 7347, 
	7350, 7360, 7363, 7367, 7370, 7373, 7377, 7386, 
	7389, 7397, 7406, 7409, 7419, 7422, 7426, 7429, 
	7432, 7436, 7445, 7450, 7458, 7467, 7470, 7480, 
	7483, 7487, 7490, 7493, 7497, 7506, 7508, 7510, 
	7513, 7521, 7530, 7533, 7543, 7546, 7550, 7553, 
	7556, 7560, 7569, 7572, 7580, 7589, 7592, 7602, 
	7605, 7609, 7612, 7615, 7619, 7628, 7632, 7634, 
	7636, 7638, 7640, 7642, 7644, 7646, 7647, 7655, 
	7657, 7659, 7661, 7662, 7664, 7666, 7668, 7669, 
	7671, 7673, 7675, 7676, 7677, 7679, 7681, 7686, 
	7694, 7703, 7706, 7716, 7719, 7723, 7726, 7729, 
	7733, 7742, 7744, 7746, 7748, 7750, 7753, 7761, 
	7770, 7773, 7783, 7786, 7790, 7793, 7796, 7800, 
	7809, 7817, 7819, 7821, 7823, 7826, 7834, 7843, 
	7846, 7856, 7859, 7863, 7866, 7869, 7873, 7882, 
	7885, 7893, 7902, 7905, 7915, 7918, 7922, 7925, 
	7928, 7932, 7941, 7946, 7954, 7963, 7966, 7976, 
	7979, 7983, 7986, 7989, 7993, 8002, 8004, 8006, 
	8009, 8017, 8026, 8029, 8039, 8042, 8046, 8049, 
	8052, 8056, 8065, 8068, 8076, 8085, 8088, 8098, 
	8101, 8105, 8108, 8111, 8115, 8124, 8134, 8138, 
	8144, 8146, 8149, 8152, 8157, 8173, 8176, 8180, 
	8184, 8187, 8190, 8194, 8197, 8199, 8201, 8215, 
	8216, 8219, 8230, 8239, 8303, 8305, 8311, 8313, 
	8315, 8319, 8323, 8333, 8335, 8341, 8342, 8345, 
	8350, 8352, 8354, 8356, 8357, 8385, 8413, 8437, 
	8458, 8463, 8471, 8477, 8483, 8489, 8495, 8501, 
	8507, 8513, 8519, 8525, 8531, 8537, 8543, 8550, 
	8557, 8567, 8577, 8587, 8597, 8607, 8616, 8622, 
	8628, 8634, 8640, 8646, 8652, 8658, 8664, 8670, 
	8676, 8678, 8678, 8688, 8698, 8708, 8717, 8723, 
	8729, 8735, 8741, 8747, 8753, 8759, 8765, 8771, 
	8777, 8779, 8779, 8789, 8799, 8809, 8819, 8829, 
	8839, 8848, 8854, 8860, 8866, 8872, 8878, 8884, 
	8890, 8896, 8902, 8908, 8910, 8910, 8920, 8930, 
	8940, 8950, 8959, 8966, 8974, 8981, 8988, 8995, 
	9002, 9009, 9016, 9023, 9030, 9037, 9040, 9041, 
	9051, 9061, 9071, 9081, 9090, 9096, 9102, 9108, 
	9114, 9120, 9126, 9132, 9138, 9144, 9150, 9152, 
	9152, 9162, 9172, 9182, 9193, 9214, 9242, 9270, 
	9294, 9299, 9308, 9318, 9328, 9337, 9343, 9349, 
	9355, 9361, 9367, 9373, 9379, 9385, 9391, 9397, 
	9399, 9399, 9411, 9421, 9431, 9441, 9450, 9452, 
	9464, 9474, 9483, 9489, 9495, 9501, 9507, 9513, 
	9519, 9525, 9531, 9537, 9543, 9545, 9545, 9555, 
	9564, 9570, 9576, 9582, 9588, 9594, 9600, 9606, 
	9612, 9618, 9624, 9626, 9626, 9636, 9646, 9656, 
	9666, 9676, 9685, 9691, 9697, 9703, 9709, 9715, 
	9721, 9727, 9733, 9739, 9745, 9747, 9747, 9757, 
	9767, 9777, 9787, 9797, 9806, 9812, 9818, 9824, 
	9830, 9836, 9842, 9848, 9854, 9860, 9866, 9868, 
	9868, 9880, 9890, 9899, 9905, 9911, 9917, 9923, 
	9929, 9935, 9941, 9947, 9953, 9959, 9961, 9961, 
	9967, 9973, 9979, 9985, 9991, 9997, 10003, 10009, 
	10015, 10021, 10023, 10023, 10029, 10035, 10041, 10047, 
	10053, 10059, 10065, 10071, 10077, 10083, 10085, 10085, 
	10095, 10105, 10115, 10124, 10131, 10133, 10140, 10147, 
	10154, 10161, 10168, 10175, 10182, 10189, 10196, 10199, 
	10200, 10210, 10220, 10230, 10239, 10245, 10251, 10257, 
	10263, 10269, 10275, 10281, 10287, 10293, 10299, 10301, 
	10301, 10307, 10313, 10319, 10325, 10331, 10337, 10343, 
	10349, 10355, 10361, 10363, 10363, 10373, 10383, 10393, 
	10402, 10408, 10414, 10420, 10426, 10432, 10438, 10444, 
	10450, 10456, 10462, 10464, 10464, 10489, 10491, 10492, 
	10497, 10501, 10506, 10511, 10515, 10519, 10525, 10530, 
	10535, 10541, 10542, 10565, 10569, 10593, 10615, 10645, 
	10675, 10679, 10681, 10682, 10683, 10687, 10689, 10690, 
	10691, 10693, 10698
};

static const short _dtext_trans_keys[] = {
	0, 9, 10, 32, 0, 9, 10, 32, 
	60, 91, 67, 72, 84, 99, 104, 116, 
	69, 101, 78, 110, 84, 116, 69, 101, 
	82, 114, 62, 82, 114, 62, 0, 9, 
	10, 32, 65, 97, 66, 98, 76, 108, 
	69, 101, 62, 67, 72, 84, 99, 104, 
	116, 69, 101, 78, 110, 84, 116, 69, 
	101, 82, 114, 93, 82, 114, 93, 65, 
	97, 66, 98, 76, 108, 69, 101, 93, 
	0, 9, 10, 13, 32, 9, 32, 42, 
	76, 108, 79, 111, 67, 99, 75, 107, 
	81, 113, 85, 117, 79, 111, 84, 116, 
	69, 101, 62, 69, 79, 101, 111, 68, 
	76, 100, 108, 69, 101, 9, 32, 61, 
	62, 9, 32, 61, 9, 32, 48, 57, 
	65, 90, 97, 122, 62, 48, 57, 65, 
	90, 97, 122, 0, 9, 10, 32, 0, 
	9, 10, 32, 79, 111, 82, 114, 9, 
	32, 61, 62, 0, 9, 10, 13, 32, 
	61, 62, 0, 10, 13, 62, 0, 9, 
	10, 13, 32, 62, 88, 120, 80, 112, 
	65, 97, 78, 110, 68, 100, 9, 32, 
	61, 62, 0, 9, 10, 13, 32, 61, 
	62, 0, 10, 13, 62, 0, 9, 10, 
	13, 32, 62, 79, 111, 68, 100, 84, 
	116, 69, 101, 88, 120, 84, 116, 62, 
	0, 9, 10, 32, 80, 112, 79, 111, 
	73, 105, 76, 108, 69, 101, 82, 114, 
	62, 83, 115, 62, 65, 78, 97, 110, 
	62, 35, 46, 33, 35, 38, 45, 95, 
	47, 58, 65, 90, 97, 122, 33, 35, 
	38, 46, 95, 45, 58, 65, 90, 97, 
	122, 69, 79, 101, 111, 68, 76, 100, 
	108, 69, 101, 9, 32, 61, 93, 9, 
	32, 61, 9, 32, 48, 57, 65, 90, 
	97, 122, 93, 48, 57, 65, 90, 97, 
	122, 79, 111, 82, 114, 9, 32, 61, 
	93, 0, 9, 10, 13, 32, 61, 93, 
	0, 10, 13, 93, 0, 9, 10, 13, 
	32, 93, 88, 120, 80, 112, 65, 97, 
	78, 110, 68, 100, 9, 32, 61, 93, 
	0, 9, 10, 13, 32, 61, 93, 0, 
	10, 13, 93, 0, 9, 10, 13, 32, 
	93, 79, 111, 68, 100, 84, 116, 69, 
	101, 88, 120, 84, 116, 93, 85, 117, 
	79, 111, 84, 116, 69, 101, 93, 80, 
	112, 79, 111, 73, 105, 76, 108, 69, 
	101, 82, 114, 83, 93, 115, 93, 65, 
	78, 97, 110, 93, 96, 0, 9, 10, 
	32, 48, 57, 65, 90, 97, 122, 0, 
	10, 0, 10, 0, 10, 96, 0, 10, 
	96, 0, 10, 96, 0, 9, 10, 32, 
	0, 9, 10, 32, 48, 57, 65, 90, 
	97, 122, 0, 9, 10, 32, 66, 69, 
	73, 83, 85, 98, 101, 105, 115, 117, 
	62, 77, 109, 62, 62, 84, 116, 82, 
	114, 79, 111, 78, 110, 71, 103, 62, 
	62, 77, 109, 62, 62, 84, 116, 82, 
	114, 79, 111, 78, 110, 71, 103, 62, 
	66, 73, 83, 85, 98, 105, 115, 117, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	-128, -65, -128, -65, -128, -65, 0, 9, 
	10, 32, 0, 9, 10, 32, 0, 9, 
	10, 32, 60, 91, 72, 83, 84, 104, 
	115, 116, 82, 114, 62, 0, 9, 10, 
	32, 80, 112, 79, 111, 73, 105, 76, 
	108, 69, 101, 82, 114, 62, 83, 115, 
	0, 9, 10, 32, 62, 65, 97, 66, 
	98, 76, 108, 69, 101, 62, 72, 83, 
	84, 104, 115, 116, 82, 114, 93, 80, 
	112, 79, 111, 73, 105, 76, 108, 69, 
	101, 82, 114, 83, 93, 115, 93, 65, 
	97, 66, 98, 76, 108, 69, 101, 93, 
	47, 67, 84, 99, 116, 69, 79, 101, 
	111, 78, 110, 84, 116, 69, 101, 82, 
	114, 62, 76, 108, 79, 111, 82, 114, 
	2366, 2622, 68, 72, 78, 100, 104, 110, 
	62, 62, 62, 47, 67, 84, 99, 116, 
	69, 79, 101, 111, 78, 110, 84, 116, 
	69, 101, 82, 114, 93, 76, 108, 79, 
	111, 82, 114, 2397, 2653, 68, 72, 78, 
	100, 104, 110, 93, 93, 93, 9, 32, 
	42, 0, 9, 10, 13, 32, 47, 67, 
	72, 78, 83, 84, 99, 104, 110, 115, 
	116, 66, 67, 69, 81, 83, 84, 98, 
	99, 101, 113, 115, 116, 76, 108, 79, 
	111, 67, 99, 75, 107, 81, 113, 85, 
	117, 79, 111, 84, 116, 69, 101, 3165, 
	88, 120, 80, 112, 65, 97, 78, 110, 
	68, 100, 3646, 85, 117, 79, 111, 84, 
	116, 69, 101, 3134, 80, 112, 79, 111, 
	73, 105, 76, 108, 69, 101, 82, 114, 
	62, 83, 115, 62, 79, 111, 68, 100, 
	69, 101, 9, 32, 61, 62, 9, 32, 
	61, 9, 32, 48, 57, 65, 90, 97, 
	122, 62, 48, 57, 65, 90, 97, 122, 
	79, 111, 68, 100, 84, 116, 69, 101, 
	88, 120, 84, 116, 62, 49, 54, 35, 
	46, 33, 35, 38, 45, 95, 47, 58, 
	65, 90, 97, 122, 33, 35, 38, 46, 
	95, 45, 58, 65, 90, 97, 122, 47, 
	67, 72, 78, 83, 84, 99, 104, 110, 
	115, 116, 67, 69, 81, 83, 84, 99, 
	101, 113, 115, 116, 88, 120, 80, 112, 
	65, 97, 78, 110, 68, 100, 3677, 80, 
	112, 79, 111, 73, 105, 76, 108, 69, 
	101, 82, 114, 83, 93, 115, 93, 79, 
	111, 68, 100, 69, 101, 9, 32, 61, 
	93, 9, 32, 61, 9, 32, 48, 57, 
	65, 90, 97, 122, 93, 48, 57, 65, 
	90, 97, 122, 79, 111, 68, 100, 84, 
	116, 69, 101, 88, 120, 84, 116, 93, 
	96, 96, 0, 9, 10, 32, 48, 57, 
	65, 90, 97, 122, 0, 10, 0, 10, 
	0, 10, 96, 0, 10, 96, 0, 10, 
	96, 0, 9, 10, 32, 0, 9, 10, 
	32, 48, 57, 65, 90, 97, 122, 0, 
	9, 10, 32, 34, 58, 35, 47, 72, 
	91, 104, -128, -65, -128, -65, -99, -128, 
	-65, -128, -84, -82, -65, -128, -127, -65, 
	-125, -121, -110, -109, -99, -65, -68, -67, 
	-128, -65, -128, -120, -118, -68, -66, -65, 
	-128, -100, -98, -97, -95, -94, -92, -65, 
	-128, -65, -30, -29, -17, 32, 34, 35, 
	39, 44, 46, 60, 62, 63, 91, 93, 
	-128, -63, -62, -33, -32, -18, -16, -12, 
	-11, 0, 9, 13, 58, 59, -128, -65, 
	-128, -65, -99, -128, -65, -128, -84, -82, 
	-65, -128, -127, -65, -125, -121, -110, -109, 
	-99, -65, -68, -67, -128, -65, -128, -120, 
	-118, -68, -66, -65, -128, -100, -98, -97, 
	-95, -94, -92, -65, -128, -65, -30, -29, 
	-17, 32, 34, 35, 39, 44, 46, 60, 
	62, 63, 91, 93, -128, -63, -62, -33, 
	-32, -18, -16, -12, -11, 0, 9, 13, 
	58, 59, -30, -29, -17, 32, 34, 35, 
	39, 44, 46, 63, -128, -63, -62, -33, 
	-32, -18, -16, -12, -11, 0, 9, 13, 
	58, 59, -128, -65, -128, -65, -99, -128, 
	-65, -128, -84, -82, -65, -128, -127, -65, 
	-125, -121, -110, -109, -99, -65, -68, -67, 
	-128, -65, -128, -120, -118, -68, -66, -65, 
	-128, -100, -98, -97, -95, -94, -92, -65, 
	-128, -65, 84, 116, 84, 116, 80, 112, 
	58, 83, 115, 47, 47, 45, 95, -62, 
	-33, -32, -17, -16, -12, 48, 57, 65, 
	90, 97, 122, -128, -65, 45, 46, 95, 
	-62, -33, -32, -17, -16, -12, 48, 57, 
	65, 90, 97, 122, -128, -65, -128, -65, 
	-30, -29, -17, 45, 95, -62, -33, -32, 
	-18, -16, -12, 48, 57, 65, 90, 97, 
	122, -128, -65, -128, -65, -99, -128, -65, 
	-83, -128, -65, -30, -29, -17, 35, 46, 
	47, 58, 63, 95, -62, -33, -32, -18, 
	-16, -12, 45, 57, 65, 90, 97, 122, 
	-128, -127, -65, -128, -126, -125, -121, -120, 
	-111, -110, -109, -108, -100, -99, -65, -68, 
	-67, -128, -65, -119, -67, -128, -65, -99, 
	-96, -93, -128, -65, -128, -65, 48, 57, 
	58, 35, 47, 72, 104, 0, 32, 93, 
	9, 13, 84, 116, 84, 116, 80, 112, 
	58, 83, 115, 47, 47, 0, 32, 9, 
	13, 58, 91, 9, 32, 58, 60, 62, 
	92, 93, 124, 10, 13, 9, 32, 35, 
	93, 124, 10, 13, 9, 32, 35, 93, 
	124, 10, 13, 32, 93, 124, 9, 13, 
	9, 32, 35, 93, 124, 10, 13, 65, 
	90, 9, 32, 45, 93, 95, 124, 48, 
	57, 65, 90, 97, 122, 9, 32, 93, 
	124, 93, 9, 32, 93, 124, 10, 13, 
	9, 32, 93, 124, 10, 13, 9, 32, 
	93, 124, 10, 13, 93, 9, 32, 45, 
	93, 95, 124, 48, 57, 65, 90, 97, 
	122, 32, 45, 95, 48, 57, 65, 90, 
	97, 122, 9, 32, 35, 93, 124, 10, 
	13, 9, 32, 35, 93, 124, 10, 13, 
	9, 32, 35, 93, 124, 10, 13, 9, 
	32, 93, 124, 10, 13, 65, 90, 9, 
	32, 45, 93, 95, 124, 10, 13, 48, 
	57, 65, 90, 97, 122, 9, 32, 93, 
	124, 10, 13, 93, 9, 32, 45, 93, 
	95, 124, 10, 13, 48, 57, 65, 90, 
	97, 122, 9, 32, 45, 93, 95, 124, 
	10, 13, 48, 57, 65, 90, 97, 122, 
	9, 32, 45, 93, 95, 124, 10, 13, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	35, 93, 124, 10, 13, 9, 32, 62, 
	93, 124, 10, 13, 9, 32, 93, 95, 
	124, 10, 13, 9, 32, 60, 93, 124, 
	10, 13, 9, 32, 93, 124, 10, 13, 
	62, 9, 32, 35, 93, 9, 32, 35, 
	93, 65, 90, 9, 32, 45, 93, 95, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	93, 9, 32, 45, 93, 95, 48, 57, 
	65, 90, 97, 122, 32, 45, 95, 48, 
	57, 65, 90, 97, 122, 9, 32, 35, 
	58, 93, 124, 10, 13, 9, 32, 51, 
	93, 124, 10, 13, 9, 32, 35, 93, 
	124, 10, 13, 9, 32, 35, 93, 124, 
	10, 13, 9, 32, 35, 93, 124, 10, 
	13, 9, 32, 93, 124, 10, 13, 47, 
	95, 119, 124, 48, 57, 65, 90, 97, 
	122, 9, 32, 35, 93, 124, 9, 32, 
	35, 93, 124, 65, 90, 124, 9, 32, 
	35, 93, 124, 95, 124, 123, 0, 9, 
	32, 45, 58, 60, 62, 92, 124, 126, 
	10, 13, 123, 125, 0, 9, 32, 123, 
	124, 125, 10, 13, 0, 9, 32, 45, 
	58, 60, 62, 92, 123, 124, 125, 126, 
	10, 13, 0, 9, 32, 58, 60, 62, 
	92, 123, 124, 125, 10, 13, 0, 9, 
	32, 123, 124, 125, 10, 13, 9, 32, 
	124, 125, 0, 9, 10, 13, 32, 125, 
	11, 12, 0, 9, 10, 13, 32, 125, 
	11, 12, 0, 9, 10, 13, 32, 125, 
	11, 12, 0, 10, 13, 32, 125, 9, 
	12, 125, 125, 0, 9, 10, 13, 32, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 45, 58, 60, 62, 92, 123, 124, 
	125, 126, 11, 12, 0, 9, 10, 13, 
	32, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 45, 58, 60, 62, 92, 
	123, 124, 125, 126, 11, 12, 0, 9, 
	10, 13, 32, 58, 60, 62, 92, 123, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 124, 125, 11, 12, 125, 
	9, 32, 124, 125, 0, 9, 10, 13, 
	32, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 62, 125, 11, 12, 0, 
	9, 10, 13, 32, 95, 125, 11, 12, 
	0, 9, 10, 13, 32, 60, 125, 11, 
	12, 0, 9, 10, 13, 32, 124, 125, 
	11, 12, 0, 9, 10, 13, 32, 62, 
	125, 11, 12, 0, 9, 10, 13, 32, 
	58, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 123, 124, 125, 11, 12, 
	0, 9, 10, 13, 32, 51, 125, 11, 
	12, 0, 9, 10, 13, 32, 123, 124, 
	125, 11, 12, 0, 9, 10, 13, 32, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 47, 125, 11, 12, 0, 9, 10, 
	13, 32, 95, 119, 124, 125, 11, 12, 
	48, 57, 65, 90, 97, 122, 0, 9, 
	10, 13, 32, 124, 125, 11, 12, 0, 
	9, 10, 13, 32, 124, 125, 11, 12, 
	0, 9, 10, 13, 32, 95, 125, 11, 
	12, 0, 9, 10, 13, 32, 124, 125, 
	11, 12, 9, 32, 124, 125, 0, 9, 
	32, 123, 124, 125, 10, 13, 0, 9, 
	32, 58, 123, 124, 125, 10, 13, 0, 
	9, 32, 123, 124, 125, 10, 13, 0, 
	9, 32, 123, 124, 125, 10, 13, 95, 
	119, 124, 48, 57, 65, 90, 97, 122, 
	124, 9, 32, 124, 125, 95, 124, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 35, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 35, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	35, 48, 57, 65, 90, 97, 122, 45, 
	61, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 35, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 47, 47, 
	45, 95, -62, -33, -32, -17, -16, -12, 
	48, 57, 65, 90, 97, 122, -128, -65, 
	45, 46, 95, -62, -33, -32, -17, -16, 
	-12, 48, 57, 65, 90, 97, 122, -128, 
	-65, -128, -65, -30, -29, -17, 45, 95, 
	-62, -33, -32, -18, -16, -12, 48, 57, 
	65, 90, 97, 122, -128, -65, -128, -65, 
	-99, -128, -65, -83, -128, -65, -30, -29, 
	-17, 35, 46, 47, 58, 63, 95, -62, 
	-33, -32, -18, -16, -12, 45, 57, 65, 
	90, 97, 122, -128, -127, -65, -128, -126, 
	-125, -121, -120, -111, -110, -109, -108, -100, 
	-99, -65, -68, -67, -128, -65, -119, -67, 
	-128, -65, -99, -96, -93, -128, -65, -128, 
	-65, -128, -65, -128, -65, -99, -128, -65, 
	-128, -84, -82, -65, -128, -127, -65, -125, 
	-121, -110, -109, -99, -65, -68, -67, -128, 
	-65, -128, -120, -118, -68, -66, -65, -128, 
	-100, -98, -97, -95, -94, -92, -65, -128, 
	-65, -30, -29, -17, 32, 34, 35, 39, 
	44, 46, 60, 62, 63, 91, 93, -128, 
	-63, -62, -33, -32, -18, -16, -12, -11, 
	0, 9, 13, 58, 59, -128, -65, -128, 
	-65, -99, -128, -65, -128, -84, -82, -65, 
	-128, -127, -65, -125, -121, -110, -109, -99, 
	-65, -68, -67, -128, -65, -128, -120, -118, 
	-68, -66, -65, -128, -100, -98, -97, -95, 
	-94, -92, -65, -128, -65, -30, -29, -17, 
	32, 34, 35, 39, 44, 46, 60, 62, 
	63, 91, 93, -128, -63, -62, -33, -32, 
	-18, -16, -12, -11, 0, 9, 13, 58, 
	59, -30, -29, -17, 32, 34, 35, 39, 
	44, 46, 63, -128, -63, -62, -33, -32, 
	-18, -16, -12, -11, 0, 9, 13, 58, 
	59, -128, -65, -128, -65, -99, -128, -65, 
	-128, -84, -82, -65, -128, -127, -65, -125, 
	-121, -110, -109, -99, -65, -68, -67, -128, 
	-65, -128, -120, -118, -68, -66, -65, -128, 
	-100, -98, -97, -95, -94, -92, -65, -128, 
	-65, 48, 57, 65, 97, 67, 99, 84, 
	116, 73, 105, 79, 111, 78, 110, 32, 
	35, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 35, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 80, 112, 48, 57, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 65, 90, 97, 122, 
	47, 48, 57, 65, 90, 97, 122, 47, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 47, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 35, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 35, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 35, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	65, 73, 84, 97, 105, 116, 76, 108, 
	73, 105, 65, 97, 83, 115, 32, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 77, 109, 80, 112, 76, 108, 
	73, 105, 67, 99, 65, 97, 84, 116, 
	73, 105, 79, 111, 78, 110, 32, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 82, 114, 65, 97, 78, 110, 
	83, 115, 76, 108, 65, 97, 84, 116, 
	73, 105, 79, 111, 78, 110, 32, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 35, 48, 57, 65, 90, 97, 
	122, 80, 112, 48, 57, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 35, 82, 114, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 69, 101, 
	80, 112, 79, 111, 82, 114, 84, 116, 
	32, 35, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 35, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 93, 40, 35, 47, 72, 104, 
	0, 32, 41, 9, 13, 84, 116, 84, 
	116, 80, 112, 58, 83, 115, 47, 47, 
	0, 32, 9, 13, 58, 0, 10, 13, 
	66, 67, 69, 72, 73, 78, 81, 83, 
	84, 85, 93, 98, 99, 101, 104, 105, 
	110, 113, 115, 116, 117, 0, 10, 13, 
	82, 93, 114, 0, 10, 13, 93, 0, 
	10, 13, 69, 79, 93, 101, 111, 0, 
	10, 13, 78, 93, 110, 0, 10, 13, 
	84, 93, 116, 0, 10, 13, 69, 93, 
	101, 0, 10, 13, 82, 93, 114, 0, 
	10, 13, 93, 0, 10, 13, 68, 76, 
	93, 100, 108, 0, 10, 13, 69, 93, 
	101, 0, 10, 13, 71, 79, 93, 103, 
	111, 0, 10, 13, 82, 93, 114, 0, 
	10, 13, 79, 93, 111, 0, 10, 13, 
	85, 93, 117, 0, 10, 13, 80, 93, 
	112, 0, 10, 13, 82, 93, 114, 2397, 
	2653, -128, -1, 1, 9, 11, 12, 14, 
	92, 94, 127, 0, 10, 13, 88, 93, 
	120, 0, 10, 13, 80, 93, 112, 0, 
	10, 13, 65, 93, 97, 0, 10, 13, 
	78, 93, 110, 0, 10, 13, 68, 93, 
	100, 3677, -128, -1, 1, 9, 11, 12, 
	14, 92, 94, 127, 0, 10, 13, 82, 
	93, 114, 0, 10, 13, 93, 0, 10, 
	13, 79, 93, 111, 0, 10, 13, 68, 
	93, 100, 0, 10, 13, 84, 93, 116, 
	0, 10, 13, 69, 93, 101, 0, 10, 
	13, 88, 93, 120, 0, 10, 13, 84, 
	93, 116, 0, 10, 13, 85, 93, 117, 
	0, 10, 13, 79, 93, 111, 0, 10, 
	13, 84, 93, 116, 0, 10, 13, 69, 
	93, 101, 3165, -128, -1, 1, 9, 11, 
	12, 14, 92, 94, 127, 0, 10, 13, 
	80, 93, 112, 0, 10, 13, 79, 93, 
	111, 0, 10, 13, 73, 93, 105, 0, 
	10, 13, 76, 93, 108, 0, 10, 13, 
	69, 93, 101, 0, 10, 13, 82, 93, 
	114, 0, 10, 13, 83, 93, 115, 0, 
	10, 13, 93, 0, 10, 13, 65, 66, 
	68, 72, 78, 82, 93, 97, 98, 100, 
	104, 110, 114, 0, 10, 13, 66, 93, 
	98, 0, 10, 13, 76, 93, 108, 0, 
	10, 13, 79, 93, 111, 0, 10, 13, 
	68, 93, 100, 0, 10, 13, 89, 93, 
	121, 0, 10, 13, 93, 0, 10, 13, 
	69, 93, 101, 0, 10, 13, 65, 93, 
	97, 0, 10, 13, 68, 93, 100, 0, 
	10, 13, 93, 0, 10, 13, 82, 93, 
	114, 0, 10, 13, 76, 93, 108, 0, 
	10, 13, 82, 93, 114, 0, 10, 13, 
	93, 0, 10, 13, 69, 79, 93, 101, 
	111, 0, 10, 13, 78, 93, 110, 0, 
	10, 13, 84, 93, 116, 0, 10, 13, 
	69, 93, 101, 0, 10, 13, 82, 93, 
	114, 0, 10, 13, 93, 0, 10, 13, 
	68, 76, 93, 100, 108, 0, 10, 13, 
	69, 93, 101, 0, 9, 10, 13, 32, 
	61, 93, 0, 9, 10, 13, 32, 61, 
	93, 0, 9, 10, 13, 32, 93, 48, 
	57, 65, 90, 97, 122, 0, 10, 13, 
	93, 48, 57, 65, 90, 97, 122, 0, 
	9, 10, 32, 0, 9, 10, 32, 0, 
	10, 13, 71, 79, 93, 103, 111, 0, 
	10, 13, 82, 93, 114, 0, 9, 10, 
	13, 32, 61, 93, 0, 9, 10, 13, 
	32, 61, 93, 0, 10, 13, 93, 0, 
	9, 10, 13, 32, 93, 0, 10, 13, 
	88, 93, 120, 0, 10, 13, 80, 93, 
	112, 0, 10, 13, 65, 93, 97, 0, 
	10, 13, 78, 93, 110, 0, 10, 13, 
	68, 93, 100, 0, 9, 10, 13, 32, 
	61, 93, 0, 9, 10, 13, 32, 61, 
	93, 0, 10, 13, 93, 0, 9, 10, 
	13, 32, 93, 0, 10, 13, 82, 84, 
	93, 114, 116, 0, 10, 13, 84, 93, 
	116, 0, 10, 13, 80, 93, 112, 0, 
	10, 13, 58, 83, 93, 115, 0, 10, 
	13, 47, 93, 0, 10, 13, 47, 93, 
	0, 10, 13, 32, 93, 9, 12, 0, 
	10, 13, 32, 93, 9, 12, 0, 32, 
	40, 93, 9, 13, 0, 32, 93, 9, 
	13, 0, 32, 40, 93, 9, 13, 0, 
	10, 13, 0, 10, 13, 41, 0, 10, 
	13, 35, 47, 72, 104, 0, 10, 13, 
	32, 41, 9, 12, 0, 10, 13, 41, 
	84, 116, 0, 10, 13, 41, 84, 116, 
	0, 10, 13, 41, 80, 112, 0, 10, 
	13, 41, 58, 83, 115, 0, 10, 13, 
	41, 47, 0, 10, 13, 41, 47, 0, 
	10, 13, 32, 41, 9, 12, 0, 10, 
	13, 41, 58, 0, 32, 40, 93, 9, 
	13, 0, 32, 35, 47, 72, 93, 104, 
	9, 13, 0, 32, 41, 93, 9, 13, 
	0, 32, 40, 41, 93, 9, 13, 0, 
	10, 13, 32, 41, 9, 12, 0, 32, 
	84, 93, 116, 9, 13, 0, 32, 84, 
	93, 116, 9, 13, 0, 32, 80, 93, 
	112, 9, 13, 0, 32, 58, 83, 93, 
	115, 9, 13, 0, 32, 47, 93, 9, 
	13, 0, 32, 47, 93, 9, 13, 0, 
	32, 93, 9, 13, 0, 32, 58, 93, 
	9, 13, 0, 10, 13, 58, 93, 0, 
	10, 13, 93, 0, 10, 13, 79, 93, 
	111, 0, 10, 13, 68, 93, 100, 0, 
	10, 13, 84, 93, 116, 0, 10, 13, 
	69, 93, 101, 0, 10, 13, 88, 93, 
	120, 0, 10, 13, 84, 93, 116, 0, 
	10, 13, 93, 0, 9, 10, 32, 0, 
	10, 13, 85, 93, 117, 0, 10, 13, 
	79, 93, 111, 0, 10, 13, 84, 93, 
	116, 0, 10, 13, 69, 93, 101, 0, 
	10, 13, 93, 0, 10, 13, 80, 93, 
	112, 0, 10, 13, 79, 93, 111, 0, 
	10, 13, 73, 93, 105, 0, 10, 13, 
	76, 93, 108, 0, 10, 13, 69, 93, 
	101, 0, 10, 13, 82, 93, 114, 0, 
	10, 13, 83, 93, 115, 0, 10, 13, 
	93, 0, 10, 13, 65, 66, 68, 72, 
	78, 82, 93, 97, 98, 100, 104, 110, 
	114, 0, 10, 13, 69, 93, 101, 0, 
	10, 13, 93, 0, 10, 13, 82, 93, 
	114, 0, 10, 13, 76, 93, 108, 0, 
	9, 10, 13, 32, 61, 93, 0, 9, 
	10, 13, 32, 61, 93, 0, 9, 10, 
	13, 32, 34, 35, 39, 47, 72, 93, 
	104, 0, 10, 13, 35, 47, 72, 93, 
	104, 0, 10, 13, 32, 34, 93, 9, 
	12, 0, 9, 10, 13, 32, 93, 0, 
	9, 10, 13, 32, 40, 0, 9, 10, 
	13, 32, 91, 9, 32, 91, 47, 85, 
	117, 82, 114, 76, 108, 93, 0, 9, 
	10, 13, 32, 91, 0, 9, 10, 13, 
	32, 35, 47, 72, 91, 104, 0, 9, 
	10, 13, 32, 41, 91, 11, 12, 0, 
	32, 41, 47, 9, 13, 0, 32, 41, 
	85, 117, 9, 13, 0, 32, 41, 82, 
	114, 9, 13, 0, 32, 41, 76, 108, 
	9, 13, 0, 32, 41, 93, 9, 13, 
	0, 9, 10, 13, 32, 84, 91, 116, 
	0, 9, 10, 13, 32, 84, 91, 116, 
	0, 9, 10, 13, 32, 80, 91, 112, 
	0, 9, 10, 13, 32, 58, 83, 91, 
	115, 0, 9, 10, 13, 32, 47, 91, 
	0, 9, 10, 13, 32, 47, 91, 0, 
	9, 10, 13, 32, 91, 11, 12, 0, 
	9, 10, 13, 32, 58, 91, 0, 32, 
	34, 40, 9, 13, 0, 32, 34, 9, 
	13, 9, 32, 93, 0, 9, 10, 13, 
	32, 0, 32, 34, 35, 47, 72, 104, 
	9, 13, 0, 32, 34, 41, 9, 13, 
	0, 9, 32, 41, 93, 10, 13, 0, 
	9, 10, 13, 32, 41, 11, 12, 0, 
	32, 34, 84, 116, 9, 13, 0, 32, 
	34, 84, 116, 9, 13, 0, 32, 34, 
	80, 112, 9, 13, 0, 32, 34, 58, 
	83, 115, 9, 13, 0, 32, 34, 47, 
	9, 13, 0, 32, 34, 47, 9, 13, 
	0, 32, 34, 9, 13, 0, 32, 34, 
	58, 9, 13, 0, 10, 13, 84, 93, 
	116, 0, 10, 13, 84, 93, 116, 0, 
	10, 13, 80, 93, 112, 0, 10, 13, 
	58, 83, 93, 115, 0, 10, 13, 47, 
	93, 0, 10, 13, 47, 93, 0, 10, 
	13, 32, 93, 9, 12, 0, 10, 13, 
	58, 93, 0, 9, 10, 13, 32, 93, 
	11, 12, 0, 10, 13, 35, 47, 72, 
	93, 104, 0, 10, 13, 32, 39, 93, 
	9, 12, 0, 32, 39, 40, 9, 13, 
	0, 32, 39, 9, 13, 0, 32, 35, 
	39, 47, 72, 104, 9, 13, 0, 32, 
	39, 41, 9, 13, 0, 32, 39, 84, 
	116, 9, 13, 0, 32, 39, 84, 116, 
	9, 13, 0, 32, 39, 80, 112, 9, 
	13, 0, 32, 39, 58, 83, 115, 9, 
	13, 0, 32, 39, 47, 9, 13, 0, 
	32, 39, 47, 9, 13, 0, 32, 39, 
	9, 13, 0, 32, 39, 58, 9, 13, 
	0, 10, 13, 84, 93, 116, 0, 10, 
	13, 84, 93, 116, 0, 10, 13, 80, 
	93, 112, 0, 10, 13, 58, 83, 93, 
	115, 0, 10, 13, 47, 93, 0, 10, 
	13, 47, 93, 0, 10, 13, 32, 93, 
	9, 12, 0, 10, 13, 58, 93, 0, 
	10, 13, 84, 93, 116, 0, 10, 13, 
	84, 93, 116, 0, 10, 13, 80, 93, 
	112, 0, 10, 13, 58, 83, 93, 115, 
	0, 10, 13, 47, 93, 0, 10, 13, 
	47, 93, 0, 10, 13, 32, 93, 9, 
	12, 0, 9, 32, 40, 93, 10, 13, 
	0, 9, 32, 93, 10, 13, 0, 9, 
	32, 35, 47, 72, 93, 104, 10, 13, 
	0, 9, 32, 41, 93, 10, 13, 0, 
	9, 32, 84, 93, 116, 10, 13, 0, 
	9, 32, 84, 93, 116, 10, 13, 0, 
	9, 32, 80, 93, 112, 10, 13, 0, 
	9, 32, 58, 83, 93, 115, 10, 13, 
	0, 9, 32, 47, 93, 10, 13, 0, 
	9, 32, 47, 93, 10, 13, 0, 9, 
	32, 93, 10, 13, 0, 9, 32, 58, 
	93, 10, 13, 0, 10, 13, 58, 93, 
	9, 32, 35, 47, 72, 104, 0, 9, 
	32, 91, 10, 13, 9, 32, 91, 47, 
	85, 117, 82, 114, 76, 108, 93, 0, 
	9, 32, 47, 91, 10, 13, 0, 9, 
	32, 85, 91, 117, 10, 13, 0, 9, 
	32, 82, 91, 114, 10, 13, 0, 9, 
	32, 76, 91, 108, 10, 13, 0, 9, 
	32, 91, 93, 10, 13, 84, 116, 84, 
	116, 80, 112, 58, 83, 115, 47, 47, 
	0, 32, 9, 13, 58, 0, 9, 10, 
	13, 32, 58, 60, 62, 92, 93, 124, 
	11, 12, 0, 9, 10, 13, 32, 35, 
	93, 124, 11, 12, 0, 9, 10, 13, 
	32, 35, 93, 124, 11, 12, 0, 10, 
	13, 32, 93, 124, 9, 12, 0, 9, 
	10, 13, 32, 35, 93, 124, 11, 12, 
	65, 90, 0, 9, 10, 13, 32, 45, 
	93, 95, 124, 48, 57, 65, 90, 97, 
	122, 0, 9, 10, 13, 32, 93, 124, 
	40, 93, 0, 9, 10, 13, 32, 93, 
	124, 11, 12, 0, 9, 10, 13, 32, 
	93, 124, 11, 12, 0, 9, 10, 13, 
	32, 93, 124, 11, 12, 40, 93, 0, 
	9, 10, 13, 32, 45, 93, 95, 124, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 32, 45, 93, 95, 48, 57, 65, 
	90, 97, 122, 0, 9, 10, 13, 32, 
	35, 93, 124, 11, 12, 0, 9, 10, 
	13, 32, 35, 93, 124, 11, 12, 0, 
	9, 10, 13, 32, 35, 93, 124, 11, 
	12, 0, 9, 10, 13, 32, 93, 124, 
	11, 12, 65, 90, 0, 9, 10, 13, 
	32, 45, 93, 95, 124, 11, 12, 48, 
	57, 65, 90, 97, 122, 0, 9, 10, 
	13, 32, 93, 124, 11, 12, 40, 93, 
	0, 9, 10, 13, 32, 45, 93, 95, 
	124, 11, 12, 48, 57, 65, 90, 97, 
	122, 0, 9, 10, 13, 32, 45, 93, 
	95, 124, 11, 12, 48, 57, 65, 90, 
	97, 122, 0, 9, 10, 13, 32, 45, 
	93, 95, 124, 11, 12, 48, 57, 65, 
	90, 97, 122, 0, 9, 10, 13, 32, 
	35, 93, 124, 11, 12, 0, 9, 10, 
	13, 32, 62, 93, 124, 11, 12, 0, 
	9, 10, 13, 32, 93, 95, 124, 11, 
	12, 0, 9, 10, 13, 32, 60, 93, 
	124, 11, 12, 0, 9, 10, 13, 32, 
	93, 124, 11, 12, 0, 10, 13, 62, 
	93, 0, 9, 10, 13, 32, 35, 93, 
	0, 9, 10, 13, 32, 35, 93, 0, 
	10, 13, 93, 65, 90, 0, 9, 10, 
	13, 32, 45, 93, 95, 48, 57, 65, 
	90, 97, 122, 0, 9, 10, 13, 32, 
	93, 0, 9, 10, 13, 32, 45, 93, 
	95, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 32, 45, 93, 95, 48, 57, 
	65, 90, 97, 122, 0, 9, 10, 13, 
	32, 35, 58, 93, 124, 11, 12, 0, 
	9, 10, 13, 32, 51, 93, 124, 11, 
	12, 0, 9, 10, 13, 32, 35, 93, 
	124, 11, 12, 0, 9, 10, 13, 32, 
	35, 93, 124, 11, 12, 0, 9, 10, 
	13, 32, 35, 93, 124, 11, 12, 0, 
	9, 10, 13, 32, 93, 124, 11, 12, 
	0, 10, 13, 47, 93, 0, 10, 13, 
	93, 95, 119, 124, 48, 57, 65, 90, 
	97, 122, 0, 9, 10, 13, 32, 35, 
	93, 124, 0, 9, 10, 13, 32, 35, 
	93, 124, 0, 10, 13, 93, 65, 90, 
	0, 10, 13, 93, 124, 0, 9, 10, 
	13, 32, 35, 93, 124, 0, 10, 13, 
	93, 95, 0, 10, 13, 93, 124, 66, 
	67, 69, 73, 81, 83, 84, 85, 98, 
	99, 101, 105, 113, 115, 116, 117, 62, 
	76, 108, 77, 88, 109, 120, 62, 62, 
	80, 84, 112, 116, 82, 114, 79, 111, 
	78, 110, 71, 103, 62, 62, 9, 32, 
	9, 32, 72, 104, 82, 114, 69, 101, 
	70, 102, 61, 34, 35, 47, 72, 104, 
	0, 32, 34, 9, 13, 0, 32, 34, 
	62, 9, 13, 0, 10, 13, 0, 10, 
	13, 60, 0, 10, 13, 47, 60, 0, 
	10, 13, 60, 65, 97, 0, 10, 13, 
	60, 62, 84, 116, 84, 116, 80, 112, 
	58, 83, 115, 47, 47, 0, 32, 9, 
	13, 58, 62, 76, 82, 108, 114, 79, 
	111, 67, 99, 75, 107, 81, 113, 85, 
	117, 79, 111, 84, 116, 69, 101, 62, 
	62, 69, 79, 101, 111, 78, 110, 84, 
	116, 69, 101, 82, 114, 62, 68, 76, 
	100, 108, 69, 101, 9, 32, 61, 62, 
	9, 32, 61, 9, 32, 48, 57, 65, 
	90, 97, 122, 62, 48, 57, 65, 90, 
	97, 122, 79, 111, 82, 114, 9, 32, 
	61, 62, 0, 9, 10, 13, 32, 61, 
	62, 0, 10, 13, 62, 0, 9, 10, 
	13, 32, 62, 77, 88, 109, 120, 62, 
	80, 112, 65, 97, 78, 110, 68, 100, 
	9, 32, 61, 62, 0, 9, 10, 13, 
	32, 61, 62, 0, 10, 13, 62, 0, 
	9, 10, 13, 32, 62, 84, 116, 84, 
	116, 80, 112, 58, 83, 115, 47, 47, 
	0, 32, 9, 13, 0, 32, 62, 9, 
	13, 58, 79, 111, 68, 100, 84, 116, 
	69, 101, 88, 120, 84, 116, 62, 62, 
	80, 84, 112, 116, 79, 111, 73, 105, 
	76, 108, 69, 101, 82, 114, 62, 83, 
	115, 62, 82, 114, 79, 111, 78, 110, 
	71, 103, 62, 78, 110, 62, 62, 896, 
	1023, 1025, 1032, 1038, 1055, 1057, 1151, 1086, 
	896, 1023, 1025, 1033, 1035, 1036, 1038, 1151, 
	896, 959, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 961, 962, 991, 992, 1006, 
	1008, 1012, 1013, 1023, 1025, 1032, 1038, 1055, 
	1069, 1071, 1072, 1081, 1089, 1114, 1121, 1146, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	896, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 925, 994, 
	995, 1007, 1057, 1063, 1067, 1119, 1151, 896, 
	959, 960, 961, 962, 991, 992, 1006, 1008, 
	1012, 1013, 1023, 1025, 1032, 1038, 1055, 1069, 
	1071, 1072, 1081, 1089, 1114, 1121, 1146, 941, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	896, 959, 960, 961, 962, 991, 992, 1006, 
	1008, 1012, 1013, 1023, 1025, 1032, 1038, 1055, 
	1069, 1071, 1072, 1081, 1089, 1114, 1121, 1146, 
	896, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 897, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 898, 899, 903, 904, 913, 914, 
	915, 916, 924, 925, 959, 960, 961, 962, 
	991, 992, 1006, 1008, 1012, 1013, 1023, 1025, 
	1032, 1038, 1055, 1069, 1071, 1072, 1081, 1089, 
	1114, 1121, 1146, 956, 957, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 905, 957, 994, 
	995, 1007, 1057, 1063, 1067, 1119, 1151, 896, 
	959, 960, 961, 962, 991, 992, 1006, 1008, 
	1012, 1013, 1023, 1025, 1032, 1038, 1055, 1069, 
	1071, 1072, 1081, 1089, 1114, 1121, 1146, 994, 
	995, 1007, 1057, 1063, 1067, 1119, 1151, 896, 
	959, 960, 961, 962, 991, 992, 1006, 1008, 
	1012, 1013, 1023, 1025, 1032, 1038, 1055, 1069, 
	1071, 1072, 1081, 1089, 1114, 1121, 1146, 925, 
	928, 931, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 925, 994, 995, 1007, 1057, 1063, 
	1067, 1119, 1151, 896, 959, 960, 961, 962, 
	991, 992, 1006, 1008, 1012, 1013, 1023, 1025, 
	1032, 1038, 1055, 1069, 1071, 1072, 1081, 1089, 
	1114, 1121, 1146, 941, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 959, 960, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 896, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 897, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 898, 899, 
	903, 904, 913, 914, 915, 916, 924, 925, 
	959, 960, 961, 962, 991, 992, 1006, 1008, 
	1012, 1013, 1023, 1025, 1032, 1038, 1055, 1069, 
	1071, 1072, 1081, 1089, 1114, 1121, 1146, 956, 
	957, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 905, 957, 994, 995, 1007, 1057, 1063, 
	1067, 1119, 1151, 896, 959, 960, 961, 962, 
	991, 992, 1006, 1008, 1012, 1013, 1023, 1025, 
	1032, 1038, 1055, 1069, 1071, 1072, 1081, 1089, 
	1114, 1121, 1146, 925, 928, 931, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1124, 1139, 1151, 
	896, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 896, 959, 
	925, 896, 959, 896, 940, 942, 959, 896, 
	897, 959, 899, 903, 914, 915, 925, 959, 
	956, 957, 896, 959, 896, 904, 906, 956, 
	958, 959, 896, 924, 926, 927, 929, 930, 
	932, 959, 896, 959, 994, 995, 1007, 1151, 
	962, 991, 992, 1006, 1008, 1012, 1025, 1032, 
	1038, 1055, 1072, 1081, 1089, 1114, 1121, 1146, 
	47, 67, 99, 79, 111, 68, 100, 69, 
	101, 62, 47, 67, 99, 79, 111, 68, 
	100, 69, 101, 93, 47, 78, 110, 79, 
	111, 68, 100, 84, 116, 69, 101, 88, 
	120, 84, 116, 62, 47, 78, 110, 79, 
	111, 68, 100, 84, 116, 69, 101, 88, 
	120, 84, 116, 93, 67, 84, 99, 116, 
	79, 111, 76, 108, 71, 103, 82, 114, 
	79, 111, 85, 117, 80, 112, 62, 65, 
	66, 72, 82, 97, 98, 104, 114, 66, 
	98, 76, 108, 69, 101, 62, 79, 111, 
	68, 100, 89, 121, 62, 69, 101, 65, 
	97, 68, 100, 62, 62, 79, 111, 76, 
	108, 9, 32, 62, 71, 103, 9, 32, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 48, 57, 65, 90, 97, 122, 9, 
	32, 61, 9, 32, 34, 39, 48, 57, 
	65, 90, 97, 122, 0, 10, 13, 0, 
	10, 13, 34, 9, 32, 62, 0, 10, 
	13, 0, 10, 13, 39, 9, 32, 62, 
	48, 57, 65, 90, 97, 122, 82, 114, 
	79, 111, 85, 117, 80, 112, 9, 32, 
	62, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	62, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 62, 48, 57, 65, 90, 97, 
	122, 66, 68, 72, 82, 98, 100, 104, 
	114, 79, 111, 68, 100, 89, 121, 9, 
	32, 62, 9, 32, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 48, 57, 65, 
	90, 97, 122, 9, 32, 61, 9, 32, 
	34, 39, 48, 57, 65, 90, 97, 122, 
	0, 10, 13, 0, 10, 13, 34, 9, 
	32, 62, 0, 10, 13, 0, 10, 13, 
	39, 9, 32, 62, 48, 57, 65, 90, 
	97, 122, 9, 32, 62, 9, 32, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 9, 32, 34, 39, 48, 57, 65, 
	90, 97, 122, 0, 10, 13, 0, 10, 
	13, 34, 9, 32, 62, 0, 10, 13, 
	0, 10, 13, 39, 9, 32, 62, 48, 
	57, 65, 90, 97, 122, 9, 32, 62, 
	69, 101, 9, 32, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 48, 57, 65, 
	90, 97, 122, 9, 32, 61, 9, 32, 
	34, 39, 48, 57, 65, 90, 97, 122, 
	0, 10, 13, 0, 10, 13, 34, 9, 
	32, 62, 0, 10, 13, 0, 10, 13, 
	39, 9, 32, 62, 48, 57, 65, 90, 
	97, 122, 65, 97, 68, 100, 9, 32, 
	62, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	62, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 62, 48, 57, 65, 90, 97, 
	122, 9, 32, 62, 9, 32, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	9, 32, 34, 39, 48, 57, 65, 90, 
	97, 122, 0, 10, 13, 0, 10, 13, 
	34, 9, 32, 62, 0, 10, 13, 0, 
	10, 13, 39, 9, 32, 62, 48, 57, 
	65, 90, 97, 122, 67, 84, 99, 116, 
	79, 111, 76, 108, 71, 103, 82, 114, 
	79, 111, 85, 117, 80, 112, 93, 65, 
	66, 72, 82, 97, 98, 104, 114, 66, 
	98, 76, 108, 69, 101, 93, 79, 111, 
	68, 100, 89, 121, 93, 69, 101, 65, 
	97, 68, 100, 93, 93, 79, 111, 76, 
	108, 9, 32, 71, 93, 103, 9, 32, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 48, 57, 65, 90, 97, 122, 9, 
	32, 61, 9, 32, 34, 39, 48, 57, 
	65, 90, 97, 122, 0, 10, 13, 0, 
	10, 13, 34, 9, 32, 93, 0, 10, 
	13, 0, 10, 13, 39, 9, 32, 93, 
	48, 57, 65, 90, 97, 122, 82, 114, 
	79, 111, 85, 117, 80, 112, 9, 32, 
	93, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	93, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 93, 48, 57, 65, 90, 97, 
	122, 66, 68, 72, 82, 98, 100, 104, 
	114, 79, 111, 68, 100, 89, 121, 9, 
	32, 93, 9, 32, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 48, 57, 65, 
	90, 97, 122, 9, 32, 61, 9, 32, 
	34, 39, 48, 57, 65, 90, 97, 122, 
	0, 10, 13, 0, 10, 13, 34, 9, 
	32, 93, 0, 10, 13, 0, 10, 13, 
	39, 9, 32, 93, 48, 57, 65, 90, 
	97, 122, 9, 32, 93, 9, 32, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 9, 32, 34, 39, 48, 57, 65, 
	90, 97, 122, 0, 10, 13, 0, 10, 
	13, 34, 9, 32, 93, 0, 10, 13, 
	0, 10, 13, 39, 9, 32, 93, 48, 
	57, 65, 90, 97, 122, 9, 32, 69, 
	93, 101, 9, 32, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 48, 57, 65, 
	90, 97, 122, 9, 32, 61, 9, 32, 
	34, 39, 48, 57, 65, 90, 97, 122, 
	0, 10, 13, 0, 10, 13, 34, 9, 
	32, 93, 0, 10, 13, 0, 10, 13, 
	39, 9, 32, 93, 48, 57, 65, 90, 
	97, 122, 65, 97, 68, 100, 9, 32, 
	93, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	93, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 93, 48, 57, 65, 90, 97, 
	122, 9, 32, 93, 9, 32, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	9, 32, 34, 39, 48, 57, 65, 90, 
	97, 122, 0, 10, 13, 0, 10, 13, 
	34, 9, 32, 93, 0, 10, 13, 0, 
	10, 13, 39, 9, 32, 93, 48, 57, 
	65, 90, 97, 122, 0, 9, 10, 32, 
	42, 60, 72, 91, 96, 104, 0, 9, 
	10, 32, 0, 9, 10, 32, 60, 91, 
	0, 10, 9, 32, 42, 0, 10, 13, 
	0, 9, 10, 13, 32, 66, 67, 69, 
	72, 78, 81, 83, 84, 98, 99, 101, 
	104, 110, 113, 115, 116, 32, 9, 13, 
	0, 9, 10, 32, 0, 9, 10, 32, 
	32, 9, 13, 32, 9, 13, 0, 9, 
	10, 32, 32, 9, 13, 49, 54, 9, 
	32, 67, 69, 72, 78, 81, 83, 84, 
	99, 101, 104, 110, 113, 115, 116, 96, 
	0, 60, 91, 47, 66, 69, 73, 83, 
	85, 98, 101, 105, 115, 117, 47, 66, 
	73, 83, 85, 98, 105, 115, 117, 0, 
	9, 10, 13, 32, 34, 65, 66, 67, 
	68, 70, 72, 77, 80, 82, 83, 84, 
	85, 87, 91, 97, 98, 99, 100, 102, 
	104, 109, 112, 114, 115, 116, 117, 119, 
	123, 828, 1084, 1344, 1600, 1856, 2112, -128, 
	-63, -62, -33, -32, -17, -16, -12, -11, 
	47, 48, 57, 58, 59, 61, 63, 69, 
	90, 92, 96, 101, 122, 124, 127, -128, 
	-65, -62, -33, -32, -17, -16, -12, -128, 
	-65, -128, -65, 0, 9, 10, 32, 0, 
	9, 10, 32, 0, 9, 10, 32, 42, 
	60, 72, 91, 96, 104, 0, 10, 0, 
	9, 10, 32, 60, 91, 10, 0, 10, 
	13, 0, 9, 10, 13, 32, 9, 32, 
	9, 32, 9, 32, 34, -30, -29, -17, 
	32, 34, 35, 39, 44, 46, 60, 62, 
	63, 91, 93, -128, -63, -62, -33, -32, 
	-18, -16, -12, -11, 0, 9, 13, 58, 
	59, -30, -29, -17, 32, 34, 35, 39, 
	44, 46, 60, 62, 63, 91, 93, -128, 
	-63, -62, -33, -32, -18, -16, -12, -11, 
	0, 9, 13, 58, 59, -30, -29, -17, 
	32, 34, 35, 39, 44, 46, 63, -128, 
	-63, -62, -33, -32, -18, -16, -12, -11, 
	0, 9, 13, 58, 59, -30, -29, -17, 
	35, 46, 47, 58, 63, 95, -62, -33, 
	-32, -18, -16, -12, 45, 57, 65, 90, 
	97, 122, 35, 47, 63, 48, 57, 91, 
	123, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 125, 
	48, 57, 65, 90, 97, 122, 125, 48, 
	57, 65, 90, 97, 122, 82, 91, 114, 
	123, 48, 57, 65, 90, 97, 122, 84, 
	91, 116, 123, 48, 57, 65, 90, 97, 
	122, 73, 91, 105, 123, 48, 57, 65, 
	90, 97, 122, 83, 91, 115, 123, 48, 
	57, 65, 90, 97, 122, 84, 91, 116, 
	123, 48, 57, 65, 90, 97, 122, 32, 
	91, 123, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 79, 91, 
	111, 123, 48, 57, 65, 90, 97, 122, 
	79, 91, 111, 123, 48, 57, 65, 90, 
	97, 122, 75, 91, 107, 123, 48, 57, 
	65, 90, 97, 122, 32, 91, 123, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 79, 91, 111, 123, 48, 
	57, 65, 90, 97, 122, 77, 91, 109, 
	123, 48, 57, 65, 90, 97, 122, 77, 
	91, 109, 123, 48, 57, 65, 90, 97, 
	122, 69, 91, 101, 123, 48, 57, 65, 
	90, 97, 122, 78, 91, 110, 123, 48, 
	57, 65, 90, 97, 122, 84, 91, 116, 
	123, 48, 57, 65, 90, 97, 122, 32, 
	91, 123, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 77, 91, 
	109, 123, 48, 57, 65, 90, 97, 122, 
	65, 91, 97, 123, 48, 57, 66, 90, 
	98, 122, 73, 91, 105, 123, 48, 57, 
	65, 90, 97, 122, 76, 91, 108, 123, 
	48, 57, 65, 90, 97, 122, 32, 91, 
	123, 48, 57, 65, 90, 97, 122, 47, 
	48, 57, 65, 90, 97, 122, 45, 61, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 65, 90, 97, 122, 
	47, 48, 57, 65, 90, 97, 122, 47, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	47, 79, 91, 111, 123, 48, 57, 65, 
	90, 97, 122, 82, 91, 114, 123, 48, 
	57, 65, 90, 97, 122, 85, 91, 117, 
	123, 48, 57, 65, 90, 97, 122, 77, 
	91, 109, 123, 48, 57, 65, 90, 97, 
	122, 32, 91, 123, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	84, 91, 116, 123, 48, 57, 65, 90, 
	97, 122, 84, 91, 116, 123, 48, 57, 
	65, 90, 97, 122, 80, 91, 112, 123, 
	48, 57, 65, 90, 97, 122, 58, 83, 
	91, 115, 123, 48, 57, 65, 90, 97, 
	122, -30, -29, -17, 35, 46, 47, 58, 
	63, 95, -62, -33, -32, -18, -16, -12, 
	45, 57, 65, 90, 97, 122, -30, -29, 
	-17, 32, 34, 35, 39, 44, 46, 60, 
	62, 63, 91, 93, -128, -63, -62, -33, 
	-32, -18, -16, -12, -11, 0, 9, 13, 
	58, 59, -30, -29, -17, 32, 34, 35, 
	39, 44, 46, 60, 62, 63, 91, 93, 
	-128, -63, -62, -33, -32, -18, -16, -12, 
	-11, 0, 9, 13, 58, 59, -30, -29, 
	-17, 32, 34, 35, 39, 44, 46, 63, 
	-128, -63, -62, -33, -32, -18, -16, -12, 
	-11, 0, 9, 13, 58, 59, 35, 47, 
	63, 48, 57, 58, 91, 123, 48, 57, 
	65, 90, 97, 122, 79, 91, 111, 123, 
	48, 57, 65, 90, 97, 122, 68, 91, 
	100, 123, 48, 57, 65, 90, 97, 122, 
	32, 91, 123, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 73, 
	79, 91, 105, 111, 123, 48, 57, 65, 
	90, 97, 122, 88, 91, 120, 123, 48, 
	57, 65, 90, 97, 122, 73, 91, 105, 
	123, 48, 57, 65, 90, 97, 122, 86, 
	91, 118, 123, 48, 57, 65, 90, 97, 
	122, 32, 91, 123, 48, 57, 65, 90, 
	97, 122, 48, 57, 79, 83, 91, 111, 
	115, 123, 48, 57, 65, 90, 97, 122, 
	76, 91, 108, 123, 48, 57, 65, 90, 
	97, 122, 32, 91, 123, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 84, 91, 116, 123, 48, 57, 65, 
	90, 97, 122, 32, 91, 123, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 69, 91, 101, 123, 48, 57, 
	65, 90, 97, 122, 67, 91, 99, 123, 
	48, 57, 65, 90, 97, 122, 79, 91, 
	111, 123, 48, 57, 65, 90, 97, 122, 
	82, 91, 114, 123, 48, 57, 65, 90, 
	97, 122, 68, 91, 100, 123, 48, 57, 
	65, 90, 97, 122, 32, 91, 123, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 69, 91, 101, 123, 48, 
	57, 65, 90, 97, 122, 82, 91, 114, 
	123, 48, 57, 65, 90, 97, 122, 73, 
	91, 105, 123, 48, 57, 65, 90, 97, 
	122, 69, 91, 101, 123, 48, 57, 65, 
	90, 97, 122, 83, 91, 115, 123, 48, 
	57, 65, 90, 97, 122, 32, 91, 123, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 79, 91, 97, 
	111, 123, 48, 57, 66, 90, 98, 122, 
	71, 91, 103, 123, 48, 57, 65, 90, 
	97, 122, 32, 91, 123, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 80, 91, 112, 
	123, 48, 57, 65, 90, 97, 122, 73, 
	91, 105, 123, 48, 57, 65, 90, 97, 
	122, 67, 91, 99, 123, 48, 57, 65, 
	90, 97, 122, 32, 91, 123, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 48, 57, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 65, 90, 97, 122, 
	47, 48, 57, 65, 90, 97, 122, 47, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 47, 
	83, 91, 115, 123, 48, 57, 65, 90, 
	97, 122, 69, 91, 101, 123, 48, 57, 
	65, 90, 97, 122, 82, 91, 114, 123, 
	48, 57, 65, 90, 97, 122, 32, 91, 
	123, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 73, 91, 105, 123, 48, 
	57, 65, 90, 97, 122, 75, 91, 107, 
	123, 48, 57, 65, 90, 97, 122, 73, 
	91, 105, 123, 48, 57, 65, 90, 97, 
	122, 32, 91, 123, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	0, 10, 13, 47, 66, 67, 69, 72, 
	73, 78, 81, 83, 84, 85, 91, 98, 
	99, 101, 104, 105, 110, 113, 115, 116, 
	117, 10, 40, 40, 0, 9, 10, 32, 
	40, 0, 9, 10, 32, 0, 32, 41, 
	9, 13, 0, 32, 93, 9, 13, 0, 
	10, 13, 41, 0, 9, 10, 32, 0, 
	9, 10, 13, 32, 91, 0, 32, 34, 
	9, 13, 0, 32, 39, 9, 13, 0, 
	9, 32, 93, 10, 13, 123, 47, 65, 
	66, 67, 69, 72, 73, 78, 81, 83, 
	84, 85, 97, 98, 99, 101, 104, 105, 
	110, 113, 115, 116, 117, 0, 9, 10, 
	32, 47, 65, 66, 67, 69, 72, 73, 
	78, 81, 83, 84, 85, 97, 98, 99, 
	101, 104, 105, 110, 113, 115, 116, 117, 
	1088, 994, 995, 1007, 1070, 1119, 1151, 962, 
	991, 992, 1006, 1008, 1012, 1025, 1032, 1038, 
	1055, 1072, 1081, 1089, 1114, 1121, 1146, 994, 
	995, 1007, 1057, 1063, 1067, 1119, 1151, 896, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 961, 962, 
	991, 992, 1006, 1008, 1012, 1013, 1023, 1025, 
	1032, 1038, 1055, 1069, 1071, 1072, 1081, 1089, 
	1114, 1121, 1146, 0, 10, 60, 91, 60, 
	91, 47, 47, 0, 10, 60, 91, 60, 
	91, 47, 47, 60, 91, 47, 67, 84, 
	99, 116, 47, 67, 84, 99, 116, 0
};

static const char _dtext_single_lengths[] = {
	0, 4, 6, 6, 2, 2, 2, 2, 
	2, 1, 2, 1, 4, 2, 2, 2, 
	2, 1, 6, 2, 2, 2, 2, 2, 
	1, 2, 1, 2, 2, 2, 2, 1, 
	5, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 4, 4, 2, 4, 
	3, 2, 1, 4, 4, 2, 2, 4, 
	7, 4, 6, 2, 2, 2, 2, 2, 
	4, 7, 4, 6, 2, 2, 2, 2, 
	2, 2, 1, 4, 2, 2, 2, 2, 
	2, 2, 3, 1, 4, 1, 2, 5, 
	5, 4, 4, 2, 4, 3, 2, 1, 
	2, 2, 4, 7, 4, 6, 2, 2, 
	2, 2, 2, 4, 7, 4, 6, 2, 
	2, 2, 2, 2, 2, 1, 2, 2, 
	2, 2, 1, 2, 2, 2, 2, 2, 
	2, 3, 1, 4, 1, 1, 4, 2, 
	2, 3, 3, 3, 4, 4, 4, 10, 
	1, 2, 1, 3, 2, 2, 2, 2, 
	1, 1, 2, 1, 3, 2, 2, 2, 
	2, 1, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 4, 4, 
	6, 6, 2, 1, 4, 2, 2, 2, 
	2, 2, 2, 3, 4, 1, 2, 2, 
	2, 2, 1, 6, 2, 1, 2, 2, 
	2, 2, 2, 2, 3, 1, 2, 2, 
	2, 2, 1, 1, 4, 4, 2, 2, 
	2, 2, 1, 2, 2, 2, 2, 6, 
	1, 1, 1, 1, 4, 4, 2, 2, 
	2, 2, 1, 2, 2, 2, 2, 6, 
	1, 1, 1, 3, 5, 11, 12, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 2, 2, 2, 2, 2, 1, 2, 
	2, 2, 2, 1, 2, 2, 2, 2, 
	2, 2, 3, 1, 2, 2, 2, 4, 
	3, 2, 1, 2, 2, 2, 2, 2, 
	2, 1, 0, 2, 5, 5, 11, 10, 
	2, 2, 2, 2, 2, 1, 2, 2, 
	2, 2, 2, 2, 3, 1, 2, 2, 
	2, 4, 3, 2, 1, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 4, 2, 
	2, 3, 3, 3, 4, 4, 4, 1, 
	1, 5, 0, 0, 1, 0, 1, 0, 
	2, 0, 0, 0, 14, 0, 0, 1, 
	0, 1, 0, 2, 0, 0, 0, 14, 
	10, 0, 0, 1, 0, 1, 0, 2, 
	0, 0, 0, 2, 2, 2, 3, 1, 
	1, 2, 0, 3, 0, 0, 5, 0, 
	0, 1, 1, 9, 1, 0, 2, 2, 
	3, 0, 0, 1, 4, 3, 2, 2, 
	2, 3, 1, 1, 2, 1, 1, 8, 
	5, 5, 3, 5, 6, 4, 1, 4, 
	4, 4, 1, 6, 3, 5, 5, 5, 
	4, 6, 4, 1, 6, 6, 6, 5, 
	5, 5, 5, 4, 1, 4, 4, 0, 
	5, 3, 5, 3, 6, 5, 5, 5, 
	5, 4, 1, 3, 5, 5, 0, 1, 
	5, 1, 1, 1, 10, 6, 12, 10, 
	6, 4, 6, 6, 6, 5, 1, 1, 
	7, 14, 8, 14, 12, 8, 7, 1, 
	4, 8, 7, 7, 7, 7, 7, 9, 
	8, 7, 8, 7, 7, 9, 7, 7, 
	7, 7, 4, 6, 7, 6, 6, 3, 
	1, 4, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 2, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 2, 0, 3, 0, 0, 
	5, 0, 0, 1, 1, 9, 1, 0, 
	2, 2, 3, 0, 0, 0, 1, 0, 
	1, 0, 2, 0, 0, 0, 14, 0, 
	0, 1, 0, 1, 0, 2, 0, 0, 
	0, 14, 10, 0, 0, 1, 0, 1, 
	0, 2, 0, 0, 0, 0, 2, 2, 
	2, 2, 2, 2, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 2, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 6, 2, 2, 2, 2, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 2, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 2, 2, 2, 
	2, 2, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 4, 1, 4, 3, 2, 
	2, 2, 3, 1, 1, 2, 1, 24, 
	6, 4, 8, 6, 6, 6, 6, 4, 
	8, 6, 8, 6, 6, 6, 6, 6, 
	2, 6, 6, 6, 6, 6, 1, 6, 
	4, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 1, 6, 6, 6, 6, 
	6, 6, 6, 4, 16, 6, 6, 6, 
	6, 6, 4, 6, 6, 6, 4, 6, 
	6, 6, 4, 8, 6, 6, 6, 6, 
	4, 8, 6, 7, 7, 6, 4, 4, 
	4, 8, 6, 7, 7, 4, 6, 6, 
	6, 6, 6, 6, 7, 7, 4, 6, 
	8, 6, 6, 7, 5, 5, 5, 5, 
	4, 3, 4, 3, 4, 7, 5, 6, 
	6, 6, 7, 5, 5, 5, 5, 4, 
	7, 4, 5, 5, 5, 5, 5, 6, 
	4, 4, 3, 4, 5, 4, 6, 6, 
	6, 6, 6, 6, 4, 4, 6, 6, 
	6, 6, 4, 6, 6, 6, 6, 6, 
	6, 6, 4, 16, 6, 4, 6, 6, 
	7, 7, 12, 8, 6, 6, 6, 6, 
	3, 1, 2, 2, 2, 1, 6, 10, 
	7, 4, 5, 5, 5, 4, 8, 8, 
	8, 9, 7, 7, 6, 7, 4, 3, 
	3, 5, 7, 4, 5, 6, 5, 5, 
	5, 6, 4, 4, 3, 4, 6, 6, 
	6, 7, 5, 5, 5, 5, 6, 8, 
	6, 4, 3, 7, 4, 5, 5, 5, 
	6, 4, 4, 3, 4, 6, 6, 6, 
	7, 5, 5, 5, 5, 6, 6, 6, 
	7, 5, 5, 5, 5, 4, 8, 5, 
	6, 6, 6, 7, 5, 5, 4, 5, 
	5, 6, 4, 3, 1, 2, 2, 2, 
	1, 5, 6, 6, 6, 5, 2, 2, 
	2, 3, 1, 1, 2, 1, 11, 8, 
	8, 6, 8, 9, 7, 2, 7, 7, 
	7, 2, 9, 7, 8, 8, 8, 7, 
	9, 7, 2, 9, 9, 9, 8, 8, 
	8, 8, 7, 5, 7, 7, 4, 8, 
	6, 8, 7, 9, 8, 8, 8, 8, 
	7, 5, 7, 8, 8, 4, 5, 8, 
	5, 5, 16, 3, 4, 1, 5, 2, 
	2, 2, 2, 1, 1, 2, 4, 2, 
	2, 2, 1, 1, 4, 3, 4, 3, 
	4, 5, 6, 5, 2, 2, 2, 3, 
	1, 1, 2, 1, 5, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 4, 
	2, 2, 2, 2, 1, 4, 2, 4, 
	3, 2, 1, 2, 2, 4, 7, 4, 
	6, 4, 1, 2, 2, 2, 2, 4, 
	7, 4, 6, 2, 2, 2, 3, 1, 
	1, 2, 3, 1, 2, 2, 2, 2, 
	2, 2, 1, 5, 2, 2, 2, 2, 
	2, 3, 1, 2, 2, 2, 2, 1, 
	2, 1, 1, 0, 1, 0, 8, 8, 
	8, 8, 9, 9, 9, 8, 10, 10, 
	8, 11, 8, 8, 9, 9, 9, 8, 
	10, 10, 11, 8, 10, 0, 1, 0, 
	1, 0, 2, 0, 0, 0, 4, 1, 
	2, 2, 2, 2, 1, 1, 2, 2, 
	2, 2, 1, 1, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 2, 2, 2, 
	2, 2, 2, 2, 1, 4, 2, 2, 
	2, 2, 2, 2, 2, 1, 8, 2, 
	2, 2, 1, 2, 2, 2, 1, 2, 
	2, 2, 1, 1, 2, 2, 5, 2, 
	3, 3, 4, 3, 4, 3, 3, 4, 
	3, 2, 2, 2, 2, 3, 2, 3, 
	3, 4, 3, 4, 3, 3, 4, 3, 
	8, 2, 2, 2, 3, 2, 3, 3, 
	4, 3, 4, 3, 3, 4, 3, 3, 
	2, 3, 3, 4, 3, 4, 3, 3, 
	4, 3, 5, 2, 3, 3, 4, 3, 
	4, 3, 3, 4, 3, 2, 2, 3, 
	2, 3, 3, 4, 3, 4, 3, 3, 
	4, 3, 3, 2, 3, 3, 4, 3, 
	4, 3, 3, 4, 3, 4, 2, 2, 
	2, 2, 2, 2, 2, 1, 8, 2, 
	2, 2, 1, 2, 2, 2, 1, 2, 
	2, 2, 1, 1, 2, 2, 5, 2, 
	3, 3, 4, 3, 4, 3, 3, 4, 
	3, 2, 2, 2, 2, 3, 2, 3, 
	3, 4, 3, 4, 3, 3, 4, 3, 
	8, 2, 2, 2, 3, 2, 3, 3, 
	4, 3, 4, 3, 3, 4, 3, 3, 
	2, 3, 3, 4, 3, 4, 3, 3, 
	4, 3, 5, 2, 3, 3, 4, 3, 
	4, 3, 3, 4, 3, 2, 2, 3, 
	2, 3, 3, 4, 3, 4, 3, 3, 
	4, 3, 3, 2, 3, 3, 4, 3, 
	4, 3, 3, 4, 3, 10, 4, 6, 
	2, 3, 3, 5, 16, 1, 4, 4, 
	1, 1, 4, 1, 0, 2, 14, 1, 
	3, 11, 9, 40, 0, 0, 0, 0, 
	4, 4, 10, 2, 6, 1, 3, 5, 
	2, 2, 2, 1, 14, 14, 10, 9, 
	3, 2, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	4, 4, 4, 4, 4, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 4, 4, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 4, 4, 4, 4, 4, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 4, 4, 4, 
	4, 3, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 4, 
	4, 4, 4, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	4, 4, 4, 5, 9, 14, 14, 10, 
	3, 3, 4, 4, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 6, 4, 4, 4, 3, 0, 6, 
	4, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 4, 
	4, 4, 4, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	6, 4, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 4, 
	4, 4, 3, 1, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	4, 4, 4, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 25, 2, 1, 5, 
	4, 3, 3, 4, 4, 6, 3, 3, 
	4, 1, 23, 4, 24, 6, 8, 8, 
	4, 2, 1, 1, 4, 2, 1, 1, 
	2, 5, 5
};

static const char _dtext_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 0, 0, 0, 0, 0, 3, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 3, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 1, 1, 1, 2, 1, 3, 
	1, 3, 4, 1, 7, 1, 1, 1, 
	2, 1, 3, 1, 3, 4, 1, 7, 
	7, 1, 1, 1, 2, 1, 3, 1, 
	3, 4, 1, 0, 0, 0, 0, 0, 
	0, 6, 1, 6, 1, 1, 6, 1, 
	1, 1, 1, 6, 1, 6, 1, 1, 
	1, 1, 1, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 1, 
	1, 1, 1, 2, 3, 0, 0, 1, 
	1, 1, 0, 3, 3, 1, 1, 1, 
	2, 4, 1, 0, 4, 4, 4, 1, 
	1, 1, 1, 1, 0, 0, 0, 1, 
	3, 0, 3, 3, 1, 1, 1, 1, 
	1, 1, 0, 3, 0, 0, 1, 0, 
	0, 0, 0, 0, 2, 1, 1, 1, 
	1, 0, 1, 1, 1, 1, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 0, 1, 1, 1, 1, 3, 
	0, 0, 0, 0, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 6, 1, 6, 1, 1, 
	6, 1, 1, 1, 1, 6, 1, 6, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 3, 1, 3, 4, 1, 7, 1, 
	1, 1, 2, 1, 3, 1, 3, 4, 
	1, 7, 7, 1, 1, 1, 2, 1, 
	3, 1, 3, 4, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 3, 3, 0, 1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 1, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 3, 0, 1, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	5, 0, 0, 0, 0, 0, 5, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 1, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 1, 1, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 1, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 1, 1, 
	1, 1, 2, 3, 0, 0, 1, 1, 
	1, 0, 3, 3, 1, 1, 1, 2, 
	4, 1, 0, 4, 4, 4, 1, 1, 
	1, 1, 1, 0, 0, 0, 1, 3, 
	0, 3, 3, 1, 1, 1, 1, 1, 
	1, 0, 3, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 1, 11, 11, 
	12, 12, 12, 12, 12, 17, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 17, 
	12, 12, 12, 12, 11, 1, 1, 2, 
	1, 3, 1, 3, 4, 1, 8, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 0, 3, 0, 0, 0, 0, 0, 
	3, 0, 0, 0, 0, 0, 3, 3, 
	0, 3, 0, 0, 0, 0, 0, 3, 
	0, 0, 0, 0, 0, 3, 3, 0, 
	3, 0, 0, 0, 0, 0, 3, 0, 
	3, 3, 0, 3, 0, 0, 0, 0, 
	0, 3, 0, 3, 3, 0, 3, 0, 
	0, 0, 0, 0, 3, 0, 0, 0, 
	3, 3, 0, 3, 0, 0, 0, 0, 
	0, 3, 0, 3, 3, 0, 3, 0, 
	0, 0, 0, 0, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 0, 3, 0, 0, 0, 0, 0, 
	3, 0, 0, 0, 0, 0, 3, 3, 
	0, 3, 0, 0, 0, 0, 0, 3, 
	0, 0, 0, 0, 0, 3, 3, 0, 
	3, 0, 0, 0, 0, 0, 3, 0, 
	3, 3, 0, 3, 0, 0, 0, 0, 
	0, 3, 0, 3, 3, 0, 3, 0, 
	0, 0, 0, 0, 3, 0, 0, 0, 
	3, 3, 0, 3, 0, 0, 0, 0, 
	0, 3, 0, 3, 3, 0, 3, 0, 
	0, 0, 0, 0, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	1, 1, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 12, 1, 3, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 7, 7, 7, 6, 
	1, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	1, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	1, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 1, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 1, 0, 
	3, 3, 3, 3, 6, 7, 7, 7, 
	1, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 1, 
	0, 3, 3, 3, 3, 3, 1, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 1, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 1, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 1, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 1, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 1, 0, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 0, 3, 
	3, 3, 3, 3, 1, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 1, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 1, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 1, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 1, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 0, 1, 1, 
	1, 0, 0, 0, 0, 8, 11, 11, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
};

static const short _dtext_index_offsets[] = {
	0, 0, 5, 12, 19, 22, 25, 28, 
	31, 34, 36, 39, 41, 46, 49, 52, 
	55, 58, 60, 67, 70, 73, 76, 79, 
	82, 84, 87, 89, 92, 95, 98, 101, 
	103, 109, 113, 116, 119, 122, 125, 128, 
	131, 134, 137, 140, 142, 147, 152, 155, 
	160, 164, 170, 175, 180, 185, 188, 191, 
	196, 204, 209, 216, 219, 222, 225, 228, 
	231, 236, 244, 249, 256, 259, 262, 265, 
	268, 271, 274, 276, 281, 284, 287, 290, 
	293, 296, 299, 303, 305, 310, 312, 315, 
	324, 333, 338, 343, 346, 351, 355, 361, 
	366, 369, 372, 377, 385, 390, 397, 400, 
	403, 406, 409, 412, 417, 425, 430, 437, 
	440, 443, 446, 449, 452, 455, 457, 460, 
	463, 466, 469, 471, 474, 477, 480, 483, 
	486, 489, 493, 495, 500, 502, 504, 512, 
	515, 518, 522, 526, 530, 535, 543, 548, 
	559, 561, 564, 566, 570, 573, 576, 579, 
	582, 584, 586, 589, 591, 595, 598, 601, 
	604, 607, 609, 618, 620, 622, 624, 626, 
	628, 630, 632, 634, 636, 638, 640, 645, 
	650, 657, 664, 667, 669, 674, 677, 680, 
	683, 686, 689, 692, 696, 701, 703, 706, 
	709, 712, 715, 717, 724, 727, 729, 732, 
	735, 738, 741, 744, 747, 751, 753, 756, 
	759, 762, 765, 767, 769, 774, 779, 782, 
	785, 788, 791, 793, 796, 799, 802, 805, 
	812, 814, 816, 818, 820, 825, 830, 833, 
	836, 839, 842, 844, 847, 850, 853, 856, 
	863, 865, 867, 869, 873, 879, 891, 904, 
	907, 910, 913, 916, 919, 922, 925, 928, 
	931, 933, 936, 939, 942, 945, 948, 950, 
	953, 956, 959, 962, 964, 967, 970, 973, 
	976, 979, 982, 986, 988, 991, 994, 997, 
	1002, 1006, 1012, 1017, 1020, 1023, 1026, 1029, 
	1032, 1035, 1037, 1039, 1042, 1051, 1060, 1072, 
	1083, 1086, 1089, 1092, 1095, 1098, 1100, 1103, 
	1106, 1109, 1112, 1115, 1118, 1122, 1124, 1127, 
	1130, 1133, 1138, 1142, 1148, 1153, 1156, 1159, 
	1162, 1165, 1168, 1171, 1173, 1175, 1177, 1185, 
	1188, 1191, 1195, 1199, 1203, 1208, 1216, 1221, 
	1223, 1225, 1231, 1233, 1235, 1238, 1241, 1244, 
	1248, 1252, 1256, 1261, 1263, 1285, 1287, 1289, 
	1292, 1295, 1298, 1302, 1306, 1310, 1315, 1317, 
	1339, 1357, 1359, 1361, 1364, 1367, 1370, 1374, 
	1378, 1382, 1387, 1389, 1392, 1395, 1398, 1402, 
	1404, 1406, 1415, 1417, 1427, 1429, 1431, 1443, 
	1445, 1447, 1450, 1453, 1469, 1472, 1479, 1483, 
	1487, 1492, 1494, 1496, 1498, 1503, 1508, 1511, 
	1514, 1517, 1521, 1523, 1525, 1529, 1531, 1533, 
	1543, 1550, 1557, 1562, 1570, 1580, 1585, 1587, 
	1593, 1599, 1605, 1607, 1617, 1624, 1631, 1638, 
	1645, 1652, 1663, 1669, 1671, 1682, 1693, 1704, 
	1711, 1718, 1725, 1732, 1738, 1740, 1745, 1750, 
	1752, 1761, 1765, 1774, 1781, 1789, 1796, 1803, 
	1810, 1817, 1823, 1825, 1832, 1838, 1844, 1846, 
	1848, 1854, 1856, 1858, 1860, 1873, 1881, 1895, 
	1907, 1915, 1920, 1928, 1936, 1944, 1951, 1953, 
	1955, 1964, 1980, 1990, 2006, 2020, 2030, 2039, 
	2041, 2046, 2056, 2065, 2074, 2083, 2092, 2101, 
	2112, 2122, 2131, 2141, 2150, 2159, 2173, 2182, 
	2191, 2200, 2209, 2214, 2222, 2231, 2239, 2247, 
	2254, 2256, 2261, 2263, 2265, 2267, 2271, 2275, 
	2279, 2283, 2287, 2291, 2295, 2299, 2303, 2307, 
	2311, 2313, 2317, 2321, 2325, 2329, 2333, 2337, 
	2341, 2345, 2349, 2353, 2357, 2359, 2363, 2367, 
	2371, 2375, 2379, 2383, 2387, 2391, 2395, 2399, 
	2403, 2405, 2409, 2415, 2419, 2423, 2427, 2431, 
	2435, 2439, 2443, 2447, 2451, 2455, 2457, 2461, 
	2465, 2469, 2473, 2477, 2481, 2485, 2489, 2493, 
	2497, 2501, 2503, 2505, 2514, 2516, 2526, 2528, 
	2530, 2542, 2544, 2546, 2549, 2552, 2568, 2571, 
	2578, 2582, 2586, 2591, 2593, 2595, 2597, 2600, 
	2603, 2606, 2610, 2614, 2618, 2623, 2625, 2647, 
	2649, 2651, 2654, 2657, 2660, 2664, 2668, 2672, 
	2677, 2679, 2701, 2719, 2721, 2723, 2726, 2729, 
	2732, 2736, 2740, 2744, 2749, 2751, 2753, 2756, 
	2759, 2762, 2765, 2768, 2771, 2773, 2775, 2779, 
	2783, 2787, 2791, 2795, 2799, 2803, 2807, 2811, 
	2815, 2819, 2821, 2825, 2830, 2833, 2835, 2840, 
	2845, 2850, 2855, 2860, 2865, 2870, 2875, 2880, 
	2883, 2885, 2889, 2893, 2897, 2901, 2905, 2909, 
	2913, 2917, 2921, 2925, 2927, 2931, 2935, 2939, 
	2943, 2947, 2951, 2955, 2959, 2963, 2967, 2971, 
	2973, 2977, 2981, 2985, 2989, 2993, 2997, 3001, 
	3005, 3009, 3013, 3017, 3019, 3023, 3027, 3031, 
	3035, 3039, 3043, 3047, 3051, 3055, 3059, 3063, 
	3065, 3069, 3073, 3077, 3081, 3085, 3089, 3093, 
	3097, 3101, 3105, 3109, 3116, 3119, 3122, 3125, 
	3128, 3130, 3132, 3136, 3140, 3144, 3148, 3152, 
	3156, 3160, 3164, 3168, 3172, 3176, 3179, 3182, 
	3185, 3188, 3191, 3194, 3197, 3200, 3203, 3206, 
	3208, 3210, 3214, 3218, 3222, 3226, 3230, 3234, 
	3238, 3242, 3246, 3250, 3254, 3257, 3260, 3263, 
	3266, 3269, 3272, 3275, 3278, 3281, 3284, 3286, 
	3288, 3292, 3296, 3300, 3304, 3308, 3312, 3316, 
	3320, 3324, 3328, 3332, 3334, 3338, 3341, 3343, 
	3347, 3351, 3355, 3359, 3363, 3367, 3371, 3375, 
	3379, 3383, 3387, 3391, 3395, 3399, 3403, 3407, 
	3411, 3415, 3419, 3423, 3427, 3431, 3434, 3437, 
	3440, 3443, 3446, 3448, 3450, 3454, 3458, 3462, 
	3466, 3470, 3474, 3478, 3482, 3486, 3490, 3494, 
	3496, 3500, 3504, 3508, 3512, 3516, 3520, 3524, 
	3528, 3532, 3536, 3540, 3545, 3547, 3552, 3557, 
	3560, 3563, 3566, 3570, 3572, 3574, 3578, 3580, 
	3605, 3612, 3617, 3626, 3633, 3640, 3647, 3654, 
	3659, 3668, 3675, 3684, 3691, 3698, 3705, 3712, 
	3719, 3727, 3734, 3741, 3748, 3755, 3762, 3769, 
	3776, 3781, 3788, 3795, 3802, 3809, 3816, 3823, 
	3830, 3837, 3844, 3851, 3858, 3865, 3872, 3879, 
	3886, 3893, 3900, 3907, 3912, 3929, 3936, 3943, 
	3950, 3957, 3964, 3969, 3976, 3983, 3990, 3995, 
	4002, 4009, 4016, 4021, 4030, 4037, 4044, 4051, 
	4058, 4063, 4072, 4079, 4087, 4095, 4105, 4113, 
	4118, 4123, 4132, 4139, 4147, 4155, 4160, 4167, 
	4174, 4181, 4188, 4195, 4202, 4210, 4218, 4223, 
	4230, 4239, 4246, 4253, 4261, 4267, 4273, 4280, 
	4287, 4293, 4298, 4304, 4308, 4313, 4321, 4328, 
	4335, 4342, 4349, 4357, 4363, 4369, 4376, 4382, 
	4388, 4397, 4403, 4410, 4417, 4424, 4431, 4438, 
	4446, 4452, 4458, 4463, 4469, 4475, 4480, 4487, 
	4494, 4501, 4508, 4515, 4522, 4527, 4532, 4539, 
	4546, 4553, 4560, 4565, 4572, 4579, 4586, 4593, 
	4600, 4607, 4614, 4619, 4636, 4643, 4648, 4655, 
	4662, 4670, 4678, 4691, 4700, 4708, 4715, 4722, 
	4729, 4733, 4735, 4738, 4741, 4744, 4746, 4753, 
	4764, 4773, 4779, 4786, 4793, 4800, 4806, 4815, 
	4824, 4833, 4843, 4851, 4859, 4867, 4875, 4881, 
	4886, 4890, 4896, 4905, 4911, 4918, 4926, 4933, 
	4940, 4947, 4955, 4961, 4967, 4972, 4978, 4985, 
	4992, 4999, 5007, 5013, 5019, 5026, 5032, 5040, 
	5049, 5057, 5063, 5068, 5077, 5083, 5090, 5097, 
	5104, 5112, 5118, 5124, 5129, 5135, 5142, 5149, 
	5156, 5164, 5170, 5176, 5183, 5189, 5196, 5203, 
	5210, 5218, 5224, 5230, 5237, 5244, 5250, 5260, 
	5267, 5275, 5283, 5291, 5300, 5307, 5314, 5320, 
	5327, 5333, 5340, 5346, 5350, 5352, 5355, 5358, 
	5361, 5363, 5370, 5378, 5386, 5394, 5401, 5404, 
	5407, 5410, 5414, 5416, 5418, 5422, 5424, 5437, 
	5447, 5457, 5465, 5476, 5489, 5497, 5500, 5509, 
	5518, 5527, 5530, 5543, 5554, 5564, 5574, 5584, 
	5594, 5608, 5617, 5620, 5634, 5648, 5662, 5672, 
	5682, 5692, 5702, 5711, 5717, 5725, 5733, 5739, 
	5751, 5758, 5770, 5781, 5792, 5802, 5812, 5822, 
	5832, 5841, 5847, 5858, 5867, 5876, 5882, 5888, 
	5897, 5903, 5909, 5926, 5930, 5935, 5937, 5943, 
	5946, 5949, 5952, 5955, 5957, 5959, 5962, 5967, 
	5970, 5973, 5976, 5978, 5980, 5985, 5990, 5996, 
	6000, 6005, 6011, 6018, 6024, 6027, 6030, 6033, 
	6037, 6039, 6041, 6045, 6047, 6053, 6056, 6059, 
	6062, 6065, 6068, 6071, 6074, 6077, 6079, 6081, 
	6086, 6089, 6092, 6095, 6098, 6100, 6105, 6108, 
	6113, 6117, 6123, 6128, 6131, 6134, 6139, 6147, 
	6152, 6159, 6164, 6166, 6169, 6172, 6175, 6178, 
	6183, 6191, 6196, 6203, 6206, 6209, 6212, 6216, 
	6218, 6220, 6224, 6229, 6231, 6234, 6237, 6240, 
	6243, 6246, 6249, 6251, 6257, 6260, 6263, 6266, 
	6269, 6272, 6276, 6278, 6281, 6284, 6287, 6290, 
	6292, 6295, 6297, 6299, 6304, 6310, 6312, 6332, 
	6352, 6373, 6394, 6416, 6438, 6460, 6486, 6509, 
	6532, 6553, 6577, 6598, 6619, 6641, 6663, 6685, 
	6711, 6734, 6757, 6781, 6802, 6824, 6826, 6829, 
	6832, 6835, 6839, 6843, 6847, 6852, 6854, 6867, 
	6869, 6872, 6875, 6878, 6881, 6883, 6885, 6888, 
	6891, 6894, 6897, 6899, 6901, 6904, 6907, 6910, 
	6913, 6916, 6919, 6922, 6924, 6926, 6929, 6932, 
	6935, 6938, 6941, 6944, 6947, 6949, 6954, 6957, 
	6960, 6963, 6966, 6969, 6972, 6975, 6977, 6986, 
	6989, 6992, 6995, 6997, 7000, 7003, 7006, 7008, 
	7011, 7014, 7017, 7019, 7021, 7024, 7027, 7033, 
	7039, 7046, 7050, 7058, 7062, 7067, 7071, 7075, 
	7080, 7087, 7090, 7093, 7096, 7099, 7103, 7109, 
	7116, 7120, 7128, 7132, 7137, 7141, 7145, 7150, 
	7157, 7166, 7169, 7172, 7175, 7179, 7185, 7192, 
	7196, 7204, 7208, 7213, 7217, 7221, 7226, 7233, 
	7237, 7243, 7250, 7254, 7262, 7266, 7271, 7275, 
	7279, 7284, 7291, 7297, 7303, 7310, 7314, 7322, 
	7326, 7331, 7335, 7339, 7344, 7351, 7354, 7357, 
	7361, 7367, 7374, 7378, 7386, 7390, 7395, 7399, 
	7403, 7408, 7415, 7419, 7425, 7432, 7436, 7444, 
	7448, 7453, 7457, 7461, 7466, 7473, 7478, 7481, 
	7484, 7487, 7490, 7493, 7496, 7499, 7501, 7510, 
	7513, 7516, 7519, 7521, 7524, 7527, 7530, 7532, 
	7535, 7538, 7541, 7543, 7545, 7548, 7551, 7557, 
	7563, 7570, 7574, 7582, 7586, 7591, 7595, 7599, 
	7604, 7611, 7614, 7617, 7620, 7623, 7627, 7633, 
	7640, 7644, 7652, 7656, 7661, 7665, 7669, 7674, 
	7681, 7690, 7693, 7696, 7699, 7703, 7709, 7716, 
	7720, 7728, 7732, 7737, 7741, 7745, 7750, 7757, 
	7761, 7767, 7774, 7778, 7786, 7790, 7795, 7799, 
	7803, 7808, 7815, 7821, 7827, 7834, 7838, 7846, 
	7850, 7855, 7859, 7863, 7868, 7875, 7878, 7881, 
	7885, 7891, 7898, 7902, 7910, 7914, 7919, 7923, 
	7927, 7932, 7939, 7943, 7949, 7956, 7960, 7968, 
	7972, 7977, 7981, 7985, 7990, 7997, 8008, 8013, 
	8020, 8023, 8027, 8031, 8037, 8054, 8057, 8062, 
	8067, 8070, 8073, 8078, 8081, 8083, 8086, 8101, 
	8103, 8107, 8119, 8129, 8182, 8184, 8188, 8190, 
	8192, 8197, 8202, 8213, 8216, 8223, 8225, 8229, 
	8235, 8238, 8241, 8244, 8246, 8268, 8290, 8308, 
	8324, 8329, 8335, 8339, 8343, 8347, 8351, 8355, 
	8359, 8363, 8367, 8371, 8375, 8379, 8383, 8388, 
	8393, 8401, 8409, 8417, 8425, 8433, 8440, 8444, 
	8448, 8452, 8456, 8460, 8464, 8468, 8472, 8476, 
	8480, 8482, 8483, 8491, 8499, 8507, 8514, 8518, 
	8522, 8526, 8530, 8534, 8538, 8542, 8546, 8550, 
	8554, 8556, 8557, 8565, 8573, 8581, 8589, 8597, 
	8605, 8612, 8616, 8620, 8624, 8628, 8632, 8636, 
	8640, 8644, 8648, 8652, 8654, 8655, 8663, 8671, 
	8679, 8687, 8694, 8699, 8705, 8710, 8715, 8720, 
	8725, 8730, 8735, 8740, 8745, 8750, 8753, 8755, 
	8763, 8771, 8779, 8787, 8794, 8798, 8802, 8806, 
	8810, 8814, 8818, 8822, 8826, 8830, 8834, 8836, 
	8837, 8845, 8853, 8861, 8870, 8886, 8908, 8930, 
	8948, 8953, 8960, 8968, 8976, 8983, 8987, 8991, 
	8995, 8999, 9003, 9007, 9011, 9015, 9019, 9023, 
	9025, 9026, 9036, 9044, 9052, 9060, 9067, 9069, 
	9079, 9087, 9094, 9098, 9102, 9106, 9110, 9114, 
	9118, 9122, 9126, 9130, 9134, 9136, 9137, 9145, 
	9152, 9156, 9160, 9164, 9168, 9172, 9176, 9180, 
	9184, 9188, 9192, 9194, 9195, 9203, 9211, 9219, 
	9227, 9235, 9242, 9246, 9250, 9254, 9258, 9262, 
	9266, 9270, 9274, 9278, 9282, 9284, 9285, 9293, 
	9301, 9309, 9317, 9325, 9332, 9336, 9340, 9344, 
	9348, 9352, 9356, 9360, 9364, 9368, 9372, 9374, 
	9375, 9385, 9393, 9400, 9404, 9408, 9412, 9416, 
	9420, 9424, 9428, 9432, 9436, 9440, 9442, 9443, 
	9447, 9451, 9455, 9459, 9463, 9467, 9471, 9475, 
	9479, 9483, 9485, 9486, 9490, 9494, 9498, 9502, 
	9506, 9510, 9514, 9518, 9522, 9526, 9528, 9529, 
	9537, 9545, 9553, 9560, 9565, 9567, 9572, 9577, 
	9582, 9587, 9592, 9597, 9602, 9607, 9612, 9615, 
	9617, 9625, 9633, 9641, 9648, 9652, 9656, 9660, 
	9664, 9668, 9672, 9676, 9680, 9684, 9688, 9690, 
	9691, 9695, 9699, 9703, 9707, 9711, 9715, 9719, 
	9723, 9727, 9731, 9733, 9734, 9742, 9750, 9758, 
	9765, 9769, 9773, 9777, 9781, 9785, 9789, 9793, 
	9797, 9801, 9805, 9807, 9808, 9834, 9837, 9839, 
	9845, 9850, 9855, 9860, 9865, 9870, 9877, 9882, 
	9887, 9893, 9895, 9919, 9924, 9949, 9964, 9984, 
	10004, 10009, 10012, 10014, 10016, 10021, 10024, 10026, 
	10028, 10031, 10037
};

static const short _dtext_indicies[] = {
	1, 2, 1, 2, 0, 1, 4, 1, 
	4, 5, 6, 3, 7, 8, 9, 7, 
	8, 9, 3, 10, 10, 3, 11, 11, 
	3, 12, 12, 3, 13, 13, 3, 14, 
	14, 3, 15, 3, 16, 16, 3, 17, 
	3, 18, 17, 18, 17, 3, 19, 19, 
	3, 20, 20, 3, 21, 21, 3, 22, 
	22, 3, 23, 3, 24, 25, 26, 24, 
	25, 26, 3, 27, 27, 3, 28, 28, 
	3, 29, 29, 3, 30, 30, 3, 31, 
	31, 3, 15, 3, 32, 32, 3, 17, 
	3, 33, 33, 3, 34, 34, 3, 35, 
	35, 3, 36, 36, 3, 23, 3, 3, 
	38, 3, 3, 38, 37, 39, 39, 40, 
	3, 41, 41, 3, 42, 42, 3, 43, 
	43, 3, 44, 44, 3, 45, 45, 3, 
	46, 46, 3, 47, 47, 3, 48, 48, 
	3, 49, 49, 3, 50, 3, 10, 51, 
	10, 51, 3, 52, 53, 52, 53, 3, 
	54, 54, 3, 55, 55, 56, 57, 3, 
	55, 55, 56, 3, 56, 56, 58, 58, 
	58, 3, 60, 59, 59, 59, 3, 62, 
	63, 62, 63, 61, 65, 66, 65, 66, 
	64, 67, 67, 3, 68, 68, 3, 69, 
	69, 70, 71, 3, 3, 73, 3, 3, 
	73, 74, 75, 72, 3, 3, 3, 77, 
	76, 3, 74, 3, 3, 74, 75, 72, 
	78, 78, 3, 79, 79, 3, 80, 80, 
	3, 81, 81, 3, 82, 82, 3, 83, 
	83, 84, 85, 3, 3, 87, 3, 3, 
	87, 88, 89, 86, 3, 3, 3, 91, 
	90, 3, 88, 3, 3, 88, 89, 86, 
	92, 92, 3, 93, 93, 3, 94, 94, 
	3, 95, 95, 3, 96, 96, 3, 97, 
	97, 3, 98, 3, 100, 101, 100, 101, 
	99, 102, 102, 3, 103, 103, 3, 104, 
	104, 3, 105, 105, 3, 106, 106, 3, 
	107, 107, 3, 108, 109, 109, 3, 108, 
	3, 19, 110, 19, 110, 3, 111, 3, 
	112, 113, 3, 114, 114, 114, 114, 114, 
	114, 114, 114, 3, 115, 115, 115, 116, 
	115, 115, 115, 115, 3, 27, 117, 27, 
	117, 3, 118, 119, 118, 119, 3, 120, 
	120, 3, 121, 121, 122, 57, 3, 121, 
	121, 122, 3, 122, 122, 123, 123, 123, 
	3, 60, 124, 124, 124, 3, 125, 125, 
	3, 126, 126, 3, 127, 127, 128, 71, 
	3, 3, 130, 3, 3, 130, 131, 75, 
	129, 3, 3, 3, 77, 132, 3, 131, 
	3, 3, 131, 75, 129, 133, 133, 3, 
	134, 134, 3, 135, 135, 3, 136, 136, 
	3, 137, 137, 3, 138, 138, 139, 85, 
	3, 3, 141, 3, 3, 141, 142, 89, 
	140, 3, 3, 3, 91, 143, 3, 142, 
	3, 3, 142, 89, 140, 144, 144, 3, 
	145, 145, 3, 146, 146, 3, 147, 147, 
	3, 148, 148, 3, 149, 149, 3, 98, 
	3, 150, 150, 3, 151, 151, 3, 152, 
	152, 3, 153, 153, 3, 50, 3, 154, 
	154, 3, 155, 155, 3, 156, 156, 3, 
	157, 157, 3, 158, 158, 3, 159, 159, 
	3, 160, 108, 160, 3, 108, 3, 33, 
	161, 33, 161, 3, 111, 3, 162, 3, 
	163, 164, 163, 164, 165, 165, 165, 3, 
	167, 167, 166, 169, 169, 168, 169, 169, 
	170, 168, 169, 169, 171, 168, 169, 169, 
	172, 168, 173, 172, 173, 172, 168, 174, 
	175, 174, 175, 176, 176, 176, 3, 177, 
	178, 177, 178, 3, 180, 181, 182, 183, 
	184, 180, 181, 182, 183, 184, 179, 185, 
	179, 182, 182, 179, 186, 179, 187, 188, 
	188, 179, 189, 189, 179, 190, 190, 179, 
	191, 191, 179, 180, 180, 179, 192, 179, 
	193, 179, 194, 194, 179, 195, 179, 196, 
	197, 197, 179, 198, 198, 179, 199, 199, 
	179, 200, 200, 179, 201, 201, 179, 202, 
	179, 203, 204, 205, 206, 203, 204, 205, 
	206, 179, 185, 179, 186, 179, 187, 179, 
	192, 179, 193, 179, 195, 179, 196, 179, 
	202, 179, 208, 207, 209, 207, 211, 210, 
	212, 213, 212, 213, 207, 213, 215, 213, 
	215, 214, 212, 217, 212, 217, 218, 219, 
	216, 220, 221, 222, 220, 221, 222, 216, 
	223, 223, 216, 224, 216, 225, 224, 225, 
	224, 216, 226, 226, 216, 227, 227, 216, 
	228, 228, 216, 229, 229, 216, 230, 230, 
	216, 231, 231, 216, 232, 233, 233, 216, 
	234, 232, 234, 232, 216, 232, 216, 235, 
	235, 216, 236, 236, 216, 237, 237, 216, 
	238, 238, 216, 239, 216, 240, 241, 242, 
	240, 241, 242, 216, 243, 243, 216, 224, 
	216, 244, 244, 216, 245, 245, 216, 246, 
	246, 216, 247, 247, 216, 248, 248, 216, 
	249, 249, 216, 250, 232, 250, 216, 232, 
	216, 251, 251, 216, 252, 252, 216, 253, 
	253, 216, 254, 254, 216, 239, 216, 256, 
	255, 257, 258, 257, 258, 255, 259, 260, 
	259, 260, 207, 261, 261, 207, 262, 262, 
	207, 263, 263, 207, 264, 264, 207, 265, 
	207, 266, 266, 207, 267, 267, 207, 268, 
	268, 207, 269, 269, 207, 270, 271, 272, 
	270, 271, 272, 207, 273, 207, 274, 207, 
	275, 207, 276, 255, 277, 278, 277, 278, 
	255, 279, 280, 279, 280, 207, 281, 281, 
	207, 282, 282, 207, 283, 283, 207, 284, 
	284, 207, 265, 207, 285, 285, 207, 286, 
	286, 207, 287, 287, 207, 269, 269, 207, 
	288, 289, 290, 288, 289, 290, 207, 273, 
	207, 274, 207, 275, 207, 291, 291, 292, 
	216, 216, 294, 216, 216, 294, 293, 295, 
	296, 220, 297, 221, 222, 296, 220, 297, 
	221, 222, 216, 298, 257, 299, 300, 301, 
	258, 298, 257, 299, 300, 301, 258, 216, 
	302, 302, 216, 303, 303, 207, 304, 304, 
	207, 305, 305, 207, 306, 306, 207, 307, 
	307, 207, 308, 308, 207, 309, 309, 207, 
	310, 310, 207, 311, 207, 312, 312, 216, 
	313, 313, 207, 314, 314, 207, 315, 315, 
	207, 316, 316, 207, 317, 207, 318, 318, 
	207, 319, 319, 207, 320, 320, 207, 321, 
	321, 207, 311, 207, 322, 322, 216, 323, 
	323, 207, 324, 324, 207, 325, 325, 207, 
	326, 326, 207, 327, 327, 207, 328, 329, 
	329, 207, 328, 207, 330, 330, 216, 331, 
	331, 216, 332, 332, 216, 333, 333, 334, 
	335, 216, 333, 333, 334, 216, 334, 334, 
	336, 336, 336, 216, 338, 337, 337, 337, 
	216, 339, 339, 216, 340, 340, 216, 341, 
	341, 216, 342, 342, 216, 343, 343, 216, 
	344, 344, 216, 335, 216, 345, 216, 346, 
	347, 216, 348, 348, 348, 348, 348, 348, 
	348, 348, 216, 349, 349, 349, 350, 349, 
	349, 349, 349, 216, 351, 352, 240, 353, 
	241, 242, 352, 240, 353, 241, 242, 216, 
	277, 354, 306, 355, 278, 277, 354, 306, 
	355, 278, 216, 356, 356, 216, 357, 357, 
	216, 358, 358, 216, 359, 359, 216, 360, 
	360, 216, 317, 216, 361, 361, 216, 362, 
	362, 216, 363, 363, 216, 364, 364, 216, 
	365, 365, 216, 366, 366, 216, 367, 328, 
	367, 216, 328, 216, 368, 368, 216, 369, 
	369, 216, 370, 370, 216, 371, 371, 372, 
	335, 216, 371, 371, 372, 216, 372, 372, 
	373, 373, 373, 216, 338, 374, 374, 374, 
	216, 375, 375, 216, 376, 376, 216, 377, 
	377, 216, 378, 378, 216, 379, 379, 216, 
	380, 380, 216, 335, 216, 381, 216, 382, 
	216, 383, 384, 383, 384, 385, 385, 385, 
	216, 387, 387, 386, 389, 389, 388, 389, 
	389, 390, 388, 389, 389, 391, 388, 389, 
	389, 392, 388, 393, 392, 393, 392, 388, 
	394, 395, 394, 395, 396, 396, 396, 216, 
	397, 398, 397, 398, 216, 400, 399, 401, 
	214, 402, 403, 404, 405, 404, 214, 407, 
	406, 408, 406, 409, 408, 406, 407, 407, 
	406, 410, 408, 406, 407, 407, 407, 406, 
	411, 412, 408, 406, 407, 407, 407, 406, 
	407, 407, 407, 407, 406, 413, 406, 414, 
	415, 416, 406, 418, 406, 418, 418, 418, 
	406, 406, 418, 406, 406, 406, 408, 413, 
	417, 406, 406, 418, 407, 419, 406, 420, 
	406, 421, 420, 406, 419, 419, 406, 422, 
	420, 406, 419, 419, 419, 406, 423, 424, 
	420, 406, 419, 419, 419, 406, 419, 419, 
	419, 419, 406, 425, 406, 426, 427, 428, 
	406, 430, 407, 430, 430, 430, 406, 406, 
	431, 406, 406, 406, 420, 425, 429, 406, 
	406, 430, 419, 434, 435, 436, 207, 431, 
	407, 431, 431, 431, 431, 207, 432, 433, 
	437, 207, 207, 431, 438, 438, 207, 432, 
	207, 439, 432, 207, 438, 438, 207, 440, 
	432, 207, 438, 438, 438, 207, 441, 442, 
	432, 207, 438, 438, 438, 207, 438, 438, 
	438, 438, 207, 433, 207, 443, 443, 214, 
	444, 444, 214, 445, 445, 214, 446, 447, 
	447, 214, 448, 214, 449, 214, 453, 453, 
	450, 451, 452, 453, 453, 453, 214, 453, 
	214, 453, 454, 453, 450, 451, 452, 453, 
	453, 453, 214, 450, 214, 451, 214, 457, 
	458, 459, 461, 461, 455, 456, 460, 461, 
	461, 461, 207, 461, 207, 455, 207, 462, 
	455, 207, 463, 461, 207, 457, 458, 459, 
	407, 454, 419, 464, 431, 461, 455, 456, 
	460, 461, 461, 461, 207, 465, 455, 207, 
	463, 461, 463, 461, 463, 461, 207, 466, 
	467, 455, 207, 463, 463, 461, 207, 463, 
	463, 463, 461, 207, 456, 207, 468, 207, 
	446, 214, 469, 469, 470, 470, 214, 214, 
	214, 472, 214, 471, 473, 473, 214, 474, 
	474, 214, 475, 475, 214, 476, 477, 477, 
	214, 478, 214, 479, 214, 214, 214, 214, 
	471, 476, 214, 480, 210, 482, 482, 484, 
	485, 486, 487, 210, 488, 483, 481, 490, 
	490, 492, 493, 494, 491, 489, 495, 495, 
	496, 497, 498, 491, 489, 491, 207, 207, 
	491, 489, 490, 490, 492, 493, 494, 491, 
	499, 489, 500, 501, 502, 504, 502, 505, 
	503, 503, 503, 207, 506, 506, 497, 498, 
	207, 507, 207, 509, 509, 510, 207, 207, 
	508, 512, 512, 513, 207, 207, 511, 514, 
	514, 515, 207, 207, 511, 516, 207, 506, 
	517, 502, 497, 502, 498, 503, 503, 503, 
	207, 502, 502, 502, 503, 503, 503, 207, 
	490, 490, 492, 493, 518, 491, 489, 519, 
	519, 520, 521, 210, 210, 508, 522, 522, 
	523, 524, 210, 210, 508, 512, 512, 513, 
	210, 210, 525, 511, 526, 527, 528, 530, 
	528, 210, 210, 529, 529, 529, 511, 531, 
	531, 532, 210, 210, 511, 533, 210, 531, 
	534, 528, 532, 528, 210, 210, 529, 529, 
	529, 511, 512, 535, 528, 513, 528, 210, 
	210, 529, 529, 529, 511, 514, 536, 528, 
	515, 528, 210, 210, 529, 529, 529, 511, 
	490, 490, 492, 493, 537, 491, 489, 509, 
	509, 538, 510, 210, 210, 508, 512, 512, 
	513, 539, 210, 210, 511, 512, 512, 540, 
	513, 210, 210, 511, 512, 512, 513, 541, 
	210, 511, 542, 210, 543, 543, 544, 493, 
	210, 545, 545, 546, 497, 210, 547, 210, 
	548, 549, 550, 504, 550, 551, 551, 551, 
	210, 552, 552, 497, 210, 552, 553, 550, 
	497, 550, 551, 551, 551, 210, 550, 550, 
	550, 551, 551, 551, 210, 490, 490, 492, 
	554, 493, 555, 491, 489, 509, 509, 556, 
	510, 210, 210, 508, 557, 557, 558, 559, 
	210, 210, 511, 560, 560, 561, 532, 210, 
	210, 511, 490, 490, 492, 493, 562, 491, 
	489, 509, 509, 510, 563, 210, 508, 542, 
	210, 565, 566, 567, 564, 564, 564, 210, 
	568, 568, 569, 493, 494, 210, 570, 570, 
	571, 497, 498, 210, 499, 210, 564, 210, 
	568, 568, 569, 493, 518, 210, 572, 210, 
	565, 210, 573, 210, 207, 573, 573, 575, 
	576, 577, 578, 579, 580, 575, 207, 207, 
	574, 207, 582, 582, 207, 583, 584, 207, 
	581, 207, 585, 585, 586, 587, 588, 589, 
	590, 207, 591, 592, 586, 207, 581, 207, 
	582, 582, 587, 588, 589, 590, 207, 593, 
	584, 207, 581, 207, 582, 582, 594, 595, 
	596, 207, 581, 582, 582, 583, 584, 207, 
	207, 598, 207, 207, 598, 600, 599, 597, 
	207, 602, 207, 207, 602, 604, 603, 601, 
	207, 605, 207, 207, 605, 606, 603, 601, 
	207, 207, 207, 603, 207, 603, 601, 607, 
	207, 608, 207, 207, 609, 207, 207, 609, 
	610, 611, 599, 597, 207, 613, 207, 207, 
	613, 614, 615, 616, 617, 618, 597, 619, 
	620, 614, 599, 612, 207, 622, 207, 207, 
	622, 601, 583, 623, 603, 621, 207, 624, 
	207, 207, 624, 625, 626, 627, 628, 629, 
	601, 591, 630, 625, 603, 621, 207, 622, 
	207, 207, 622, 626, 627, 628, 629, 601, 
	593, 623, 603, 621, 207, 622, 207, 207, 
	622, 631, 595, 632, 603, 621, 207, 622, 
	207, 207, 622, 583, 623, 603, 601, 633, 
	207, 582, 582, 583, 634, 207, 207, 622, 
	207, 207, 622, 601, 635, 623, 603, 621, 
	207, 598, 207, 207, 598, 636, 600, 599, 
	597, 207, 602, 207, 207, 602, 637, 604, 
	603, 601, 207, 602, 207, 207, 602, 638, 
	604, 603, 601, 207, 602, 207, 207, 602, 
	639, 604, 603, 601, 207, 602, 207, 207, 
	602, 631, 604, 603, 601, 207, 622, 207, 
	207, 622, 640, 601, 641, 623, 603, 621, 
	207, 622, 207, 207, 622, 601, 595, 623, 
	603, 621, 207, 598, 207, 207, 598, 642, 
	600, 599, 597, 207, 622, 207, 207, 622, 
	601, 643, 623, 603, 621, 207, 598, 207, 
	207, 598, 644, 600, 599, 597, 207, 602, 
	207, 207, 602, 631, 604, 603, 601, 207, 
	598, 207, 207, 598, 645, 646, 647, 600, 
	599, 642, 642, 642, 597, 207, 602, 207, 
	207, 602, 631, 604, 603, 601, 207, 622, 
	207, 207, 622, 595, 623, 603, 601, 207, 
	602, 207, 207, 602, 648, 604, 603, 601, 
	207, 602, 207, 207, 602, 649, 604, 603, 
	601, 582, 582, 583, 650, 207, 207, 582, 
	582, 207, 635, 584, 207, 581, 207, 582, 
	582, 651, 207, 641, 584, 207, 581, 207, 
	582, 582, 207, 595, 584, 207, 581, 207, 
	582, 582, 207, 643, 584, 207, 581, 652, 
	653, 654, 594, 594, 594, 207, 594, 207, 
	582, 582, 595, 584, 207, 655, 207, 652, 
	207, 656, 210, 657, 658, 658, 210, 659, 
	659, 659, 207, 660, 660, 660, 207, 661, 
	661, 661, 207, 662, 662, 662, 207, 663, 
	663, 663, 207, 664, 664, 664, 207, 665, 
	665, 665, 207, 666, 666, 666, 207, 667, 
	667, 667, 207, 668, 668, 668, 210, 669, 
	210, 670, 671, 671, 210, 672, 672, 672, 
	207, 673, 673, 673, 207, 674, 674, 674, 
	207, 675, 675, 675, 207, 676, 676, 676, 
	207, 677, 677, 677, 207, 678, 678, 678, 
	207, 679, 679, 679, 207, 680, 680, 680, 
	207, 681, 681, 681, 210, 682, 210, 683, 
	684, 684, 210, 685, 685, 685, 207, 686, 
	686, 686, 207, 687, 687, 687, 207, 688, 
	688, 688, 207, 689, 689, 689, 207, 690, 
	690, 690, 207, 691, 691, 691, 207, 692, 
	692, 692, 207, 693, 693, 693, 207, 694, 
	694, 694, 210, 695, 210, 696, 697, 697, 
	210, 699, 699, 699, 699, 699, 698, 700, 
	700, 700, 207, 701, 701, 701, 207, 702, 
	702, 702, 207, 703, 703, 703, 207, 704, 
	704, 704, 207, 705, 705, 705, 207, 706, 
	706, 706, 207, 707, 707, 707, 207, 708, 
	708, 708, 207, 709, 709, 709, 210, 710, 
	210, 711, 712, 712, 210, 713, 713, 713, 
	207, 714, 714, 714, 207, 715, 715, 715, 
	207, 716, 716, 716, 207, 717, 717, 717, 
	207, 718, 718, 718, 207, 719, 719, 719, 
	207, 720, 720, 720, 207, 721, 721, 721, 
	207, 722, 722, 722, 210, 723, 210, 724, 
	210, 728, 728, 725, 726, 727, 728, 728, 
	728, 210, 728, 210, 728, 729, 728, 725, 
	726, 727, 728, 728, 728, 210, 725, 210, 
	726, 210, 732, 733, 734, 736, 736, 730, 
	731, 735, 736, 736, 736, 207, 736, 207, 
	730, 207, 737, 730, 207, 738, 736, 207, 
	732, 733, 734, 739, 729, 740, 741, 742, 
	736, 730, 731, 735, 736, 736, 736, 207, 
	743, 730, 207, 738, 736, 738, 736, 738, 
	736, 207, 744, 745, 730, 207, 738, 738, 
	736, 207, 738, 738, 738, 736, 207, 731, 
	207, 739, 746, 747, 746, 748, 747, 746, 
	739, 739, 746, 749, 747, 746, 739, 739, 
	739, 746, 750, 751, 747, 746, 739, 739, 
	739, 746, 739, 739, 739, 739, 746, 752, 
	746, 753, 754, 755, 746, 757, 746, 757, 
	757, 757, 746, 746, 757, 746, 746, 746, 
	747, 752, 756, 746, 746, 757, 739, 740, 
	746, 758, 746, 759, 758, 746, 740, 740, 
	746, 760, 758, 746, 740, 740, 740, 746, 
	761, 762, 758, 746, 740, 740, 740, 746, 
	740, 740, 740, 740, 746, 763, 746, 764, 
	765, 766, 746, 768, 739, 768, 768, 768, 
	746, 746, 742, 746, 746, 746, 758, 763, 
	767, 746, 746, 768, 740, 771, 772, 773, 
	207, 742, 739, 742, 742, 742, 742, 207, 
	769, 770, 774, 207, 207, 742, 775, 775, 
	207, 769, 207, 776, 769, 207, 775, 775, 
	207, 777, 769, 207, 775, 775, 775, 207, 
	778, 779, 769, 207, 775, 775, 775, 207, 
	775, 775, 775, 775, 207, 770, 207, 780, 
	207, 781, 781, 210, 782, 782, 210, 783, 
	783, 210, 784, 784, 210, 785, 785, 210, 
	786, 786, 210, 787, 210, 788, 210, 789, 
	790, 790, 210, 791, 791, 791, 207, 792, 
	792, 792, 207, 793, 793, 793, 207, 794, 
	794, 794, 207, 795, 795, 795, 207, 796, 
	796, 796, 207, 797, 797, 797, 207, 798, 
	798, 798, 207, 799, 799, 799, 207, 800, 
	800, 800, 210, 801, 210, 802, 803, 803, 
	210, 804, 805, 806, 806, 210, 807, 807, 
	210, 808, 210, 804, 809, 810, 810, 210, 
	804, 811, 812, 812, 210, 804, 813, 814, 
	814, 210, 804, 815, 816, 816, 210, 804, 
	817, 818, 818, 210, 804, 819, 820, 820, 
	210, 804, 821, 822, 822, 210, 804, 823, 
	824, 824, 210, 804, 825, 826, 826, 210, 
	804, 825, 210, 804, 210, 826, 826, 826, 
	210, 824, 824, 824, 210, 822, 822, 822, 
	210, 820, 820, 820, 210, 818, 818, 818, 
	210, 816, 816, 816, 210, 814, 814, 814, 
	210, 812, 812, 812, 210, 810, 810, 810, 
	210, 806, 806, 806, 210, 827, 210, 828, 
	829, 829, 210, 830, 830, 830, 207, 831, 
	831, 831, 207, 832, 832, 832, 207, 833, 
	833, 833, 207, 834, 834, 834, 207, 835, 
	835, 835, 207, 836, 836, 836, 207, 837, 
	837, 837, 207, 838, 838, 838, 207, 839, 
	839, 839, 210, 840, 210, 841, 842, 842, 
	210, 843, 843, 843, 207, 844, 844, 844, 
	207, 845, 845, 845, 207, 846, 846, 846, 
	207, 847, 847, 847, 207, 848, 848, 848, 
	207, 849, 849, 849, 207, 850, 850, 850, 
	207, 851, 851, 851, 207, 852, 852, 852, 
	210, 853, 210, 854, 855, 855, 210, 856, 
	856, 856, 207, 857, 857, 857, 207, 858, 
	858, 858, 207, 859, 859, 859, 207, 860, 
	860, 860, 207, 861, 861, 861, 207, 862, 
	862, 862, 207, 863, 863, 863, 207, 864, 
	864, 864, 207, 865, 865, 865, 210, 866, 
	210, 867, 868, 868, 210, 869, 869, 869, 
	207, 870, 870, 870, 207, 871, 871, 871, 
	207, 872, 872, 872, 207, 873, 873, 873, 
	207, 874, 874, 874, 207, 875, 875, 875, 
	207, 876, 876, 876, 207, 877, 877, 877, 
	207, 878, 878, 878, 210, 879, 880, 881, 
	879, 880, 881, 210, 882, 882, 210, 883, 
	883, 210, 884, 884, 210, 885, 885, 210, 
	886, 210, 887, 210, 888, 889, 889, 210, 
	890, 890, 890, 207, 891, 891, 891, 207, 
	892, 892, 892, 207, 893, 893, 893, 207, 
	894, 894, 894, 207, 895, 895, 895, 207, 
	896, 896, 896, 207, 897, 897, 897, 207, 
	898, 898, 898, 207, 899, 899, 899, 210, 
	900, 900, 210, 901, 901, 210, 902, 902, 
	210, 903, 903, 210, 904, 904, 210, 905, 
	905, 210, 906, 906, 210, 907, 907, 210, 
	908, 908, 210, 909, 909, 210, 910, 210, 
	911, 210, 912, 913, 913, 210, 914, 914, 
	914, 207, 915, 915, 915, 207, 916, 916, 
	916, 207, 917, 917, 917, 207, 918, 918, 
	918, 207, 919, 919, 919, 207, 920, 920, 
	920, 207, 921, 921, 921, 207, 922, 922, 
	922, 207, 923, 923, 923, 210, 924, 924, 
	210, 925, 925, 210, 926, 926, 210, 927, 
	927, 210, 928, 928, 210, 929, 929, 210, 
	930, 930, 210, 931, 931, 210, 932, 932, 
	210, 933, 933, 210, 934, 210, 935, 210, 
	936, 937, 937, 210, 938, 938, 938, 207, 
	939, 939, 939, 207, 940, 940, 940, 207, 
	941, 941, 941, 207, 942, 942, 942, 207, 
	943, 943, 943, 207, 944, 944, 944, 207, 
	945, 945, 945, 207, 946, 946, 946, 207, 
	947, 947, 947, 210, 948, 210, 949, 950, 
	950, 210, 952, 952, 951, 953, 951, 954, 
	954, 954, 207, 955, 955, 955, 207, 956, 
	956, 956, 207, 957, 957, 957, 207, 958, 
	958, 958, 207, 959, 959, 959, 207, 960, 
	960, 960, 207, 961, 961, 961, 207, 962, 
	962, 962, 207, 963, 963, 963, 210, 964, 
	965, 965, 210, 966, 967, 967, 210, 968, 
	968, 968, 207, 969, 969, 969, 207, 970, 
	970, 970, 207, 971, 971, 971, 207, 972, 
	972, 972, 207, 973, 973, 973, 207, 974, 
	974, 974, 207, 975, 975, 975, 207, 976, 
	976, 976, 207, 977, 977, 977, 210, 978, 
	978, 210, 979, 979, 210, 980, 980, 210, 
	981, 981, 210, 982, 982, 210, 983, 210, 
	984, 210, 985, 986, 986, 210, 987, 987, 
	987, 207, 988, 988, 988, 207, 989, 989, 
	989, 207, 990, 990, 990, 207, 991, 991, 
	991, 207, 992, 992, 992, 207, 993, 993, 
	993, 207, 994, 994, 994, 207, 995, 995, 
	995, 207, 996, 996, 996, 210, 997, 210, 
	998, 999, 999, 210, 1000, 1000, 1000, 207, 
	1001, 1001, 1001, 207, 1002, 1002, 1002, 207, 
	1003, 1003, 1003, 207, 1004, 1004, 1004, 207, 
	1005, 1005, 1005, 207, 1006, 1006, 1006, 207, 
	1007, 1007, 1007, 207, 1008, 1008, 1008, 207, 
	1009, 1009, 1009, 210, 214, 214, 214, 1011, 
	1010, 1012, 214, 1013, 1013, 1014, 1014, 207, 
	207, 207, 1016, 207, 1015, 1017, 1017, 207, 
	1018, 1018, 207, 1019, 1019, 207, 1020, 1021, 
	1021, 207, 1022, 207, 1023, 207, 207, 207, 
	207, 1015, 1020, 207, 214, 214, 214, 1024, 
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 
	1033, 1011, 1024, 1025, 1026, 1027, 1028, 1029, 
	1030, 1031, 1032, 1033, 1010, 214, 214, 214, 
	1034, 1035, 1034, 1010, 214, 214, 214, 214, 
	1010, 214, 214, 214, 1036, 1037, 1011, 1036, 
	1037, 1010, 214, 214, 214, 1038, 1011, 1038, 
	1010, 214, 214, 214, 1039, 1011, 1039, 1010, 
	214, 214, 214, 1040, 1011, 1040, 1010, 214, 
	214, 214, 1041, 1011, 1041, 1010, 214, 214, 
	214, 1042, 1010, 214, 214, 214, 1043, 1044, 
	1011, 1043, 1044, 1010, 214, 214, 214, 1034, 
	1011, 1034, 1010, 214, 214, 214, 1045, 1046, 
	214, 1045, 1046, 1010, 214, 214, 214, 1047, 
	1011, 1047, 1010, 214, 214, 214, 1048, 1011, 
	1048, 1010, 214, 214, 214, 1049, 1011, 1049, 
	1010, 214, 214, 214, 1034, 1011, 1034, 1010, 
	214, 214, 214, 1050, 1011, 1050, 1010, 1051, 
	1051, 1010, 1010, 1010, 1010, 1010, 214, 214, 
	214, 214, 1052, 1011, 1052, 1010, 214, 214, 
	214, 1053, 1011, 1053, 1010, 214, 214, 214, 
	1054, 1011, 1054, 1010, 214, 214, 214, 1055, 
	1011, 1055, 1010, 214, 214, 214, 1056, 1011, 
	1056, 1010, 317, 1010, 1010, 1010, 1010, 1010, 
	214, 214, 214, 214, 1034, 1011, 1034, 1010, 
	214, 214, 214, 1057, 1010, 214, 214, 214, 
	1058, 1011, 1058, 1010, 214, 214, 214, 1059, 
	1011, 1059, 1010, 214, 214, 214, 1060, 1011, 
	1060, 1010, 214, 214, 214, 1061, 1011, 1061, 
	1010, 214, 214, 214, 1062, 1011, 1062, 1010, 
	214, 214, 214, 1034, 1011, 1034, 1010, 214, 
	214, 214, 1063, 1011, 1063, 1010, 214, 214, 
	214, 1064, 1011, 1064, 1010, 214, 214, 214, 
	1065, 1011, 1065, 1010, 214, 214, 214, 1066, 
	1011, 1066, 1010, 311, 1010, 1010, 1010, 1010, 
	1010, 214, 214, 214, 214, 1067, 1068, 1067, 
	1010, 214, 214, 214, 1069, 1011, 1069, 1010, 
	214, 214, 214, 1070, 1011, 1070, 1010, 214, 
	214, 214, 1071, 1011, 1071, 1010, 214, 214, 
	214, 1072, 1011, 1072, 1010, 214, 214, 214, 
	1073, 1011, 1073, 1010, 214, 214, 214, 1074, 
	328, 1074, 1010, 214, 214, 214, 328, 1010, 
	214, 214, 214, 1075, 1076, 1077, 1078, 1079, 
	1034, 1011, 1075, 1076, 1077, 1078, 1079, 1034, 
	1010, 214, 214, 214, 1080, 1011, 1080, 1010, 
	214, 214, 214, 1043, 1011, 1043, 1010, 214, 
	214, 214, 1081, 1011, 1081, 1010, 214, 214, 
	214, 1082, 1011, 1082, 1010, 214, 214, 214, 
	1034, 1011, 1034, 1010, 214, 214, 214, 273, 
	1010, 214, 214, 214, 1083, 274, 1083, 1010, 
	214, 214, 214, 1084, 1011, 1084, 1010, 214, 
	214, 214, 1034, 1011, 1034, 1010, 214, 214, 
	214, 275, 1010, 214, 214, 214, 1085, 1086, 
	1085, 1010, 214, 214, 214, 1034, 1011, 1034, 
	1010, 214, 214, 214, 1087, 1088, 1087, 1010, 
	214, 214, 214, 1089, 1010, 214, 214, 214, 
	1090, 1091, 1011, 1090, 1091, 1010, 214, 214, 
	214, 1092, 1011, 1092, 1010, 214, 214, 214, 
	1093, 1011, 1093, 1010, 214, 214, 214, 1094, 
	1011, 1094, 1010, 214, 214, 214, 1095, 1011, 
	1095, 1010, 214, 214, 214, 1096, 1010, 214, 
	214, 214, 1097, 1098, 1011, 1097, 1098, 1010, 
	214, 214, 214, 1099, 1011, 1099, 1010, 214, 
	1100, 214, 214, 1100, 1101, 1102, 1010, 214, 
	1100, 214, 214, 1100, 1101, 1011, 1010, 214, 
	1101, 214, 214, 1101, 1011, 1103, 1103, 1103, 
	1010, 214, 214, 214, 1105, 1104, 1104, 1104, 
	1010, 1107, 1108, 1107, 1108, 1106, 1110, 1111, 
	1110, 1111, 1109, 214, 214, 214, 1045, 1112, 
	214, 1045, 1112, 1010, 214, 214, 214, 1113, 
	1011, 1113, 1010, 214, 1114, 214, 214, 1114, 
	1115, 1116, 1010, 214, 1118, 214, 214, 1118, 
	1119, 1120, 1117, 214, 214, 214, 1122, 1121, 
	214, 1119, 214, 214, 1119, 1120, 1117, 214, 
	214, 214, 1123, 1011, 1123, 1010, 214, 214, 
	214, 1124, 1011, 1124, 1010, 214, 214, 214, 
	1125, 1011, 1125, 1010, 214, 214, 214, 1126, 
	1011, 1126, 1010, 214, 214, 214, 1127, 1011, 
	1127, 1010, 214, 1128, 214, 214, 1128, 1129, 
	1130, 1010, 214, 1132, 214, 214, 1132, 1133, 
	1134, 1131, 214, 214, 214, 1136, 1135, 214, 
	1133, 214, 214, 1133, 1134, 1131, 214, 214, 
	214, 1034, 1137, 1011, 1034, 1137, 1010, 214, 
	214, 214, 1138, 1011, 1138, 1010, 214, 214, 
	214, 1139, 1011, 1139, 1010, 214, 214, 214, 
	1140, 1141, 1011, 1141, 1010, 214, 214, 214, 
	1142, 1011, 1010, 214, 214, 214, 1143, 1011, 
	1010, 214, 214, 214, 1010, 1145, 1010, 1144, 
	214, 214, 214, 1010, 1146, 1010, 1144, 214, 
	214, 1148, 1149, 214, 1147, 207, 207, 1149, 
	207, 1147, 207, 207, 1150, 1149, 207, 1147, 
	207, 207, 207, 1151, 207, 207, 207, 1153, 
	1152, 214, 214, 214, 1154, 1154, 1155, 1155, 
	1151, 214, 214, 214, 1152, 1157, 1152, 1156, 
	214, 214, 214, 1153, 1158, 1158, 1152, 214, 
	214, 214, 1153, 1159, 1159, 1152, 214, 214, 
	214, 1153, 1160, 1160, 1152, 214, 214, 214, 
	1153, 1161, 1162, 1162, 1152, 214, 214, 214, 
	1153, 1163, 1152, 214, 214, 214, 1153, 1164, 
	1152, 214, 214, 214, 1152, 1165, 1152, 1156, 
	214, 214, 214, 1153, 1161, 1152, 214, 214, 
	1166, 1149, 214, 1147, 214, 214, 1167, 1167, 
	1168, 1149, 1168, 214, 1147, 214, 214, 1170, 
	1171, 214, 1169, 214, 214, 1172, 1170, 1171, 
	214, 1169, 214, 214, 214, 1151, 1174, 1151, 
	1173, 214, 214, 1175, 1149, 1175, 214, 1147, 
	214, 214, 1176, 1149, 1176, 214, 1147, 214, 
	214, 1177, 1149, 1177, 214, 1147, 214, 214, 
	1178, 1179, 1149, 1179, 214, 1147, 214, 214, 
	1180, 1149, 214, 1147, 214, 214, 1181, 1149, 
	214, 1147, 214, 214, 1171, 214, 1169, 214, 
	214, 1178, 1149, 214, 1147, 214, 214, 214, 
	1140, 1011, 1010, 214, 214, 214, 1182, 1010, 
	214, 214, 214, 1183, 1011, 1183, 1010, 214, 
	214, 214, 1184, 1011, 1184, 1010, 214, 214, 
	214, 1185, 1011, 1185, 1010, 214, 214, 214, 
	1186, 1011, 1186, 1010, 214, 214, 214, 1187, 
	1011, 1187, 1010, 214, 214, 214, 1188, 1011, 
	1188, 1010, 214, 214, 214, 1189, 1010, 1191, 
	1192, 1191, 1192, 1190, 214, 214, 214, 1193, 
	1011, 1193, 1010, 214, 214, 214, 1194, 1011, 
	1194, 1010, 214, 214, 214, 1195, 1011, 1195, 
	1010, 214, 214, 214, 1196, 1011, 1196, 1010, 
	214, 214, 214, 1197, 1010, 214, 214, 214, 
	1198, 1199, 1198, 1010, 214, 214, 214, 1200, 
	1011, 1200, 1010, 214, 214, 214, 1201, 1011, 
	1201, 1010, 214, 214, 214, 1202, 1011, 1202, 
	1010, 214, 214, 214, 1203, 1011, 1203, 1010, 
	214, 214, 214, 1204, 1011, 1204, 1010, 214, 
	214, 214, 1205, 1206, 1205, 1010, 214, 214, 
	214, 1206, 1010, 214, 214, 214, 1075, 1076, 
	1034, 1207, 1208, 1034, 1011, 1075, 1076, 1034, 
	1207, 1208, 1034, 1010, 214, 214, 214, 1083, 
	214, 1083, 1010, 214, 214, 214, 1209, 1010, 
	214, 214, 214, 1210, 1211, 1210, 1010, 214, 
	214, 214, 1212, 1011, 1212, 1010, 214, 1213, 
	214, 214, 1213, 1214, 1215, 1010, 214, 1213, 
	214, 214, 1213, 1214, 1011, 1010, 214, 1214, 
	214, 214, 1214, 1216, 1217, 1218, 1217, 1219, 
	1011, 1219, 1010, 214, 214, 214, 1220, 1220, 
	1221, 1011, 1221, 1010, 214, 214, 214, 1010, 
	1223, 1224, 1010, 1222, 214, 1225, 214, 214, 
	1225, 1226, 1010, 214, 1228, 214, 214, 1228, 
	1229, 1227, 207, 1231, 207, 207, 1231, 1232, 
	1230, 1233, 1233, 1234, 207, 1235, 207, 1236, 
	1236, 207, 1237, 1237, 207, 1238, 1238, 207, 
	1239, 207, 207, 1231, 207, 207, 1231, 1232, 
	1227, 214, 1231, 214, 214, 1231, 1240, 1240, 
	1241, 1232, 1241, 1230, 214, 1231, 214, 214, 
	1231, 1243, 1244, 1230, 1242, 214, 214, 1016, 
	1245, 214, 1015, 214, 214, 1016, 1246, 1246, 
	214, 1015, 214, 214, 1016, 1247, 1247, 214, 
	1015, 214, 214, 1016, 1248, 1248, 214, 1015, 
	214, 214, 1016, 1249, 214, 1015, 214, 1231, 
	214, 214, 1231, 1250, 1232, 1250, 1230, 214, 
	1231, 214, 214, 1231, 1251, 1232, 1251, 1230, 
	214, 1231, 214, 214, 1231, 1252, 1232, 1252, 
	1230, 214, 1231, 214, 214, 1231, 1253, 1254, 
	1232, 1254, 1230, 214, 1231, 214, 214, 1231, 
	1255, 1232, 1230, 214, 1231, 214, 214, 1231, 
	1256, 1232, 1230, 214, 1231, 214, 214, 1231, 
	1244, 1230, 1242, 214, 1231, 214, 214, 1231, 
	1253, 1232, 1230, 214, 214, 1258, 1259, 214, 
	1257, 207, 207, 1258, 207, 1257, 1260, 1260, 
	1261, 207, 207, 1228, 207, 207, 1228, 1227, 
	214, 214, 1258, 1262, 1262, 1263, 1263, 214, 
	1257, 214, 214, 1265, 1266, 214, 1264, 214, 
	1260, 1260, 1016, 1267, 214, 1015, 214, 1228, 
	214, 214, 1228, 1269, 1227, 1268, 214, 214, 
	1258, 1270, 1270, 214, 1257, 214, 214, 1258, 
	1271, 1271, 214, 1257, 214, 214, 1258, 1272, 
	1272, 214, 1257, 214, 214, 1258, 1273, 1274, 
	1274, 214, 1257, 214, 214, 1258, 1275, 214, 
	1257, 214, 214, 1258, 1276, 214, 1257, 214, 
	214, 1265, 214, 1264, 214, 214, 1258, 1273, 
	214, 1257, 214, 214, 214, 1277, 1011, 1277, 
	1010, 214, 214, 214, 1278, 1011, 1278, 1010, 
	214, 214, 214, 1279, 1011, 1279, 1010, 214, 
	214, 214, 1280, 1281, 1011, 1281, 1010, 214, 
	214, 214, 1282, 1011, 1010, 214, 214, 214, 
	1283, 1011, 1010, 214, 214, 214, 1010, 1224, 
	1010, 1222, 214, 214, 214, 1280, 1011, 1010, 
	214, 1223, 214, 214, 1223, 1285, 1010, 1284, 
	214, 214, 214, 1286, 1286, 1287, 1011, 1287, 
	1010, 214, 214, 214, 1010, 1223, 1289, 1010, 
	1288, 214, 214, 1258, 1291, 214, 1290, 207, 
	207, 1258, 207, 1290, 214, 214, 1292, 1258, 
	1292, 1293, 1293, 214, 1290, 214, 214, 1265, 
	1295, 214, 1294, 214, 214, 1258, 1296, 1296, 
	214, 1290, 214, 214, 1258, 1297, 1297, 214, 
	1290, 214, 214, 1258, 1298, 1298, 214, 1290, 
	214, 214, 1258, 1299, 1300, 1300, 214, 1290, 
	214, 214, 1258, 1301, 214, 1290, 214, 214, 
	1258, 1302, 214, 1290, 214, 214, 1265, 214, 
	1294, 214, 214, 1258, 1299, 214, 1290, 214, 
	214, 214, 1303, 1011, 1303, 1010, 214, 214, 
	214, 1304, 1011, 1304, 1010, 214, 214, 214, 
	1305, 1011, 1305, 1010, 214, 214, 214, 1306, 
	1307, 1011, 1307, 1010, 214, 214, 214, 1308, 
	1011, 1010, 214, 214, 214, 1309, 1011, 1010, 
	214, 214, 214, 1010, 1289, 1010, 1288, 214, 
	214, 214, 1306, 1011, 1010, 214, 214, 214, 
	1310, 1011, 1310, 1010, 214, 214, 214, 1311, 
	1011, 1311, 1010, 214, 214, 214, 1312, 1011, 
	1312, 1010, 214, 214, 214, 1313, 1314, 1011, 
	1314, 1010, 214, 214, 214, 1315, 1011, 1010, 
	214, 214, 214, 1316, 1011, 1010, 214, 214, 
	214, 1010, 1317, 1010, 1284, 214, 1258, 1258, 
	1319, 1320, 214, 1318, 207, 1258, 1258, 1320, 
	207, 1318, 214, 1258, 1258, 1321, 1321, 1322, 
	1320, 1322, 214, 1318, 214, 1258, 1258, 1324, 
	1325, 214, 1323, 214, 1258, 1258, 1326, 1320, 
	1326, 214, 1318, 214, 1258, 1258, 1327, 1320, 
	1327, 214, 1318, 214, 1258, 1258, 1328, 1320, 
	1328, 214, 1318, 214, 1258, 1258, 1329, 1330, 
	1320, 1330, 214, 1318, 214, 1258, 1258, 1331, 
	1320, 214, 1318, 214, 1258, 1258, 1332, 1320, 
	214, 1318, 214, 1258, 1258, 1325, 214, 1323, 
	214, 1258, 1258, 1329, 1320, 214, 1318, 214, 
	214, 214, 1313, 1011, 1010, 1215, 1215, 1333, 
	1333, 1334, 1334, 214, 214, 1336, 1336, 1337, 
	214, 1335, 1338, 1338, 1339, 214, 1340, 214, 
	1341, 1341, 214, 1342, 1342, 214, 1343, 1343, 
	214, 1344, 214, 214, 1336, 1336, 1345, 1337, 
	214, 1335, 214, 1336, 1336, 1346, 1337, 1346, 
	214, 1335, 214, 1336, 1336, 1347, 1337, 1347, 
	214, 1335, 214, 1336, 1336, 1348, 1337, 1348, 
	214, 1335, 214, 1336, 1336, 1337, 1344, 214, 
	1335, 1349, 1349, 214, 1350, 1350, 214, 1351, 
	1351, 214, 1352, 1353, 1353, 214, 1354, 214, 
	1355, 214, 214, 214, 214, 1335, 1352, 214, 
	481, 1357, 483, 483, 1357, 1359, 1360, 1361, 
	1362, 1011, 1363, 1358, 1356, 489, 1365, 491, 
	491, 1365, 1367, 1368, 1369, 1366, 1364, 489, 
	1370, 491, 491, 1370, 1371, 1372, 1373, 1366, 
	1364, 489, 491, 491, 1366, 1011, 1010, 1366, 
	1364, 489, 1365, 491, 491, 1365, 1367, 1368, 
	1369, 1366, 1374, 1364, 214, 1375, 214, 214, 
	1376, 1377, 1379, 1377, 1380, 1378, 1378, 1378, 
	1010, 214, 1381, 214, 214, 1381, 1372, 1373, 
	1010, 1012, 507, 214, 508, 1383, 214, 214, 
	1383, 1384, 1010, 1010, 1382, 511, 1386, 214, 
	214, 1386, 1387, 1010, 1010, 1385, 511, 1388, 
	214, 214, 1388, 1389, 1010, 1010, 1385, 1012, 
	516, 214, 214, 1381, 214, 214, 1390, 1377, 
	1372, 1377, 1373, 1378, 1378, 1378, 1010, 214, 
	214, 214, 1377, 1377, 1011, 1377, 1378, 1378, 
	1378, 1010, 489, 1365, 491, 491, 1365, 1367, 
	1368, 1391, 1366, 1364, 508, 1392, 214, 214, 
	1392, 1393, 1394, 1010, 1010, 1382, 508, 1395, 
	214, 214, 1395, 1396, 1397, 1010, 1010, 1382, 
	511, 1386, 214, 214, 1386, 1387, 1010, 1010, 
	1398, 1385, 511, 1399, 214, 214, 1400, 1401, 
	1403, 1401, 1010, 1010, 1402, 1402, 1402, 1385, 
	511, 1404, 214, 214, 1404, 1405, 1010, 1010, 
	1385, 1012, 533, 214, 511, 1404, 214, 214, 
	1406, 1401, 1405, 1401, 1010, 1010, 1402, 1402, 
	1402, 1385, 511, 1386, 214, 214, 1407, 1401, 
	1387, 1401, 1010, 1010, 1402, 1402, 1402, 1385, 
	511, 1388, 214, 214, 1408, 1401, 1389, 1401, 
	1010, 1010, 1402, 1402, 1402, 1385, 489, 1365, 
	491, 491, 1365, 1367, 1368, 1409, 1366, 1364, 
	508, 1383, 214, 214, 1383, 1410, 1384, 1010, 
	1010, 1382, 511, 1386, 214, 214, 1386, 1387, 
	1411, 1010, 1010, 1385, 511, 1386, 214, 214, 
	1386, 1412, 1387, 1010, 1010, 1385, 511, 1386, 
	214, 214, 1386, 1387, 1413, 1010, 1385, 214, 
	214, 214, 1414, 1011, 1010, 214, 1415, 214, 
	214, 1415, 1416, 1368, 1010, 214, 1417, 214, 
	214, 1417, 1418, 1372, 1010, 214, 214, 214, 
	1011, 1419, 1010, 214, 1420, 214, 214, 1421, 
	1422, 1379, 1422, 1423, 1423, 1423, 1010, 214, 
	1424, 214, 214, 1424, 1372, 1010, 214, 1424, 
	214, 214, 1425, 1422, 1372, 1422, 1423, 1423, 
	1423, 1010, 214, 214, 214, 1422, 1422, 1011, 
	1422, 1423, 1423, 1423, 1010, 489, 1365, 491, 
	491, 1365, 1367, 1426, 1368, 1427, 1366, 1364, 
	508, 1383, 214, 214, 1383, 1428, 1384, 1010, 
	1010, 1382, 511, 1429, 214, 214, 1429, 1430, 
	1431, 1010, 1010, 1385, 511, 1432, 214, 214, 
	1432, 1433, 1405, 1010, 1010, 1385, 489, 1365, 
	491, 491, 1365, 1367, 1368, 1434, 1366, 1364, 
	508, 1383, 214, 214, 1383, 1384, 1435, 1010, 
	1382, 214, 214, 214, 1414, 1011, 1010, 214, 
	214, 214, 1011, 1437, 1438, 1439, 1436, 1436, 
	1436, 1010, 214, 1440, 214, 214, 1440, 1441, 
	1368, 1369, 1010, 214, 1442, 214, 214, 1442, 
	1443, 1372, 1373, 1010, 214, 214, 214, 1011, 
	1374, 1010, 214, 214, 214, 1011, 1436, 1010, 
	214, 1440, 214, 214, 1440, 1441, 1368, 1391, 
	1010, 214, 214, 214, 1011, 1444, 1010, 214, 
	214, 214, 1011, 1437, 1010, 1445, 257, 1446, 
	1447, 300, 1448, 258, 1449, 1445, 257, 1446, 
	1447, 300, 1448, 258, 1449, 214, 1035, 302, 
	302, 214, 1447, 312, 1447, 312, 214, 1057, 
	214, 1068, 322, 1450, 322, 1450, 214, 1451, 
	1451, 214, 1452, 1452, 214, 1453, 1453, 214, 
	1454, 1454, 214, 1035, 214, 1086, 214, 1455, 
	1455, 214, 1455, 1455, 1456, 1456, 214, 1457, 
	1457, 214, 1458, 1458, 214, 1459, 1459, 214, 
	1460, 214, 1461, 214, 1462, 1462, 1463, 1463, 
	214, 214, 214, 1465, 214, 1464, 214, 214, 
	1465, 1466, 214, 1464, 214, 214, 214, 1467, 
	214, 214, 214, 1469, 1468, 214, 214, 214, 
	1470, 1469, 1468, 214, 214, 214, 1469, 1471, 
	1471, 1468, 214, 214, 214, 1469, 1472, 1468, 
	1473, 1473, 214, 1474, 1474, 214, 1475, 1475, 
	214, 1476, 1477, 1477, 214, 1478, 214, 1479, 
	214, 214, 214, 214, 1464, 1476, 214, 1088, 
	1480, 1481, 1480, 1481, 214, 1482, 1482, 214, 
	1483, 1483, 214, 1484, 1484, 214, 1485, 1485, 
	214, 1486, 1486, 214, 1487, 1487, 214, 1488, 
	1488, 214, 1489, 1489, 214, 1197, 214, 1089, 
	214, 1490, 1491, 1490, 1491, 214, 1492, 1492, 
	214, 1493, 1493, 214, 1494, 1494, 214, 1495, 
	1495, 214, 1496, 214, 1497, 1498, 1497, 1498, 
	214, 1499, 1499, 214, 1500, 1500, 1501, 1102, 
	214, 1500, 1500, 1501, 214, 1501, 1501, 1502, 
	1502, 1502, 214, 1504, 1503, 1503, 1503, 214, 
	1505, 1505, 214, 1506, 1506, 214, 1507, 1507, 
	1508, 1509, 214, 214, 1511, 214, 214, 1511, 
	1512, 1513, 1510, 214, 214, 214, 1515, 1514, 
	214, 1512, 214, 214, 1512, 1513, 1510, 1516, 
	1517, 1516, 1517, 214, 1182, 214, 1518, 1518, 
	214, 1519, 1519, 214, 1520, 1520, 214, 1521, 
	1521, 214, 1522, 1522, 1523, 1130, 214, 214, 
	1525, 214, 214, 1525, 1526, 1527, 1524, 214, 
	214, 214, 1529, 1528, 214, 1526, 214, 214, 
	1526, 1527, 1524, 1530, 1530, 214, 1531, 1531, 
	214, 1532, 1532, 214, 1533, 1534, 1534, 214, 
	1535, 214, 1536, 214, 214, 214, 214, 1537, 
	214, 214, 1538, 214, 1537, 1533, 214, 1539, 
	1539, 214, 1540, 1540, 214, 1541, 1541, 214, 
	1542, 1542, 214, 1543, 1543, 214, 1544, 1544, 
	214, 1189, 214, 1199, 1545, 1546, 1545, 1546, 
	214, 1547, 1547, 214, 1548, 1548, 214, 1549, 
	1549, 214, 1550, 1550, 214, 1551, 1551, 214, 
	1206, 1552, 1552, 214, 1206, 214, 1553, 1553, 
	214, 1554, 1554, 214, 1555, 1555, 214, 1556, 
	1556, 214, 1088, 214, 1557, 1557, 214, 1209, 
	214, 1211, 214, 1558, 1558, 1558, 1558, 214, 
	1560, 1559, 1559, 1559, 1559, 214, 1561, 214, 
	1565, 1566, 1567, 1561, 1570, 1561, 1561, 1569, 
	1562, 1563, 1564, 1568, 1562, 1569, 1569, 1561, 
	1569, 1569, 1569, 207, 1573, 1574, 1575, 1562, 
	1562, 1562, 1562, 1577, 1562, 1571, 1572, 1576, 
	1562, 1577, 1577, 1562, 1577, 1577, 1577, 207, 
	1573, 1574, 1575, 1562, 1562, 1562, 1562, 1577, 
	1577, 1562, 1571, 1572, 1576, 1562, 1577, 1577, 
	1562, 1577, 1577, 1577, 207, 1573, 1574, 1575, 
	1562, 1562, 1562, 1562, 1577, 1571, 1562, 1571, 
	1572, 1576, 1562, 1577, 1577, 1562, 1577, 1577, 
	1577, 207, 1578, 1573, 1574, 1575, 1562, 1562, 
	1562, 1562, 1577, 1571, 1562, 1571, 1572, 1576, 
	1562, 1577, 1577, 1562, 1577, 1577, 1577, 207, 
	1562, 1573, 1574, 1575, 1562, 1562, 1562, 1562, 
	1577, 1577, 1562, 1571, 1572, 1576, 1562, 1577, 
	1577, 1562, 1577, 1577, 1577, 207, 1579, 1573, 
	1574, 1575, 1562, 1562, 1562, 1562, 1577, 1571, 
	1562, 1571, 1572, 1576, 1562, 1577, 1577, 1562, 
	1577, 1577, 1577, 207, 1573, 1574, 1575, 1562, 
	1562, 1562, 1562, 1577, 1562, 1577, 1562, 1577, 
	1562, 1577, 1562, 1571, 1572, 1576, 1562, 1577, 
	1577, 1562, 1577, 1577, 1577, 207, 1580, 1581, 
	1573, 1574, 1575, 1562, 1562, 1562, 1562, 1577, 
	1571, 1562, 1571, 1572, 1576, 1562, 1577, 1577, 
	1562, 1577, 1577, 1577, 207, 1562, 1562, 1573, 
	1574, 1575, 1562, 1562, 1562, 1562, 1577, 1577, 
	1562, 1571, 1572, 1576, 1562, 1577, 1577, 1562, 
	1577, 1577, 1577, 207, 1573, 1574, 1575, 1562, 
	1562, 1562, 1562, 1577, 1572, 1562, 1571, 1572, 
	1576, 1562, 1577, 1577, 1562, 1577, 1577, 1577, 
	207, 1562, 1562, 1562, 1573, 1574, 1575, 1562, 
	1562, 1562, 1562, 1577, 1577, 1562, 1571, 1572, 
	1576, 1562, 1577, 1577, 1562, 1577, 1577, 1577, 
	207, 1573, 1574, 1575, 1562, 1562, 1562, 1562, 
	1577, 1569, 1562, 1571, 1572, 1576, 1562, 1577, 
	1577, 1562, 1577, 1577, 1577, 207, 1573, 1574, 
	1575, 1562, 1562, 1562, 1562, 1577, 1563, 1562, 
	1571, 1572, 1576, 1562, 1577, 1577, 1562, 1577, 
	1577, 1577, 207, 1582, 1573, 1574, 1575, 1562, 
	1562, 1562, 1562, 1577, 1563, 1562, 1571, 1572, 
	1576, 1562, 1577, 1577, 1562, 1577, 1577, 1577, 
	207, 1561, 1573, 1574, 1575, 1562, 1562, 1562, 
	1562, 1577, 1569, 1562, 1571, 1572, 1576, 1562, 
	1577, 1577, 1562, 1577, 1577, 1577, 207, 1583, 
	1573, 1574, 1575, 1562, 1562, 1562, 1562, 1577, 
	1563, 1562, 1571, 1572, 1576, 1562, 1577, 1577, 
	1562, 1577, 1577, 1577, 207, 1573, 1574, 1575, 
	1562, 1562, 1562, 1562, 1577, 1561, 1569, 1561, 
	1569, 1561, 1569, 1562, 1571, 1572, 1576, 1562, 
	1577, 1577, 1562, 1577, 1577, 1577, 207, 1584, 
	1585, 1573, 1574, 1575, 1562, 1562, 1562, 1562, 
	1577, 1563, 1562, 1571, 1572, 1576, 1562, 1577, 
	1577, 1562, 1577, 1577, 1577, 207, 1561, 1561, 
	1573, 1574, 1575, 1562, 1562, 1562, 1562, 1577, 
	1569, 1562, 1571, 1572, 1576, 1562, 1577, 1577, 
	1562, 1577, 1577, 1577, 207, 1561, 1561, 1561, 
	1573, 1574, 1575, 1562, 1562, 1562, 1562, 1577, 
	1569, 1562, 1571, 1572, 1576, 1562, 1577, 1577, 
	1562, 1577, 1577, 1577, 207, 1573, 1574, 1575, 
	1562, 1562, 1562, 1562, 1577, 1564, 1562, 1571, 
	1572, 1576, 1562, 1577, 1577, 1562, 1577, 1577, 
	1577, 207, 1565, 1566, 1567, 1561, 1570, 1561, 
	1561, 1561, 1561, 1569, 1562, 1563, 1564, 1568, 
	1562, 1569, 1569, 1561, 1569, 1569, 1569, 207, 
	1586, 214, 1587, 1586, 214, 1561, 1561, 214, 
	1588, 1586, 214, 1561, 1561, 1561, 214, 1589, 
	1590, 1586, 214, 1561, 1561, 1561, 214, 1561, 
	1561, 1561, 1561, 214, 1591, 214, 1592, 1593, 
	1594, 1561, 1586, 1591, 1595, 1561, 1561, 1561, 
	1561, 1561, 214, 1597, 1596, 1598, 1598, 1596, 
	1599, 1599, 1596, 1600, 1600, 1596, 1601, 1601, 
	1596, 1602, 1596, 1603, 1596, 1604, 1604, 1596, 
	1605, 1605, 1596, 1606, 1606, 1596, 1607, 1607, 
	1596, 1602, 1596, 1609, 1608, 1610, 1610, 1608, 
	1611, 1611, 1608, 1612, 1612, 1608, 1613, 1613, 
	1608, 1614, 1614, 1608, 1615, 1615, 1608, 1616, 
	1616, 1608, 1617, 1608, 1618, 1608, 1619, 1619, 
	1608, 1620, 1620, 1608, 1621, 1621, 1608, 1622, 
	1622, 1608, 1623, 1623, 1608, 1624, 1624, 1608, 
	1625, 1625, 1608, 1617, 1608, 1627, 1628, 1627, 
	1628, 1626, 1629, 1629, 1626, 1630, 1630, 1626, 
	1631, 1631, 1626, 1632, 1632, 1626, 1633, 1633, 
	1626, 1634, 1634, 1626, 1635, 1635, 1626, 1636, 
	1626, 1637, 1638, 1639, 1640, 1637, 1638, 1639, 
	1640, 1626, 1641, 1641, 1626, 1642, 1642, 1626, 
	1643, 1643, 1626, 1644, 1626, 1645, 1645, 1626, 
	1646, 1646, 1626, 1647, 1647, 1626, 1648, 1626, 
	1649, 1649, 1626, 1650, 1650, 1626, 1651, 1651, 
	1626, 1652, 1626, 1653, 1626, 1654, 1654, 1626, 
	1655, 1655, 1626, 1656, 1656, 1657, 1658, 1658, 
	1626, 1656, 1656, 1659, 1659, 1659, 1626, 1660, 
	1660, 1662, 1661, 1661, 1661, 1626, 1663, 1663, 
	1664, 1626, 1664, 1664, 1665, 1666, 1667, 1667, 
	1667, 1626, 1626, 1626, 1626, 1668, 1626, 1626, 
	1626, 1670, 1669, 1671, 1671, 1672, 1626, 1626, 
	1626, 1626, 1673, 1626, 1626, 1626, 1670, 1674, 
	1675, 1675, 1677, 1676, 1676, 1676, 1626, 1678, 
	1678, 1626, 1679, 1679, 1626, 1680, 1680, 1626, 
	1681, 1681, 1626, 1682, 1682, 1683, 1626, 1682, 
	1682, 1684, 1684, 1684, 1626, 1685, 1685, 1687, 
	1686, 1686, 1686, 1626, 1688, 1688, 1689, 1626, 
	1689, 1689, 1690, 1691, 1692, 1692, 1692, 1626, 
	1626, 1626, 1626, 1693, 1626, 1626, 1626, 1695, 
	1694, 1696, 1696, 1697, 1626, 1626, 1626, 1626, 
	1698, 1626, 1626, 1626, 1695, 1699, 1700, 1700, 
	1702, 1701, 1701, 1701, 1626, 1703, 1704, 1705, 
	1706, 1703, 1704, 1705, 1706, 1626, 1707, 1707, 
	1626, 1708, 1708, 1626, 1709, 1709, 1626, 1710, 
	1710, 1711, 1626, 1710, 1710, 1712, 1712, 1712, 
	1626, 1713, 1713, 1715, 1714, 1714, 1714, 1626, 
	1716, 1716, 1717, 1626, 1717, 1717, 1718, 1719, 
	1720, 1720, 1720, 1626, 1626, 1626, 1626, 1721, 
	1626, 1626, 1626, 1723, 1722, 1724, 1724, 1725, 
	1626, 1626, 1626, 1626, 1726, 1626, 1626, 1626, 
	1723, 1727, 1728, 1728, 1730, 1729, 1729, 1729, 
	1626, 1731, 1731, 1732, 1626, 1731, 1731, 1733, 
	1733, 1733, 1626, 1734, 1734, 1736, 1735, 1735, 
	1735, 1626, 1737, 1737, 1738, 1626, 1738, 1738, 
	1739, 1740, 1741, 1741, 1741, 1626, 1626, 1626, 
	1626, 1742, 1626, 1626, 1626, 1744, 1743, 1745, 
	1745, 1746, 1626, 1626, 1626, 1626, 1747, 1626, 
	1626, 1626, 1744, 1748, 1749, 1749, 1751, 1750, 
	1750, 1750, 1626, 1752, 1752, 1753, 1754, 1754, 
	1626, 1752, 1752, 1755, 1755, 1755, 1626, 1756, 
	1756, 1758, 1757, 1757, 1757, 1626, 1759, 1759, 
	1760, 1626, 1760, 1760, 1761, 1762, 1763, 1763, 
	1763, 1626, 1626, 1626, 1626, 1764, 1626, 1626, 
	1626, 1766, 1765, 1767, 1767, 1768, 1626, 1626, 
	1626, 1626, 1769, 1626, 1626, 1626, 1766, 1770, 
	1771, 1771, 1773, 1772, 1772, 1772, 1626, 1774, 
	1774, 1626, 1775, 1775, 1626, 1776, 1776, 1777, 
	1626, 1776, 1776, 1778, 1778, 1778, 1626, 1779, 
	1779, 1781, 1780, 1780, 1780, 1626, 1782, 1782, 
	1783, 1626, 1783, 1783, 1784, 1785, 1786, 1786, 
	1786, 1626, 1626, 1626, 1626, 1787, 1626, 1626, 
	1626, 1789, 1788, 1790, 1790, 1791, 1626, 1626, 
	1626, 1626, 1792, 1626, 1626, 1626, 1789, 1793, 
	1794, 1794, 1796, 1795, 1795, 1795, 1626, 1797, 
	1797, 1798, 1626, 1797, 1797, 1799, 1799, 1799, 
	1626, 1800, 1800, 1802, 1801, 1801, 1801, 1626, 
	1803, 1803, 1804, 1626, 1804, 1804, 1805, 1806, 
	1807, 1807, 1807, 1626, 1626, 1626, 1626, 1808, 
	1626, 1626, 1626, 1810, 1809, 1811, 1811, 1812, 
	1626, 1626, 1626, 1626, 1813, 1626, 1626, 1626, 
	1810, 1814, 1815, 1815, 1817, 1816, 1816, 1816, 
	1626, 1818, 1819, 1818, 1819, 1626, 1820, 1820, 
	1626, 1821, 1821, 1626, 1822, 1822, 1626, 1823, 
	1823, 1626, 1824, 1824, 1626, 1825, 1825, 1626, 
	1826, 1826, 1626, 1636, 1626, 1827, 1828, 1829, 
	1830, 1827, 1828, 1829, 1830, 1626, 1831, 1831, 
	1626, 1832, 1832, 1626, 1833, 1833, 1626, 1644, 
	1626, 1834, 1834, 1626, 1835, 1835, 1626, 1836, 
	1836, 1626, 1648, 1626, 1837, 1837, 1626, 1838, 
	1838, 1626, 1839, 1839, 1626, 1652, 1626, 1653, 
	1626, 1840, 1840, 1626, 1841, 1841, 1626, 1842, 
	1842, 1843, 1657, 1843, 1626, 1842, 1842, 1844, 
	1844, 1844, 1626, 1845, 1845, 1847, 1846, 1846, 
	1846, 1626, 1848, 1848, 1849, 1626, 1849, 1849, 
	1850, 1851, 1852, 1852, 1852, 1626, 1626, 1626, 
	1626, 1853, 1626, 1626, 1626, 1855, 1854, 1856, 
	1856, 1672, 1626, 1626, 1626, 1626, 1857, 1626, 
	1626, 1626, 1855, 1858, 1859, 1859, 1677, 1860, 
	1860, 1860, 1626, 1861, 1861, 1626, 1862, 1862, 
	1626, 1863, 1863, 1626, 1864, 1864, 1626, 1865, 
	1865, 1683, 1626, 1865, 1865, 1866, 1866, 1866, 
	1626, 1867, 1867, 1869, 1868, 1868, 1868, 1626, 
	1870, 1870, 1871, 1626, 1871, 1871, 1872, 1873, 
	1874, 1874, 1874, 1626, 1626, 1626, 1626, 1875, 
	1626, 1626, 1626, 1877, 1876, 1878, 1878, 1697, 
	1626, 1626, 1626, 1626, 1879, 1626, 1626, 1626, 
	1877, 1880, 1881, 1881, 1702, 1882, 1882, 1882, 
	1626, 1883, 1884, 1885, 1886, 1883, 1884, 1885, 
	1886, 1626, 1887, 1887, 1626, 1888, 1888, 1626, 
	1889, 1889, 1626, 1890, 1890, 1711, 1626, 1890, 
	1890, 1891, 1891, 1891, 1626, 1892, 1892, 1894, 
	1893, 1893, 1893, 1626, 1895, 1895, 1896, 1626, 
	1896, 1896, 1897, 1898, 1899, 1899, 1899, 1626, 
	1626, 1626, 1626, 1900, 1626, 1626, 1626, 1902, 
	1901, 1903, 1903, 1725, 1626, 1626, 1626, 1626, 
	1904, 1626, 1626, 1626, 1902, 1905, 1906, 1906, 
	1730, 1907, 1907, 1907, 1626, 1908, 1908, 1732, 
	1626, 1908, 1908, 1909, 1909, 1909, 1626, 1910, 
	1910, 1912, 1911, 1911, 1911, 1626, 1913, 1913, 
	1914, 1626, 1914, 1914, 1915, 1916, 1917, 1917, 
	1917, 1626, 1626, 1626, 1626, 1918, 1626, 1626, 
	1626, 1920, 1919, 1921, 1921, 1746, 1626, 1626, 
	1626, 1626, 1922, 1626, 1626, 1626, 1920, 1923, 
	1924, 1924, 1751, 1925, 1925, 1925, 1626, 1926, 
	1926, 1927, 1753, 1927, 1626, 1926, 1926, 1928, 
	1928, 1928, 1626, 1929, 1929, 1931, 1930, 1930, 
	1930, 1626, 1932, 1932, 1933, 1626, 1933, 1933, 
	1934, 1935, 1936, 1936, 1936, 1626, 1626, 1626, 
	1626, 1937, 1626, 1626, 1626, 1939, 1938, 1940, 
	1940, 1768, 1626, 1626, 1626, 1626, 1941, 1626, 
	1626, 1626, 1939, 1942, 1943, 1943, 1773, 1944, 
	1944, 1944, 1626, 1945, 1945, 1626, 1946, 1946, 
	1626, 1947, 1947, 1777, 1626, 1947, 1947, 1948, 
	1948, 1948, 1626, 1949, 1949, 1951, 1950, 1950, 
	1950, 1626, 1952, 1952, 1953, 1626, 1953, 1953, 
	1954, 1955, 1956, 1956, 1956, 1626, 1626, 1626, 
	1626, 1957, 1626, 1626, 1626, 1959, 1958, 1960, 
	1960, 1791, 1626, 1626, 1626, 1626, 1961, 1626, 
	1626, 1626, 1959, 1962, 1963, 1963, 1796, 1964, 
	1964, 1964, 1626, 1965, 1965, 1798, 1626, 1965, 
	1965, 1966, 1966, 1966, 1626, 1967, 1967, 1969, 
	1968, 1968, 1968, 1626, 1970, 1970, 1971, 1626, 
	1971, 1971, 1972, 1973, 1974, 1974, 1974, 1626, 
	1626, 1626, 1626, 1975, 1626, 1626, 1626, 1977, 
	1976, 1978, 1978, 1812, 1626, 1626, 1626, 1626, 
	1979, 1626, 1626, 1626, 1977, 1980, 1981, 1981, 
	1817, 1982, 1982, 1982, 1626, 1, 1984, 1, 
	1984, 1985, 1986, 1987, 1988, 1989, 1987, 1983, 
	1, 2, 1, 2, 1990, 1, 4, 1, 
	4, 5, 6, 1991, 18, 18, 1992, 39, 
	39, 40, 1991, 1993, 1993, 1993, 1994, 1993, 
	38, 1993, 1993, 38, 37, 1995, 1996, 1997, 
	8, 1998, 45, 1999, 2000, 1995, 1996, 1997, 
	8, 1998, 45, 1999, 2000, 1991, 50, 50, 
	2001, 62, 63, 62, 63, 2002, 65, 66, 
	65, 66, 2003, 2005, 2005, 2004, 85, 85, 
	2006, 100, 101, 100, 101, 2007, 108, 108, 
	2008, 2009, 1991, 2011, 2011, 2010, 2012, 2013, 
	25, 2014, 2015, 2016, 2017, 2012, 2013, 25, 
	2014, 2015, 2016, 2017, 1991, 2018, 1991, 2020, 
	2021, 2022, 2019, 2024, 201, 2025, 194, 2026, 
	2027, 201, 2025, 194, 2026, 2027, 2023, 2028, 
	2029, 2030, 2031, 2032, 2029, 2030, 2031, 2032, 
	2023, 2037, 2038, 2039, 2040, 2038, 2041, 2044, 
	2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 
	2053, 2054, 2055, 2056, 2057, 2044, 2045, 2046, 
	2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 
	2055, 2056, 2058, 2059, 2060, 2033, 2033, 2033, 
	2061, 2033, 2034, 2035, 2036, 2033, 2042, 2033, 
	2033, 2042, 2033, 2042, 2033, 2043, 208, 2062, 
	209, 211, 2064, 2063, 209, 2062, 211, 2062, 
	212, 213, 212, 213, 207, 213, 215, 213, 
	215, 2062, 212, 217, 2066, 217, 2067, 2068, 
	2069, 2070, 2071, 2069, 2065, 225, 225, 2072, 
	212, 213, 2066, 213, 2074, 2075, 2073, 2077, 
	2076, 2078, 2078, 2078, 2079, 2078, 294, 2078, 
	2078, 294, 293, 311, 311, 2080, 317, 317, 
	2081, 2083, 2083, 2082, 2062, 2084, 414, 415, 
	416, 2085, 418, 2085, 418, 418, 418, 2085, 
	2085, 418, 2085, 2085, 2085, 408, 413, 417, 
	2085, 2085, 418, 407, 426, 427, 428, 2085, 
	430, 407, 430, 430, 430, 2085, 2085, 431, 
	2085, 2085, 2085, 420, 425, 429, 2085, 2085, 
	430, 419, 434, 435, 436, 2085, 431, 407, 
	431, 431, 431, 431, 2085, 432, 433, 437, 
	2085, 2085, 431, 438, 457, 458, 459, 407, 
	454, 419, 464, 431, 461, 455, 456, 460, 
	461, 461, 461, 2085, 407, 419, 431, 468, 
	2085, 2087, 2088, 2086, 2086, 2086, 2063, 2090, 
	2090, 2090, 2089, 2092, 2092, 2092, 2091, 2094, 
	2094, 2094, 2093, 2096, 2096, 2096, 2095, 2097, 
	2097, 2097, 2089, 2098, 2098, 2098, 2091, 2100, 
	2100, 2100, 2099, 2102, 2102, 2102, 2101, 2104, 
	2104, 2104, 2103, 2106, 2106, 2106, 2105, 2107, 
	2107, 2107, 2103, 2108, 2108, 2108, 2105, 2109, 
	2107, 2107, 2107, 2103, 608, 2104, 2104, 2104, 
	2103, 2110, 2087, 2110, 2088, 2086, 2086, 2086, 
	2063, 2111, 2087, 2111, 2088, 2086, 2086, 2086, 
	2063, 2112, 2087, 2112, 2088, 2086, 2086, 2086, 
	2063, 2113, 2087, 2113, 2088, 2086, 2086, 2086, 
	2063, 2114, 2087, 2114, 2088, 2086, 2086, 2086, 
	2063, 2115, 2087, 2088, 2086, 2086, 2086, 2063, 
	2117, 668, 668, 2116, 2118, 667, 667, 2116, 
	2119, 666, 666, 2116, 2120, 665, 665, 2116, 
	2121, 664, 664, 2116, 2122, 663, 663, 2116, 
	2123, 662, 662, 2116, 2124, 661, 661, 2116, 
	2125, 660, 660, 2116, 2126, 659, 659, 2116, 
	2126, 2116, 2116, 2127, 2087, 2127, 2088, 2086, 
	2086, 2086, 2063, 2128, 2087, 2128, 2088, 2086, 
	2086, 2086, 2063, 2129, 2087, 2129, 2088, 2086, 
	2086, 2086, 2063, 2130, 2087, 2088, 2086, 2086, 
	2086, 2063, 2132, 681, 681, 2131, 2133, 680, 
	680, 2131, 2134, 679, 679, 2131, 2135, 678, 
	678, 2131, 2136, 677, 677, 2131, 2137, 676, 
	676, 2131, 2138, 675, 675, 2131, 2139, 674, 
	674, 2131, 2140, 673, 673, 2131, 2141, 672, 
	672, 2131, 2141, 2131, 2131, 2142, 2087, 2142, 
	2088, 2086, 2086, 2086, 2063, 2143, 2087, 2143, 
	2088, 2086, 2086, 2086, 2063, 2144, 2087, 2144, 
	2088, 2086, 2086, 2086, 2063, 2145, 2087, 2145, 
	2088, 2086, 2086, 2086, 2063, 2146, 2087, 2146, 
	2088, 2086, 2086, 2086, 2063, 2147, 2087, 2147, 
	2088, 2086, 2086, 2086, 2063, 2148, 2087, 2088, 
	2086, 2086, 2086, 2063, 2150, 694, 694, 2149, 
	2151, 693, 693, 2149, 2152, 692, 692, 2149, 
	2153, 691, 691, 2149, 2154, 690, 690, 2149, 
	2155, 689, 689, 2149, 2156, 688, 688, 2149, 
	2157, 687, 687, 2149, 2158, 686, 686, 2149, 
	2159, 685, 685, 2149, 2159, 2149, 2149, 2160, 
	2087, 2160, 2088, 2086, 2086, 2086, 2063, 2161, 
	2087, 2161, 2088, 2086, 2086, 2086, 2063, 2162, 
	2087, 2162, 2088, 2086, 2086, 2086, 2063, 2163, 
	2087, 2163, 2088, 2086, 2086, 2086, 2063, 2164, 
	2087, 2088, 2086, 2086, 2086, 2063, 2166, 2167, 
	709, 709, 2165, 2169, 2169, 2169, 2169, 2169, 
	2168, 2166, 2170, 708, 708, 2165, 2166, 2171, 
	707, 707, 2165, 2166, 2172, 706, 706, 2165, 
	2166, 2173, 705, 705, 2165, 2166, 2174, 704, 
	704, 2165, 2166, 2175, 703, 703, 2165, 2166, 
	2176, 702, 702, 2165, 2166, 2177, 701, 701, 
	2165, 2166, 2178, 700, 700, 2165, 2166, 2178, 
	2165, 2166, 2165, 2179, 2087, 2179, 2088, 2086, 
	2086, 2086, 2063, 2180, 2087, 2180, 2088, 2086, 
	2086, 2086, 2063, 2181, 2087, 2181, 2088, 2086, 
	2086, 2086, 2063, 2182, 2087, 2182, 2088, 2086, 
	2086, 2086, 2063, 2183, 2087, 2088, 2086, 2086, 
	2086, 2063, 2185, 722, 722, 2184, 2186, 721, 
	721, 2184, 2187, 720, 720, 2184, 2188, 719, 
	719, 2184, 2189, 718, 718, 2184, 2190, 717, 
	717, 2184, 2191, 716, 716, 2184, 2192, 715, 
	715, 2184, 2193, 714, 714, 2184, 2194, 713, 
	713, 2184, 2194, 2184, 2184, 2195, 2087, 2195, 
	2088, 2086, 2086, 2086, 2063, 2196, 2087, 2196, 
	2088, 2086, 2086, 2086, 2063, 2197, 2087, 2197, 
	2088, 2086, 2086, 2086, 2063, 2198, 2199, 2087, 
	2199, 2088, 2086, 2086, 2086, 2063, 732, 733, 
	734, 739, 729, 740, 741, 742, 736, 730, 
	731, 735, 736, 736, 736, 2200, 753, 754, 
	755, 2200, 757, 2200, 757, 757, 757, 2200, 
	2200, 757, 2200, 2200, 2200, 747, 752, 756, 
	2200, 2200, 757, 739, 764, 765, 766, 2200, 
	768, 739, 768, 768, 768, 2200, 2200, 742, 
	2200, 2200, 2200, 758, 763, 767, 2200, 2200, 
	768, 740, 771, 772, 773, 2200, 742, 739, 
	742, 742, 742, 742, 2200, 769, 770, 774, 
	2200, 2200, 742, 775, 739, 740, 742, 780, 
	2200, 2198, 2087, 2088, 2086, 2086, 2086, 2063, 
	2201, 2087, 2201, 2088, 2086, 2086, 2086, 2063, 
	2202, 2087, 2202, 2088, 2086, 2086, 2086, 2063, 
	2203, 2087, 2088, 2086, 2086, 2086, 2063, 2205, 
	800, 800, 2204, 2206, 799, 799, 2204, 2207, 
	798, 798, 2204, 2208, 797, 797, 2204, 2209, 
	796, 796, 2204, 2210, 795, 795, 2204, 2211, 
	794, 794, 2204, 2212, 793, 793, 2204, 2213, 
	792, 792, 2204, 2214, 791, 791, 2204, 2214, 
	2204, 2204, 2215, 2216, 2087, 2215, 2216, 2088, 
	2086, 2086, 2086, 2063, 2217, 2087, 2217, 2088, 
	2086, 2086, 2086, 2063, 2218, 2087, 2218, 2088, 
	2086, 2086, 2086, 2063, 2219, 2087, 2219, 2088, 
	2086, 2086, 2086, 2063, 2220, 2087, 2088, 2086, 
	2086, 2086, 2063, 2222, 2221, 2223, 2224, 2087, 
	2223, 2224, 2088, 2086, 2086, 2086, 2063, 2225, 
	2087, 2225, 2088, 2086, 2086, 2086, 2063, 2226, 
	2087, 2088, 2086, 2086, 2086, 2063, 2228, 839, 
	839, 2227, 2229, 838, 838, 2227, 2230, 837, 
	837, 2227, 2231, 836, 836, 2227, 2232, 835, 
	835, 2227, 2233, 834, 834, 2227, 2234, 833, 
	833, 2227, 2235, 832, 832, 2227, 2236, 831, 
	831, 2227, 2237, 830, 830, 2227, 2237, 2227, 
	2227, 2238, 2087, 2238, 2088, 2086, 2086, 2086, 
	2063, 2239, 2087, 2088, 2086, 2086, 2086, 2063, 
	2241, 852, 852, 2240, 2242, 851, 851, 2240, 
	2243, 850, 850, 2240, 2244, 849, 849, 2240, 
	2245, 848, 848, 2240, 2246, 847, 847, 2240, 
	2247, 846, 846, 2240, 2248, 845, 845, 2240, 
	2249, 844, 844, 2240, 2250, 843, 843, 2240, 
	2250, 2240, 2240, 2251, 2087, 2251, 2088, 2086, 
	2086, 2086, 2063, 2252, 2087, 2252, 2088, 2086, 
	2086, 2086, 2063, 2253, 2087, 2253, 2088, 2086, 
	2086, 2086, 2063, 2254, 2087, 2254, 2088, 2086, 
	2086, 2086, 2063, 2255, 2087, 2255, 2088, 2086, 
	2086, 2086, 2063, 2256, 2087, 2088, 2086, 2086, 
	2086, 2063, 2258, 865, 865, 2257, 2259, 864, 
	864, 2257, 2260, 863, 863, 2257, 2261, 862, 
	862, 2257, 2262, 861, 861, 2257, 2263, 860, 
	860, 2257, 2264, 859, 859, 2257, 2265, 858, 
	858, 2257, 2266, 857, 857, 2257, 2267, 856, 
	856, 2257, 2267, 2257, 2257, 2268, 2087, 2268, 
	2088, 2086, 2086, 2086, 2063, 2269, 2087, 2269, 
	2088, 2086, 2086, 2086, 2063, 2270, 2087, 2270, 
	2088, 2086, 2086, 2086, 2063, 2271, 2087, 2271, 
	2088, 2086, 2086, 2086, 2063, 2272, 2087, 2272, 
	2088, 2086, 2086, 2086, 2063, 2273, 2087, 2088, 
	2086, 2086, 2086, 2063, 2275, 878, 878, 2274, 
	2276, 877, 877, 2274, 2277, 876, 876, 2274, 
	2278, 875, 875, 2274, 2279, 874, 874, 2274, 
	2280, 873, 873, 2274, 2281, 872, 872, 2274, 
	2282, 871, 871, 2274, 2283, 870, 870, 2274, 
	2284, 869, 869, 2274, 2284, 2274, 2274, 2285, 
	2286, 2087, 2285, 2286, 2088, 2086, 2086, 2086, 
	2063, 2287, 2087, 2287, 2088, 2086, 2086, 2086, 
	2063, 2288, 2087, 2088, 2086, 2086, 2086, 2063, 
	2290, 899, 899, 2289, 2291, 898, 898, 2289, 
	2292, 897, 897, 2289, 2293, 896, 896, 2289, 
	2294, 895, 895, 2289, 2295, 894, 894, 2289, 
	2296, 893, 893, 2289, 2297, 892, 892, 2289, 
	2298, 891, 891, 2289, 2299, 890, 890, 2289, 
	2299, 2289, 2289, 2301, 923, 923, 2300, 2302, 
	922, 922, 2300, 2303, 921, 921, 2300, 2304, 
	920, 920, 2300, 2305, 919, 919, 2300, 2306, 
	918, 918, 2300, 2307, 917, 917, 2300, 2308, 
	916, 916, 2300, 2309, 915, 915, 2300, 2310, 
	914, 914, 2300, 2310, 2300, 2300, 2312, 947, 
	947, 2311, 2313, 946, 946, 2311, 2314, 945, 
	945, 2311, 2315, 944, 944, 2311, 2316, 943, 
	943, 2311, 2317, 942, 942, 2311, 2318, 941, 
	941, 2311, 2319, 940, 940, 2311, 2320, 939, 
	939, 2311, 2321, 938, 938, 2311, 2321, 2311, 
	2311, 2322, 2087, 2322, 2088, 2086, 2086, 2086, 
	2063, 2323, 2087, 2323, 2088, 2086, 2086, 2086, 
	2063, 2324, 2087, 2324, 2088, 2086, 2086, 2086, 
	2063, 2325, 2087, 2088, 2086, 2086, 2086, 2063, 
	2327, 2328, 963, 963, 2326, 2330, 2329, 2327, 
	2331, 962, 962, 2326, 2327, 2332, 961, 961, 
	2326, 2327, 2333, 960, 960, 2326, 2327, 2334, 
	959, 959, 2326, 2327, 2335, 958, 958, 2326, 
	2327, 2336, 957, 957, 2326, 2327, 2337, 956, 
	956, 2326, 2327, 2338, 955, 955, 2326, 2327, 
	2339, 954, 954, 2326, 2327, 2339, 2326, 2327, 
	2326, 2340, 2087, 2340, 2088, 2086, 2086, 2086, 
	2063, 2341, 2087, 2341, 2088, 2086, 2086, 2086, 
	2063, 2342, 2087, 2342, 2088, 2086, 2086, 2086, 
	2063, 2343, 2087, 2088, 2086, 2086, 2086, 2063, 
	2345, 977, 977, 2344, 2346, 976, 976, 2344, 
	2347, 975, 975, 2344, 2348, 974, 974, 2344, 
	2349, 973, 973, 2344, 2350, 972, 972, 2344, 
	2351, 971, 971, 2344, 2352, 970, 970, 2344, 
	2353, 969, 969, 2344, 2354, 968, 968, 2344, 
	2354, 2344, 2344, 2356, 996, 996, 2355, 2357, 
	995, 995, 2355, 2358, 994, 994, 2355, 2359, 
	993, 993, 2355, 2360, 992, 992, 2355, 2361, 
	991, 991, 2355, 2362, 990, 990, 2355, 2363, 
	989, 989, 2355, 2364, 988, 988, 2355, 2365, 
	987, 987, 2355, 2365, 2355, 2355, 2366, 2087, 
	2366, 2088, 2086, 2086, 2086, 2063, 2367, 2087, 
	2367, 2088, 2086, 2086, 2086, 2063, 2368, 2087, 
	2368, 2088, 2086, 2086, 2086, 2063, 2369, 2087, 
	2088, 2086, 2086, 2086, 2063, 2371, 1009, 1009, 
	2370, 2372, 1008, 1008, 2370, 2373, 1007, 1007, 
	2370, 2374, 1006, 1006, 2370, 2375, 1005, 1005, 
	2370, 2376, 1004, 1004, 2370, 2377, 1003, 1003, 
	2370, 2378, 1002, 1002, 2370, 2379, 1001, 1001, 
	2370, 2380, 1000, 1000, 2370, 2380, 2370, 2370, 
	2062, 2062, 2062, 2382, 2383, 2384, 2385, 2386, 
	2387, 2388, 2389, 2390, 2391, 2392, 2393, 2383, 
	2384, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 
	2392, 2381, 2077, 1012, 2076, 1012, 207, 1107, 
	1108, 1107, 1108, 1012, 2394, 1110, 1111, 1110, 
	1111, 2395, 207, 207, 1016, 207, 1015, 2396, 
	2396, 1149, 2396, 1147, 2396, 2396, 2396, 1153, 
	1152, 1191, 1192, 1191, 1192, 2397, 2396, 1231, 
	2396, 2396, 1231, 1232, 1230, 2396, 2396, 1258, 
	2396, 1257, 2396, 2396, 1258, 2396, 1290, 2396, 
	1258, 1258, 1320, 2396, 1318, 573, 2062, 2398, 
	2399, 2400, 2401, 2402, 2403, 1516, 2404, 1485, 
	2405, 2406, 2407, 2399, 2400, 2401, 2402, 2403, 
	1516, 2404, 1485, 2405, 2406, 2407, 2062, 1107, 
	1108, 1107, 1108, 2394, 2398, 2399, 2400, 2401, 
	2402, 2403, 1516, 2404, 1485, 2405, 2406, 2407, 
	2399, 2400, 2401, 2402, 2403, 1516, 2404, 1485, 
	2405, 2406, 2407, 2408, 2062, 2411, 2412, 2413, 
	2416, 2416, 2415, 2409, 2410, 2414, 2415, 2415, 
	2415, 2415, 2415, 2062, 1573, 1574, 1575, 1562, 
	1562, 1562, 1562, 1577, 1562, 1571, 1572, 1576, 
	1562, 1577, 1577, 1562, 1577, 1577, 1577, 2417, 
	1565, 1566, 1567, 1561, 1570, 1561, 1561, 1569, 
	1562, 1563, 1564, 1568, 1562, 1569, 1569, 1561, 
	1569, 1569, 1569, 2417, 2419, 2420, 2421, 2422, 
	2418, 2424, 2425, 2423, 1597, 2423, 1603, 2423, 
	2427, 2428, 2429, 2430, 2426, 2432, 2433, 2431, 
	1609, 2431, 1618, 2431, 2435, 2436, 2434, 2438, 
	2439, 2440, 2439, 2440, 2437, 2441, 2442, 2443, 
	2442, 2443, 2437, 0
};

static const short _dtext_trans_targs[] = {
	1565, 1566, 1, 1565, 2, 3, 18, 4, 
	10, 13, 5, 6, 7, 8, 9, 1565, 
	11, 12, 1568, 14, 15, 16, 17, 1565, 
	19, 25, 27, 20, 21, 22, 23, 24, 
	26, 28, 29, 30, 31, 1570, 1571, 32, 
	33, 35, 36, 37, 38, 39, 40, 41, 
	42, 43, 1573, 45, 46, 53, 47, 48, 
	49, 1575, 50, 50, 1574, 1565, 1565, 51, 
	1565, 1565, 52, 54, 55, 56, 58, 1565, 
	57, 56, 58, 1565, 57, 1565, 60, 61, 
	62, 63, 64, 65, 67, 1577, 66, 65, 
	67, 1576, 66, 1576, 69, 70, 71, 72, 
	73, 74, 1578, 1565, 1565, 75, 77, 78, 
	79, 80, 81, 82, 1579, 83, 85, 1565, 
	87, 1581, 88, 88, 1581, 90, 91, 96, 
	92, 93, 94, 95, 95, 97, 98, 99, 
	101, 100, 99, 101, 100, 103, 104, 105, 
	106, 107, 108, 110, 109, 108, 110, 109, 
	112, 113, 114, 115, 116, 117, 119, 120, 
	121, 122, 124, 125, 126, 127, 128, 129, 
	130, 132, 134, 135, 134, 141, 136, 137, 
	136, 137, 138, 139, 140, 1565, 135, 142, 
	141, 135, 142, 1584, 144, 145, 146, 147, 
	152, 1584, 1584, 1584, 148, 149, 150, 151, 
	1584, 1584, 155, 1584, 1584, 157, 158, 159, 
	160, 153, 1584, 163, 164, 165, 166, 1587, 
	1589, 171, 1587, 172, 1592, 174, 1587, 175, 
	1587, 176, 177, 195, 178, 181, 190, 179, 
	180, 1595, 182, 183, 184, 185, 186, 187, 
	188, 189, 1587, 191, 192, 193, 194, 1587, 
	196, 198, 206, 197, 199, 200, 201, 202, 
	203, 204, 205, 207, 208, 209, 210, 1587, 
	212, 213, 223, 214, 219, 215, 216, 217, 
	218, 1597, 220, 221, 222, 1587, 224, 225, 
	226, 1587, 1587, 1587, 228, 229, 239, 230, 
	235, 231, 232, 233, 234, 236, 237, 238, 
	240, 241, 242, 244, 243, 1598, 1599, 246, 
	276, 283, 247, 257, 263, 268, 248, 249, 
	250, 251, 252, 253, 254, 255, 256, 1600, 
	258, 259, 260, 261, 262, 1601, 264, 265, 
	266, 267, 269, 270, 271, 272, 273, 274, 
	1587, 275, 277, 278, 279, 280, 281, 1587, 
	282, 282, 1587, 284, 285, 286, 287, 288, 
	289, 291, 292, 1602, 293, 293, 1602, 295, 
	310, 317, 296, 302, 297, 298, 299, 300, 
	301, 303, 304, 305, 306, 307, 308, 309, 
	311, 312, 313, 314, 315, 316, 316, 318, 
	319, 320, 321, 322, 323, 325, 326, 327, 
	326, 333, 328, 329, 328, 329, 330, 331, 
	332, 1587, 327, 334, 333, 327, 334, 335, 
	336, 337, 1604, 1605, 371, 396, 1587, 1604, 
	338, 341, 343, 345, 346, 339, 340, 342, 
	344, 347, 348, 1605, 349, 352, 354, 356, 
	357, 350, 351, 353, 355, 358, 359, 360, 
	361, 362, 363, 365, 367, 370, 1606, 364, 
	366, 368, 369, 372, 373, 374, 375, 395, 
	376, 377, 378, 380, 381, 379, 382, 383, 
	384, 385, 388, 390, 393, 1607, 386, 387, 
	394, 389, 391, 392, 1608, 397, 398, 397, 
	1587, 399, 400, 401, 402, 405, 403, 404, 
	407, 408, 407, 410, 421, 431, 444, 448, 
	451, 408, 409, 410, 411, 414, 415, 409, 
	411, 414, 415, 412, 413, 419, 420, 412, 
	414, 415, 413, 1610, 416, 415, 418, 416, 
	417, 418, 417, 418, 1612, 419, 422, 423, 
	424, 427, 423, 424, 427, 425, 426, 428, 
	429, 425, 427, 426, 427, 1614, 428, 430, 
	430, 432, 433, 434, 435, 436, 437, 438, 
	439, 438, 439, 440, 441, 442, 443, 440, 
	441, 442, 421, 445, 446, 447, 424, 427, 
	447, 424, 449, 450, 452, 455, 456, 457, 
	453, 454, 453, 454, 458, 460, 461, 463, 
	464, 499, 500, 502, 503, 461, 462, 466, 
	471, 462, 463, 464, 499, 500, 502, 493, 
	471, 493, 465, 472, 498, 467, 466, 469, 
	470, 467, 468, 469, 470, 468, 470, 1616, 
	1618, 473, 466, 479, 474, 473, 476, 477, 
	481, 487, 490, 493, 479, 474, 475, 479, 
	475, 476, 477, 481, 487, 490, 479, 478, 
	480, 1620, 1622, 482, 483, 484, 485, 486, 
	488, 489, 478, 491, 492, 494, 495, 496, 
	497, 494, 1623, 501, 504, 505, 506, 507, 
	509, 1630, 519, 1641, 510, 511, 512, 513, 
	514, 515, 516, 517, 518, 521, 1646, 531, 
	1657, 522, 523, 524, 525, 526, 527, 528, 
	529, 530, 533, 1665, 543, 1676, 534, 535, 
	536, 537, 538, 539, 540, 541, 542, 545, 
	1682, 556, 1587, 1683, 1694, 547, 548, 549, 
	550, 551, 552, 553, 554, 555, 558, 1700, 
	568, 1711, 559, 560, 561, 562, 563, 564, 
	565, 566, 567, 570, 571, 572, 574, 575, 
	573, 576, 577, 578, 579, 582, 584, 587, 
	1716, 580, 581, 1717, 1718, 621, 610, 583, 
	585, 586, 1587, 588, 591, 593, 595, 596, 
	589, 590, 592, 594, 597, 598, 599, 602, 
	604, 606, 607, 600, 601, 603, 605, 608, 
	609, 611, 612, 613, 615, 617, 620, 1719, 
	614, 616, 618, 619, 1720, 623, 624, 625, 
	626, 627, 628, 629, 630, 1725, 640, 1736, 
	631, 632, 633, 634, 635, 636, 637, 638, 
	639, 642, 643, 666, 644, 646, 665, 645, 
	1742, 647, 664, 648, 663, 649, 662, 650, 
	661, 651, 660, 652, 659, 653, 658, 654, 
	657, 655, 656, 668, 1746, 678, 1757, 669, 
	670, 671, 672, 673, 674, 675, 676, 677, 
	680, 1760, 690, 1771, 681, 682, 683, 684, 
	685, 686, 687, 688, 689, 692, 1778, 702, 
	1789, 693, 694, 695, 696, 697, 698, 699, 
	700, 701, 704, 1796, 714, 1807, 705, 706, 
	707, 708, 709, 710, 711, 712, 713, 716, 
	733, 756, 717, 718, 719, 720, 721, 722, 
	1811, 732, 1822, 723, 724, 725, 726, 727, 
	728, 729, 730, 731, 734, 735, 736, 737, 
	738, 739, 740, 741, 742, 743, 744, 745, 
	1823, 755, 1834, 746, 747, 748, 749, 750, 
	751, 752, 753, 754, 757, 758, 759, 760, 
	761, 762, 763, 764, 765, 766, 767, 768, 
	1835, 778, 1846, 769, 770, 771, 772, 773, 
	774, 775, 776, 777, 780, 1851, 792, 1587, 
	782, 1852, 1863, 783, 784, 785, 786, 787, 
	788, 789, 790, 791, 794, 805, 1868, 804, 
	1879, 795, 796, 797, 798, 799, 800, 801, 
	802, 803, 806, 807, 808, 809, 810, 811, 
	812, 1880, 822, 1891, 813, 814, 815, 816, 
	817, 818, 819, 820, 821, 824, 1896, 834, 
	1907, 825, 826, 827, 828, 829, 830, 831, 
	832, 833, 835, 836, 837, 838, 839, 838, 
	1587, 840, 841, 842, 843, 846, 844, 845, 
	848, 850, 865, 871, 872, 873, 879, 884, 
	892, 903, 849, 1587, 851, 856, 852, 853, 
	854, 855, 1909, 857, 858, 859, 863, 860, 
	861, 862, 864, 1910, 866, 867, 868, 869, 
	870, 1587, 874, 875, 876, 877, 878, 880, 
	881, 882, 883, 885, 1587, 886, 887, 888, 
	889, 890, 891, 893, 895, 898, 899, 902, 
	894, 896, 897, 900, 901, 904, 1587, 906, 
	1587, 1587, 908, 913, 909, 910, 911, 912, 
	1910, 914, 921, 915, 916, 917, 1912, 918, 
	918, 1911, 1587, 1587, 919, 1587, 1587, 920, 
	922, 923, 924, 926, 1910, 925, 924, 926, 
	1910, 925, 1910, 928, 929, 930, 931, 932, 
	933, 935, 1587, 934, 933, 935, 1910, 934, 
	1910, 937, 938, 939, 940, 972, 941, 942, 
	943, 959, 944, 945, 949, 946, 947, 948, 
	948, 1587, 950, 951, 950, 1587, 952, 953, 
	954, 955, 958, 956, 957, 1913, 960, 961, 
	964, 961, 1914, 962, 963, 950, 1915, 965, 
	966, 967, 968, 971, 969, 970, 1587, 975, 
	976, 977, 978, 979, 980, 1916, 1587, 1587, 
	981, 983, 984, 985, 986, 1587, 988, 1587, 
	989, 990, 991, 992, 993, 994, 1587, 996, 
	997, 1587, 999, 1587, 1000, 1001, 1002, 1097, 
	1003, 1054, 1055, 1077, 1004, 1046, 1004, 1005, 
	1030, 1005, 1006, 1007, 1014, 1015, 1007, 1008, 
	1009, 1008, 1009, 1010, 1011, 1012, 1013, 1587, 
	1016, 1022, 1016, 1917, 1017, 1018, 1019, 1020, 
	1021, 1913, 1023, 1024, 1025, 1026, 1029, 1027, 
	1028, 1031, 1032, 1034, 1032, 1033, 1035, 1038, 
	1035, 1036, 1918, 1037, 1016, 1917, 1039, 1040, 
	1041, 1042, 1045, 1043, 1044, 1047, 1048, 1049, 
	1050, 1053, 1051, 1052, 1054, 1006, 1056, 1069, 
	1056, 1057, 1058, 1059, 1060, 1061, 1060, 1919, 
	1062, 1063, 1064, 1065, 1068, 1066, 1067, 1070, 
	1071, 1072, 1073, 1076, 1074, 1075, 1078, 1079, 
	1080, 1081, 1096, 1082, 1083, 1084, 1085, 1086, 
	1033, 1087, 1088, 1087, 1920, 1037, 1089, 1090, 
	1091, 1092, 1095, 1093, 1094, 1098, 1110, 1098, 
	1099, 1105, 1099, 1100, 1101, 1102, 1103, 1104, 
	1587, 1106, 1107, 1108, 1109, 1111, 1112, 1113, 
	1114, 1117, 1115, 1116, 1119, 1118, 1121, 1132, 
	1142, 1155, 1159, 1162, 1119, 1120, 1121, 1122, 
	1125, 1126, 1120, 1122, 1125, 1126, 1123, 1124, 
	1130, 1131, 1123, 1125, 1126, 1124, 1127, 1126, 
	1129, 1127, 1128, 1129, 1128, 1129, 1130, 1133, 
	1134, 1135, 1138, 1134, 1135, 1138, 1136, 1137, 
	1139, 1140, 1136, 1138, 1137, 1138, 1139, 1141, 
	1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 
	1150, 1149, 1150, 1151, 1152, 1153, 1154, 1151, 
	1152, 1153, 1132, 1156, 1157, 1158, 1135, 1138, 
	1158, 1135, 1160, 1161, 1163, 1166, 1167, 1168, 
	1164, 1165, 1164, 1165, 1169, 1171, 1172, 1173, 
	1174, 1180, 1175, 1176, 1177, 1178, 1179, 1182, 
	1183, 1184, 1185, 1186, 1187, 1188, 1189, 1196, 
	1189, 1190, 1191, 1192, 1192, 1193, 1194, 1195, 
	1587, 1197, 1198, 1199, 1200, 1203, 1201, 1202, 
	1205, 1214, 1206, 1207, 1208, 1209, 1210, 1211, 
	1212, 1213, 1216, 1221, 1217, 1218, 1219, 1220, 
	1587, 1222, 1227, 1223, 1224, 1225, 1226, 1226, 
	1923, 1228, 1229, 1230, 1232, 1587, 1231, 1230, 
	1232, 1587, 1231, 1587, 1234, 1235, 1236, 1237, 
	1238, 1239, 1240, 1242, 1241, 1240, 1242, 1587, 
	1241, 1587, 1244, 1245, 1246, 1247, 1251, 1248, 
	1249, 1250, 1587, 1253, 1254, 1255, 1256, 1257, 
	1258, 1260, 1267, 1261, 1262, 1263, 1264, 1265, 
	1266, 1268, 1269, 1270, 1271, 1273, 1276, 1276, 
	1587, 1278, 1279, 1290, 1291, 1292, 1294, 1296, 
	1299, 1927, 1300, 1280, 1281, 1282, 1284, 1286, 
	1288, 1926, 1283, 1285, 1287, 1289, 1293, 1295, 
	1297, 1298, 1277, 1303, 1305, 1307, 1308, 1301, 
	1302, 1304, 1306, 1309, 1928, 1312, 1313, 1314, 
	1315, 1316, 1928, 1318, 1319, 1320, 1321, 1322, 
	1932, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 
	1331, 1932, 1333, 1334, 1335, 1336, 1337, 1338, 
	1339, 1340, 1936, 1342, 1350, 1343, 1344, 1345, 
	1346, 1347, 1348, 1349, 1936, 1351, 1355, 1359, 
	1363, 1352, 1353, 1354, 1936, 1356, 1357, 1358, 
	1936, 1360, 1361, 1362, 1936, 1936, 1365, 1366, 
	1367, 1936, 1377, 1368, 1369, 1368, 1370, 1369, 
	1370, 1371, 1374, 1376, 1372, 1372, 1373, 1367, 
	1936, 1375, 1375, 1367, 1376, 1936, 1378, 1379, 
	1380, 1381, 1382, 1936, 1383, 1384, 1383, 1385, 
	1384, 1385, 1386, 1389, 1391, 1387, 1387, 1388, 
	1382, 1936, 1390, 1390, 1382, 1391, 1936, 1393, 
	1407, 1418, 1442, 1394, 1395, 1396, 1397, 1936, 
	1398, 1399, 1398, 1400, 1399, 1400, 1401, 1404, 
	1406, 1402, 1402, 1403, 1397, 1936, 1405, 1405, 
	1397, 1406, 1936, 1408, 1936, 1409, 1410, 1409, 
	1411, 1410, 1411, 1412, 1415, 1417, 1413, 1413, 
	1414, 1408, 1936, 1416, 1416, 1408, 1417, 1936, 
	1419, 1936, 1429, 1420, 1421, 1420, 1422, 1421, 
	1422, 1423, 1426, 1428, 1424, 1424, 1425, 1419, 
	1936, 1427, 1427, 1419, 1428, 1936, 1430, 1431, 
	1432, 1936, 1433, 1434, 1433, 1435, 1434, 1435, 
	1436, 1439, 1441, 1437, 1437, 1438, 1432, 1936, 
	1440, 1440, 1432, 1441, 1936, 1443, 1936, 1444, 
	1445, 1444, 1446, 1445, 1446, 1447, 1450, 1452, 
	1448, 1448, 1449, 1443, 1936, 1451, 1451, 1443, 
	1452, 1936, 1454, 1462, 1455, 1456, 1457, 1458, 
	1459, 1460, 1461, 1463, 1467, 1471, 1475, 1464, 
	1465, 1466, 1468, 1469, 1470, 1472, 1473, 1474, 
	1477, 1478, 1479, 1489, 1480, 1481, 1480, 1482, 
	1481, 1482, 1483, 1486, 1488, 1484, 1484, 1485, 
	1479, 1487, 1487, 1479, 1488, 1490, 1491, 1492, 
	1493, 1494, 1495, 1496, 1495, 1497, 1496, 1497, 
	1498, 1501, 1503, 1499, 1499, 1500, 1494, 1502, 
	1502, 1494, 1503, 1505, 1519, 1530, 1554, 1506, 
	1507, 1508, 1509, 1510, 1511, 1510, 1512, 1511, 
	1512, 1513, 1516, 1518, 1514, 1514, 1515, 1509, 
	1517, 1517, 1509, 1518, 1520, 1521, 1522, 1521, 
	1523, 1522, 1523, 1524, 1527, 1529, 1525, 1525, 
	1526, 1520, 1528, 1528, 1520, 1529, 1531, 1541, 
	1532, 1533, 1532, 1534, 1533, 1534, 1535, 1538, 
	1540, 1536, 1536, 1537, 1531, 1539, 1539, 1531, 
	1540, 1542, 1543, 1544, 1545, 1546, 1545, 1547, 
	1546, 1547, 1548, 1551, 1553, 1549, 1549, 1550, 
	1544, 1552, 1552, 1544, 1553, 1555, 1556, 1557, 
	1556, 1558, 1557, 1558, 1559, 1562, 1564, 1560, 
	1560, 1561, 1555, 1563, 1563, 1555, 1564, 1565, 
	1567, 1569, 1572, 1580, 1582, 1583, 1565, 1565, 
	1565, 1565, 1570, 34, 44, 59, 68, 76, 
	84, 1565, 1565, 1565, 1565, 1576, 1565, 1565, 
	1565, 86, 1565, 1581, 89, 102, 111, 118, 
	123, 131, 133, 1584, 1584, 1585, 1586, 1584, 
	143, 154, 156, 161, 162, 167, 168, 169, 
	170, 1587, 1588, 1590, 1591, 1592, 1593, 1594, 
	1587, 1603, 1609, 0, 1624, 1642, 1658, 1677, 
	1695, 1712, 1722, 1737, 1772, 1790, 1808, 1864, 
	1892, 1908, 1921, 1922, 1924, 1925, 1587, 1587, 
	173, 1587, 1596, 243, 245, 290, 294, 324, 
	1587, 1587, 211, 227, 1587, 1587, 1587, 1598, 
	1587, 1587, 1587, 1602, 335, 1587, 1609, 406, 
	459, 1587, 1611, 1587, 1611, 1587, 1613, 1587, 
	1613, 1615, 1615, 1587, 1617, 1587, 1617, 1587, 
	1619, 1587, 1619, 1621, 1621, 1618, 1625, 1626, 
	1627, 1628, 1629, 508, 1587, 1631, 1632, 1633, 
	1634, 1635, 1636, 1637, 1638, 1639, 1640, 1643, 
	1644, 1645, 520, 1587, 1647, 1648, 1649, 1650, 
	1651, 1652, 1653, 1654, 1655, 1656, 1659, 1660, 
	1661, 1662, 1663, 1664, 532, 1587, 1666, 1667, 
	1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 
	1678, 1679, 1680, 1681, 544, 1587, 546, 1684, 
	1587, 1683, 1685, 1686, 1687, 1688, 1689, 1690, 
	1691, 1692, 1693, 1696, 1697, 1698, 1699, 557, 
	1587, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 
	1708, 1709, 1710, 1713, 1714, 1715, 569, 1721, 
	1587, 1723, 1724, 622, 1587, 1726, 1727, 1728, 
	1729, 1730, 1731, 1732, 1733, 1734, 1735, 1738, 
	1743, 1739, 1740, 1741, 641, 1587, 1742, 1744, 
	1758, 1745, 667, 1587, 1747, 1748, 1749, 1750, 
	1751, 1752, 1753, 1754, 1755, 1756, 1759, 679, 
	1587, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 
	1768, 1769, 1770, 1773, 1774, 1775, 1776, 1777, 
	691, 1587, 1779, 1780, 1781, 1782, 1783, 1784, 
	1785, 1786, 1787, 1788, 1791, 1792, 1793, 1794, 
	1795, 703, 1587, 1797, 1798, 1799, 1800, 1801, 
	1802, 1803, 1804, 1805, 1806, 1809, 1847, 1810, 
	715, 1587, 1812, 1813, 1814, 1815, 1816, 1817, 
	1818, 1819, 1820, 1821, 1587, 1824, 1825, 1826, 
	1827, 1828, 1829, 1830, 1831, 1832, 1833, 1587, 
	1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 
	1844, 1845, 1848, 1849, 1850, 779, 1587, 781, 
	1853, 1587, 1852, 1854, 1855, 1856, 1857, 1858, 
	1859, 1860, 1861, 1862, 1865, 1866, 1867, 793, 
	1587, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 
	1876, 1877, 1878, 1587, 1881, 1882, 1883, 1884, 
	1885, 1886, 1887, 1888, 1889, 1890, 1893, 1894, 
	1895, 823, 1587, 1897, 1898, 1899, 1900, 1901, 
	1902, 1903, 1904, 1905, 1906, 835, 847, 905, 
	907, 927, 936, 973, 974, 982, 987, 995, 
	998, 1118, 1587, 1587, 1587, 1587, 1170, 1181, 
	1204, 1215, 1233, 1243, 1252, 1259, 1272, 1274, 
	1275, 1277, 1301, 1302, 1304, 1306, 1309, 1278, 
	1310, 1587, 1928, 1928, 1929, 1930, 1931, 1928, 
	1311, 1317, 1932, 1932, 1933, 1934, 1935, 1932, 
	1323, 1332, 1936, 1937, 1938, 1936, 1341, 1364, 
	1392, 1453, 1476, 1504
};

static const short _dtext_trans_actions[] = {
	275, 31, 0, 277, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 243, 
	0, 0, 0, 0, 0, 0, 0, 239, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 5, 5, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 31, 1, 0, 456, 271, 231, 0, 
	269, 229, 0, 0, 0, 0, 0, 235, 
	1, 1, 1, 542, 0, 354, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 279, 0, 3, 0, 0, 0, 0, 
	0, 0, 31, 273, 237, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 241, 
	3, 546, 5, 0, 7, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 279, 279, 1, 5, 357, 
	0, 7, 0, 0, 0, 233, 3, 3, 
	0, 0, 0, 55, 0, 0, 0, 0, 
	0, 35, 39, 43, 0, 0, 0, 0, 
	47, 33, 0, 37, 41, 0, 0, 0, 
	0, 0, 45, 0, 0, 0, 0, 177, 
	528, 0, 173, 0, 519, 0, 175, 0, 
	171, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 99, 0, 0, 0, 0, 113, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 169, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 89, 0, 0, 
	0, 117, 115, 81, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 5, 5, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	103, 0, 0, 0, 0, 0, 0, 107, 
	1, 0, 297, 0, 0, 0, 0, 0, 
	0, 1, 3, 546, 5, 0, 7, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 279, 
	279, 1, 5, 357, 0, 7, 0, 0, 
	0, 97, 3, 3, 0, 0, 0, 0, 
	3, 0, 694, 741, 5, 0, 159, 459, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 698, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 698, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 698, 0, 0, 
	0, 0, 0, 0, 698, 5, 5, 0, 
	381, 0, 0, 0, 0, 0, 0, 0, 
	0, 5, 5, 5, 5, 5, 5, 5, 
	5, 0, 7, 0, 7, 7, 7, 0, 
	0, 0, 0, 9, 11, 11, 0, 0, 
	11, 11, 0, 0, 13, 411, 411, 0, 
	15, 15, 0, 0, 0, 0, 7, 554, 
	369, 554, 411, 13, 411, 9, 405, 405, 
	0, 0, 405, 0, 0, 0, 0, 15, 
	0, 7, 13, 0, 0, 0, 0, 7, 
	7, 0, 0, 9, 11, 11, 0, 0, 
	0, 0, 0, 7, 13, 372, 7, 372, 
	0, 0, 7, 0, 0, 0, 0, 0, 
	7, 7, 0, 0, 0, 0, 5, 5, 
	5, 5, 5, 5, 5, 0, 7, 7, 
	7, 0, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 7, 7, 9, 402, 9, 
	402, 0, 11, 0, 11, 0, 0, 0, 
	0, 550, 363, 550, 9, 402, 9, 9, 
	9, 9, 9, 9, 402, 0, 366, 366, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	366, 0, 7, 7, 9, 0, 0, 0, 
	0, 7, 9, 7, 9, 9, 9, 9, 
	0, 0, 7, 0, 0, 0, 0, 0, 
	0, 646, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 666, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 630, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	634, 1, 157, 5, 31, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 622, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	516, 0, 0, 31, 516, 0, 0, 0, 
	0, 0, 161, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 516, 
	0, 0, 0, 0, 516, 0, 0, 0, 
	0, 0, 0, 0, 0, 674, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 3, 0, 0, 0, 
	5, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 638, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 618, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 678, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 670, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	654, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	658, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	662, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 626, 1, 155, 
	0, 5, 31, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 642, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 650, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 682, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 21, 0, 23, 23, 0, 
	429, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 65, 0, 0, 0, 0, 
	0, 0, 710, 0, 0, 0, 0, 0, 
	0, 0, 0, 718, 0, 0, 0, 0, 
	0, 69, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 73, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 77, 0, 
	63, 91, 0, 0, 0, 0, 0, 0, 
	706, 0, 0, 0, 0, 0, 31, 1, 
	0, 756, 165, 95, 0, 163, 93, 0, 
	0, 0, 0, 0, 714, 1, 1, 1, 
	766, 0, 751, 0, 0, 0, 0, 0, 
	0, 0, 111, 1, 1, 1, 772, 0, 
	761, 0, 0, 0, 0, 0, 0, 0, 
	0, 21, 285, 0, 0, 3, 0, 5, 
	0, 384, 360, 360, 0, 590, 0, 0, 
	0, 0, 0, 0, 0, 702, 0, 23, 
	23, 0, 722, 3, 0, 5, 746, 0, 
	0, 0, 0, 0, 0, 0, 67, 0, 
	0, 0, 0, 0, 0, 31, 167, 105, 
	0, 0, 0, 0, 0, 109, 0, 71, 
	0, 0, 0, 0, 0, 0, 101, 0, 
	0, 79, 0, 75, 0, 0, 0, 0, 
	0, 5, 0, 5, 5, 5, 0, 7, 
	21, 0, 21, 1, 1, 1, 0, 3, 
	3, 0, 0, 0, 0, 0, 0, 57, 
	23, 23, 0, 722, 3, 0, 0, 0, 
	0, 513, 0, 0, 0, 0, 0, 0, 
	0, 0, 7, 0, 0, 0, 23, 23, 
	0, 7, 722, 0, 1, 736, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 375, 5, 5, 
	0, 21, 0, 0, 23, 23, 0, 722, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 21, 0, 0, 
	7, 23, 23, 0, 722, 7, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	3, 3, 0, 0, 0, 0, 0, 0, 
	61, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 5, 5, 5, 
	5, 5, 5, 5, 0, 7, 0, 7, 
	375, 7, 0, 0, 21, 0, 9, 11, 
	11, 0, 0, 408, 11, 0, 13, 411, 
	598, 0, 15, 414, 0, 21, 0, 7, 
	554, 369, 726, 411, 13, 598, 9, 405, 
	405, 0, 0, 594, 0, 21, 0, 15, 
	0, 7, 13, 0, 0, 0, 0, 7, 
	7, 0, 0, 9, 11, 11, 0, 0, 
	0, 0, 0, 7, 13, 372, 7, 558, 
	0, 0, 7, 0, 0, 0, 0, 0, 
	7, 7, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 3, 0, 5, 0, 7, 0, 0, 
	59, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	83, 0, 0, 0, 0, 0, 1, 0, 
	456, 0, 0, 0, 0, 87, 1, 1, 
	1, 534, 0, 294, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 538, 
	0, 300, 0, 0, 0, 0, 0, 0, 
	0, 0, 288, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	291, 0, 0, 0, 0, 0, 0, 0, 
	0, 690, 0, 0, 0, 0, 0, 0, 
	0, 690, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 187, 0, 0, 0, 
	0, 0, 179, 0, 0, 0, 0, 0, 
	197, 0, 0, 0, 0, 0, 0, 0, 
	0, 189, 0, 0, 0, 0, 0, 0, 
	0, 0, 227, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 201, 0, 0, 0, 
	0, 0, 0, 0, 221, 0, 0, 0, 
	211, 0, 0, 0, 207, 217, 0, 0, 
	0, 203, 0, 1, 3, 0, 3, 0, 
	0, 0, 0, 5, 5, 0, 7, 25, 
	435, 5, 0, 378, 0, 566, 0, 0, 
	0, 0, 0, 199, 1, 3, 0, 3, 
	0, 0, 0, 0, 5, 5, 0, 7, 
	25, 432, 5, 0, 378, 0, 562, 0, 
	0, 0, 0, 0, 0, 0, 0, 209, 
	1, 3, 0, 3, 0, 0, 0, 0, 
	5, 5, 0, 7, 25, 441, 5, 0, 
	378, 0, 574, 0, 219, 1, 3, 0, 
	3, 0, 0, 0, 0, 5, 5, 0, 
	7, 25, 450, 5, 0, 378, 0, 586, 
	0, 213, 0, 1, 3, 0, 3, 0, 
	0, 0, 0, 5, 5, 0, 7, 25, 
	444, 5, 0, 378, 0, 578, 0, 0, 
	0, 205, 1, 3, 0, 3, 0, 0, 
	0, 0, 5, 5, 0, 7, 25, 438, 
	5, 0, 378, 0, 570, 0, 215, 1, 
	3, 0, 3, 0, 0, 0, 0, 5, 
	5, 0, 7, 25, 447, 5, 0, 378, 
	0, 582, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 3, 0, 3, 
	0, 0, 0, 0, 5, 5, 0, 7, 
	25, 5, 0, 378, 0, 0, 0, 0, 
	0, 0, 1, 3, 0, 3, 0, 0, 
	0, 0, 5, 5, 0, 7, 25, 5, 
	0, 378, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 3, 0, 3, 0, 
	0, 0, 0, 5, 5, 0, 7, 25, 
	5, 0, 378, 0, 0, 1, 3, 0, 
	3, 0, 0, 0, 0, 5, 5, 0, 
	7, 25, 5, 0, 378, 0, 0, 0, 
	1, 3, 0, 3, 0, 0, 0, 0, 
	5, 5, 0, 7, 25, 5, 0, 378, 
	0, 0, 0, 0, 1, 3, 0, 3, 
	0, 0, 0, 0, 5, 5, 0, 7, 
	25, 5, 0, 378, 0, 0, 1, 3, 
	0, 3, 0, 0, 0, 0, 5, 5, 
	0, 7, 25, 5, 0, 378, 0, 245, 
	31, 453, 31, 31, 31, 31, 265, 267, 
	263, 399, 0, 0, 0, 0, 0, 0, 
	0, 249, 255, 253, 259, 0, 257, 261, 
	251, 1, 247, 0, 0, 0, 0, 0, 
	0, 0, 0, 51, 49, 31, 31, 53, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 121, 0, 531, 531, 525, 531, 522, 
	119, 531, 686, 0, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 686, 686, 
	686, 731, 731, 531, 531, 531, 153, 151, 
	0, 149, 519, 1, 0, 0, 0, 0, 
	145, 147, 0, 0, 131, 85, 396, 0, 
	141, 143, 139, 0, 1, 123, 528, 3, 
	3, 610, 17, 423, 0, 614, 17, 426, 
	0, 17, 0, 606, 13, 420, 0, 602, 
	13, 417, 0, 13, 0, 411, 528, 528, 
	528, 528, 528, 0, 324, 483, 483, 483, 
	483, 483, 483, 483, 483, 0, 0, 528, 
	528, 528, 0, 339, 498, 498, 498, 498, 
	498, 498, 498, 498, 0, 0, 528, 528, 
	528, 528, 528, 528, 0, 312, 471, 471, 
	471, 471, 471, 471, 471, 471, 0, 0, 
	528, 528, 528, 528, 0, 315, 3, 474, 
	387, 0, 474, 474, 474, 474, 474, 474, 
	474, 31, 31, 528, 528, 528, 528, 0, 
	306, 465, 465, 465, 465, 465, 465, 465, 
	465, 0, 0, 528, 528, 528, 0, 528, 
	127, 528, 528, 0, 345, 504, 504, 504, 
	504, 504, 504, 504, 504, 0, 0, 528, 
	528, 528, 528, 528, 0, 393, 0, 528, 
	528, 528, 0, 318, 477, 477, 477, 477, 
	477, 477, 477, 477, 0, 0, 528, 0, 
	303, 462, 462, 462, 462, 462, 462, 462, 
	462, 0, 0, 528, 528, 528, 528, 528, 
	0, 348, 507, 507, 507, 507, 507, 507, 
	507, 507, 0, 0, 528, 528, 528, 528, 
	528, 0, 342, 501, 501, 501, 501, 501, 
	501, 501, 501, 0, 0, 528, 528, 528, 
	0, 330, 489, 489, 489, 489, 489, 489, 
	489, 489, 0, 0, 333, 492, 492, 492, 
	492, 492, 492, 492, 492, 0, 0, 336, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	0, 0, 528, 528, 528, 0, 309, 3, 
	468, 390, 0, 468, 468, 468, 468, 468, 
	468, 468, 31, 31, 528, 528, 528, 0, 
	321, 480, 480, 480, 480, 480, 480, 480, 
	480, 0, 0, 327, 486, 486, 486, 486, 
	486, 486, 486, 486, 0, 0, 528, 528, 
	528, 0, 351, 510, 510, 510, 510, 510, 
	510, 510, 510, 0, 0, 19, 19, 19, 
	19, 19, 282, 19, 19, 19, 19, 19, 
	19, 19, 135, 133, 125, 137, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 129, 183, 181, 31, 31, 31, 185, 
	0, 0, 193, 191, 31, 31, 31, 195, 
	0, 0, 223, 31, 31, 225, 0, 0, 
	0, 0, 0, 0
};

static const short _dtext_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 27, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	27, 0, 0, 27, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	27, 0, 0, 0, 27, 0, 0, 0, 
	27, 0, 0
};

static const short _dtext_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 29, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	29, 0, 0, 29, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	29, 0, 0, 0, 29, 0, 0, 0, 
	29, 0, 0
};

static const short _dtext_eof_trans[] = {
	0, 1, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 62, 65, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 100, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 208, 208, 211, 208, 215, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 256, 256, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 256, 256, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 217, 217, 217, 217, 217, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 217, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 217, 208, 208, 208, 
	208, 208, 208, 208, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 215, 
	215, 215, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 211, 211, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 211, 211, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 211, 
	211, 211, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 211, 211, 211, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 211, 
	211, 211, 699, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 211, 211, 211, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 211, 211, 
	211, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 211, 211, 211, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 211, 211, 
	211, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 211, 211, 211, 952, 952, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	211, 211, 211, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 211, 211, 
	211, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 211, 215, 215, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 1107, 
	1110, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 208, 208, 208, 208, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 1191, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 208, 
	208, 208, 208, 208, 208, 208, 208, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 208, 
	208, 208, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 208, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 208, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 1597, 
	1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 
	1597, 1597, 1597, 1609, 1609, 1609, 1609, 1609, 
	1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 
	1609, 1609, 1609, 1609, 1609, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 
	1627, 1627, 1627, 1627, 1627, 0, 1991, 1992, 
	1993, 1992, 1994, 1994, 1992, 2002, 2003, 2004, 
	2005, 2007, 2008, 2009, 1992, 2011, 1992, 1992, 
	0, 2024, 2024, 0, 2063, 2064, 2063, 2063, 
	208, 2063, 2066, 2073, 2074, 2077, 2079, 2079, 
	2081, 2082, 2083, 2063, 2086, 2086, 2086, 2086, 
	2086, 2064, 2090, 2092, 2094, 2096, 2090, 2092, 
	2100, 2102, 2104, 2106, 2104, 2106, 2104, 2104, 
	2064, 2064, 2064, 2064, 2064, 2064, 2117, 2117, 
	2117, 2117, 2117, 2117, 2117, 2117, 2117, 2117, 
	2117, 2117, 2064, 2064, 2064, 2064, 2132, 2132, 
	2132, 2132, 2132, 2132, 2132, 2132, 2132, 2132, 
	2132, 2132, 2064, 2064, 2064, 2064, 2064, 2064, 
	2064, 2150, 2150, 2150, 2150, 2150, 2150, 2150, 
	2150, 2150, 2150, 2150, 2150, 2064, 2064, 2064, 
	2064, 2064, 2166, 2169, 2166, 2166, 2166, 2166, 
	2166, 2166, 2166, 2166, 2166, 2166, 2166, 2064, 
	2064, 2064, 2064, 2064, 2185, 2185, 2185, 2185, 
	2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 
	2064, 2064, 2064, 2064, 2201, 2201, 2201, 2201, 
	2201, 2064, 2064, 2064, 2064, 2205, 2205, 2205, 
	2205, 2205, 2205, 2205, 2205, 2205, 2205, 2205, 
	2205, 2064, 2064, 2064, 2064, 2064, 2222, 2064, 
	2064, 2064, 2228, 2228, 2228, 2228, 2228, 2228, 
	2228, 2228, 2228, 2228, 2228, 2228, 2064, 2064, 
	2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 
	2241, 2241, 2241, 2241, 2064, 2064, 2064, 2064, 
	2064, 2064, 2258, 2258, 2258, 2258, 2258, 2258, 
	2258, 2258, 2258, 2258, 2258, 2258, 2064, 2064, 
	2064, 2064, 2064, 2064, 2275, 2275, 2275, 2275, 
	2275, 2275, 2275, 2275, 2275, 2275, 2275, 2275, 
	2064, 2064, 2064, 2290, 2290, 2290, 2290, 2290, 
	2290, 2290, 2290, 2290, 2290, 2290, 2290, 2301, 
	2301, 2301, 2301, 2301, 2301, 2301, 2301, 2301, 
	2301, 2301, 2301, 2312, 2312, 2312, 2312, 2312, 
	2312, 2312, 2312, 2312, 2312, 2312, 2312, 2064, 
	2064, 2064, 2064, 2327, 2330, 2327, 2327, 2327, 
	2327, 2327, 2327, 2327, 2327, 2327, 2327, 2327, 
	2064, 2064, 2064, 2064, 2345, 2345, 2345, 2345, 
	2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 
	2356, 2356, 2356, 2356, 2356, 2356, 2356, 2356, 
	2356, 2356, 2356, 2356, 2064, 2064, 2064, 2064, 
	2371, 2371, 2371, 2371, 2371, 2371, 2371, 2371, 
	2371, 2371, 2371, 2371, 2063, 2077, 208, 2395, 
	2396, 208, 2397, 2397, 2398, 2397, 2397, 2397, 
	2397, 2063, 2063, 2395, 2063, 2063, 2418, 2418, 
	0, 2424, 2424, 2424, 0, 2432, 2432, 2432, 
	0, 2438, 2438
};

static const int dtext_start = 1565;
static const int dtext_first_final = 1565;
static const int dtext_error = 0;

static const int dtext_en_basic_inline = 1584;
static const int dtext_en_inline = 1587;
static const int dtext_en_code = 1928;
static const int dtext_en_nodtext = 1932;
static const int dtext_en_table = 1936;
static const int dtext_en_main = 1565;


#line 804 "ext/dtext/dtext.cpp.rl"

static void dstack_push(StateMachine * sm, element_t element) {
  sm->dstack.push_back(element);
}

static element_t dstack_pop(StateMachine * sm) {
  if (sm->dstack.empty()) {
    g_debug("dstack pop empty stack");
    return DSTACK_EMPTY;
  } else {
    auto element = sm->dstack.back();
    sm->dstack.pop_back();
    return element;
  }
}

static element_t dstack_peek(const StateMachine * sm) {
  return sm->dstack.empty() ? DSTACK_EMPTY : sm->dstack.back();
}

static bool dstack_check(const StateMachine * sm, element_t expected_element) {
  return dstack_peek(sm) == expected_element;
}

// Return true if the given tag is currently open.
static bool dstack_is_open(const StateMachine * sm, element_t element) {
  return std::find(sm->dstack.begin(), sm->dstack.end(), element) != sm->dstack.end();
}

static int dstack_count(const StateMachine * sm, element_t element) {
  return std::count(sm->dstack.begin(), sm->dstack.end(), element);
}

static bool is_internal_url(StateMachine * sm, const std::string_view url) {
  if (url.starts_with("/")) {
    return true;
  } else if (sm->options.domain.empty() || url.empty()) {
    return false;
  } else {
    // Matches the domain name part of a URL.
    static const std::regex url_regex("^https?://(?:[^/?#]*@)?([^/?#:]+)", std::regex_constants::icase);

    std::match_results<std::string_view::const_iterator> matches;
    std::regex_search(url.begin(), url.end(), matches, url_regex);
    return matches[1] == sm->options.domain;
  }
}

static void append(StateMachine * sm, const auto c) {
  sm->output += c;
}

static void append(StateMachine * sm, const char * a, const char * b) {
  append(sm, std::string_view(a, b));
}

static void append_html_escaped(StateMachine * sm, char s) {
  switch (s) {
    case '<': append(sm, "&lt;"); break;
    case '>': append(sm, "&gt;"); break;
    case '&': append(sm, "&amp;"); break;
    case '"': append(sm, "&quot;"); break;
    default:  append(sm, s);
  }
}

static void append_html_escaped(StateMachine * sm, const std::string_view string) {
  for (const unsigned char c : string) {
    append_html_escaped(sm, c);
  }
}

static void append_uri_escaped(StateMachine * sm, const std::string_view string) {
  static const char hex[] = "0123456789ABCDEF";

  for (const unsigned char c : string) {
    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '-' || c == '_' || c == '.' || c == '~') {
      append(sm, c);
    } else {
      append(sm, '%');
      append(sm, hex[c >> 4]);
      append(sm, hex[c & 0x0F]);
    }
  }
}

static void append_relative_url(StateMachine * sm, const auto url) {
  if ((url[0] == '/' || url[0] == '#') && !sm->options.base_url.empty()) {
    append_html_escaped(sm, sm->options.base_url);
  }

  append_html_escaped(sm, url);
}

static void append_absolute_link(StateMachine * sm, const std::string_view url, const std::string_view title, bool internal_url, bool escape_title) {
  if (internal_url) {
    append(sm, "<a class=\"dtext-link\" href=\"");
  } else if (url == title) {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-external-link\" href=\"");
  } else {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-external-link dtext-named-external-link\" href=\"");
  }

  append_html_escaped(sm, url);
  append(sm, "\">");

  if (escape_title) {
    append_html_escaped(sm, title);
  } else {
    append(sm, title);
  }

  append(sm, "</a>");
}

static void append_mention(StateMachine * sm, const std::string_view name) {
  append(sm, "<a class=\"dtext-link dtext-user-mention-link\" data-user-name=\"");
  append_html_escaped(sm, name);
  append(sm, "\" href=\"");
  append_relative_url(sm, "/users?name=");
  append_uri_escaped(sm, name);
  append(sm, "\">@");
  append_html_escaped(sm, name);
  append(sm, "</a>");
}

static void append_id_link(StateMachine * sm, const char * title, const char * id_name, const char * url, const std::string_view id) {
  if (url[0] == '/') {
    append(sm, "<a class=\"dtext-link dtext-id-link dtext-");
    append(sm, id_name);
    append(sm, "-id-link\" href=\"");
    append_relative_url(sm, url);
  } else {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-id-link dtext-");
    append(sm, id_name);
    append(sm, "-id-link\" href=\"");
    append_html_escaped(sm, url);
  }

  append_uri_escaped(sm, id);
  append(sm, "\">");
  append(sm, title);
  append(sm, " #");
  append_html_escaped(sm, id);
  append(sm, "</a>");
}

static void append_bare_unnamed_url(StateMachine * sm, const std::string_view url) {
  auto [trimmed_url, leftovers] = trim_url(url);
  append_unnamed_url(sm, trimmed_url);
  append_html_escaped(sm, leftovers);
}

static void append_unnamed_url(StateMachine * sm, const std::string_view url) {
  DText::URL parsed_url(url);

  if (sm->options.internal_domains.find(std::string(parsed_url.domain)) != sm->options.internal_domains.end()) {
    append_internal_url(sm, parsed_url);
  } else {
    append_absolute_link(sm, url, url, parsed_url.domain == sm->options.domain);
  }
}

static void append_internal_url(StateMachine * sm, const DText::URL& url) {
  auto path_components = url.path_components();
  auto query = url.query;
  auto fragment = url.fragment;

  if (path_components.size() == 2) {
    auto controller = path_components.at(0);
    auto id = path_components.at(1);

    if (!id.empty() && std::all_of(id.begin(), id.end(), ::isdigit)) {
      if (controller == "post" && fragment.empty()) {
        // https://danbooru.donmai.us/posts/6000000#comment_2288996
        return append_id_link(sm, "post", "post", "/posts/", id);
      } else if (controller == "pool" && query.empty()) {
        // https://danbooru.donmai.us/pools/903?page=2
        return append_id_link(sm, "pool", "pool", "/pools/", id);
      } else if (controller == "comment") {
        return append_id_link(sm, "comment", "comment", "/comments/", id);
      } else if (controller == "forum") {
        return append_id_link(sm, "forum", "forum-post", "/forums/", id);
      } else if (controller == "forum" && query.empty() && fragment.empty()) {
        // https://danbooru.donmai.us/forum_topics/1234?page=2
        // https://danbooru.donmai.us/forum_topics/1234#forum_post_5678
        return append_id_link(sm, "topic", "forum-topic", "/forums/", id);
      } else if (controller == "user") {
        return append_id_link(sm, "user", "user", "/users/", id);
      } else if (controller == "artist") {
        return append_id_link(sm, "artist", "artist", "/artists/", id);
      } else if (controller == "wiki" && fragment.empty()) {
        // http://danbooru.donmai.us/wiki_pages/10933#dtext-self-upload
        return append_id_link(sm, "wiki", "wiki-page", "/wiki/", id);
      }
    } else if (controller == "wiki" && fragment.empty()) {
      return append_wiki_link(sm, {}, id, {}, id, {});
    }
  } else if (path_components.size() >= 3) {
    // http://danbooru.donmai.us/post/show/1234/touhou
    auto controller = path_components.at(0);
    auto action = path_components.at(1);
    auto id = path_components.at(2);

    if (!id.empty() && std::all_of(id.begin(), id.end(), ::isdigit)) {
      if (controller == "post" && action == "show") {
        return append_id_link(sm, "post", "post", "/posts/", id);
      }
    }
  }

  append_absolute_link(sm, url.url, url.url, url.domain == sm->options.domain);
}

static void append_named_url(StateMachine * sm, const std::string_view url, const std::string_view title) {
  auto parsed_title = sm->parse_basic_inline(title);

  // protocol-relative url; treat `//example.com` like `http://example.com`
  if (url.size() > 2 && url.starts_with("//")) {
    auto full_url = "http:" + std::string(url);
    append_absolute_link(sm, full_url, parsed_title, is_internal_url(sm, full_url), false);
  } else if (url[0] == '/' || url[0] == '#') {
    append(sm, "<a class=\"dtext-link\" href=\"");
    append_relative_url(sm, url);
    append(sm, "\">");
    append(sm, parsed_title);
    append(sm, "</a>");
  } else if (url == title) {
    append_unnamed_url(sm, url);
  } else {
    append_absolute_link(sm, url, parsed_title, is_internal_url(sm, url), false);
  }
}

static void append_bare_named_url(StateMachine * sm, const std::string_view url, std::string_view title) {
  auto [trimmed_url, leftovers] = trim_url(url);
  append_named_url(sm, trimmed_url, title);
  append_html_escaped(sm, leftovers);
}

static void append_post_search_link(StateMachine * sm, const std::string_view prefix, const std::string_view search, const std::string_view title, const std::string_view suffix) {
  auto normalized_title = std::string(title);

  append(sm, "<a class=\"dtext-link dtext-post-search-link\" href=\"");
  append_relative_url(sm, "/post?tags=");
  append_uri_escaped(sm, search);
  append(sm, "\">");

  // 19{{60s}} -> {{60s|1960s}}
  if (!prefix.empty()) {
    normalized_title.insert(0, prefix);
  }

  // {{pokemon_(creature)|}} -> {{pokemon_(creature)|pokemon}}
  if (title.empty()) {
    std::regex_replace(std::back_inserter(normalized_title), search.begin(), search.end(), tag_qualifier_regex, "");
  }

  // {{cat}}s -> {{cat|cats}}
  if (!suffix.empty()) {
    normalized_title.append(suffix);
  }

  append_html_escaped(sm, normalized_title);
  append(sm, "</a>");

  clear_matches(sm);
}

static void append_wiki_link(StateMachine * sm, const std::string_view prefix, const std::string_view tag, const std::string_view anchor, const std::string_view title, const std::string_view suffix) {
  auto normalized_tag = std::string(tag);
  auto title_string = std::string(title);

  // "Kantai Collection" -> "kantai_collection"
  std::transform(normalized_tag.cbegin(), normalized_tag.cend(), normalized_tag.begin(), [](unsigned char c) { return c == ' ' ? '_' : std::tolower(c); });

  // [[2019]] -> [[~2019]]
  if (std::all_of(normalized_tag.cbegin(), normalized_tag.cend(), ::isdigit)) {
    normalized_tag.insert(0, "~");
  }

  // Pipe trick: [[Kaga (Kantai Collection)|]] -> [[kaga_(kantai_collection)|Kaga]]
  if (title_string.empty()) {
    std::regex_replace(std::back_inserter(title_string), tag.cbegin(), tag.cend(), tag_qualifier_regex, "");
  }

  // 19[[60s]] -> [[60s|1960s]]
  if (!prefix.empty()) {
    title_string.insert(0, prefix);
  }

  // [[cat]]s -> [[cat|cats]]
  if (!suffix.empty()) {
    title_string.append(suffix);
  }

  append(sm, "<a class=\"dtext-link dtext-wiki-link\" href=\"");
  append_relative_url(sm, "/wiki/");
  append_uri_escaped(sm, normalized_tag);

  if (!anchor.empty()) {
    std::string normalized_anchor(anchor);
    std::transform(normalized_anchor.begin(), normalized_anchor.end(), normalized_anchor.begin(), [](char c) { return isalnum(c) ? tolower(c) : '-'; });
    append_html_escaped(sm, "#dtext-");
    append_html_escaped(sm, normalized_anchor);
  }

  append(sm, "\">");
  append_html_escaped(sm, title_string);
  append(sm, "</a>");

  sm->wiki_pages.insert(std::string(tag));

  clear_matches(sm);
}

static void append_paged_link(StateMachine * sm, const char * title, const char * tag, const char * href, const char * param) {
  append(sm, tag);
  append_relative_url(sm, href);
  append(sm, sm->a1, sm->a2);
  append(sm, param);
  append(sm, sm->b1, sm->b2);
  append(sm, "\">");
  append(sm, title);
  append(sm, sm->a1, sm->a2);
  append(sm, "/p");
  append(sm, sm->b1, sm->b2);
  append(sm, "</a>");
}

static void append_dmail_key_link(StateMachine * sm) {
  append(sm, "<a class=\"dtext-link dtext-id-link dtext-dmail-id-link\" href=\"");
  append_relative_url(sm, "/dmails/");
  append(sm, sm->a1, sm->a2);
  append(sm, "?key=");
  append_uri_escaped(sm, { sm->b1, sm->b2 });
  append(sm, "\">");
  append(sm, "dmail #");
  append(sm, sm->a1, sm->a2);
  append(sm, "</a>");
}

static void append_code_fence(StateMachine * sm, const std::string_view code, const std::string_view language) {
  if (language.empty()) {
    append_block(sm, "<pre>");
    append_html_escaped(sm, code);
    append_block(sm, "</pre>");
  } else {
    append_block(sm, "<pre class=\"language-");
    append_html_escaped(sm, language);
    append_block(sm, "\">");
    append_html_escaped(sm, code);
    append_block(sm, "</pre>");
  }
}

static void append_inline_code(StateMachine * sm, const std::string_view language = {}) {
  if (language.empty()) {
    dstack_open_element(sm, INLINE_CODE, "<code>");
  } else {
    dstack_open_element(sm, INLINE_CODE, "<code class=\"language-");
    append_html_escaped(sm, language);
    append(sm, "\">");
  }
}

static void append_block_code(StateMachine * sm, const std::string_view language = {}) {
  dstack_close_leaf_blocks(sm);

  if (language.empty()) {
    dstack_open_element(sm, BLOCK_CODE, "<pre>");
  } else {
    dstack_open_element(sm, BLOCK_CODE, "<pre class=\"language-");
    append_html_escaped(sm, language);
    append(sm, "\">");
  }
}

static void append_header(StateMachine * sm, char header, const std::string_view id) {
  static element_t blocks[] = { BLOCK_H1, BLOCK_H2, BLOCK_H3, BLOCK_H4, BLOCK_H5, BLOCK_H6 };
  element_t block = blocks[header - '1'];

  if (id.empty()) {
    dstack_open_element(sm, block, "<h");
    append_block(sm, header);
    append_block(sm, ">");
  } else {
    auto normalized_id = std::string(id);
    std::transform(id.begin(), id.end(), normalized_id.begin(), [](char c) { return isalnum(c) ? tolower(c) : '-'; });

    dstack_open_element(sm, block, "<h");
    append_block(sm, header);
    append_block(sm, " id=\"dtext-");
    append_block(sm, normalized_id);
    append_block(sm, "\">");
  }

  sm->header_mode = true;
}

static void append_block(StateMachine * sm, const auto s) {
  if (!sm->options.f_inline) {
    append(sm, s);
  }
}

static void append_block_html_escaped(StateMachine * sm, const std::string_view string) {
  if (!sm->options.f_inline) {
    append_html_escaped(sm, string);
  }
}

static void append_closing_p(StateMachine * sm) {
  g_debug("append closing p");

  if (sm->output.size() > 4 && sm->output.ends_with("<br>")) {
    g_debug("trim last <br>");
    sm->output.resize(sm->output.size() - 4);
  }

  if (sm->output.size() > 3 && sm->output.ends_with("<p>")) {
    g_debug("trim last <p>");
    sm->output.resize(sm->output.size() - 3);
    return;
  }

  append_block(sm, "</p>");
}

static void dstack_open_element(StateMachine * sm, element_t type, const char * html) {
  g_debug("opening %s", html);

  dstack_push(sm, type);

  if (type >= INLINE) {
    append(sm, html);
  } else {
    append_block(sm, html);
  }
}

static void dstack_open_element(StateMachine * sm, element_t type, std::string_view tag_name, const StateMachine::TagAttributes& tag_attributes) {
  dstack_push(sm, type);
  append_block(sm, "<");
  append_block(sm, tag_name);

  auto& permitted_names = permitted_attribute_names.at(tag_name);
  for (auto& [name, value] : tag_attributes) {
    if (permitted_names.find(name) != permitted_names.end()) {
      auto validate_value = permitted_attribute_values.at(name);

      if (validate_value(value)) {
        append_block(sm, " ");
        append_block_html_escaped(sm, name);
        append_block(sm, "=\"");
        append_block_html_escaped(sm, value);
        append_block(sm, "\"");
      }
    }
  }

  append_block(sm, ">");
  clear_tag_attributes(sm);
}

static bool dstack_close_element(StateMachine * sm, element_t type) {
  if (dstack_check(sm, type)) {
    dstack_rewind(sm);
    return true;
  } else if (type >= INLINE && dstack_peek(sm) >= INLINE) {
    g_debug("out-of-order close %s; closing %s instead", element_names[type], element_names[dstack_peek(sm)]);
    dstack_rewind(sm);
    return true;
  } else if (type >= INLINE) {
    g_debug("out-of-order closing %s", element_names[type]);
    append_html_escaped(sm, { sm->ts, sm->te });
    return false;
  } else {
    g_debug("out-of-order closing %s", element_names[type]);
    append_block_html_escaped(sm, { sm->ts, sm->te });
    return false;
  }
}

// Close the last open tag.
static void dstack_rewind(StateMachine * sm) {
  element_t element = dstack_pop(sm);
  g_debug("dstack rewind %s", element_names[element]);

  switch(element) {
    case BLOCK_P: append_closing_p(sm); break;
    case INLINE_SPOILER: append(sm, "</span>"); break;
    case BLOCK_SPOILER: append_block(sm, "</div>"); break;
    case BLOCK_QUOTE: append_block(sm, "</blockquote>"); break;
    case BLOCK_EXPAND: append_block(sm, "</div></details>"); break;
    case BLOCK_NODTEXT: append_block(sm, "</p>"); break;
    case BLOCK_CODE: append_block(sm, "</pre>"); break;
    case BLOCK_TD: append_block(sm, "</td>"); break;
    case BLOCK_TH: append_block(sm, "</th>"); break;

    case INLINE_NODTEXT: break;
    case INLINE_B: append(sm, "</strong>"); break;
    case INLINE_I: append(sm, "</em>"); break;
    case INLINE_U: append(sm, "</u>"); break;
    case INLINE_S: append(sm, "</s>"); break;
    case INLINE_TN: append(sm, "</span>"); break;
    case INLINE_CENTER: append(sm, "</div>"); break;
    case INLINE_COLOR: append(sm, "</span>"); break;
    case INLINE_CODE: append(sm, "</code>"); break;

    case BLOCK_TN: append_closing_p(sm); break;
    case BLOCK_CENTER: append_closing_p(sm); break;
    case BLOCK_COLOR: append_closing_p(sm); break;
    case BLOCK_TABLE: append_block(sm, "</table>"); break;
    case BLOCK_COLGROUP: append_block(sm, "</colgroup>"); break;
    case BLOCK_THEAD: append_block(sm, "</thead>"); break;
    case BLOCK_TBODY: append_block(sm, "</tbody>"); break;
    case BLOCK_TR: append_block(sm, "</tr>"); break;
    case BLOCK_UL: append_block(sm, "</ul>"); break;
    case BLOCK_LI: append_block(sm, "</li>"); break;
    case BLOCK_H6: append_block(sm, "</h6>"); sm->header_mode = false; break;
    case BLOCK_H5: append_block(sm, "</h5>"); sm->header_mode = false; break;
    case BLOCK_H4: append_block(sm, "</h4>"); sm->header_mode = false; break;
    case BLOCK_H3: append_block(sm, "</h3>"); sm->header_mode = false; break;
    case BLOCK_H2: append_block(sm, "</h2>"); sm->header_mode = false; break;
    case BLOCK_H1: append_block(sm, "</h1>"); sm->header_mode = false; break;

    // Should never happen.
    case INLINE: break;
    case DSTACK_EMPTY: break;
  } 
}

// container blocks: [spoiler], [quote], [expand], [tn], [center], [color]
// leaf blocks: [nodtext], [code], [table], [td]?, [th]?, <h1>, <p>, <li>, <ul>
static void dstack_close_leaf_blocks(StateMachine * sm) {
  g_debug("dstack close leaf blocks");

  while (!sm->dstack.empty() && !dstack_check(sm, BLOCK_QUOTE) && !dstack_check(sm, BLOCK_SPOILER) && !dstack_check(sm, BLOCK_EXPAND) && !dstack_check(sm, BLOCK_TN) && !dstack_check(sm, BLOCK_CENTER) && !dstack_check(sm, BLOCK_COLOR)) {
    dstack_rewind(sm);
  }
}

// Close all open tags up to and including the given tag.
static void dstack_close_until(StateMachine * sm, element_t element) {
  while (!sm->dstack.empty() && !dstack_check(sm, element)) {
    dstack_rewind(sm);
  }

  dstack_rewind(sm);
}

// Close all remaining open tags.
static void dstack_close_all(StateMachine * sm) {
  while (!sm->dstack.empty()) {
    dstack_rewind(sm);
  }
}

static void dstack_open_list(StateMachine * sm, int depth) {
  g_debug("open list");

  if (dstack_is_open(sm, BLOCK_LI)) {
    dstack_close_until(sm, BLOCK_LI);
  } else {
    dstack_close_leaf_blocks(sm);
  }

  while (dstack_count(sm, BLOCK_UL) < depth) {
    dstack_open_element(sm, BLOCK_UL, "<ul>");
  }

  while (dstack_count(sm, BLOCK_UL) > depth) {
    dstack_close_until(sm, BLOCK_UL);
  }

  dstack_open_element(sm, BLOCK_LI, "<li>");
}

static void dstack_close_list(StateMachine * sm) {
  while (dstack_is_open(sm, BLOCK_UL)) {
    dstack_close_until(sm, BLOCK_UL);
  }
}

static void save_tag_attribute(StateMachine * sm, const std::string_view name, const std::string_view value) {
  sm->tag_attributes[name] = value;
}

static void clear_tag_attributes(StateMachine * sm) {
  sm->tag_attributes.clear();
}

static void clear_matches(StateMachine * sm) {
  sm->a1 = NULL;
  sm->a2 = NULL;
  sm->b1 = NULL;
  sm->b2 = NULL;
  sm->c1 = NULL;
  sm->c2 = NULL;
  sm->d1 = NULL;
  sm->d2 = NULL;
  sm->e1 = NULL;
  sm->e2 = NULL;
  sm->f1 = NULL;
  sm->f2 = NULL;
  sm->g1 = NULL;
  sm->g2 = NULL;
}

// True if a mention is allowed to start after this character.
static bool is_mention_boundary(unsigned char c) {
  switch (c) {
    case '\0': return true;
    case '\r': return true;
    case '\n': return true;
    case ' ':  return true;
    case '/':  return true;
    case '"':  return true;
    case '\'': return true;
    case '(':  return true;
    case ')':  return true;
    case '[':  return true;
    case ']':  return true;
    case '{':  return true;
    case '}':  return true;
    default:   return false;
  }
}

// Trim trailing unbalanced ')' characters from the URL.
static std::tuple<std::string_view, std::string_view> trim_url(const std::string_view url) {
  std::string_view trimmed = url;

  while (!trimmed.empty() && trimmed.back() == ')' && std::count(trimmed.begin(), trimmed.end(), ')') > std::count(trimmed.begin(), trimmed.end(), '(')) {
    trimmed.remove_suffix(1);
  }

  return { trimmed, { trimmed.end(), url.end() } };
}

// Replace CRLF sequences with LF.
static void replace_newlines(const std::string_view input, std::string& output) {
  size_t pos, last = 0;

  while (std::string::npos != (pos = input.find("\r\n", last))) {
    output.append(input, last, pos - last);
    output.append("\n");
    last = pos + 2;
  }

  output.append(input, last, pos - last);
}

StateMachine::StateMachine(const auto string, int initial_state, const DTextOptions options) : options(options) {
  // Add null bytes to the beginning and end of the string as start and end of string markers.
  input.reserve(string.size());
  input.append(1, '\0');
  replace_newlines(string, input);
  input.append(1, '\0');

  output.reserve(string.size() * 1.5);
  stack.reserve(16);
  dstack.reserve(16);

  p = input.c_str();
  pb = input.c_str();
  pe = input.c_str() + input.size();
  eof = pe;
  cs = initial_state;
}

std::string StateMachine::parse_inline(const std::string_view dtext) {
  StateMachine sm(dtext, dtext_en_inline, options);
  return sm.parse();
}

std::string StateMachine::parse_basic_inline(const std::string_view dtext) {
  StateMachine sm(dtext, dtext_en_basic_inline, options);
  return sm.parse();
}

StateMachine::ParseResult StateMachine::parse_dtext(const std::string_view dtext, DTextOptions options) {
  StateMachine sm(dtext, dtext_en_main, options);
  return { sm.parse(), sm.wiki_pages };
}

std::string StateMachine::parse() {
  StateMachine* sm = this;
  g_debug("parse '%.*s'", (int)(sm->input.size() - 2), sm->input.c_str() + 1);

  
#line 6531 "ext/dtext/dtext.cpp"
	{
	( sm->top) = 0;
	( sm->ts) = 0;
	( sm->te) = 0;
	( sm->act) = 0;
	}

#line 1496 "ext/dtext/dtext.cpp.rl"
  
#line 6537 "ext/dtext/dtext.cpp"
	{
	int _klen;
	unsigned int _trans;
	short _widec;
	const unsigned char *_acts;
	unsigned int _nacts;
	const short *_keys;

	if ( ( sm->p) == ( sm->pe) )
		goto _test_eof;
	if (  sm->cs == 0 )
		goto _out;
_resume:
	_acts = _dtext_actions + _dtext_from_state_actions[ sm->cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 16:
#line 1 "NONE"
	{( sm->ts) = ( sm->p);}
	break;
#line 6557 "ext/dtext/dtext.cpp"
		}
	}

	_widec = (*( sm->p));
	_klen = _dtext_cond_lengths[ sm->cs];
	_keys = _dtext_cond_keys + (_dtext_cond_offsets[ sm->cs]*2);
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				switch ( _dtext_cond_spaces[_dtext_cond_offsets[ sm->cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = (short)(128 + ((*( sm->p)) - -128));
		if ( 
#line 86 "ext/dtext/dtext.cpp.rl"
 is_mention_boundary(p[-1])  ) _widec += 256;
		break;
	}
	case 1: {
		_widec = (short)(640 + ((*( sm->p)) - -128));
		if ( 
#line 87 "ext/dtext/dtext.cpp.rl"
 sm->options.f_mentions  ) _widec += 256;
		break;
	}
	case 2: {
		_widec = (short)(2688 + ((*( sm->p)) - -128));
		if ( 
#line 88 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_QUOTE)  ) _widec += 256;
		break;
	}
	case 3: {
		_widec = (short)(3200 + ((*( sm->p)) - -128));
		if ( 
#line 89 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_EXPAND)  ) _widec += 256;
		break;
	}
	case 4: {
		_widec = (short)(2176 + ((*( sm->p)) - -128));
		if ( 
#line 90 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_COLOR)  ) _widec += 256;
		break;
	}
	case 5: {
		_widec = (short)(1152 + ((*( sm->p)) - -128));
		if ( 
#line 86 "ext/dtext/dtext.cpp.rl"
 is_mention_boundary(p[-1])  ) _widec += 256;
		if ( 
#line 87 "ext/dtext/dtext.cpp.rl"
 sm->options.f_mentions  ) _widec += 512;
		break;
	}
				}
				break;
			}
		}
	}

	_keys = _dtext_trans_keys + _dtext_key_offsets[ sm->cs];
	_trans = _dtext_index_offsets[ sm->cs];

	_klen = _dtext_single_lengths[ sm->cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < *_mid )
				_upper = _mid - 1;
			else if ( _widec > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _dtext_range_lengths[ sm->cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _dtext_indicies[_trans];
_eof_trans:
	 sm->cs = _dtext_trans_targs[_trans];

	if ( _dtext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _dtext_actions + _dtext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 71 "ext/dtext/dtext.cpp.rl"
	{ sm->a1 = sm->p; }
	break;
	case 1:
#line 72 "ext/dtext/dtext.cpp.rl"
	{ sm->a2 = sm->p; }
	break;
	case 2:
#line 73 "ext/dtext/dtext.cpp.rl"
	{ sm->b1 = sm->p; }
	break;
	case 3:
#line 74 "ext/dtext/dtext.cpp.rl"
	{ sm->b2 = sm->p; }
	break;
	case 4:
#line 75 "ext/dtext/dtext.cpp.rl"
	{ sm->c1 = sm->p; }
	break;
	case 5:
#line 76 "ext/dtext/dtext.cpp.rl"
	{ sm->c2 = sm->p; }
	break;
	case 6:
#line 77 "ext/dtext/dtext.cpp.rl"
	{ sm->d1 = sm->p; }
	break;
	case 7:
#line 78 "ext/dtext/dtext.cpp.rl"
	{ sm->d2 = sm->p; }
	break;
	case 8:
#line 79 "ext/dtext/dtext.cpp.rl"
	{ sm->e1 = sm->p; }
	break;
	case 9:
#line 80 "ext/dtext/dtext.cpp.rl"
	{ sm->e2 = sm->p; }
	break;
	case 10:
#line 81 "ext/dtext/dtext.cpp.rl"
	{ sm->f1 = sm->p; }
	break;
	case 11:
#line 82 "ext/dtext/dtext.cpp.rl"
	{ sm->f2 = sm->p; }
	break;
	case 12:
#line 83 "ext/dtext/dtext.cpp.rl"
	{ sm->g1 = sm->p; }
	break;
	case 13:
#line 84 "ext/dtext/dtext.cpp.rl"
	{ sm->g2 = sm->p; }
	break;
	case 14:
#line 91 "ext/dtext/dtext.cpp.rl"
	{ save_tag_attribute(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }); }
	break;
	case 17:
#line 1 "NONE"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 18:
#line 294 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_B, "<strong>"); }}
	break;
	case 19:
#line 295 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_B); }}
	break;
	case 20:
#line 296 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_I, "<em>"); }}
	break;
	case 21:
#line 297 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_I); }}
	break;
	case 22:
#line 298 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_S, "<s>"); }}
	break;
	case 23:
#line 299 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_S); }}
	break;
	case 24:
#line 300 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_U, "<u>"); }}
	break;
	case 25:
#line 301 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_U); }}
	break;
	case 26:
#line 302 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 27:
#line 303 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 28:
#line 303 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 29:
#line 303 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 30:
#line 307 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 11;}
	break;
	case 31:
#line 308 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 12;}
	break;
	case 32:
#line 309 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 13;}
	break;
	case 33:
#line 310 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 14;}
	break;
	case 34:
#line 311 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 15;}
	break;
	case 35:
#line 312 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 16;}
	break;
	case 36:
#line 313 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 17;}
	break;
	case 37:
#line 314 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 18;}
	break;
	case 38:
#line 315 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 19;}
	break;
	case 39:
#line 316 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 20;}
	break;
	case 40:
#line 317 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 21;}
	break;
	case 41:
#line 318 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 22;}
	break;
	case 42:
#line 319 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 23;}
	break;
	case 43:
#line 320 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 24;}
	break;
	case 44:
#line 321 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 25;}
	break;
	case 45:
#line 322 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 26;}
	break;
	case 46:
#line 323 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 27;}
	break;
	case 47:
#line 346 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 35;}
	break;
	case 48:
#line 350 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 36;}
	break;
	case 49:
#line 354 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 37;}
	break;
	case 50:
#line 358 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 38;}
	break;
	case 51:
#line 362 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 39;}
	break;
	case 52:
#line 370 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 41;}
	break;
	case 53:
#line 408 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 54;}
	break;
	case 54:
#line 413 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 55;}
	break;
	case 55:
#line 423 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 56;}
	break;
	case 56:
#line 428 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 57;}
	break;
	case 57:
#line 435 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 58;}
	break;
	case 58:
#line 458 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 61;}
	break;
	case 59:
#line 523 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 71;}
	break;
	case 60:
#line 561 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 77;}
	break;
	case 61:
#line 579 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 78;}
	break;
	case 62:
#line 597 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 80;}
	break;
	case 63:
#line 599 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 81;}
	break;
	case 64:
#line 603 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 82;}
	break;
	case 65:
#line 350 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_named_url(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }}
	break;
	case 66:
#line 354 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_named_url(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 });
  }}
	break;
	case 67:
#line 358 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_named_url(sm, { sm->g1, sm->g2 }, { sm->f1, sm->f2 });
  }}
	break;
	case 68:
#line 366 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_unnamed_url(sm, { sm->a1, sm->a2 });
  }}
	break;
	case 69:
#line 374 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("delimited mention: <@%.*s>", (int)(sm->a2 - sm->a1), sm->a1);
    append_mention(sm, { sm->a1, sm->a2 });
  }}
	break;
	case 70:
#line 385 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_B, "<strong>"); }}
	break;
	case 71:
#line 386 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_B); }}
	break;
	case 72:
#line 387 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_I, "<em>"); }}
	break;
	case 73:
#line 388 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_I); }}
	break;
	case 74:
#line 389 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_S, "<s>"); }}
	break;
	case 75:
#line 390 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_S); }}
	break;
	case 76:
#line 391 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_U, "<u>"); }}
	break;
	case 77:
#line 392 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_U); }}
	break;
	case 78:
#line 394 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_TN, "<span class=\"tn\">");
  }}
	break;
	case 79:
#line 398 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/tn]");

    if (dstack_check(sm, INLINE_TN)) {
      dstack_close_element(sm, INLINE_TN);
    } else if (dstack_close_element(sm, BLOCK_TN)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 80:
#line 408 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [center]");
    dstack_open_element(sm, INLINE_CENTER, "<div class=\"center\">");
  }}
	break;
	case 81:
#line 413 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/center]");

    if (dstack_check(sm, INLINE_CENTER)) {
      dstack_close_element(sm, INLINE_CENTER);
    } else if (dstack_close_element(sm, BLOCK_CENTER)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 82:
#line 423 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [color]");
    dstack_open_element(sm, INLINE_COLOR, "<span style=\"color:#FF761C;\">");
  }}
	break;
	case 83:
#line 428 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [color=]");
    dstack_open_element(sm, INLINE_COLOR, "<span style=\"color:");
    append_html_escaped(sm, { sm->a1, sm->a2 });
    append(sm, "\">");
  }}
	break;
	case 84:
#line 435 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/color]");

    if (dstack_check(sm, INLINE_COLOR)) {
      dstack_close_element(sm, INLINE_COLOR);
    } else if (dstack_close_element(sm, BLOCK_COLOR)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 85:
#line 445 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (sm->header_mode) {
      append_html_escaped(sm, "<br>");
    } else {
      append(sm, "<br>");
    };
  }}
	break;
	case 86:
#line 453 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1928;goto _again;}}
  }}
	break;
	case 87:
#line 458 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1928;goto _again;}}
  }}
	break;
	case 88:
#line 463 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 89:
#line 469 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 90:
#line 475 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_SPOILER, "<span class=\"spoiler\">");
  }}
	break;
	case 91:
#line 479 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_is_open(sm, INLINE_SPOILER)) {
      dstack_close_element(sm, INLINE_SPOILER);
    } else if (dstack_is_open(sm, BLOCK_SPOILER)) {
      dstack_close_until(sm, BLOCK_SPOILER);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append_html_escaped(sm, { sm->ts, sm->te });
    }
  }}
	break;
	case 92:
#line 490 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1932;goto _again;}}
  }}
	break;
	case 93:
#line 498 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 94:
#line 510 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [quote]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 95:
#line 523 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [expand]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 96:
#line 536 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 97:
#line 542 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TH)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 98:
#line 548 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TD)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 99:
#line 593 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append(sm, ' ');
  }}
	break;
	case 100:
#line 603 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 101:
#line 307 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "post", "post", "/posts/", { sm->a1, sm->a2 }); }}
	break;
	case 102:
#line 308 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "forum", "forum-post", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 103:
#line 309 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "topic", "forum-topic", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 104:
#line 310 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "comment", "comment", "/comments/", { sm->a1, sm->a2 }); }}
	break;
	case 105:
#line 311 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "dmail", "dmail", "/dmails/", { sm->a1, sm->a2 }); }}
	break;
	case 106:
#line 312 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "pool", "pool", "/pools/", { sm->a1, sm->a2 }); }}
	break;
	case 107:
#line 313 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "user", "user", "/users/", { sm->a1, sm->a2 }); }}
	break;
	case 108:
#line 314 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "artist", "artist", "/artists/", { sm->a1, sm->a2 }); }}
	break;
	case 109:
#line 315 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "user report", "user-report", "/user_flags/", { sm->a1, sm->a2 }); }}
	break;
	case 110:
#line 316 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag alias", "tag-alias", "/tag_aliases?id=", { sm->a1, sm->a2 }); }}
	break;
	case 111:
#line 317 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag implication", "tag-implication", "/tag_implications?id=", { sm->a1, sm->a2 }); }}
	break;
	case 112:
#line 318 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag translation", "tag-translation", "/tag_translations?id=", { sm->a1, sm->a2 }); }}
	break;
	case 113:
#line 319 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "book", "book", "/pools/", { sm->a1, sm->a2 }); }}
	break;
	case 114:
#line 320 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "series", "series", "/series/", { sm->a1, sm->a2 }); }}
	break;
	case 115:
#line 321 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "mod action", "mod-action", "/mod_actions?id=", { sm->a1, sm->a2 }); }}
	break;
	case 116:
#line 322 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "record", "user-record", "/user_records?id=", { sm->a1, sm->a2 }); }}
	break;
	case 117:
#line 323 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "wiki", "wiki-page", "/wiki/", { sm->a1, sm->a2 }); }}
	break;
	case 118:
#line 325 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_dmail_key_link(sm); }}
	break;
	case 119:
#line 327 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_paged_link(sm, "topic #", "<a class=\"dtext-link dtext-id-link dtext-forum-topic-id-link\" href=\"", "/forums/", "?page="); }}
	break;
	case 120:
#line 328 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_paged_link(sm, "pixiv #", "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-id-link dtext-pixiv-id-link\" href=\"", "https://www.pixiv.net/artworks/", "#"); }}
	break;
	case 121:
#line 330 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_post_search_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->b1, sm->b2 }, { sm->d1, sm->d2 });
  }}
	break;
	case 122:
#line 334 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_post_search_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->d1, sm->d2 });
  }}
	break;
	case 123:
#line 338 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_wiki_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->b1, sm->b2 }, { sm->e1, sm->e2 });
  }}
	break;
	case 124:
#line 342 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_wiki_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->d1, sm->d2 }, { sm->e1, sm->e2 });
  }}
	break;
	case 125:
#line 346 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }}
	break;
	case 126:
#line 358 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_named_url(sm, { sm->g1, sm->g2 }, { sm->f1, sm->f2 });
  }}
	break;
	case 127:
#line 362 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }}
	break;
	case 128:
#line 370 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_mention(sm, { sm->a1, sm->a2 + 1 });
  }}
	break;
	case 129:
#line 379 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline list");
    {( sm->p) = (( sm->ts + 1))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 130:
#line 413 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/center]");

    if (dstack_check(sm, INLINE_CENTER)) {
      dstack_close_element(sm, INLINE_CENTER);
    } else if (dstack_close_element(sm, BLOCK_CENTER)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 131:
#line 453 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1928;goto _again;}}
  }}
	break;
	case 132:
#line 458 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1928;goto _again;}}
  }}
	break;
	case 133:
#line 490 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1932;goto _again;}}
  }}
	break;
	case 134:
#line 504 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 135:
#line 517 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/quote]");
    dstack_close_until(sm, BLOCK_QUOTE);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 136:
#line 530 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/expand]");
    dstack_close_until(sm, BLOCK_EXPAND);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 137:
#line 554 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [hr] (pos: %ld)", sm->ts - sm->pb);
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 138:
#line 561 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 139:
#line 579 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }}
	break;
	case 140:
#line 599 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append(sm, std::string_view { sm->ts, sm->te });
  }}
	break;
	case 141:
#line 603 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 142:
#line 309 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_id_link(sm, "topic", "forum-topic", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 143:
#line 311 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_id_link(sm, "dmail", "dmail", "/dmails/", { sm->a1, sm->a2 }); }}
	break;
	case 144:
#line 346 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }}
	break;
	case 145:
#line 362 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }}
	break;
	case 146:
#line 453 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1928;goto _again;}}
  }}
	break;
	case 147:
#line 458 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1928;goto _again;}}
  }}
	break;
	case 148:
#line 490 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1932;goto _again;}}
  }}
	break;
	case 149:
#line 561 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 150:
#line 579 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }}
	break;
	case 151:
#line 599 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append(sm, std::string_view { sm->ts, sm->te });
  }}
	break;
	case 152:
#line 603 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 153:
#line 1 "NONE"
	{	switch( ( sm->act) ) {
	case 11:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "post", "post", "/posts/", { sm->a1, sm->a2 }); }
	break;
	case 12:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "forum", "forum-post", "/forums/", { sm->a1, sm->a2 }); }
	break;
	case 13:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "topic", "forum-topic", "/forums/", { sm->a1, sm->a2 }); }
	break;
	case 14:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "comment", "comment", "/comments/", { sm->a1, sm->a2 }); }
	break;
	case 15:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "dmail", "dmail", "/dmails/", { sm->a1, sm->a2 }); }
	break;
	case 16:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "pool", "pool", "/pools/", { sm->a1, sm->a2 }); }
	break;
	case 17:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "user", "user", "/users/", { sm->a1, sm->a2 }); }
	break;
	case 18:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "artist", "artist", "/artists/", { sm->a1, sm->a2 }); }
	break;
	case 19:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "user report", "user-report", "/user_flags/", { sm->a1, sm->a2 }); }
	break;
	case 20:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "tag alias", "tag-alias", "/tag_aliases?id=", { sm->a1, sm->a2 }); }
	break;
	case 21:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "tag implication", "tag-implication", "/tag_implications?id=", { sm->a1, sm->a2 }); }
	break;
	case 22:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "tag translation", "tag-translation", "/tag_translations?id=", { sm->a1, sm->a2 }); }
	break;
	case 23:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "book", "book", "/pools/", { sm->a1, sm->a2 }); }
	break;
	case 24:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "series", "series", "/series/", { sm->a1, sm->a2 }); }
	break;
	case 25:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "mod action", "mod-action", "/mod_actions?id=", { sm->a1, sm->a2 }); }
	break;
	case 26:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "record", "user-record", "/user_records?id=", { sm->a1, sm->a2 }); }
	break;
	case 27:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "wiki", "wiki-page", "/wiki/", { sm->a1, sm->a2 }); }
	break;
	case 35:
	{{( sm->p) = ((( sm->te)))-1;}
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }
	break;
	case 36:
	{{( sm->p) = ((( sm->te)))-1;}
    append_named_url(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }
	break;
	case 37:
	{{( sm->p) = ((( sm->te)))-1;}
    append_named_url(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 });
  }
	break;
	case 38:
	{{( sm->p) = ((( sm->te)))-1;}
    append_named_url(sm, { sm->g1, sm->g2 }, { sm->f1, sm->f2 });
  }
	break;
	case 39:
	{{( sm->p) = ((( sm->te)))-1;}
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }
	break;
	case 41:
	{{( sm->p) = ((( sm->te)))-1;}
    append_mention(sm, { sm->a1, sm->a2 + 1 });
  }
	break;
	case 54:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [center]");
    dstack_open_element(sm, INLINE_CENTER, "<div class=\"center\">");
  }
	break;
	case 55:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [/center]");

    if (dstack_check(sm, INLINE_CENTER)) {
      dstack_close_element(sm, INLINE_CENTER);
    } else if (dstack_close_element(sm, BLOCK_CENTER)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }
	break;
	case 56:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [color]");
    dstack_open_element(sm, INLINE_COLOR, "<span style=\"color:#FF761C;\">");
  }
	break;
	case 57:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [color=]");
    dstack_open_element(sm, INLINE_COLOR, "<span style=\"color:");
    append_html_escaped(sm, { sm->a1, sm->a2 });
    append(sm, "\">");
  }
	break;
	case 58:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [/color]");

    if (dstack_check(sm, INLINE_COLOR)) {
      dstack_close_element(sm, INLINE_COLOR);
    } else if (dstack_close_element(sm, BLOCK_COLOR)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }
	break;
	case 61:
	{{( sm->p) = ((( sm->te)))-1;}
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1928;goto _again;}}
  }
	break;
	case 71:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline [expand]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }
	break;
	case 77:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }
	break;
	case 78:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }
	break;
	case 81:
	{{( sm->p) = ((( sm->te)))-1;}
    append(sm, std::string_view { sm->ts, sm->te });
  }
	break;
	case 82:
	{{( sm->p) = ((( sm->te)))-1;}
    append_html_escaped(sm, (*( sm->p)));
  }
	break;
	default:
	{{( sm->p) = ((( sm->te)))-1;}}
	break;
	}
	}
	break;
	case 154:
#line 609 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_rewind(sm);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 155:
#line 614 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 156:
#line 616 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 157:
#line 616 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 158:
#line 616 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 159:
#line 622 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_rewind(sm);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 160:
#line 627 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 161:
#line 629 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 162:
#line 629 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 163:
#line 629 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 164:
#line 635 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_COLGROUP, "colgroup", sm->tag_attributes);
  }}
	break;
	case 165:
#line 639 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_COLGROUP);
  }}
	break;
	case 166:
#line 643 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_COL, "col", sm->tag_attributes);
    dstack_pop(sm); // XXX [col] has no end tag
  }}
	break;
	case 167:
#line 648 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_THEAD, "thead", sm->tag_attributes);
  }}
	break;
	case 168:
#line 652 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_THEAD);
  }}
	break;
	case 169:
#line 656 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TBODY, "tbody", sm->tag_attributes);
  }}
	break;
	case 170:
#line 660 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_TBODY);
  }}
	break;
	case 171:
#line 664 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TH, "th", sm->tag_attributes);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1587;goto _again;}}
  }}
	break;
	case 172:
#line 669 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TR, "tr", sm->tag_attributes);
  }}
	break;
	case 173:
#line 673 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_TR);
  }}
	break;
	case 174:
#line 677 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TD, "td", sm->tag_attributes);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1587;goto _again;}}
  }}
	break;
	case 175:
#line 682 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TABLE)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 176:
#line 688 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 177:
#line 688 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;}
	break;
	case 178:
#line 688 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}}
	break;
	case 179:
#line 707 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1928;goto _again;}}
  }}
	break;
	case 180:
#line 712 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1928;goto _again;}}
  }}
	break;
	case 181:
#line 717 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_code_fence(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }}
	break;
	case 182:
#line 736 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block [color]");
    dstack_open_element(sm, BLOCK_COLOR, "<p style=\"color:#FF761C;\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1587;goto _again;}}
  }}
	break;
	case 183:
#line 742 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block [color=]");
    dstack_open_element(sm, BLOCK_COLOR, "<p style=\"color:");
    append_block_html_escaped(sm, { sm->a1, sm->a2 });
    append_block(sm, "\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1587;goto _again;}}
  }}
	break;
	case 184:
#line 750 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1932;goto _again;}}
  }}
	break;
	case 185:
#line 756 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_TABLE, "<table class=\"highlightable\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1936;goto _again;}}
  }}
	break;
	case 186:
#line 762 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TN, "<p class=\"tn\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1587;goto _again;}}
  }}
	break;
	case 187:
#line 767 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block [center]");
    dstack_open_element(sm, BLOCK_CENTER, "<p class=\"center\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1587;goto _again;}}
  }}
	break;
	case 188:
#line 789 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1587;goto _again;}}
  }}
	break;
	case 189:
#line 692 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_header(sm, *sm->a1, { sm->b1, sm->b2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1587;goto _again;}}
  }}
	break;
	case 190:
#line 697 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_QUOTE, "<blockquote>");
  }}
	break;
	case 191:
#line 702 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_SPOILER, "<div class=\"spoiler\">");
  }}
	break;
	case 192:
#line 707 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1928;goto _again;}}
  }}
	break;
	case 193:
#line 712 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1928;goto _again;}}
  }}
	break;
	case 194:
#line 721 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_EXPAND, "<details>");
    append_block(sm, "<summary>Show</summary><div>");
  }}
	break;
	case 195:
#line 727 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block [expand=]");
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_EXPAND, "<details>");
    append_block(sm, "<summary>");
    append_block_html_escaped(sm, { sm->a1, sm->a2 });
    append_block(sm, "</summary><div>");
  }}
	break;
	case 196:
#line 750 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1932;goto _again;}}
  }}
	break;
	case 197:
#line 773 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("write '<hr>' (pos: %ld)", sm->ts - sm->pb);
    append_block(sm, "<hr>");
  }}
	break;
	case 198:
#line 778 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block list");
    dstack_open_list(sm, sm->a2 - sm->a1);
    {( sm->p) = (( sm->b1))-1;}
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1587;goto _again;}}
  }}
	break;
	case 199:
#line 785 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block blank line(s)");
  }}
	break;
	case 200:
#line 789 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1587;goto _again;}}
  }}
	break;
	case 201:
#line 707 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1928;goto _again;}}
  }}
	break;
	case 202:
#line 712 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1928;goto _again;}}
  }}
	break;
	case 203:
#line 750 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1932;goto _again;}}
  }}
	break;
	case 204:
#line 785 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("block blank line(s)");
  }}
	break;
	case 205:
#line 789 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1587;goto _again;}}
  }}
	break;
#line 8256 "ext/dtext/dtext.cpp"
		}
	}

_again:
	_acts = _dtext_actions + _dtext_to_state_actions[ sm->cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 15:
#line 1 "NONE"
	{( sm->ts) = 0;}
	break;
#line 8267 "ext/dtext/dtext.cpp"
		}
	}

	if (  sm->cs == 0 )
		goto _out;
	if ( ++( sm->p) != ( sm->pe) )
		goto _resume;
	_test_eof: {}
	if ( ( sm->p) == ( sm->eof) )
	{
	if ( _dtext_eof_trans[ sm->cs] > 0 ) {
		_trans = _dtext_eof_trans[ sm->cs] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 1497 "ext/dtext/dtext.cpp.rl"

  g_debug("EOF; closing stray blocks");
  dstack_close_all(sm);
  g_debug("done");

  return sm->output;
}

/* Everything below is optional, it's only needed to build bin/cdtext.exe. */
#ifdef CDTEXT

#include <glib.h>
#include <iostream>

static void parse_file(FILE* input, FILE* output) {
  std::stringstream ss;
  ss << std::cin.rdbuf();
  std::string dtext = ss.str();

  try {
    auto result = StateMachine::parse_dtext(dtext, options);

    if (fwrite(result.c_str(), 1, result.size(), output) != result.size()) {
      perror("fwrite failed");
      exit(1);
    }
  } catch (std::exception& e) {
    fprintf(stderr, "dtext parse error: %s\n", e.what());
    exit(1);
  }
}

int main(int argc, char* argv[]) {
  GError* error = NULL;
  bool opt_verbose = FALSE;
  bool opt_inline = FALSE;
  bool opt_no_mentions = FALSE;

  GOptionEntry options[] = {
    { "no-mentions", 'm', 0, G_OPTION_ARG_NONE, &opt_no_mentions, "Don't parse @mentions", NULL },
    { "inline",      'i', 0, G_OPTION_ARG_NONE, &opt_inline,      "Parse in inline mode", NULL },
    { "verbose",     'v', 0, G_OPTION_ARG_NONE, &opt_verbose,     "Print debug output", NULL },
    { NULL }
  };

  g_autoptr(GOptionContext) context = g_option_context_new("[FILE...]");
  g_option_context_add_main_entries(context, options, NULL);

  if (!g_option_context_parse(context, &argc, &argv, &error)) {
    fprintf(stderr, "option parsing failed: %s\n", error->message);
    g_clear_error(&error);
    return 1;
  }

  if (opt_verbose) {
    g_setenv("G_MESSAGES_DEBUG", "all", TRUE);
  }

  /* skip first argument (progname) */
  argc--, argv++;

  if (argc == 0) {
    parse_file(stdin, stdout, { .f_inline = opt_inline, .f_mentions = !opt_no_mentions });
    return 0;
  }

  for (const char* filename = *argv; argc > 0; argc--, argv++) {
    FILE* input = fopen(filename, "r");
    if (!input) {
      perror("fopen failed");
      return 1;
    }

    parse_file(input, stdout, opt_inline, !opt_no_mentions);
    fclose(input);
  }

  return 0;
}

#endif