
#line 1 "ext/dtext/dtext.cpp.rl"
#include "dtext.h"
#include "url.h"

#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <regex>

#ifdef DEBUG
#undef g_debug
#define STRINGIFY(x) XSTRINGIFY(x)
#define XSTRINGIFY(x) #x
#define g_debug(fmt, ...) fprintf(stderr, "\x1B[1;32mDEBUG\x1B[0m %-28.28s %-24.24s " fmt "\n", __FILE__ ":" STRINGIFY(__LINE__), __func__, ##__VA_ARGS__)
#else
#undef g_debug
#define g_debug(...)
#endif

static const size_t MAX_STACK_DEPTH = 512;

// Strip qualifier from tag: "Artoria Pendragon (Lancer) (Fate)" -> "Artoria Pendragon (Lancer)"
static const std::regex tag_qualifier_regex("[ _]\\([^)]+?\\)$");

// Permitted HTML attribute names.
static const std::unordered_map<std::string_view, const std::unordered_set<std::string_view>> permitted_attribute_names = {
  { "thead",    { "align" } },
  { "tbody",    { "align" } },
  { "tr",       { "align" } },
  { "td",       { "align", "colspan", "rowspan" } },
  { "th",       { "align", "colspan", "rowspan" } },
  { "col",      { "align", "span" } },
  { "colgroup", {} },
};

// Permitted HTML attribute values.
static const std::unordered_set<std::string_view> align_values = { "left", "center", "right", "justify" };
static const std::unordered_map<std::string_view, std::function<bool(std::string_view)>> permitted_attribute_values = {
  { "align",   [](auto value) { return align_values.find(value) != align_values.end(); } },
  { "span",    [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
  { "colspan", [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
  { "rowspan", [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
};


#line 773 "ext/dtext/dtext.cpp.rl"



#line 47 "ext/dtext/dtext.cpp"
static const unsigned char _dtext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 10, 1, 11, 1, 
	12, 1, 13, 1, 14, 1, 15, 1, 
	16, 1, 17, 1, 18, 1, 19, 1, 
	20, 1, 21, 1, 22, 1, 23, 1, 
	24, 1, 25, 1, 34, 1, 35, 1, 
	36, 1, 38, 1, 39, 1, 40, 1, 
	41, 1, 42, 1, 43, 1, 44, 1, 
	45, 1, 46, 1, 47, 1, 48, 1, 
	49, 1, 50, 1, 51, 1, 52, 1, 
	53, 1, 54, 1, 55, 1, 56, 1, 
	57, 1, 58, 1, 59, 1, 60, 1, 
	61, 1, 62, 1, 63, 1, 64, 1, 
	65, 1, 66, 1, 91, 1, 92, 1, 
	93, 1, 95, 1, 96, 1, 97, 1, 
	98, 1, 99, 1, 100, 1, 101, 1, 
	102, 1, 103, 1, 104, 1, 105, 1, 
	106, 1, 107, 1, 108, 1, 109, 1, 
	110, 1, 111, 1, 112, 1, 113, 1, 
	114, 1, 115, 1, 116, 1, 117, 1, 
	118, 1, 119, 1, 120, 1, 121, 1, 
	122, 1, 123, 1, 124, 1, 125, 1, 
	126, 1, 127, 1, 128, 1, 129, 1, 
	130, 1, 131, 1, 132, 1, 133, 1, 
	134, 1, 135, 1, 136, 1, 137, 1, 
	138, 1, 139, 1, 140, 1, 141, 1, 
	142, 1, 143, 1, 144, 1, 145, 1, 
	146, 1, 147, 1, 148, 1, 149, 1, 
	150, 1, 151, 1, 152, 1, 153, 1, 
	154, 1, 155, 1, 156, 1, 157, 1, 
	158, 1, 159, 1, 160, 1, 161, 1, 
	162, 1, 164, 1, 165, 1, 166, 1, 
	167, 1, 168, 1, 169, 1, 170, 2, 
	0, 1, 2, 1, 36, 2, 1, 37, 
	2, 1, 58, 2, 1, 60, 2, 1, 
	61, 2, 1, 67, 2, 1, 68, 2, 
	1, 69, 2, 1, 70, 2, 1, 71, 
	2, 1, 72, 2, 1, 73, 2, 1, 
	74, 2, 1, 75, 2, 1, 76, 2, 
	1, 77, 2, 1, 78, 2, 1, 79, 
	2, 1, 80, 2, 1, 81, 2, 1, 
	82, 2, 1, 83, 2, 2, 3, 2, 
	3, 4, 2, 3, 5, 2, 3, 6, 
	2, 3, 7, 2, 3, 10, 2, 3, 
	34, 2, 3, 35, 2, 3, 84, 2, 
	3, 85, 2, 3, 86, 2, 3, 94, 
	2, 3, 163, 2, 4, 5, 2, 5, 
	7, 2, 6, 7, 2, 7, 87, 2, 
	7, 88, 2, 9, 89, 2, 9, 90, 
	2, 10, 129, 2, 10, 131, 2, 10, 
	132, 2, 10, 134, 2, 10, 136, 2, 
	10, 137, 2, 10, 139, 2, 13, 0, 
	2, 13, 1, 2, 13, 3, 2, 13, 
	27, 2, 13, 29, 2, 13, 30, 2, 
	13, 31, 2, 13, 32, 2, 13, 33, 
	3, 0, 1, 60, 3, 0, 1, 61, 
	3, 1, 2, 3, 3, 3, 4, 5, 
	3, 3, 6, 7, 3, 3, 10, 129, 
	3, 3, 10, 131, 3, 3, 10, 132, 
	3, 3, 10, 134, 3, 3, 10, 136, 
	3, 3, 10, 137, 3, 3, 10, 139, 
	3, 6, 7, 87, 3, 6, 7, 88, 
	3, 8, 9, 89, 3, 8, 9, 90, 
	3, 13, 0, 32, 3, 13, 1, 28, 
	3, 13, 2, 3, 3, 13, 3, 26, 
	4, 13, 0, 1, 33, 4, 13, 2, 
	3, 26
};

static const short _dtext_cond_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 2, 2, 2, 2, 
	2, 2, 3, 3, 3, 3, 3, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	5, 5, 5, 5, 5, 5, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 10, 
	16, 17, 37, 57, 78, 99, 122, 145, 
	167, 193, 217, 242, 263, 290, 311, 332, 
	355, 378, 400, 426, 450, 475, 502, 523, 
	547, 548, 551, 553, 555, 558, 562, 565, 
	569, 570, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 586, 601, 621, 
	641, 641, 641, 641, 641, 641, 641, 641, 
	641, 641, 641
};

static const char _dtext_cond_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 6, 
	1, 20, 20, 21, 21, 23, 23, 22, 
	26, 24, 25, 21, 27, 21, 21, 23, 
	23, 22, 26, 24, 25, 27, 21, 24, 
	1, 3, 2, 2, 3, 4, 3, 4, 
	1, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	2, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 15, 20, 20, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
};

static const short _dtext_cond_keys[] = {
	93, 93, 62, 62, 62, 62, 62, 62, 
	93, 93, 93, 93, -128, -1, 1, 8, 
	14, 31, 33, 127, -128, -1, 1, 9, 
	11, 12, 14, 61, 62, 62, 63, 127, 
	-128, -65, -128, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -100, 
	-99, -99, -98, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -84, -83, -83, 
	-82, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -128, -127, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -126, 
	-125, -121, -120, -111, -110, -109, -108, -100, 
	-99, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -69, -68, -68, -67, -67, 
	-66, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -120, -119, -119, -118, -68, 
	-67, -67, -66, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -100, 
	-99, -99, -98, -97, -96, -96, -95, -94, 
	-93, -93, -92, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -100, -99, -99, -98, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -84, 
	-83, -83, -82, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -128, -127, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -126, -125, -121, -120, -111, -110, -109, 
	-108, -100, -99, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -69, -68, -68, 
	-67, -67, -66, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -120, -119, -119, 
	-118, -68, -67, -67, -66, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -100, 
	-99, -99, -98, -97, -96, -96, -95, -94, 
	-93, -93, -92, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 99, 100, 100, 101, 114, 
	115, 115, 116, 122, 127, 127, -128, -65, 
	-128, -100, -99, -99, -98, -65, -128, -84, 
	-82, -65, -128, -128, -127, -65, -125, -121, 
	-110, -109, -99, -65, -128, -69, -68, -68, 
	-67, -67, -66, -65, -128, -120, -118, -68, 
	-66, -65, -128, -100, -98, -97, -95, -94, 
	-92, -65, -128, -65, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, 1, 8, 14, 31, 48, 57, 
	65, 90, 97, 122, 127, 127, 60, 60, 
	64, 64, 64, 64, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, 1, 8, 14, 31, 46, 46, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, 0
};

static const char _dtext_cond_spaces[] = {
	2, 4, 3, 2, 4, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0
};

static const short _dtext_key_offsets[] = {
	0, 0, 4, 10, 14, 16, 17, 21, 
	23, 25, 27, 29, 30, 34, 36, 37, 
	39, 41, 43, 45, 46, 51, 54, 56, 
	58, 60, 62, 64, 66, 68, 70, 72, 
	73, 77, 79, 81, 83, 85, 86, 90, 
	92, 96, 99, 107, 114, 118, 122, 124, 
	126, 130, 137, 141, 147, 149, 151, 153, 
	155, 157, 161, 168, 172, 178, 180, 182, 
	184, 186, 188, 190, 191, 195, 197, 199, 
	201, 203, 205, 207, 210, 211, 215, 216, 
	218, 229, 240, 244, 246, 248, 250, 252, 
	253, 257, 259, 263, 266, 274, 281, 283, 
	285, 289, 296, 300, 306, 308, 310, 312, 
	314, 316, 320, 327, 331, 337, 339, 341, 
	343, 345, 347, 349, 350, 352, 354, 356, 
	358, 359, 361, 363, 365, 367, 369, 371, 
	374, 375, 379, 380, 381, 391, 393, 395, 
	398, 401, 404, 408, 418, 422, 432, 433, 
	435, 436, 439, 441, 443, 445, 447, 448, 
	449, 451, 452, 455, 457, 459, 461, 463, 
	464, 472, 473, 474, 475, 476, 477, 478, 
	479, 480, 482, 484, 486, 490, 494, 500, 
	506, 508, 509, 513, 515, 517, 519, 521, 
	523, 525, 528, 532, 533, 535, 537, 539, 
	541, 542, 548, 550, 551, 553, 555, 557, 
	559, 561, 563, 566, 567, 569, 571, 573, 
	575, 576, 577, 581, 583, 585, 587, 589, 
	591, 592, 598, 599, 600, 601, 602, 606, 
	608, 610, 612, 614, 616, 617, 623, 624, 
	625, 626, 629, 634, 645, 657, 659, 661, 
	663, 665, 667, 669, 671, 673, 675, 676, 
	680, 682, 684, 686, 687, 689, 691, 693, 
	695, 697, 698, 700, 702, 704, 706, 707, 
	709, 711, 713, 715, 717, 719, 722, 723, 
	725, 727, 729, 733, 736, 744, 751, 753, 
	755, 757, 759, 761, 763, 764, 766, 768, 
	779, 790, 801, 811, 815, 817, 819, 821, 
	822, 824, 826, 828, 830, 832, 833, 835, 
	837, 839, 841, 843, 845, 848, 849, 851, 
	853, 855, 859, 862, 870, 877, 879, 881, 
	883, 885, 887, 889, 890, 891, 892, 902, 
	904, 906, 909, 912, 915, 919, 929, 933, 
	934, 935, 940, 942, 944, 947, 951, 954, 
	960, 964, 970, 978, 980, 1008, 1010, 1012, 
	1015, 1019, 1022, 1028, 1032, 1038, 1046, 1048, 
	1076, 1100, 1102, 1104, 1107, 1111, 1114, 1120, 
	1124, 1130, 1138, 1140, 1142, 1144, 1146, 1149, 
	1150, 1151, 1165, 1167, 1182, 1184, 1186, 1203, 
	1205, 1207, 1210, 1213, 1234, 1237, 1249, 1253, 
	1257, 1262, 1264, 1266, 1267, 1271, 1276, 1278, 
	1280, 1282, 1285, 1286, 1287, 1291, 1292, 1293, 
	1303, 1310, 1317, 1322, 1331, 1343, 1347, 1348, 
	1354, 1360, 1366, 1367, 1379, 1388, 1395, 1402, 
	1409, 1417, 1431, 1437, 1438, 1452, 1466, 1480, 
	1487, 1494, 1501, 1508, 1514, 1515, 1519, 1523, 
	1525, 1536, 1539, 1550, 1559, 1567, 1574, 1581, 
	1588, 1595, 1601, 1602, 1611, 1616, 1621, 1623, 
	1624, 1629, 1630, 1631, 1632, 1646, 1654, 1668, 
	1680, 1688, 1692, 1700, 1708, 1716, 1723, 1724, 
	1725, 1734, 1750, 1760, 1776, 1790, 1800, 1809, 
	1810, 1814, 1824, 1833, 1842, 1851, 1860, 1869, 
	1880, 1890, 1899, 1909, 1918, 1927, 1944, 1953, 
	1962, 1971, 1980, 1984, 1992, 2001, 2009, 2017, 
	2026, 2027, 2031, 2032, 2033, 2034, 2036, 2037, 
	2039, 2040, 2042, 2043, 2045, 2053, 2054, 2056, 
	2057, 2058, 2072, 2074, 2089, 2091, 2093, 2110, 
	2112, 2114, 2117, 2120, 2141, 2144, 2156, 2160, 
	2164, 2169, 2171, 2173, 2175, 2178, 2182, 2185, 
	2191, 2195, 2201, 2209, 2211, 2239, 2241, 2243, 
	2246, 2250, 2253, 2259, 2263, 2269, 2277, 2279, 
	2307, 2331, 2333, 2335, 2338, 2342, 2345, 2351, 
	2355, 2361, 2369, 2371, 2373, 2375, 2377, 2379, 
	2381, 2383, 2385, 2386, 2387, 2389, 2390, 2392, 
	2395, 2397, 2399, 2400, 2402, 2403, 2405, 2406, 
	2408, 2409, 2411, 2417, 2419, 2421, 2423, 2425, 
	2426, 2427, 2429, 2431, 2433, 2435, 2437, 2439, 
	2441, 2443, 2445, 2447, 2449, 2450, 2451, 2453, 
	2455, 2457, 2459, 2461, 2463, 2465, 2467, 2469, 
	2471, 2473, 2474, 2475, 2477, 2478, 2480, 2482, 
	2484, 2487, 2489, 2491, 2493, 2495, 2497, 2499, 
	2500, 2501, 2503, 2504, 2506, 2522, 2523, 2524, 
	2527, 2528, 2531, 2532, 2536, 2538, 2540, 2542, 
	2544, 2545, 2549, 2551, 2555, 2558, 2566, 2573, 
	2577, 2581, 2583, 2585, 2589, 2596, 2600, 2606, 
	2608, 2610, 2612, 2614, 2616, 2620, 2627, 2631, 
	2637, 2639, 2641, 2643, 2646, 2647, 2648, 2652, 
	2657, 2663, 2666, 2670, 2671, 2672, 2674, 2676, 
	2678, 2680, 2682, 2684, 2685, 2689, 2691, 2693, 
	2695, 2697, 2698, 2701, 2703, 2705, 2707, 2709, 
	2711, 2714, 2715, 2717, 2718, 2721, 2723, 2727, 
	2730, 2738, 2742, 2747, 2750, 2755, 2761, 2764, 
	2765, 2767, 2769, 2771, 2772, 2778, 2780, 2782, 
	2784, 2787, 2788, 2789, 2793, 2794, 2800, 2804, 
	2809, 2811, 2813, 2815, 2818, 2819, 2820, 2824, 
	2825, 2827, 2829, 2831, 2834, 2835, 2836, 2840, 
	2841, 2847, 2853, 2856, 2857, 2859, 2861, 2863, 
	2864, 2871, 2879, 2887, 2895, 2902, 2904, 2906, 
	2908, 2911, 2912, 2913, 2917, 2918, 2934, 2937, 
	2941, 2942, 2947, 2949, 2951, 2953, 2955, 2956, 
	2957, 2959, 2963, 2965, 2967, 2969, 2970, 2971, 
	2975, 2980, 2986, 2989, 2993, 2998, 3004, 3009, 
	3011, 3013, 3015, 3018, 3019, 3020, 3024, 3025, 
	3030, 3032, 3034, 3036, 3038, 3040, 3042, 3044, 
	3046, 3047, 3048, 3052, 3054, 3056, 3058, 3060, 
	3061, 3065, 3067, 3071, 3074, 3082, 3089, 3091, 
	3093, 3097, 3104, 3108, 3114, 3118, 3119, 3121, 
	3123, 3125, 3127, 3131, 3138, 3142, 3148, 3150, 
	3152, 3154, 3157, 3158, 3159, 3163, 3168, 3169, 
	3171, 3173, 3175, 3177, 3179, 3181, 3182, 3187, 
	3189, 3191, 3193, 3195, 3197, 3200, 3201, 3203, 
	3205, 3207, 3209, 3210, 3212, 3213, 3214, 3222, 
	3231, 3233, 3263, 3293, 3325, 3357, 3390, 3423, 
	3456, 3498, 3532, 3566, 3598, 3633, 3665, 3697, 
	3730, 3763, 3796, 3838, 3872, 3906, 3941, 3973, 
	4005, 4007, 4010, 4014, 4017, 4023, 4027, 4033, 
	4041, 4043, 4063, 4064, 4066, 4068, 4070, 4072, 
	4073, 4074, 4076, 4078, 4080, 4082, 4083, 4084, 
	4086, 4088, 4090, 4092, 4094, 4096, 4098, 4099, 
	4100, 4102, 4104, 4106, 4108, 4110, 4112, 4114, 
	4115, 4119, 4121, 4123, 4125, 4127, 4129, 4131, 
	4133, 4134, 4142, 4144, 4146, 4148, 4149, 4151, 
	4153, 4155, 4156, 4158, 4160, 4162, 4163, 4164, 
	4166, 4168, 4173, 4181, 4190, 4193, 4203, 4206, 
	4210, 4213, 4216, 4220, 4229, 4231, 4233, 4235, 
	4237, 4240, 4248, 4257, 4260, 4270, 4273, 4277, 
	4280, 4283, 4287, 4296, 4304, 4306, 4308, 4310, 
	4313, 4321, 4330, 4333, 4343, 4346, 4350, 4353, 
	4356, 4360, 4369, 4372, 4380, 4389, 4392, 4402, 
	4405, 4409, 4412, 4415, 4419, 4428, 4433, 4441, 
	4450, 4453, 4463, 4466, 4470, 4473, 4476, 4480, 
	4489, 4491, 4493, 4496, 4504, 4513, 4516, 4526, 
	4529, 4533, 4536, 4539, 4543, 4552, 4555, 4563, 
	4572, 4575, 4585, 4588, 4592, 4595, 4598, 4602, 
	4611, 4615, 4617, 4619, 4621, 4623, 4625, 4627, 
	4629, 4630, 4638, 4640, 4642, 4644, 4645, 4647, 
	4649, 4651, 4652, 4654, 4656, 4658, 4659, 4660, 
	4662, 4664, 4669, 4677, 4686, 4689, 4699, 4702, 
	4706, 4709, 4712, 4716, 4725, 4727, 4729, 4731, 
	4733, 4736, 4744, 4753, 4756, 4766, 4769, 4773, 
	4776, 4779, 4783, 4792, 4800, 4802, 4804, 4806, 
	4809, 4817, 4826, 4829, 4839, 4842, 4846, 4849, 
	4852, 4856, 4865, 4868, 4876, 4885, 4888, 4898, 
	4901, 4905, 4908, 4911, 4915, 4924, 4929, 4937, 
	4946, 4949, 4959, 4962, 4966, 4969, 4972, 4976, 
	4985, 4987, 4989, 4992, 5000, 5009, 5012, 5022, 
	5025, 5029, 5032, 5035, 5039, 5048, 5051, 5059, 
	5068, 5071, 5081, 5084, 5088, 5091, 5094, 5098, 
	5107, 5117, 5121, 5127, 5129, 5132, 5135, 5140, 
	5156, 5159, 5163, 5167, 5170, 5173, 5176, 5179, 
	5183, 5186, 5188, 5190, 5204, 5205, 5208, 5219, 
	5228, 5292, 5294, 5300, 5302, 5304, 5308, 5312, 
	5322, 5324, 5330, 5333, 5338, 5340, 5342, 5344, 
	5346, 5347, 5375, 5403, 5427, 5448, 5453, 5461, 
	5467, 5473, 5479, 5485, 5491, 5497, 5503, 5509, 
	5515, 5521, 5527, 5533, 5540, 5547, 5557, 5567, 
	5577, 5587, 5597, 5606, 5608, 5618, 5628, 5638, 
	5647, 5649, 5659, 5669, 5679, 5689, 5699, 5709, 
	5718, 5720, 5730, 5740, 5750, 5760, 5769, 5772, 
	5780, 5790, 5800, 5810, 5820, 5829, 5831, 5841, 
	5851, 5861, 5872, 5893, 5921, 5949, 5973, 5978, 
	5987, 5997, 6007, 6016, 6018, 6030, 6040, 6050, 
	6060, 6069, 6071, 6083, 6093, 6102, 6104, 6114, 
	6123, 6125, 6135, 6145, 6155, 6165, 6175, 6184, 
	6186, 6196, 6206, 6216, 6226, 6236, 6245, 6247, 
	6259, 6269, 6278, 6280, 6282, 6284, 6294, 6304, 
	6314, 6323, 6326, 6328, 6338, 6348, 6358, 6367, 
	6369, 6371, 6381, 6391, 6401, 6410, 6412, 6434, 
	6438, 6442, 6446, 6447, 6470, 6494, 6516, 6546, 
	6576, 6580, 6582, 6583, 6584, 6588, 6590, 6591, 
	6592, 6594, 6599
};

static const short _dtext_trans_keys[] = {
	0, 9, 10, 32, 0, 9, 10, 32, 
	60, 91, 72, 84, 104, 116, 82, 114, 
	62, 0, 9, 10, 32, 65, 97, 66, 
	98, 76, 108, 69, 101, 62, 72, 84, 
	104, 116, 82, 114, 93, 65, 97, 66, 
	98, 76, 108, 69, 101, 93, 0, 9, 
	10, 13, 32, 9, 32, 42, 76, 108, 
	79, 111, 67, 99, 75, 107, 81, 113, 
	85, 117, 79, 111, 84, 116, 69, 101, 
	62, 69, 79, 101, 111, 78, 110, 84, 
	116, 69, 101, 82, 114, 62, 68, 76, 
	100, 108, 69, 101, 9, 32, 61, 62, 
	9, 32, 61, 9, 32, 48, 57, 65, 
	90, 97, 122, 62, 48, 57, 65, 90, 
	97, 122, 0, 9, 10, 32, 0, 9, 
	10, 32, 79, 111, 82, 114, 9, 32, 
	61, 62, 0, 9, 10, 13, 32, 61, 
	62, 0, 10, 13, 62, 0, 9, 10, 
	13, 32, 62, 88, 120, 80, 112, 65, 
	97, 78, 110, 68, 100, 9, 32, 61, 
	62, 0, 9, 10, 13, 32, 61, 62, 
	0, 10, 13, 62, 0, 9, 10, 13, 
	32, 62, 79, 111, 68, 100, 84, 116, 
	69, 101, 88, 120, 84, 116, 62, 0, 
	9, 10, 32, 80, 112, 79, 111, 73, 
	105, 76, 108, 69, 101, 82, 114, 62, 
	83, 115, 62, 65, 78, 97, 110, 62, 
	35, 46, 33, 35, 38, 45, 95, 47, 
	58, 65, 90, 97, 122, 33, 35, 38, 
	46, 95, 45, 58, 65, 90, 97, 122, 
	69, 79, 101, 111, 78, 110, 84, 116, 
	69, 101, 82, 114, 93, 68, 76, 100, 
	108, 69, 101, 9, 32, 61, 93, 9, 
	32, 61, 9, 32, 48, 57, 65, 90, 
	97, 122, 93, 48, 57, 65, 90, 97, 
	122, 79, 111, 82, 114, 9, 32, 61, 
	93, 0, 9, 10, 13, 32, 61, 93, 
	0, 10, 13, 93, 0, 9, 10, 13, 
	32, 93, 88, 120, 80, 112, 65, 97, 
	78, 110, 68, 100, 9, 32, 61, 93, 
	0, 9, 10, 13, 32, 61, 93, 0, 
	10, 13, 93, 0, 9, 10, 13, 32, 
	93, 79, 111, 68, 100, 84, 116, 69, 
	101, 88, 120, 84, 116, 93, 85, 117, 
	79, 111, 84, 116, 69, 101, 93, 80, 
	112, 79, 111, 73, 105, 76, 108, 69, 
	101, 82, 114, 83, 93, 115, 93, 65, 
	78, 97, 110, 93, 96, 0, 9, 10, 
	32, 48, 57, 65, 90, 97, 122, 0, 
	10, 0, 10, 0, 10, 96, 0, 10, 
	96, 0, 10, 96, 0, 9, 10, 32, 
	0, 9, 10, 32, 48, 57, 65, 90, 
	97, 122, 0, 9, 10, 32, 66, 69, 
	73, 83, 85, 98, 101, 105, 115, 117, 
	62, 77, 109, 62, 62, 84, 116, 82, 
	114, 79, 111, 78, 110, 71, 103, 62, 
	62, 77, 109, 62, 62, 84, 116, 82, 
	114, 79, 111, 78, 110, 71, 103, 62, 
	66, 73, 83, 85, 98, 105, 115, 117, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	-128, -65, -128, -65, -128, -65, 0, 9, 
	10, 32, 0, 9, 10, 32, 0, 9, 
	10, 32, 60, 91, 72, 83, 84, 104, 
	115, 116, 82, 114, 62, 0, 9, 10, 
	32, 80, 112, 79, 111, 73, 105, 76, 
	108, 69, 101, 82, 114, 62, 83, 115, 
	0, 9, 10, 32, 62, 65, 97, 66, 
	98, 76, 108, 69, 101, 62, 72, 83, 
	84, 104, 115, 116, 82, 114, 93, 80, 
	112, 79, 111, 73, 105, 76, 108, 69, 
	101, 82, 114, 83, 93, 115, 93, 65, 
	97, 66, 98, 76, 108, 69, 101, 93, 
	47, 67, 84, 99, 116, 69, 101, 78, 
	110, 84, 116, 69, 101, 82, 114, 62, 
	68, 72, 78, 100, 104, 110, 62, 62, 
	62, 47, 67, 84, 99, 116, 69, 101, 
	78, 110, 84, 116, 69, 101, 82, 114, 
	93, 68, 72, 78, 100, 104, 110, 93, 
	93, 93, 9, 32, 42, 0, 9, 10, 
	13, 32, 47, 67, 72, 78, 83, 84, 
	99, 104, 110, 115, 116, 66, 67, 69, 
	81, 83, 84, 98, 99, 101, 113, 115, 
	116, 76, 108, 79, 111, 67, 99, 75, 
	107, 81, 113, 85, 117, 79, 111, 84, 
	116, 69, 101, 2653, 69, 79, 101, 111, 
	76, 108, 79, 111, 82, 114, 3646, 88, 
	120, 80, 112, 65, 97, 78, 110, 68, 
	100, 3134, 85, 117, 79, 111, 84, 116, 
	69, 101, 2622, 80, 112, 79, 111, 73, 
	105, 76, 108, 69, 101, 82, 114, 62, 
	83, 115, 62, 79, 111, 68, 100, 69, 
	101, 9, 32, 61, 62, 9, 32, 61, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	62, 48, 57, 65, 90, 97, 122, 79, 
	111, 68, 100, 84, 116, 69, 101, 88, 
	120, 84, 116, 62, 49, 54, 35, 46, 
	33, 35, 38, 45, 95, 47, 58, 65, 
	90, 97, 122, 33, 35, 38, 46, 95, 
	45, 58, 65, 90, 97, 122, 47, 67, 
	72, 78, 83, 84, 99, 104, 110, 115, 
	116, 67, 69, 81, 83, 84, 99, 101, 
	113, 115, 116, 69, 79, 101, 111, 76, 
	108, 79, 111, 82, 114, 3677, 88, 120, 
	80, 112, 65, 97, 78, 110, 68, 100, 
	3165, 80, 112, 79, 111, 73, 105, 76, 
	108, 69, 101, 82, 114, 83, 93, 115, 
	93, 79, 111, 68, 100, 69, 101, 9, 
	32, 61, 93, 9, 32, 61, 9, 32, 
	48, 57, 65, 90, 97, 122, 93, 48, 
	57, 65, 90, 97, 122, 79, 111, 68, 
	100, 84, 116, 69, 101, 88, 120, 84, 
	116, 93, 96, 96, 0, 9, 10, 32, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	0, 10, 0, 10, 96, 0, 10, 96, 
	0, 10, 96, 0, 9, 10, 32, 0, 
	9, 10, 32, 48, 57, 65, 90, 97, 
	122, 0, 9, 10, 32, 34, 58, 35, 
	47, 72, 91, 104, -128, -65, -128, -65, 
	-99, -128, -65, -128, -84, -82, -65, -128, 
	-127, -65, -125, -121, -110, -109, -99, -65, 
	-68, -67, -128, -65, -128, -120, -118, -68, 
	-66, -65, -128, -100, -98, -97, -95, -94, 
	-92, -65, -128, -65, -30, -29, -17, 32, 
	34, 35, 39, 44, 46, 60, 62, 63, 
	91, 93, -128, -63, -62, -33, -32, -18, 
	-16, -12, -11, 0, 9, 13, 58, 59, 
	-128, -65, -128, -65, -99, -128, -65, -128, 
	-84, -82, -65, -128, -127, -65, -125, -121, 
	-110, -109, -99, -65, -68, -67, -128, -65, 
	-128, -120, -118, -68, -66, -65, -128, -100, 
	-98, -97, -95, -94, -92, -65, -128, -65, 
	-30, -29, -17, 32, 34, 35, 39, 44, 
	46, 60, 62, 63, 91, 93, -128, -63, 
	-62, -33, -32, -18, -16, -12, -11, 0, 
	9, 13, 58, 59, -30, -29, -17, 32, 
	34, 35, 39, 44, 46, 63, -128, -63, 
	-62, -33, -32, -18, -16, -12, -11, 0, 
	9, 13, 58, 59, -128, -65, -128, -65, 
	-99, -128, -65, -128, -84, -82, -65, -128, 
	-127, -65, -125, -121, -110, -109, -99, -65, 
	-68, -67, -128, -65, -128, -120, -118, -68, 
	-66, -65, -128, -100, -98, -97, -95, -94, 
	-92, -65, -128, -65, 84, 116, 84, 116, 
	80, 112, 58, 83, 115, 47, 47, 45, 
	95, -62, -33, -32, -17, -16, -12, 48, 
	57, 65, 90, 97, 122, -128, -65, 45, 
	46, 95, -62, -33, -32, -17, -16, -12, 
	48, 57, 65, 90, 97, 122, -128, -65, 
	-128, -65, -30, -29, -17, 45, 95, -62, 
	-33, -32, -18, -16, -12, 48, 57, 65, 
	90, 97, 122, -128, -65, -128, -65, -99, 
	-128, -65, -83, -128, -65, -30, -29, -17, 
	35, 46, 47, 58, 63, 95, -62, -33, 
	-32, -18, -16, -12, 45, 57, 65, 90, 
	97, 122, -128, -127, -65, -128, -126, -125, 
	-121, -120, -111, -110, -109, -108, -100, -99, 
	-65, -68, -67, -128, -65, -119, -67, -128, 
	-65, -99, -96, -93, -128, -65, -128, -65, 
	48, 57, 58, 35, 47, 72, 104, 0, 
	32, 93, 9, 13, 84, 116, 84, 116, 
	80, 112, 58, 83, 115, 47, 47, 0, 
	32, 9, 13, 58, 91, 9, 32, 58, 
	60, 62, 92, 93, 124, 10, 13, 9, 
	32, 35, 93, 124, 10, 13, 9, 32, 
	35, 93, 124, 10, 13, 32, 93, 124, 
	9, 13, 9, 32, 35, 93, 124, 10, 
	13, 65, 90, 9, 32, 45, 93, 95, 
	124, 48, 57, 65, 90, 97, 122, 9, 
	32, 93, 124, 93, 9, 32, 93, 124, 
	10, 13, 9, 32, 93, 124, 10, 13, 
	9, 32, 93, 124, 10, 13, 93, 9, 
	32, 45, 93, 95, 124, 48, 57, 65, 
	90, 97, 122, 32, 45, 95, 48, 57, 
	65, 90, 97, 122, 9, 32, 35, 93, 
	124, 10, 13, 9, 32, 35, 93, 124, 
	10, 13, 9, 32, 35, 93, 124, 10, 
	13, 9, 32, 93, 124, 10, 13, 65, 
	90, 9, 32, 45, 93, 95, 124, 10, 
	13, 48, 57, 65, 90, 97, 122, 9, 
	32, 93, 124, 10, 13, 93, 9, 32, 
	45, 93, 95, 124, 10, 13, 48, 57, 
	65, 90, 97, 122, 9, 32, 45, 93, 
	95, 124, 10, 13, 48, 57, 65, 90, 
	97, 122, 9, 32, 45, 93, 95, 124, 
	10, 13, 48, 57, 65, 90, 97, 122, 
	9, 32, 35, 93, 124, 10, 13, 9, 
	32, 62, 93, 124, 10, 13, 9, 32, 
	93, 95, 124, 10, 13, 9, 32, 60, 
	93, 124, 10, 13, 9, 32, 93, 124, 
	10, 13, 62, 9, 32, 35, 93, 9, 
	32, 35, 93, 65, 90, 9, 32, 45, 
	93, 95, 48, 57, 65, 90, 97, 122, 
	9, 32, 93, 9, 32, 45, 93, 95, 
	48, 57, 65, 90, 97, 122, 32, 45, 
	95, 48, 57, 65, 90, 97, 122, 9, 
	32, 35, 58, 93, 124, 10, 13, 9, 
	32, 51, 93, 124, 10, 13, 9, 32, 
	35, 93, 124, 10, 13, 9, 32, 35, 
	93, 124, 10, 13, 9, 32, 35, 93, 
	124, 10, 13, 9, 32, 93, 124, 10, 
	13, 47, 95, 119, 124, 48, 57, 65, 
	90, 97, 122, 9, 32, 35, 93, 124, 
	9, 32, 35, 93, 124, 65, 90, 124, 
	9, 32, 35, 93, 124, 95, 124, 123, 
	0, 9, 32, 45, 58, 60, 62, 92, 
	124, 126, 10, 13, 123, 125, 0, 9, 
	32, 123, 124, 125, 10, 13, 0, 9, 
	32, 45, 58, 60, 62, 92, 123, 124, 
	125, 126, 10, 13, 0, 9, 32, 58, 
	60, 62, 92, 123, 124, 125, 10, 13, 
	0, 9, 32, 123, 124, 125, 10, 13, 
	9, 32, 124, 125, 0, 9, 10, 13, 
	32, 125, 11, 12, 0, 9, 10, 13, 
	32, 125, 11, 12, 0, 9, 10, 13, 
	32, 125, 11, 12, 0, 10, 13, 32, 
	125, 9, 12, 125, 125, 0, 9, 10, 
	13, 32, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 45, 58, 60, 62, 92, 
	123, 124, 125, 126, 11, 12, 0, 9, 
	10, 13, 32, 123, 124, 125, 11, 12, 
	0, 9, 10, 13, 32, 45, 58, 60, 
	62, 92, 123, 124, 125, 126, 11, 12, 
	0, 9, 10, 13, 32, 58, 60, 62, 
	92, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 123, 124, 125, 11, 12, 
	0, 9, 10, 13, 32, 124, 125, 11, 
	12, 125, 9, 32, 124, 125, 0, 9, 
	10, 13, 32, 123, 124, 125, 11, 12, 
	0, 9, 10, 13, 32, 62, 125, 11, 
	12, 0, 9, 10, 13, 32, 95, 125, 
	11, 12, 0, 9, 10, 13, 32, 60, 
	125, 11, 12, 0, 9, 10, 13, 32, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 62, 125, 11, 12, 0, 9, 10, 
	13, 32, 58, 123, 124, 125, 11, 12, 
	0, 9, 10, 13, 32, 123, 124, 125, 
	11, 12, 0, 9, 10, 13, 32, 51, 
	125, 11, 12, 0, 9, 10, 13, 32, 
	123, 124, 125, 11, 12, 0, 9, 10, 
	13, 32, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 47, 125, 11, 12, 0, 
	9, 10, 13, 32, 95, 119, 124, 125, 
	11, 12, 48, 57, 65, 90, 97, 122, 
	0, 9, 10, 13, 32, 124, 125, 11, 
	12, 0, 9, 10, 13, 32, 124, 125, 
	11, 12, 0, 9, 10, 13, 32, 95, 
	125, 11, 12, 0, 9, 10, 13, 32, 
	124, 125, 11, 12, 9, 32, 124, 125, 
	0, 9, 32, 123, 124, 125, 10, 13, 
	0, 9, 32, 58, 123, 124, 125, 10, 
	13, 0, 9, 32, 123, 124, 125, 10, 
	13, 0, 9, 32, 123, 124, 125, 10, 
	13, 95, 119, 124, 48, 57, 65, 90, 
	97, 122, 124, 9, 32, 124, 125, 95, 
	124, 35, 48, 57, 35, 48, 57, 35, 
	48, 57, 35, 48, 57, 45, 61, 48, 
	57, 65, 90, 97, 122, 35, 48, 57, 
	47, 47, 45, 95, -62, -33, -32, -17, 
	-16, -12, 48, 57, 65, 90, 97, 122, 
	-128, -65, 45, 46, 95, -62, -33, -32, 
	-17, -16, -12, 48, 57, 65, 90, 97, 
	122, -128, -65, -128, -65, -30, -29, -17, 
	45, 95, -62, -33, -32, -18, -16, -12, 
	48, 57, 65, 90, 97, 122, -128, -65, 
	-128, -65, -99, -128, -65, -83, -128, -65, 
	-30, -29, -17, 35, 46, 47, 58, 63, 
	95, -62, -33, -32, -18, -16, -12, 45, 
	57, 65, 90, 97, 122, -128, -127, -65, 
	-128, -126, -125, -121, -120, -111, -110, -109, 
	-108, -100, -99, -65, -68, -67, -128, -65, 
	-119, -67, -128, -65, -99, -96, -93, -128, 
	-65, -128, -65, -128, -65, -128, -65, -99, 
	-128, -65, -128, -84, -82, -65, -128, -127, 
	-65, -125, -121, -110, -109, -99, -65, -68, 
	-67, -128, -65, -128, -120, -118, -68, -66, 
	-65, -128, -100, -98, -97, -95, -94, -92, 
	-65, -128, -65, -30, -29, -17, 32, 34, 
	35, 39, 44, 46, 60, 62, 63, 91, 
	93, -128, -63, -62, -33, -32, -18, -16, 
	-12, -11, 0, 9, 13, 58, 59, -128, 
	-65, -128, -65, -99, -128, -65, -128, -84, 
	-82, -65, -128, -127, -65, -125, -121, -110, 
	-109, -99, -65, -68, -67, -128, -65, -128, 
	-120, -118, -68, -66, -65, -128, -100, -98, 
	-97, -95, -94, -92, -65, -128, -65, -30, 
	-29, -17, 32, 34, 35, 39, 44, 46, 
	60, 62, 63, 91, 93, -128, -63, -62, 
	-33, -32, -18, -16, -12, -11, 0, 9, 
	13, 58, 59, -30, -29, -17, 32, 34, 
	35, 39, 44, 46, 63, -128, -63, -62, 
	-33, -32, -18, -16, -12, -11, 0, 9, 
	13, 58, 59, -128, -65, -128, -65, -99, 
	-128, -65, -128, -84, -82, -65, -128, -127, 
	-65, -125, -121, -110, -109, -99, -65, -68, 
	-67, -128, -65, -128, -120, -118, -68, -66, 
	-65, -128, -100, -98, -97, -95, -94, -92, 
	-65, -128, -65, 48, 57, 65, 97, 67, 
	99, 84, 116, 73, 105, 79, 111, 78, 
	110, 32, 35, 48, 57, 35, 48, 57, 
	47, 48, 57, 80, 112, 48, 57, 35, 
	48, 57, 35, 48, 57, 35, 48, 57, 
	35, 48, 57, 65, 73, 84, 97, 105, 
	116, 76, 108, 73, 105, 65, 97, 83, 
	115, 32, 35, 48, 57, 77, 109, 80, 
	112, 76, 108, 73, 105, 67, 99, 65, 
	97, 84, 116, 73, 105, 79, 111, 78, 
	110, 32, 35, 48, 57, 82, 114, 65, 
	97, 78, 110, 83, 115, 76, 108, 65, 
	97, 84, 116, 73, 105, 79, 111, 78, 
	110, 32, 35, 48, 57, 35, 48, 57, 
	80, 112, 48, 57, 35, 82, 114, 48, 
	57, 69, 101, 80, 112, 79, 111, 82, 
	114, 84, 116, 32, 35, 48, 57, 35, 
	48, 57, 66, 67, 69, 73, 81, 83, 
	84, 85, 98, 99, 101, 105, 113, 115, 
	116, 117, 93, 93, 80, 93, 112, 93, 
	82, 93, 114, 93, 69, 79, 101, 111, 
	78, 110, 84, 116, 69, 101, 82, 114, 
	93, 68, 76, 100, 108, 69, 101, 9, 
	32, 61, 93, 9, 32, 61, 9, 32, 
	48, 57, 65, 90, 97, 122, 93, 48, 
	57, 65, 90, 97, 122, 0, 9, 10, 
	32, 0, 9, 10, 32, 79, 111, 82, 
	114, 9, 32, 61, 93, 0, 9, 10, 
	13, 32, 61, 93, 0, 10, 13, 93, 
	0, 9, 10, 13, 32, 93, 88, 120, 
	80, 112, 65, 97, 78, 110, 68, 100, 
	9, 32, 61, 93, 0, 9, 10, 13, 
	32, 61, 93, 0, 10, 13, 93, 0, 
	9, 10, 13, 32, 93, 84, 116, 84, 
	116, 80, 112, 58, 83, 115, 47, 47, 
	0, 32, 9, 13, 0, 32, 93, 9, 
	13, 0, 32, 40, 93, 9, 13, 0, 
	10, 13, 0, 10, 13, 41, 58, 93, 
	79, 111, 68, 100, 84, 116, 69, 101, 
	88, 120, 84, 116, 93, 0, 9, 10, 
	32, 85, 117, 79, 111, 84, 116, 69, 
	101, 93, 80, 93, 112, 79, 111, 73, 
	105, 76, 108, 69, 101, 82, 114, 83, 
	93, 115, 93, 78, 110, 93, 82, 93, 
	114, 76, 108, 9, 32, 61, 93, 9, 
	32, 61, 9, 32, 34, 35, 39, 47, 
	72, 104, 35, 47, 72, 104, 0, 32, 
	34, 9, 13, 9, 32, 93, 0, 9, 
	10, 13, 32, 0, 9, 10, 13, 32, 
	91, 9, 32, 91, 47, 85, 117, 82, 
	114, 76, 108, 93, 0, 9, 10, 13, 
	32, 91, 84, 116, 84, 116, 80, 112, 
	58, 83, 115, 47, 47, 0, 32, 9, 
	13, 58, 0, 9, 32, 93, 10, 13, 
	35, 47, 72, 104, 0, 32, 39, 9, 
	13, 84, 116, 84, 116, 80, 112, 58, 
	83, 115, 47, 47, 0, 32, 9, 13, 
	58, 84, 116, 84, 116, 80, 112, 58, 
	83, 115, 47, 47, 0, 32, 9, 13, 
	58, 9, 32, 35, 47, 72, 104, 0, 
	9, 32, 91, 10, 13, 9, 32, 91, 
	47, 85, 117, 82, 114, 76, 108, 93, 
	0, 9, 32, 47, 91, 10, 13, 0, 
	9, 32, 85, 91, 117, 10, 13, 0, 
	9, 32, 82, 91, 114, 10, 13, 0, 
	9, 32, 76, 91, 108, 10, 13, 0, 
	9, 32, 91, 93, 10, 13, 84, 116, 
	84, 116, 80, 112, 58, 83, 115, 47, 
	47, 0, 32, 9, 13, 58, 66, 67, 
	69, 73, 81, 83, 84, 85, 98, 99, 
	101, 105, 113, 115, 116, 117, 62, 76, 
	108, 77, 88, 109, 120, 62, 62, 80, 
	84, 112, 116, 82, 114, 79, 111, 78, 
	110, 71, 103, 62, 62, 9, 32, 9, 
	32, 72, 104, 82, 114, 69, 101, 70, 
	102, 61, 34, 35, 47, 72, 104, 0, 
	32, 34, 9, 13, 0, 32, 34, 62, 
	9, 13, 0, 10, 13, 0, 10, 13, 
	60, 0, 10, 13, 47, 60, 0, 10, 
	13, 60, 65, 97, 0, 10, 13, 60, 
	62, 84, 116, 84, 116, 80, 112, 58, 
	83, 115, 47, 47, 0, 32, 9, 13, 
	58, 62, 76, 82, 108, 114, 79, 111, 
	67, 99, 75, 107, 81, 113, 85, 117, 
	79, 111, 84, 116, 69, 101, 62, 62, 
	69, 79, 101, 111, 78, 110, 84, 116, 
	69, 101, 82, 114, 62, 68, 76, 100, 
	108, 69, 101, 9, 32, 61, 62, 9, 
	32, 61, 9, 32, 48, 57, 65, 90, 
	97, 122, 62, 48, 57, 65, 90, 97, 
	122, 79, 111, 82, 114, 9, 32, 61, 
	62, 0, 9, 10, 13, 32, 61, 62, 
	0, 10, 13, 62, 0, 9, 10, 13, 
	32, 62, 77, 88, 109, 120, 62, 80, 
	112, 65, 97, 78, 110, 68, 100, 9, 
	32, 61, 62, 0, 9, 10, 13, 32, 
	61, 62, 0, 10, 13, 62, 0, 9, 
	10, 13, 32, 62, 84, 116, 84, 116, 
	80, 112, 58, 83, 115, 47, 47, 0, 
	32, 9, 13, 0, 32, 62, 9, 13, 
	58, 79, 111, 68, 100, 84, 116, 69, 
	101, 88, 120, 84, 116, 62, 62, 80, 
	84, 112, 116, 79, 111, 73, 105, 76, 
	108, 69, 101, 82, 114, 62, 83, 115, 
	62, 82, 114, 79, 111, 78, 110, 71, 
	103, 62, 78, 110, 62, 62, 896, 1023, 
	1025, 1032, 1038, 1055, 1057, 1151, 1086, 896, 
	1023, 1025, 1033, 1035, 1036, 1038, 1151, 896, 
	959, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 961, 962, 991, 992, 1006, 1008, 
	1012, 1013, 1023, 1025, 1032, 1038, 1055, 1069, 
	1071, 1072, 1081, 1089, 1114, 1121, 1146, 994, 
	995, 1007, 1057, 1063, 1067, 1119, 1151, 896, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 925, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 941, 994, 
	995, 1007, 1057, 1063, 1067, 1119, 1151, 896, 
	959, 960, 961, 962, 991, 992, 1006, 1008, 
	1012, 1013, 1023, 1025, 1032, 1038, 1055, 1069, 
	1071, 1072, 1081, 1089, 1114, 1121, 1146, 896, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	897, 959, 960, 961, 962, 991, 992, 1006, 
	1008, 1012, 1013, 1023, 1025, 1032, 1038, 1055, 
	1069, 1071, 1072, 1081, 1089, 1114, 1121, 1146, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	896, 898, 899, 903, 904, 913, 914, 915, 
	916, 924, 925, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 956, 957, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 959, 960, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 905, 957, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 925, 928, 
	931, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 925, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 941, 994, 995, 1007, 1057, 1063, 
	1067, 1119, 1151, 896, 959, 960, 961, 962, 
	991, 992, 1006, 1008, 1012, 1013, 1023, 1025, 
	1032, 1038, 1055, 1069, 1071, 1072, 1081, 1089, 
	1114, 1121, 1146, 896, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 897, 959, 960, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 898, 899, 903, 
	904, 913, 914, 915, 916, 924, 925, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 956, 957, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	896, 959, 960, 961, 962, 991, 992, 1006, 
	1008, 1012, 1013, 1023, 1025, 1032, 1038, 1055, 
	1069, 1071, 1072, 1081, 1089, 1114, 1121, 1146, 
	905, 957, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 925, 928, 931, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1124, 1139, 1151, 896, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 896, 959, 925, 
	896, 959, 896, 940, 942, 959, 896, 897, 
	959, 899, 903, 914, 915, 925, 959, 956, 
	957, 896, 959, 896, 904, 906, 956, 958, 
	959, 896, 924, 926, 927, 929, 930, 932, 
	959, 896, 959, 994, 995, 1007, 1151, 962, 
	991, 992, 1006, 1008, 1012, 1025, 1032, 1038, 
	1055, 1072, 1081, 1089, 1114, 1121, 1146, 47, 
	67, 99, 79, 111, 68, 100, 69, 101, 
	62, 47, 67, 99, 79, 111, 68, 100, 
	69, 101, 93, 47, 78, 110, 79, 111, 
	68, 100, 84, 116, 69, 101, 88, 120, 
	84, 116, 62, 47, 78, 110, 79, 111, 
	68, 100, 84, 116, 69, 101, 88, 120, 
	84, 116, 93, 67, 84, 99, 116, 79, 
	111, 76, 108, 71, 103, 82, 114, 79, 
	111, 85, 117, 80, 112, 62, 65, 66, 
	72, 82, 97, 98, 104, 114, 66, 98, 
	76, 108, 69, 101, 62, 79, 111, 68, 
	100, 89, 121, 62, 69, 101, 65, 97, 
	68, 100, 62, 62, 79, 111, 76, 108, 
	9, 32, 62, 71, 103, 9, 32, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 9, 32, 34, 39, 48, 57, 65, 
	90, 97, 122, 0, 10, 13, 0, 10, 
	13, 34, 9, 32, 62, 0, 10, 13, 
	0, 10, 13, 39, 9, 32, 62, 48, 
	57, 65, 90, 97, 122, 82, 114, 79, 
	111, 85, 117, 80, 112, 9, 32, 62, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 62, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 62, 48, 57, 65, 90, 97, 122, 
	66, 68, 72, 82, 98, 100, 104, 114, 
	79, 111, 68, 100, 89, 121, 9, 32, 
	62, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	62, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 62, 48, 57, 65, 90, 97, 
	122, 9, 32, 62, 9, 32, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	9, 32, 34, 39, 48, 57, 65, 90, 
	97, 122, 0, 10, 13, 0, 10, 13, 
	34, 9, 32, 62, 0, 10, 13, 0, 
	10, 13, 39, 9, 32, 62, 48, 57, 
	65, 90, 97, 122, 9, 32, 62, 69, 
	101, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	62, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 62, 48, 57, 65, 90, 97, 
	122, 65, 97, 68, 100, 9, 32, 62, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 62, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 62, 48, 57, 65, 90, 97, 122, 
	9, 32, 62, 9, 32, 48, 57, 65, 
	90, 97, 122, 9, 32, 61, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 9, 
	32, 34, 39, 48, 57, 65, 90, 97, 
	122, 0, 10, 13, 0, 10, 13, 34, 
	9, 32, 62, 0, 10, 13, 0, 10, 
	13, 39, 9, 32, 62, 48, 57, 65, 
	90, 97, 122, 67, 84, 99, 116, 79, 
	111, 76, 108, 71, 103, 82, 114, 79, 
	111, 85, 117, 80, 112, 93, 65, 66, 
	72, 82, 97, 98, 104, 114, 66, 98, 
	76, 108, 69, 101, 93, 79, 111, 68, 
	100, 89, 121, 93, 69, 101, 65, 97, 
	68, 100, 93, 93, 79, 111, 76, 108, 
	9, 32, 71, 93, 103, 9, 32, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 9, 32, 34, 39, 48, 57, 65, 
	90, 97, 122, 0, 10, 13, 0, 10, 
	13, 34, 9, 32, 93, 0, 10, 13, 
	0, 10, 13, 39, 9, 32, 93, 48, 
	57, 65, 90, 97, 122, 82, 114, 79, 
	111, 85, 117, 80, 112, 9, 32, 93, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 93, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 93, 48, 57, 65, 90, 97, 122, 
	66, 68, 72, 82, 98, 100, 104, 114, 
	79, 111, 68, 100, 89, 121, 9, 32, 
	93, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	93, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 93, 48, 57, 65, 90, 97, 
	122, 9, 32, 93, 9, 32, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	9, 32, 34, 39, 48, 57, 65, 90, 
	97, 122, 0, 10, 13, 0, 10, 13, 
	34, 9, 32, 93, 0, 10, 13, 0, 
	10, 13, 39, 9, 32, 93, 48, 57, 
	65, 90, 97, 122, 9, 32, 69, 93, 
	101, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	93, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 93, 48, 57, 65, 90, 97, 
	122, 65, 97, 68, 100, 9, 32, 93, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 93, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 93, 48, 57, 65, 90, 97, 122, 
	9, 32, 93, 9, 32, 48, 57, 65, 
	90, 97, 122, 9, 32, 61, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 9, 
	32, 34, 39, 48, 57, 65, 90, 97, 
	122, 0, 10, 13, 0, 10, 13, 34, 
	9, 32, 93, 0, 10, 13, 0, 10, 
	13, 39, 9, 32, 93, 48, 57, 65, 
	90, 97, 122, 0, 9, 10, 32, 42, 
	60, 72, 91, 96, 104, 0, 9, 10, 
	32, 0, 9, 10, 32, 60, 91, 0, 
	10, 9, 32, 42, 0, 10, 13, 0, 
	9, 10, 13, 32, 66, 67, 69, 72, 
	78, 81, 83, 84, 98, 99, 101, 104, 
	110, 113, 115, 116, 32, 9, 13, 0, 
	9, 10, 32, 0, 9, 10, 32, 32, 
	9, 13, 32, 9, 13, 32, 9, 13, 
	32, 9, 13, 0, 9, 10, 32, 32, 
	9, 13, 49, 54, 9, 32, 67, 69, 
	72, 78, 81, 83, 84, 99, 101, 104, 
	110, 113, 115, 116, 96, 0, 60, 91, 
	47, 66, 69, 73, 83, 85, 98, 101, 
	105, 115, 117, 47, 66, 73, 83, 85, 
	98, 105, 115, 117, 0, 9, 10, 13, 
	32, 34, 65, 66, 67, 68, 70, 72, 
	77, 80, 82, 83, 84, 85, 87, 91, 
	97, 98, 99, 100, 102, 104, 109, 112, 
	114, 115, 116, 117, 119, 123, 828, 1084, 
	1344, 1600, 1856, 2112, -128, -63, -62, -33, 
	-32, -17, -16, -12, -11, 47, 48, 57, 
	58, 59, 61, 63, 69, 90, 92, 96, 
	101, 122, 124, 127, -128, -65, -62, -33, 
	-32, -17, -16, -12, -128, -65, -128, -65, 
	0, 9, 10, 32, 0, 9, 10, 32, 
	0, 9, 10, 32, 42, 60, 72, 91, 
	96, 104, 0, 10, 0, 9, 10, 32, 
	60, 91, 0, 10, 13, 0, 9, 10, 
	13, 32, 9, 32, 9, 32, 9, 32, 
	9, 32, 34, -30, -29, -17, 32, 34, 
	35, 39, 44, 46, 60, 62, 63, 91, 
	93, -128, -63, -62, -33, -32, -18, -16, 
	-12, -11, 0, 9, 13, 58, 59, -30, 
	-29, -17, 32, 34, 35, 39, 44, 46, 
	60, 62, 63, 91, 93, -128, -63, -62, 
	-33, -32, -18, -16, -12, -11, 0, 9, 
	13, 58, 59, -30, -29, -17, 32, 34, 
	35, 39, 44, 46, 63, -128, -63, -62, 
	-33, -32, -18, -16, -12, -11, 0, 9, 
	13, 58, 59, -30, -29, -17, 35, 46, 
	47, 58, 63, 95, -62, -33, -32, -18, 
	-16, -12, 45, 57, 65, 90, 97, 122, 
	35, 47, 63, 48, 57, 91, 123, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 125, 48, 57, 
	65, 90, 97, 122, 125, 48, 57, 65, 
	90, 97, 122, 82, 91, 114, 123, 48, 
	57, 65, 90, 97, 122, 84, 91, 116, 
	123, 48, 57, 65, 90, 97, 122, 73, 
	91, 105, 123, 48, 57, 65, 90, 97, 
	122, 83, 91, 115, 123, 48, 57, 65, 
	90, 97, 122, 84, 91, 116, 123, 48, 
	57, 65, 90, 97, 122, 32, 91, 123, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	79, 91, 111, 123, 48, 57, 65, 90, 
	97, 122, 79, 91, 111, 123, 48, 57, 
	65, 90, 97, 122, 75, 91, 107, 123, 
	48, 57, 65, 90, 97, 122, 32, 91, 
	123, 48, 57, 65, 90, 97, 122, 48, 
	57, 79, 91, 111, 123, 48, 57, 65, 
	90, 97, 122, 77, 91, 109, 123, 48, 
	57, 65, 90, 97, 122, 77, 91, 109, 
	123, 48, 57, 65, 90, 97, 122, 69, 
	91, 101, 123, 48, 57, 65, 90, 97, 
	122, 78, 91, 110, 123, 48, 57, 65, 
	90, 97, 122, 84, 91, 116, 123, 48, 
	57, 65, 90, 97, 122, 32, 91, 123, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	77, 91, 109, 123, 48, 57, 65, 90, 
	97, 122, 65, 91, 97, 123, 48, 57, 
	66, 90, 98, 122, 73, 91, 105, 123, 
	48, 57, 65, 90, 97, 122, 76, 91, 
	108, 123, 48, 57, 65, 90, 97, 122, 
	32, 91, 123, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 45, 61, 48, 57, 
	65, 90, 97, 122, 79, 91, 111, 123, 
	48, 57, 65, 90, 97, 122, 82, 91, 
	114, 123, 48, 57, 65, 90, 97, 122, 
	85, 91, 117, 123, 48, 57, 65, 90, 
	97, 122, 77, 91, 109, 123, 48, 57, 
	65, 90, 97, 122, 32, 91, 123, 48, 
	57, 65, 90, 97, 122, 48, 57, 84, 
	91, 116, 123, 48, 57, 65, 90, 97, 
	122, 84, 91, 116, 123, 48, 57, 65, 
	90, 97, 122, 80, 91, 112, 123, 48, 
	57, 65, 90, 97, 122, 58, 83, 91, 
	115, 123, 48, 57, 65, 90, 97, 122, 
	-30, -29, -17, 35, 46, 47, 58, 63, 
	95, -62, -33, -32, -18, -16, -12, 45, 
	57, 65, 90, 97, 122, -30, -29, -17, 
	32, 34, 35, 39, 44, 46, 60, 62, 
	63, 91, 93, -128, -63, -62, -33, -32, 
	-18, -16, -12, -11, 0, 9, 13, 58, 
	59, -30, -29, -17, 32, 34, 35, 39, 
	44, 46, 60, 62, 63, 91, 93, -128, 
	-63, -62, -33, -32, -18, -16, -12, -11, 
	0, 9, 13, 58, 59, -30, -29, -17, 
	32, 34, 35, 39, 44, 46, 63, -128, 
	-63, -62, -33, -32, -18, -16, -12, -11, 
	0, 9, 13, 58, 59, 35, 47, 63, 
	48, 57, 58, 91, 123, 48, 57, 65, 
	90, 97, 122, 79, 91, 111, 123, 48, 
	57, 65, 90, 97, 122, 68, 91, 100, 
	123, 48, 57, 65, 90, 97, 122, 32, 
	91, 123, 48, 57, 65, 90, 97, 122, 
	48, 57, 73, 79, 91, 105, 111, 123, 
	48, 57, 65, 90, 97, 122, 88, 91, 
	120, 123, 48, 57, 65, 90, 97, 122, 
	73, 91, 105, 123, 48, 57, 65, 90, 
	97, 122, 86, 91, 118, 123, 48, 57, 
	65, 90, 97, 122, 32, 91, 123, 48, 
	57, 65, 90, 97, 122, 48, 57, 79, 
	83, 91, 111, 115, 123, 48, 57, 65, 
	90, 97, 122, 76, 91, 108, 123, 48, 
	57, 65, 90, 97, 122, 32, 91, 123, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	84, 91, 116, 123, 48, 57, 65, 90, 
	97, 122, 32, 91, 123, 48, 57, 65, 
	90, 97, 122, 48, 57, 69, 91, 101, 
	123, 48, 57, 65, 90, 97, 122, 67, 
	91, 99, 123, 48, 57, 65, 90, 97, 
	122, 79, 91, 111, 123, 48, 57, 65, 
	90, 97, 122, 82, 91, 114, 123, 48, 
	57, 65, 90, 97, 122, 68, 91, 100, 
	123, 48, 57, 65, 90, 97, 122, 32, 
	91, 123, 48, 57, 65, 90, 97, 122, 
	48, 57, 69, 91, 101, 123, 48, 57, 
	65, 90, 97, 122, 82, 91, 114, 123, 
	48, 57, 65, 90, 97, 122, 73, 91, 
	105, 123, 48, 57, 65, 90, 97, 122, 
	69, 91, 101, 123, 48, 57, 65, 90, 
	97, 122, 83, 91, 115, 123, 48, 57, 
	65, 90, 97, 122, 32, 91, 123, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	79, 91, 97, 111, 123, 48, 57, 66, 
	90, 98, 122, 71, 91, 103, 123, 48, 
	57, 65, 90, 97, 122, 32, 91, 123, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	48, 57, 48, 57, 80, 91, 112, 123, 
	48, 57, 65, 90, 97, 122, 73, 91, 
	105, 123, 48, 57, 65, 90, 97, 122, 
	67, 91, 99, 123, 48, 57, 65, 90, 
	97, 122, 32, 91, 123, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 48, 57, 
	83, 91, 115, 123, 48, 57, 65, 90, 
	97, 122, 69, 91, 101, 123, 48, 57, 
	65, 90, 97, 122, 82, 91, 114, 123, 
	48, 57, 65, 90, 97, 122, 32, 91, 
	123, 48, 57, 65, 90, 97, 122, 48, 
	57, 48, 57, 73, 91, 105, 123, 48, 
	57, 65, 90, 97, 122, 75, 91, 107, 
	123, 48, 57, 65, 90, 97, 122, 73, 
	91, 105, 123, 48, 57, 65, 90, 97, 
	122, 32, 91, 123, 48, 57, 65, 90, 
	97, 122, 48, 57, 47, 66, 67, 69, 
	72, 73, 78, 81, 83, 84, 85, 91, 
	98, 99, 101, 104, 105, 110, 113, 115, 
	116, 117, 0, 9, 10, 32, 0, 9, 
	10, 32, 0, 9, 10, 32, 123, 47, 
	65, 66, 67, 69, 72, 73, 78, 81, 
	83, 84, 85, 97, 98, 99, 101, 104, 
	105, 110, 113, 115, 116, 117, 47, 65, 
	66, 67, 69, 72, 73, 78, 81, 83, 
	84, 85, 97, 98, 99, 101, 104, 105, 
	110, 113, 115, 116, 117, 1088, 994, 995, 
	1007, 1070, 1119, 1151, 962, 991, 992, 1006, 
	1008, 1012, 1025, 1032, 1038, 1055, 1072, 1081, 
	1089, 1114, 1121, 1146, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 961, 962, 991, 992, 1006, 
	1008, 1012, 1013, 1023, 1025, 1032, 1038, 1055, 
	1069, 1071, 1072, 1081, 1089, 1114, 1121, 1146, 
	0, 10, 60, 91, 60, 91, 47, 47, 
	0, 10, 60, 91, 60, 91, 47, 47, 
	60, 91, 47, 67, 84, 99, 116, 47, 
	67, 84, 99, 116, 0
};

static const char _dtext_single_lengths[] = {
	0, 4, 6, 4, 2, 1, 4, 2, 
	2, 2, 2, 1, 4, 2, 1, 2, 
	2, 2, 2, 1, 5, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	4, 2, 2, 2, 2, 1, 4, 2, 
	4, 3, 2, 1, 4, 4, 2, 2, 
	4, 7, 4, 6, 2, 2, 2, 2, 
	2, 4, 7, 4, 6, 2, 2, 2, 
	2, 2, 2, 1, 4, 2, 2, 2, 
	2, 2, 2, 3, 1, 4, 1, 2, 
	5, 5, 4, 2, 2, 2, 2, 1, 
	4, 2, 4, 3, 2, 1, 2, 2, 
	4, 7, 4, 6, 2, 2, 2, 2, 
	2, 4, 7, 4, 6, 2, 2, 2, 
	2, 2, 2, 1, 2, 2, 2, 2, 
	1, 2, 2, 2, 2, 2, 2, 3, 
	1, 4, 1, 1, 4, 2, 2, 3, 
	3, 3, 4, 4, 4, 10, 1, 2, 
	1, 3, 2, 2, 2, 2, 1, 1, 
	2, 1, 3, 2, 2, 2, 2, 1, 
	8, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 4, 4, 6, 6, 
	2, 1, 4, 2, 2, 2, 2, 2, 
	2, 3, 4, 1, 2, 2, 2, 2, 
	1, 6, 2, 1, 2, 2, 2, 2, 
	2, 2, 3, 1, 2, 2, 2, 2, 
	1, 1, 4, 2, 2, 2, 2, 2, 
	1, 6, 1, 1, 1, 1, 4, 2, 
	2, 2, 2, 2, 1, 6, 1, 1, 
	1, 3, 5, 11, 12, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 4, 
	2, 2, 2, 1, 2, 2, 2, 2, 
	2, 1, 2, 2, 2, 2, 1, 2, 
	2, 2, 2, 2, 2, 3, 1, 2, 
	2, 2, 4, 3, 2, 1, 2, 2, 
	2, 2, 2, 2, 1, 0, 2, 5, 
	5, 11, 10, 4, 2, 2, 2, 1, 
	2, 2, 2, 2, 2, 1, 2, 2, 
	2, 2, 2, 2, 3, 1, 2, 2, 
	2, 4, 3, 2, 1, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 4, 2, 
	2, 3, 3, 3, 4, 4, 4, 1, 
	1, 5, 0, 0, 1, 0, 1, 0, 
	2, 0, 0, 0, 14, 0, 0, 1, 
	0, 1, 0, 2, 0, 0, 0, 14, 
	10, 0, 0, 1, 0, 1, 0, 2, 
	0, 0, 0, 2, 2, 2, 3, 1, 
	1, 2, 0, 3, 0, 0, 5, 0, 
	0, 1, 1, 9, 1, 0, 2, 2, 
	3, 0, 0, 1, 4, 3, 2, 2, 
	2, 3, 1, 1, 2, 1, 1, 8, 
	5, 5, 3, 5, 6, 4, 1, 4, 
	4, 4, 1, 6, 3, 5, 5, 5, 
	4, 6, 4, 1, 6, 6, 6, 5, 
	5, 5, 5, 4, 1, 4, 4, 0, 
	5, 3, 5, 3, 6, 5, 5, 5, 
	5, 4, 1, 3, 5, 5, 0, 1, 
	5, 1, 1, 1, 10, 6, 12, 10, 
	6, 4, 6, 6, 6, 5, 1, 1, 
	7, 14, 8, 14, 12, 8, 7, 1, 
	4, 8, 7, 7, 7, 7, 7, 9, 
	8, 7, 8, 7, 7, 9, 7, 7, 
	7, 7, 4, 6, 7, 6, 6, 3, 
	1, 4, 1, 1, 1, 0, 1, 0, 
	1, 0, 1, 0, 2, 1, 0, 1, 
	1, 2, 0, 3, 0, 0, 5, 0, 
	0, 1, 1, 9, 1, 0, 2, 2, 
	3, 0, 0, 0, 1, 0, 1, 0, 
	2, 0, 0, 0, 14, 0, 0, 1, 
	0, 1, 0, 2, 0, 0, 0, 14, 
	10, 0, 0, 1, 0, 1, 0, 2, 
	0, 0, 0, 0, 2, 2, 2, 2, 
	2, 2, 1, 1, 0, 1, 0, 1, 
	2, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 6, 2, 2, 2, 2, 1, 
	1, 0, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 0, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 0, 1, 0, 2, 0, 
	3, 0, 2, 2, 2, 2, 2, 1, 
	1, 0, 1, 0, 16, 1, 1, 3, 
	1, 3, 1, 4, 2, 2, 2, 2, 
	1, 4, 2, 4, 3, 2, 1, 4, 
	4, 2, 2, 4, 7, 4, 6, 2, 
	2, 2, 2, 2, 4, 7, 4, 6, 
	2, 2, 2, 3, 1, 1, 2, 3, 
	4, 3, 4, 1, 1, 2, 2, 2, 
	2, 2, 2, 1, 4, 2, 2, 2, 
	2, 1, 3, 2, 2, 2, 2, 2, 
	3, 1, 2, 1, 3, 2, 4, 3, 
	8, 4, 3, 3, 5, 6, 3, 1, 
	2, 2, 2, 1, 6, 2, 2, 2, 
	3, 1, 1, 2, 1, 4, 4, 3, 
	2, 2, 2, 3, 1, 1, 2, 1, 
	2, 2, 2, 3, 1, 1, 2, 1, 
	6, 4, 3, 1, 2, 2, 2, 1, 
	5, 6, 6, 6, 5, 2, 2, 2, 
	3, 1, 1, 2, 1, 16, 3, 4, 
	1, 5, 2, 2, 2, 2, 1, 1, 
	2, 4, 2, 2, 2, 1, 1, 4, 
	3, 4, 3, 4, 5, 6, 5, 2, 
	2, 2, 3, 1, 1, 2, 1, 5, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 4, 2, 2, 2, 2, 1, 
	4, 2, 4, 3, 2, 1, 2, 2, 
	4, 7, 4, 6, 4, 1, 2, 2, 
	2, 2, 4, 7, 4, 6, 2, 2, 
	2, 3, 1, 1, 2, 3, 1, 2, 
	2, 2, 2, 2, 2, 1, 5, 2, 
	2, 2, 2, 2, 3, 1, 2, 2, 
	2, 2, 1, 2, 1, 1, 0, 1, 
	0, 8, 8, 8, 8, 9, 9, 9, 
	8, 10, 10, 8, 11, 8, 8, 9, 
	9, 9, 8, 10, 10, 11, 8, 10, 
	0, 1, 0, 1, 0, 2, 0, 0, 
	0, 4, 1, 2, 2, 2, 2, 1, 
	1, 2, 2, 2, 2, 1, 1, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	1, 8, 2, 2, 2, 1, 2, 2, 
	2, 1, 2, 2, 2, 1, 1, 2, 
	2, 5, 2, 3, 3, 4, 3, 4, 
	3, 3, 4, 3, 2, 2, 2, 2, 
	3, 2, 3, 3, 4, 3, 4, 3, 
	3, 4, 3, 8, 2, 2, 2, 3, 
	2, 3, 3, 4, 3, 4, 3, 3, 
	4, 3, 3, 2, 3, 3, 4, 3, 
	4, 3, 3, 4, 3, 5, 2, 3, 
	3, 4, 3, 4, 3, 3, 4, 3, 
	2, 2, 3, 2, 3, 3, 4, 3, 
	4, 3, 3, 4, 3, 3, 2, 3, 
	3, 4, 3, 4, 3, 3, 4, 3, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	1, 8, 2, 2, 2, 1, 2, 2, 
	2, 1, 2, 2, 2, 1, 1, 2, 
	2, 5, 2, 3, 3, 4, 3, 4, 
	3, 3, 4, 3, 2, 2, 2, 2, 
	3, 2, 3, 3, 4, 3, 4, 3, 
	3, 4, 3, 8, 2, 2, 2, 3, 
	2, 3, 3, 4, 3, 4, 3, 3, 
	4, 3, 3, 2, 3, 3, 4, 3, 
	4, 3, 3, 4, 3, 5, 2, 3, 
	3, 4, 3, 4, 3, 3, 4, 3, 
	2, 2, 3, 2, 3, 3, 4, 3, 
	4, 3, 3, 4, 3, 3, 2, 3, 
	3, 4, 3, 4, 3, 3, 4, 3, 
	10, 4, 6, 2, 3, 3, 5, 16, 
	1, 4, 4, 1, 1, 1, 1, 4, 
	1, 0, 2, 14, 1, 3, 11, 9, 
	40, 0, 0, 0, 0, 4, 4, 10, 
	2, 6, 3, 5, 2, 2, 2, 2, 
	1, 14, 14, 10, 9, 3, 2, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 4, 4, 4, 
	4, 4, 3, 0, 4, 4, 4, 3, 
	0, 4, 4, 4, 4, 4, 4, 3, 
	0, 4, 4, 4, 4, 3, 1, 2, 
	4, 4, 4, 4, 3, 0, 4, 4, 
	4, 5, 9, 14, 14, 10, 3, 3, 
	4, 4, 3, 0, 6, 4, 4, 4, 
	3, 0, 6, 4, 3, 0, 4, 3, 
	0, 4, 4, 4, 4, 4, 3, 0, 
	4, 4, 4, 4, 4, 3, 0, 6, 
	4, 3, 0, 0, 0, 4, 4, 4, 
	3, 1, 0, 4, 4, 4, 3, 0, 
	0, 4, 4, 4, 3, 0, 22, 4, 
	4, 4, 1, 23, 24, 6, 8, 8, 
	4, 2, 1, 1, 4, 2, 1, 1, 
	2, 5, 5
};

static const char _dtext_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 1, 1, 1, 2, 1, 3, 
	1, 3, 4, 1, 7, 1, 1, 1, 
	2, 1, 3, 1, 3, 4, 1, 7, 
	7, 1, 1, 1, 2, 1, 3, 1, 
	3, 4, 1, 0, 0, 0, 0, 0, 
	0, 6, 1, 6, 1, 1, 6, 1, 
	1, 1, 1, 6, 1, 6, 1, 1, 
	1, 1, 1, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 1, 
	1, 1, 1, 2, 3, 0, 0, 1, 
	1, 1, 0, 3, 3, 1, 1, 1, 
	2, 4, 1, 0, 4, 4, 4, 1, 
	1, 1, 1, 1, 0, 0, 0, 1, 
	3, 0, 3, 3, 1, 1, 1, 1, 
	1, 1, 0, 3, 0, 0, 1, 0, 
	0, 0, 0, 0, 2, 1, 1, 1, 
	1, 0, 1, 1, 1, 1, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 0, 1, 1, 1, 1, 3, 
	0, 0, 0, 0, 0, 1, 0, 1, 
	0, 1, 0, 1, 3, 0, 1, 0, 
	0, 6, 1, 6, 1, 1, 6, 1, 
	1, 1, 1, 6, 1, 6, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 3, 
	1, 3, 4, 1, 7, 1, 1, 1, 
	2, 1, 3, 1, 3, 4, 1, 7, 
	7, 1, 1, 1, 2, 1, 3, 1, 
	3, 4, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 1, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 1, 0, 1, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 4, 
	1, 11, 11, 12, 12, 12, 12, 12, 
	17, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 17, 12, 12, 12, 12, 11, 
	1, 1, 2, 1, 3, 1, 3, 4, 
	1, 8, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 3, 0, 3, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 3, 3, 0, 3, 0, 0, 0, 
	0, 0, 3, 0, 0, 0, 0, 0, 
	3, 3, 0, 3, 0, 0, 0, 0, 
	0, 3, 0, 3, 3, 0, 3, 0, 
	0, 0, 0, 0, 3, 0, 3, 3, 
	0, 3, 0, 0, 0, 0, 0, 3, 
	0, 0, 0, 3, 3, 0, 3, 0, 
	0, 0, 0, 0, 3, 0, 3, 3, 
	0, 3, 0, 0, 0, 0, 0, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 3, 0, 3, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 3, 3, 0, 3, 0, 0, 0, 
	0, 0, 3, 0, 0, 0, 0, 0, 
	3, 3, 0, 3, 0, 0, 0, 0, 
	0, 3, 0, 3, 3, 0, 3, 0, 
	0, 0, 0, 0, 3, 0, 3, 3, 
	0, 3, 0, 0, 0, 0, 0, 3, 
	0, 0, 0, 3, 3, 0, 3, 0, 
	0, 0, 0, 0, 3, 0, 3, 3, 
	0, 3, 0, 0, 0, 0, 0, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 1, 1, 1, 1, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	12, 1, 3, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 7, 7, 7, 6, 1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 1, 3, 3, 3, 3, 
	1, 3, 3, 3, 3, 3, 3, 3, 
	1, 3, 3, 3, 3, 3, 1, 3, 
	3, 3, 3, 3, 3, 1, 3, 3, 
	3, 3, 6, 7, 7, 7, 1, 3, 
	3, 3, 3, 1, 3, 3, 3, 3, 
	3, 1, 3, 3, 3, 1, 3, 3, 
	1, 3, 3, 3, 3, 3, 3, 1, 
	3, 3, 3, 3, 3, 3, 1, 3, 
	3, 3, 1, 1, 1, 3, 3, 3, 
	3, 1, 1, 3, 3, 3, 3, 1, 
	1, 3, 3, 3, 3, 1, 0, 0, 
	0, 0, 0, 0, 0, 8, 11, 11, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
};

static const short _dtext_index_offsets[] = {
	0, 0, 5, 12, 17, 20, 22, 27, 
	30, 33, 36, 39, 41, 46, 49, 51, 
	54, 57, 60, 63, 65, 71, 75, 78, 
	81, 84, 87, 90, 93, 96, 99, 102, 
	104, 109, 112, 115, 118, 121, 123, 128, 
	131, 136, 140, 146, 151, 156, 161, 164, 
	167, 172, 180, 185, 192, 195, 198, 201, 
	204, 207, 212, 220, 225, 232, 235, 238, 
	241, 244, 247, 250, 252, 257, 260, 263, 
	266, 269, 272, 275, 279, 281, 286, 288, 
	291, 300, 309, 314, 317, 320, 323, 326, 
	328, 333, 336, 341, 345, 351, 356, 359, 
	362, 367, 375, 380, 387, 390, 393, 396, 
	399, 402, 407, 415, 420, 427, 430, 433, 
	436, 439, 442, 445, 447, 450, 453, 456, 
	459, 461, 464, 467, 470, 473, 476, 479, 
	483, 485, 490, 492, 494, 502, 505, 508, 
	512, 516, 520, 525, 533, 538, 549, 551, 
	554, 556, 560, 563, 566, 569, 572, 574, 
	576, 579, 581, 585, 588, 591, 594, 597, 
	599, 608, 610, 612, 614, 616, 618, 620, 
	622, 624, 626, 628, 630, 635, 640, 647, 
	654, 657, 659, 664, 667, 670, 673, 676, 
	679, 682, 686, 691, 693, 696, 699, 702, 
	705, 707, 714, 717, 719, 722, 725, 728, 
	731, 734, 737, 741, 743, 746, 749, 752, 
	755, 757, 759, 764, 767, 770, 773, 776, 
	779, 781, 788, 790, 792, 794, 796, 801, 
	804, 807, 810, 813, 816, 818, 825, 827, 
	829, 831, 835, 841, 853, 866, 869, 872, 
	875, 878, 881, 884, 887, 890, 893, 895, 
	900, 903, 906, 909, 911, 914, 917, 920, 
	923, 926, 928, 931, 934, 937, 940, 942, 
	945, 948, 951, 954, 957, 960, 964, 966, 
	969, 972, 975, 980, 984, 990, 995, 998, 
	1001, 1004, 1007, 1010, 1013, 1015, 1017, 1020, 
	1029, 1038, 1050, 1061, 1066, 1069, 1072, 1075, 
	1077, 1080, 1083, 1086, 1089, 1092, 1094, 1097, 
	1100, 1103, 1106, 1109, 1112, 1116, 1118, 1121, 
	1124, 1127, 1132, 1136, 1142, 1147, 1150, 1153, 
	1156, 1159, 1162, 1165, 1167, 1169, 1171, 1179, 
	1182, 1185, 1189, 1193, 1197, 1202, 1210, 1215, 
	1217, 1219, 1225, 1227, 1229, 1232, 1235, 1238, 
	1242, 1246, 1250, 1255, 1257, 1279, 1281, 1283, 
	1286, 1289, 1292, 1296, 1300, 1304, 1309, 1311, 
	1333, 1351, 1353, 1355, 1358, 1361, 1364, 1368, 
	1372, 1376, 1381, 1383, 1386, 1389, 1392, 1396, 
	1398, 1400, 1409, 1411, 1421, 1423, 1425, 1437, 
	1439, 1441, 1444, 1447, 1463, 1466, 1473, 1477, 
	1481, 1486, 1488, 1490, 1492, 1497, 1502, 1505, 
	1508, 1511, 1515, 1517, 1519, 1523, 1525, 1527, 
	1537, 1544, 1551, 1556, 1564, 1574, 1579, 1581, 
	1587, 1593, 1599, 1601, 1611, 1618, 1625, 1632, 
	1639, 1646, 1657, 1663, 1665, 1676, 1687, 1698, 
	1705, 1712, 1719, 1726, 1732, 1734, 1739, 1744, 
	1746, 1755, 1759, 1768, 1775, 1783, 1790, 1797, 
	1804, 1811, 1817, 1819, 1826, 1832, 1838, 1840, 
	1842, 1848, 1850, 1852, 1854, 1867, 1875, 1889, 
	1901, 1909, 1914, 1922, 1930, 1938, 1945, 1947, 
	1949, 1958, 1974, 1984, 2000, 2014, 2024, 2033, 
	2035, 2040, 2050, 2059, 2068, 2077, 2086, 2095, 
	2106, 2116, 2125, 2135, 2144, 2153, 2167, 2176, 
	2185, 2194, 2203, 2208, 2216, 2225, 2233, 2241, 
	2248, 2250, 2255, 2257, 2259, 2261, 2263, 2265, 
	2267, 2269, 2271, 2273, 2275, 2281, 2283, 2285, 
	2287, 2289, 2298, 2300, 2310, 2312, 2314, 2326, 
	2328, 2330, 2333, 2336, 2352, 2355, 2362, 2366, 
	2370, 2375, 2377, 2379, 2381, 2384, 2387, 2390, 
	2394, 2398, 2402, 2407, 2409, 2431, 2433, 2435, 
	2438, 2441, 2444, 2448, 2452, 2456, 2461, 2463, 
	2485, 2503, 2505, 2507, 2510, 2513, 2516, 2520, 
	2524, 2528, 2533, 2535, 2537, 2540, 2543, 2546, 
	2549, 2552, 2555, 2557, 2559, 2561, 2563, 2565, 
	2568, 2571, 2573, 2575, 2577, 2579, 2581, 2583, 
	2585, 2587, 2589, 2596, 2599, 2602, 2605, 2608, 
	2610, 2612, 2614, 2617, 2620, 2623, 2626, 2629, 
	2632, 2635, 2638, 2641, 2644, 2646, 2648, 2650, 
	2653, 2656, 2659, 2662, 2665, 2668, 2671, 2674, 
	2677, 2680, 2682, 2684, 2686, 2688, 2690, 2693, 
	2695, 2699, 2701, 2704, 2707, 2710, 2713, 2716, 
	2718, 2720, 2722, 2724, 2726, 2743, 2745, 2747, 
	2751, 2753, 2757, 2759, 2764, 2767, 2770, 2773, 
	2776, 2778, 2783, 2786, 2791, 2795, 2801, 2806, 
	2811, 2816, 2819, 2822, 2827, 2835, 2840, 2847, 
	2850, 2853, 2856, 2859, 2862, 2867, 2875, 2880, 
	2887, 2890, 2893, 2896, 2900, 2902, 2904, 2908, 
	2913, 2919, 2923, 2928, 2930, 2932, 2935, 2938, 
	2941, 2944, 2947, 2950, 2952, 2957, 2960, 2963, 
	2966, 2969, 2971, 2975, 2978, 2981, 2984, 2987, 
	2990, 2994, 2996, 2999, 3001, 3005, 3008, 3013, 
	3017, 3026, 3031, 3036, 3040, 3046, 3053, 3057, 
	3059, 3062, 3065, 3068, 3070, 3077, 3080, 3083, 
	3086, 3090, 3092, 3094, 3098, 3100, 3106, 3111, 
	3116, 3119, 3122, 3125, 3129, 3131, 3133, 3137, 
	3139, 3142, 3145, 3148, 3152, 3154, 3156, 3160, 
	3162, 3169, 3175, 3179, 3181, 3184, 3187, 3190, 
	3192, 3199, 3207, 3215, 3223, 3230, 3233, 3236, 
	3239, 3243, 3245, 3247, 3251, 3253, 3270, 3274, 
	3279, 3281, 3287, 3290, 3293, 3296, 3299, 3301, 
	3303, 3306, 3311, 3314, 3317, 3320, 3322, 3324, 
	3329, 3334, 3340, 3344, 3349, 3355, 3362, 3368, 
	3371, 3374, 3377, 3381, 3383, 3385, 3389, 3391, 
	3397, 3400, 3403, 3406, 3409, 3412, 3415, 3418, 
	3421, 3423, 3425, 3430, 3433, 3436, 3439, 3442, 
	3444, 3449, 3452, 3457, 3461, 3467, 3472, 3475, 
	3478, 3483, 3491, 3496, 3503, 3508, 3510, 3513, 
	3516, 3519, 3522, 3527, 3535, 3540, 3547, 3550, 
	3553, 3556, 3560, 3562, 3564, 3568, 3573, 3575, 
	3578, 3581, 3584, 3587, 3590, 3593, 3595, 3601, 
	3604, 3607, 3610, 3613, 3616, 3620, 3622, 3625, 
	3628, 3631, 3634, 3636, 3639, 3641, 3643, 3648, 
	3654, 3656, 3676, 3696, 3717, 3738, 3760, 3782, 
	3804, 3830, 3853, 3876, 3897, 3921, 3942, 3963, 
	3985, 4007, 4029, 4055, 4078, 4101, 4125, 4146, 
	4168, 4170, 4173, 4176, 4179, 4183, 4187, 4191, 
	4196, 4198, 4211, 4213, 4216, 4219, 4222, 4225, 
	4227, 4229, 4232, 4235, 4238, 4241, 4243, 4245, 
	4248, 4251, 4254, 4257, 4260, 4263, 4266, 4268, 
	4270, 4273, 4276, 4279, 4282, 4285, 4288, 4291, 
	4293, 4298, 4301, 4304, 4307, 4310, 4313, 4316, 
	4319, 4321, 4330, 4333, 4336, 4339, 4341, 4344, 
	4347, 4350, 4352, 4355, 4358, 4361, 4363, 4365, 
	4368, 4371, 4377, 4383, 4390, 4394, 4402, 4406, 
	4411, 4415, 4419, 4424, 4431, 4434, 4437, 4440, 
	4443, 4447, 4453, 4460, 4464, 4472, 4476, 4481, 
	4485, 4489, 4494, 4501, 4510, 4513, 4516, 4519, 
	4523, 4529, 4536, 4540, 4548, 4552, 4557, 4561, 
	4565, 4570, 4577, 4581, 4587, 4594, 4598, 4606, 
	4610, 4615, 4619, 4623, 4628, 4635, 4641, 4647, 
	4654, 4658, 4666, 4670, 4675, 4679, 4683, 4688, 
	4695, 4698, 4701, 4705, 4711, 4718, 4722, 4730, 
	4734, 4739, 4743, 4747, 4752, 4759, 4763, 4769, 
	4776, 4780, 4788, 4792, 4797, 4801, 4805, 4810, 
	4817, 4822, 4825, 4828, 4831, 4834, 4837, 4840, 
	4843, 4845, 4854, 4857, 4860, 4863, 4865, 4868, 
	4871, 4874, 4876, 4879, 4882, 4885, 4887, 4889, 
	4892, 4895, 4901, 4907, 4914, 4918, 4926, 4930, 
	4935, 4939, 4943, 4948, 4955, 4958, 4961, 4964, 
	4967, 4971, 4977, 4984, 4988, 4996, 5000, 5005, 
	5009, 5013, 5018, 5025, 5034, 5037, 5040, 5043, 
	5047, 5053, 5060, 5064, 5072, 5076, 5081, 5085, 
	5089, 5094, 5101, 5105, 5111, 5118, 5122, 5130, 
	5134, 5139, 5143, 5147, 5152, 5159, 5165, 5171, 
	5178, 5182, 5190, 5194, 5199, 5203, 5207, 5212, 
	5219, 5222, 5225, 5229, 5235, 5242, 5246, 5254, 
	5258, 5263, 5267, 5271, 5276, 5283, 5287, 5293, 
	5300, 5304, 5312, 5316, 5321, 5325, 5329, 5334, 
	5341, 5352, 5357, 5364, 5367, 5371, 5375, 5381, 
	5398, 5401, 5406, 5411, 5414, 5417, 5420, 5423, 
	5428, 5431, 5433, 5436, 5451, 5453, 5457, 5469, 
	5479, 5532, 5534, 5538, 5540, 5542, 5547, 5552, 
	5563, 5566, 5573, 5577, 5583, 5586, 5589, 5592, 
	5595, 5597, 5619, 5641, 5659, 5675, 5680, 5686, 
	5690, 5694, 5698, 5702, 5706, 5710, 5714, 5718, 
	5722, 5726, 5730, 5734, 5739, 5744, 5752, 5760, 
	5768, 5776, 5784, 5791, 5793, 5801, 5809, 5817, 
	5824, 5826, 5834, 5842, 5850, 5858, 5866, 5874, 
	5881, 5883, 5891, 5899, 5907, 5915, 5922, 5925, 
	5931, 5939, 5947, 5955, 5963, 5970, 5972, 5980, 
	5988, 5996, 6005, 6021, 6043, 6065, 6083, 6088, 
	6095, 6103, 6111, 6118, 6120, 6130, 6138, 6146, 
	6154, 6161, 6163, 6173, 6181, 6188, 6190, 6198, 
	6205, 6207, 6215, 6223, 6231, 6239, 6247, 6254, 
	6256, 6264, 6272, 6280, 6288, 6296, 6303, 6305, 
	6315, 6323, 6330, 6332, 6334, 6336, 6344, 6352, 
	6360, 6367, 6370, 6372, 6380, 6388, 6396, 6403, 
	6405, 6407, 6415, 6423, 6431, 6438, 6440, 6463, 
	6468, 6473, 6478, 6480, 6504, 6529, 6544, 6564, 
	6584, 6589, 6592, 6594, 6596, 6601, 6604, 6606, 
	6608, 6611, 6617
};

static const short _dtext_indicies[] = {
	1, 2, 1, 2, 0, 1, 4, 1, 
	4, 5, 6, 3, 7, 8, 7, 8, 
	3, 9, 9, 3, 10, 3, 11, 10, 
	11, 10, 3, 12, 12, 3, 13, 13, 
	3, 14, 14, 3, 15, 15, 3, 16, 
	3, 17, 18, 17, 18, 3, 19, 19, 
	3, 10, 3, 20, 20, 3, 21, 21, 
	3, 22, 22, 3, 23, 23, 3, 16, 
	3, 3, 25, 3, 3, 25, 24, 26, 
	26, 27, 3, 28, 28, 3, 29, 29, 
	3, 30, 30, 3, 31, 31, 3, 32, 
	32, 3, 33, 33, 3, 34, 34, 3, 
	35, 35, 3, 36, 36, 3, 37, 3, 
	38, 39, 38, 39, 3, 40, 40, 3, 
	41, 41, 3, 42, 42, 3, 43, 43, 
	3, 44, 3, 45, 46, 45, 46, 3, 
	47, 47, 3, 48, 48, 49, 50, 3, 
	48, 48, 49, 3, 49, 49, 51, 51, 
	51, 3, 53, 52, 52, 52, 3, 55, 
	56, 55, 56, 54, 58, 59, 58, 59, 
	57, 60, 60, 3, 61, 61, 3, 62, 
	62, 63, 64, 3, 3, 66, 3, 3, 
	66, 67, 68, 65, 3, 3, 3, 70, 
	69, 3, 67, 3, 3, 67, 68, 65, 
	71, 71, 3, 72, 72, 3, 73, 73, 
	3, 74, 74, 3, 75, 75, 3, 76, 
	76, 77, 78, 3, 3, 80, 3, 3, 
	80, 81, 82, 79, 3, 3, 3, 84, 
	83, 3, 81, 3, 3, 81, 82, 79, 
	85, 85, 3, 86, 86, 3, 87, 87, 
	3, 88, 88, 3, 89, 89, 3, 90, 
	90, 3, 91, 3, 93, 94, 93, 94, 
	92, 95, 95, 3, 96, 96, 3, 97, 
	97, 3, 98, 98, 3, 99, 99, 3, 
	100, 100, 3, 101, 102, 102, 3, 101, 
	3, 12, 103, 12, 103, 3, 104, 3, 
	105, 106, 3, 107, 107, 107, 107, 107, 
	107, 107, 107, 3, 108, 108, 108, 109, 
	108, 108, 108, 108, 3, 110, 111, 110, 
	111, 3, 112, 112, 3, 113, 113, 3, 
	114, 114, 3, 115, 115, 3, 44, 3, 
	116, 117, 116, 117, 3, 118, 118, 3, 
	119, 119, 120, 50, 3, 119, 119, 120, 
	3, 120, 120, 121, 121, 121, 3, 53, 
	122, 122, 122, 3, 123, 123, 3, 124, 
	124, 3, 125, 125, 126, 64, 3, 3, 
	128, 3, 3, 128, 129, 68, 127, 3, 
	3, 3, 70, 130, 3, 129, 3, 3, 
	129, 68, 127, 131, 131, 3, 132, 132, 
	3, 133, 133, 3, 134, 134, 3, 135, 
	135, 3, 136, 136, 137, 78, 3, 3, 
	139, 3, 3, 139, 140, 82, 138, 3, 
	3, 3, 84, 141, 3, 140, 3, 3, 
	140, 82, 138, 142, 142, 3, 143, 143, 
	3, 144, 144, 3, 145, 145, 3, 146, 
	146, 3, 147, 147, 3, 91, 3, 148, 
	148, 3, 149, 149, 3, 150, 150, 3, 
	151, 151, 3, 37, 3, 152, 152, 3, 
	153, 153, 3, 154, 154, 3, 155, 155, 
	3, 156, 156, 3, 157, 157, 3, 158, 
	101, 158, 3, 101, 3, 20, 159, 20, 
	159, 3, 104, 3, 160, 3, 161, 162, 
	161, 162, 163, 163, 163, 3, 165, 165, 
	164, 167, 167, 166, 167, 167, 168, 166, 
	167, 167, 169, 166, 167, 167, 170, 166, 
	171, 170, 171, 170, 166, 172, 173, 172, 
	173, 174, 174, 174, 3, 175, 176, 175, 
	176, 3, 178, 179, 180, 181, 182, 178, 
	179, 180, 181, 182, 177, 183, 177, 180, 
	180, 177, 184, 177, 185, 186, 186, 177, 
	187, 187, 177, 188, 188, 177, 189, 189, 
	177, 178, 178, 177, 190, 177, 191, 177, 
	192, 192, 177, 193, 177, 194, 195, 195, 
	177, 196, 196, 177, 197, 197, 177, 198, 
	198, 177, 199, 199, 177, 200, 177, 201, 
	202, 203, 204, 201, 202, 203, 204, 177, 
	183, 177, 184, 177, 185, 177, 190, 177, 
	191, 177, 193, 177, 194, 177, 200, 177, 
	206, 205, 207, 205, 209, 208, 210, 211, 
	210, 211, 205, 211, 213, 211, 213, 212, 
	210, 215, 210, 215, 216, 217, 214, 218, 
	219, 220, 218, 219, 220, 214, 221, 221, 
	214, 222, 214, 223, 222, 223, 222, 214, 
	224, 224, 214, 225, 225, 214, 226, 226, 
	214, 227, 227, 214, 228, 228, 214, 229, 
	229, 214, 230, 231, 231, 214, 232, 230, 
	232, 230, 214, 230, 214, 233, 233, 214, 
	234, 234, 214, 235, 235, 214, 236, 236, 
	214, 237, 214, 238, 239, 240, 238, 239, 
	240, 214, 241, 241, 214, 222, 214, 242, 
	242, 214, 243, 243, 214, 244, 244, 214, 
	245, 245, 214, 246, 246, 214, 247, 247, 
	214, 248, 230, 248, 214, 230, 214, 249, 
	249, 214, 250, 250, 214, 251, 251, 214, 
	252, 252, 214, 237, 214, 254, 253, 255, 
	256, 255, 256, 253, 257, 257, 253, 258, 
	258, 205, 259, 259, 205, 260, 260, 205, 
	261, 261, 205, 262, 205, 263, 264, 265, 
	263, 264, 265, 205, 266, 205, 267, 205, 
	268, 205, 269, 253, 270, 271, 270, 271, 
	253, 272, 272, 253, 273, 273, 205, 274, 
	274, 205, 275, 275, 205, 276, 276, 205, 
	262, 205, 277, 278, 279, 277, 278, 279, 
	205, 266, 205, 267, 205, 268, 205, 280, 
	280, 281, 214, 214, 283, 214, 214, 283, 
	282, 284, 285, 218, 286, 219, 220, 285, 
	218, 286, 219, 220, 214, 287, 288, 289, 
	290, 291, 256, 287, 288, 289, 290, 291, 
	256, 214, 292, 292, 214, 293, 293, 205, 
	294, 294, 205, 295, 295, 205, 296, 296, 
	205, 297, 297, 205, 298, 298, 205, 299, 
	299, 205, 300, 300, 205, 301, 205, 257, 
	302, 257, 302, 205, 303, 303, 205, 304, 
	304, 205, 305, 305, 205, 306, 205, 307, 
	307, 214, 308, 308, 205, 309, 309, 205, 
	310, 310, 205, 311, 311, 205, 312, 205, 
	313, 313, 205, 314, 314, 205, 315, 315, 
	205, 316, 316, 205, 301, 205, 317, 317, 
	214, 318, 318, 205, 319, 319, 205, 320, 
	320, 205, 321, 321, 205, 322, 322, 205, 
	323, 324, 324, 205, 323, 205, 325, 325, 
	214, 326, 326, 214, 327, 327, 214, 328, 
	328, 329, 330, 214, 328, 328, 329, 214, 
	329, 329, 331, 331, 331, 214, 333, 332, 
	332, 332, 214, 334, 334, 214, 335, 335, 
	214, 336, 336, 214, 337, 337, 214, 338, 
	338, 214, 339, 339, 214, 330, 214, 340, 
	214, 341, 342, 214, 343, 343, 343, 343, 
	343, 343, 343, 343, 214, 344, 344, 344, 
	345, 344, 344, 344, 344, 214, 346, 347, 
	238, 348, 239, 240, 347, 238, 348, 239, 
	240, 214, 349, 350, 296, 351, 271, 349, 
	350, 296, 351, 271, 214, 272, 352, 272, 
	352, 205, 353, 353, 205, 354, 354, 205, 
	355, 355, 205, 306, 205, 356, 356, 205, 
	357, 357, 205, 358, 358, 205, 359, 359, 
	205, 360, 360, 205, 312, 205, 361, 361, 
	214, 362, 362, 205, 363, 363, 205, 364, 
	364, 205, 365, 365, 205, 366, 366, 205, 
	367, 323, 367, 205, 323, 205, 368, 368, 
	214, 369, 369, 214, 370, 370, 214, 371, 
	371, 372, 330, 214, 371, 371, 372, 214, 
	372, 372, 373, 373, 373, 214, 333, 374, 
	374, 374, 214, 375, 375, 214, 376, 376, 
	214, 377, 377, 214, 378, 378, 214, 379, 
	379, 214, 380, 380, 214, 330, 214, 381, 
	214, 382, 214, 383, 384, 383, 384, 385, 
	385, 385, 214, 387, 387, 386, 389, 389, 
	388, 389, 389, 390, 388, 389, 389, 391, 
	388, 389, 389, 392, 388, 393, 392, 393, 
	392, 388, 394, 395, 394, 395, 396, 396, 
	396, 214, 397, 398, 397, 398, 214, 400, 
	399, 401, 212, 402, 403, 404, 405, 404, 
	212, 407, 406, 408, 406, 409, 408, 406, 
	407, 407, 406, 410, 408, 406, 407, 407, 
	407, 406, 411, 412, 408, 406, 407, 407, 
	407, 406, 407, 407, 407, 407, 406, 413, 
	406, 414, 415, 416, 406, 418, 406, 418, 
	418, 418, 406, 406, 418, 406, 406, 406, 
	408, 413, 417, 406, 406, 418, 407, 419, 
	406, 420, 406, 421, 420, 406, 419, 419, 
	406, 422, 420, 406, 419, 419, 419, 406, 
	423, 424, 420, 406, 419, 419, 419, 406, 
	419, 419, 419, 419, 406, 425, 406, 426, 
	427, 428, 406, 430, 407, 430, 430, 430, 
	406, 406, 431, 406, 406, 406, 420, 425, 
	429, 406, 406, 430, 419, 434, 435, 436, 
	205, 431, 407, 431, 431, 431, 431, 205, 
	432, 433, 437, 205, 205, 431, 438, 438, 
	205, 432, 205, 439, 432, 205, 438, 438, 
	205, 440, 432, 205, 438, 438, 438, 205, 
	441, 442, 432, 205, 438, 438, 438, 205, 
	438, 438, 438, 438, 205, 433, 205, 443, 
	443, 212, 444, 444, 212, 445, 445, 212, 
	446, 447, 447, 212, 448, 212, 449, 212, 
	453, 453, 450, 451, 452, 453, 453, 453, 
	212, 453, 212, 453, 454, 453, 450, 451, 
	452, 453, 453, 453, 212, 450, 212, 451, 
	212, 457, 458, 459, 461, 461, 455, 456, 
	460, 461, 461, 461, 205, 461, 205, 455, 
	205, 462, 455, 205, 463, 461, 205, 457, 
	458, 459, 407, 454, 419, 464, 431, 461, 
	455, 456, 460, 461, 461, 461, 205, 465, 
	455, 205, 463, 461, 463, 461, 463, 461, 
	205, 466, 467, 455, 205, 463, 463, 461, 
	205, 463, 463, 463, 461, 205, 456, 205, 
	468, 205, 446, 212, 469, 469, 470, 470, 
	212, 212, 212, 472, 212, 471, 473, 473, 
	212, 474, 474, 212, 475, 475, 212, 476, 
	477, 477, 212, 478, 212, 479, 212, 212, 
	212, 212, 471, 476, 212, 480, 208, 482, 
	482, 484, 485, 486, 487, 205, 488, 483, 
	481, 490, 490, 492, 493, 494, 491, 489, 
	495, 495, 496, 497, 498, 491, 489, 491, 
	205, 205, 491, 489, 490, 490, 492, 493, 
	494, 491, 499, 489, 500, 501, 502, 504, 
	502, 505, 503, 503, 503, 205, 506, 506, 
	497, 498, 205, 507, 205, 509, 509, 510, 
	205, 205, 508, 512, 512, 513, 205, 205, 
	511, 514, 514, 515, 205, 205, 511, 516, 
	205, 506, 517, 502, 497, 502, 498, 503, 
	503, 503, 205, 502, 502, 502, 503, 503, 
	503, 205, 490, 490, 492, 493, 518, 491, 
	489, 519, 519, 520, 521, 205, 205, 508, 
	522, 522, 523, 524, 205, 205, 508, 512, 
	512, 513, 205, 205, 525, 511, 526, 527, 
	528, 530, 528, 205, 205, 529, 529, 529, 
	511, 531, 531, 532, 205, 205, 511, 533, 
	205, 531, 534, 528, 532, 528, 205, 205, 
	529, 529, 529, 511, 512, 535, 528, 513, 
	528, 205, 205, 529, 529, 529, 511, 514, 
	536, 528, 515, 528, 205, 205, 529, 529, 
	529, 511, 490, 490, 492, 493, 537, 491, 
	489, 509, 509, 538, 510, 205, 205, 508, 
	512, 512, 513, 539, 205, 205, 511, 512, 
	512, 540, 513, 205, 205, 511, 512, 512, 
	513, 541, 205, 511, 542, 205, 543, 543, 
	544, 493, 205, 545, 545, 546, 497, 205, 
	547, 205, 548, 549, 550, 504, 550, 551, 
	551, 551, 205, 552, 552, 497, 205, 552, 
	553, 550, 497, 550, 551, 551, 551, 205, 
	550, 550, 550, 551, 551, 551, 205, 490, 
	490, 492, 554, 493, 555, 491, 489, 509, 
	509, 556, 510, 205, 205, 508, 557, 557, 
	558, 559, 205, 205, 511, 560, 560, 561, 
	532, 205, 205, 511, 490, 490, 492, 493, 
	562, 491, 489, 509, 509, 510, 563, 205, 
	508, 542, 205, 565, 566, 567, 564, 564, 
	564, 205, 568, 568, 569, 493, 494, 205, 
	570, 570, 571, 497, 498, 205, 499, 205, 
	564, 205, 568, 568, 569, 493, 518, 205, 
	572, 205, 565, 205, 573, 208, 205, 573, 
	573, 575, 576, 577, 578, 579, 580, 575, 
	205, 205, 574, 205, 582, 582, 205, 583, 
	584, 205, 581, 205, 585, 585, 586, 587, 
	588, 589, 590, 205, 591, 592, 586, 205, 
	581, 205, 582, 582, 587, 588, 589, 590, 
	205, 593, 584, 205, 581, 205, 582, 582, 
	594, 595, 596, 205, 581, 582, 582, 583, 
	584, 205, 205, 598, 205, 205, 598, 600, 
	599, 597, 205, 602, 205, 205, 602, 604, 
	603, 601, 205, 605, 205, 205, 605, 606, 
	603, 601, 205, 205, 205, 603, 205, 603, 
	601, 607, 205, 608, 205, 205, 609, 205, 
	205, 609, 610, 611, 599, 597, 205, 613, 
	205, 205, 613, 614, 615, 616, 617, 618, 
	597, 619, 620, 614, 599, 612, 205, 622, 
	205, 205, 622, 601, 583, 623, 603, 621, 
	205, 624, 205, 205, 624, 625, 626, 627, 
	628, 629, 601, 591, 630, 625, 603, 621, 
	205, 622, 205, 205, 622, 626, 627, 628, 
	629, 601, 593, 623, 603, 621, 205, 622, 
	205, 205, 622, 631, 595, 632, 603, 621, 
	205, 622, 205, 205, 622, 583, 623, 603, 
	601, 633, 205, 582, 582, 583, 634, 205, 
	205, 622, 205, 205, 622, 601, 635, 623, 
	603, 621, 205, 598, 205, 205, 598, 636, 
	600, 599, 597, 205, 602, 205, 205, 602, 
	637, 604, 603, 601, 205, 602, 205, 205, 
	602, 638, 604, 603, 601, 205, 602, 205, 
	205, 602, 639, 604, 603, 601, 205, 602, 
	205, 205, 602, 631, 604, 603, 601, 205, 
	622, 205, 205, 622, 640, 601, 641, 623, 
	603, 621, 205, 622, 205, 205, 622, 601, 
	595, 623, 603, 621, 205, 598, 205, 205, 
	598, 642, 600, 599, 597, 205, 622, 205, 
	205, 622, 601, 643, 623, 603, 621, 205, 
	598, 205, 205, 598, 644, 600, 599, 597, 
	205, 602, 205, 205, 602, 631, 604, 603, 
	601, 205, 598, 205, 205, 598, 645, 646, 
	647, 600, 599, 642, 642, 642, 597, 205, 
	602, 205, 205, 602, 631, 604, 603, 601, 
	205, 622, 205, 205, 622, 595, 623, 603, 
	601, 205, 602, 205, 205, 602, 648, 604, 
	603, 601, 205, 602, 205, 205, 602, 649, 
	604, 603, 601, 582, 582, 583, 650, 205, 
	205, 582, 582, 205, 635, 584, 205, 581, 
	205, 582, 582, 651, 205, 641, 584, 205, 
	581, 205, 582, 582, 205, 595, 584, 205, 
	581, 205, 582, 582, 205, 643, 584, 205, 
	581, 652, 653, 654, 594, 594, 594, 205, 
	594, 205, 582, 582, 595, 584, 205, 655, 
	205, 652, 205, 656, 208, 657, 208, 658, 
	208, 659, 208, 660, 208, 661, 208, 662, 
	208, 663, 208, 665, 665, 665, 665, 665, 
	664, 666, 208, 667, 208, 668, 208, 669, 
	208, 673, 673, 670, 671, 672, 673, 673, 
	673, 208, 673, 208, 673, 674, 673, 670, 
	671, 672, 673, 673, 673, 208, 670, 208, 
	671, 208, 677, 678, 679, 681, 681, 675, 
	676, 680, 681, 681, 681, 205, 681, 205, 
	675, 205, 682, 675, 205, 683, 681, 205, 
	677, 678, 679, 684, 674, 685, 686, 687, 
	681, 675, 676, 680, 681, 681, 681, 205, 
	688, 675, 205, 683, 681, 683, 681, 683, 
	681, 205, 689, 690, 675, 205, 683, 683, 
	681, 205, 683, 683, 683, 681, 205, 676, 
	205, 684, 691, 692, 691, 693, 692, 691, 
	684, 684, 691, 694, 692, 691, 684, 684, 
	684, 691, 695, 696, 692, 691, 684, 684, 
	684, 691, 684, 684, 684, 684, 691, 697, 
	691, 698, 699, 700, 691, 702, 691, 702, 
	702, 702, 691, 691, 702, 691, 691, 691, 
	692, 697, 701, 691, 691, 702, 684, 685, 
	691, 703, 691, 704, 703, 691, 685, 685, 
	691, 705, 703, 691, 685, 685, 685, 691, 
	706, 707, 703, 691, 685, 685, 685, 691, 
	685, 685, 685, 685, 691, 708, 691, 709, 
	710, 711, 691, 713, 684, 713, 713, 713, 
	691, 691, 687, 691, 691, 691, 703, 708, 
	712, 691, 691, 713, 685, 716, 717, 718, 
	205, 687, 684, 687, 687, 687, 687, 205, 
	714, 715, 719, 205, 205, 687, 720, 720, 
	205, 714, 205, 721, 714, 205, 720, 720, 
	205, 722, 714, 205, 720, 720, 720, 205, 
	723, 724, 714, 205, 720, 720, 720, 205, 
	720, 720, 720, 720, 205, 715, 205, 725, 
	205, 726, 726, 208, 727, 727, 208, 728, 
	728, 208, 729, 729, 208, 730, 730, 208, 
	731, 731, 208, 732, 208, 733, 208, 734, 
	208, 735, 208, 736, 208, 737, 738, 208, 
	739, 739, 208, 740, 208, 741, 208, 742, 
	208, 743, 208, 744, 208, 745, 208, 746, 
	208, 747, 208, 748, 208, 749, 750, 751, 
	749, 750, 751, 208, 752, 752, 208, 753, 
	753, 208, 754, 754, 208, 755, 755, 208, 
	756, 208, 757, 208, 758, 208, 759, 759, 
	208, 760, 760, 208, 761, 761, 208, 762, 
	762, 208, 763, 763, 208, 764, 764, 208, 
	765, 765, 208, 766, 766, 208, 767, 767, 
	208, 768, 768, 208, 769, 208, 770, 208, 
	771, 208, 772, 772, 208, 773, 773, 208, 
	774, 774, 208, 775, 775, 208, 776, 776, 
	208, 777, 777, 208, 778, 778, 208, 779, 
	779, 208, 780, 780, 208, 781, 781, 208, 
	782, 208, 783, 208, 784, 208, 785, 208, 
	786, 208, 788, 788, 787, 789, 787, 790, 
	791, 791, 208, 792, 208, 793, 793, 208, 
	794, 794, 208, 795, 795, 208, 796, 796, 
	208, 797, 797, 208, 798, 208, 799, 208, 
	800, 208, 801, 208, 802, 208, 803, 349, 
	350, 804, 296, 805, 271, 806, 803, 349, 
	350, 804, 296, 805, 271, 806, 212, 807, 
	212, 808, 212, 361, 809, 361, 212, 810, 
	212, 811, 812, 811, 212, 813, 212, 814, 
	815, 814, 815, 212, 816, 816, 212, 817, 
	817, 212, 818, 818, 212, 819, 819, 212, 
	820, 212, 821, 822, 821, 822, 212, 823, 
	823, 212, 824, 824, 825, 826, 212, 824, 
	824, 825, 212, 825, 825, 827, 827, 827, 
	212, 829, 828, 828, 828, 212, 831, 832, 
	831, 832, 830, 834, 835, 834, 835, 833, 
	836, 836, 212, 837, 837, 212, 838, 838, 
	839, 840, 212, 212, 842, 212, 212, 842, 
	843, 844, 841, 212, 212, 212, 846, 845, 
	212, 843, 212, 212, 843, 844, 841, 847, 
	847, 212, 848, 848, 212, 849, 849, 212, 
	850, 850, 212, 851, 851, 212, 852, 852, 
	853, 854, 212, 212, 856, 212, 212, 856, 
	857, 858, 855, 212, 212, 212, 860, 859, 
	212, 857, 212, 212, 857, 858, 855, 861, 
	861, 212, 862, 862, 212, 863, 863, 212, 
	864, 865, 865, 212, 866, 212, 867, 212, 
	212, 212, 212, 868, 212, 212, 869, 212, 
	868, 212, 212, 870, 869, 212, 868, 212, 
	212, 212, 871, 212, 212, 212, 873, 872, 
	864, 212, 874, 212, 875, 875, 212, 876, 
	876, 212, 877, 877, 212, 878, 878, 212, 
	879, 879, 212, 880, 880, 212, 881, 212, 
	883, 884, 883, 884, 882, 885, 885, 212, 
	886, 886, 212, 887, 887, 212, 888, 888, 
	212, 889, 212, 890, 891, 890, 212, 892, 
	892, 212, 893, 893, 212, 894, 894, 212, 
	895, 895, 212, 896, 896, 212, 897, 898, 
	897, 212, 898, 212, 899, 899, 212, 900, 
	212, 901, 902, 901, 212, 903, 903, 212, 
	904, 904, 905, 906, 212, 904, 904, 905, 
	212, 905, 905, 907, 908, 909, 908, 910, 
	910, 212, 911, 911, 912, 912, 212, 212, 
	212, 914, 212, 913, 915, 915, 916, 212, 
	212, 918, 212, 212, 918, 917, 212, 920, 
	212, 212, 920, 921, 919, 922, 922, 923, 
	212, 924, 212, 925, 925, 212, 926, 926, 
	212, 927, 927, 212, 928, 212, 212, 920, 
	212, 212, 920, 921, 917, 929, 929, 212, 
	930, 930, 212, 931, 931, 212, 932, 933, 
	933, 212, 934, 212, 935, 212, 212, 212, 
	212, 913, 932, 212, 212, 914, 914, 937, 
	212, 936, 938, 938, 939, 939, 212, 212, 
	212, 914, 212, 940, 941, 941, 212, 942, 
	942, 212, 943, 943, 212, 944, 945, 945, 
	212, 946, 212, 947, 212, 212, 212, 212, 
	940, 944, 212, 948, 948, 212, 949, 949, 
	212, 950, 950, 212, 951, 952, 952, 212, 
	953, 212, 954, 212, 212, 212, 212, 936, 
	951, 212, 906, 906, 955, 955, 956, 956, 
	212, 212, 958, 958, 959, 212, 957, 960, 
	960, 961, 212, 962, 212, 963, 963, 212, 
	964, 964, 212, 965, 965, 212, 966, 212, 
	212, 958, 958, 967, 959, 212, 957, 212, 
	958, 958, 968, 959, 968, 212, 957, 212, 
	958, 958, 969, 959, 969, 212, 957, 212, 
	958, 958, 970, 959, 970, 212, 957, 212, 
	958, 958, 959, 966, 212, 957, 971, 971, 
	212, 972, 972, 212, 973, 973, 212, 974, 
	975, 975, 212, 976, 212, 977, 212, 212, 
	212, 212, 957, 974, 212, 978, 288, 979, 
	980, 290, 981, 256, 982, 978, 288, 979, 
	980, 290, 981, 256, 982, 212, 807, 292, 
	292, 212, 980, 307, 980, 307, 212, 808, 
	212, 809, 317, 983, 317, 983, 212, 984, 
	984, 212, 985, 985, 212, 986, 986, 212, 
	987, 987, 212, 807, 212, 810, 212, 988, 
	988, 212, 988, 988, 989, 989, 212, 990, 
	990, 212, 991, 991, 212, 992, 992, 212, 
	993, 212, 994, 212, 995, 995, 996, 996, 
	212, 212, 212, 998, 212, 997, 212, 212, 
	998, 999, 212, 997, 212, 212, 212, 1000, 
	212, 212, 212, 1002, 1001, 212, 212, 212, 
	1003, 1002, 1001, 212, 212, 212, 1002, 1004, 
	1004, 1001, 212, 212, 212, 1002, 1005, 1001, 
	1006, 1006, 212, 1007, 1007, 212, 1008, 1008, 
	212, 1009, 1010, 1010, 212, 1011, 212, 1012, 
	212, 212, 212, 212, 997, 1009, 212, 812, 
	1013, 1014, 1013, 1014, 212, 1015, 1015, 212, 
	1016, 1016, 212, 1017, 1017, 212, 1018, 1018, 
	212, 1019, 1019, 212, 1020, 1020, 212, 1021, 
	1021, 212, 1022, 1022, 212, 889, 212, 813, 
	212, 1023, 1024, 1023, 1024, 212, 1025, 1025, 
	212, 1026, 1026, 212, 1027, 1027, 212, 1028, 
	1028, 212, 820, 212, 1029, 1030, 1029, 1030, 
	212, 1031, 1031, 212, 1032, 1032, 1033, 826, 
	212, 1032, 1032, 1033, 212, 1033, 1033, 1034, 
	1034, 1034, 212, 829, 1035, 1035, 1035, 212, 
	1036, 1036, 212, 1037, 1037, 212, 1038, 1038, 
	1039, 840, 212, 212, 1041, 212, 212, 1041, 
	1042, 844, 1040, 212, 212, 212, 846, 1043, 
	212, 1042, 212, 212, 1042, 844, 1040, 1044, 
	1045, 1044, 1045, 212, 874, 212, 1046, 1046, 
	212, 1047, 1047, 212, 1048, 1048, 212, 1049, 
	1049, 212, 1050, 1050, 1051, 854, 212, 212, 
	1053, 212, 212, 1053, 1054, 858, 1052, 212, 
	212, 212, 860, 1055, 212, 1054, 212, 212, 
	1054, 858, 1052, 1056, 1056, 212, 1057, 1057, 
	212, 1058, 1058, 212, 1059, 1060, 1060, 212, 
	1061, 212, 1062, 212, 212, 212, 212, 1063, 
	212, 212, 1064, 212, 1063, 1059, 212, 1065, 
	1065, 212, 1066, 1066, 212, 1067, 1067, 212, 
	1068, 1068, 212, 1069, 1069, 212, 1070, 1070, 
	212, 881, 212, 891, 1071, 1072, 1071, 1072, 
	212, 1073, 1073, 212, 1074, 1074, 212, 1075, 
	1075, 212, 1076, 1076, 212, 1077, 1077, 212, 
	898, 1078, 1078, 212, 898, 212, 1079, 1079, 
	212, 1080, 1080, 212, 1081, 1081, 212, 1082, 
	1082, 212, 812, 212, 1083, 1083, 212, 900, 
	212, 902, 212, 1084, 1084, 1084, 1084, 212, 
	1086, 1085, 1085, 1085, 1085, 212, 1087, 212, 
	1091, 1092, 1093, 1087, 1096, 1087, 1087, 1095, 
	1088, 1089, 1090, 1094, 1088, 1095, 1095, 1087, 
	1095, 1095, 1095, 205, 1099, 1100, 1101, 1088, 
	1088, 1088, 1088, 1103, 1088, 1097, 1098, 1102, 
	1088, 1103, 1103, 1088, 1103, 1103, 1103, 205, 
	1099, 1100, 1101, 1088, 1088, 1088, 1088, 1103, 
	1103, 1088, 1097, 1098, 1102, 1088, 1103, 1103, 
	1088, 1103, 1103, 1103, 205, 1099, 1100, 1101, 
	1088, 1088, 1088, 1088, 1103, 1097, 1088, 1097, 
	1098, 1102, 1088, 1103, 1103, 1088, 1103, 1103, 
	1103, 205, 1104, 1099, 1100, 1101, 1088, 1088, 
	1088, 1088, 1103, 1097, 1088, 1097, 1098, 1102, 
	1088, 1103, 1103, 1088, 1103, 1103, 1103, 205, 
	1088, 1099, 1100, 1101, 1088, 1088, 1088, 1088, 
	1103, 1103, 1088, 1097, 1098, 1102, 1088, 1103, 
	1103, 1088, 1103, 1103, 1103, 205, 1105, 1099, 
	1100, 1101, 1088, 1088, 1088, 1088, 1103, 1097, 
	1088, 1097, 1098, 1102, 1088, 1103, 1103, 1088, 
	1103, 1103, 1103, 205, 1099, 1100, 1101, 1088, 
	1088, 1088, 1088, 1103, 1088, 1103, 1088, 1103, 
	1088, 1103, 1088, 1097, 1098, 1102, 1088, 1103, 
	1103, 1088, 1103, 1103, 1103, 205, 1106, 1107, 
	1099, 1100, 1101, 1088, 1088, 1088, 1088, 1103, 
	1097, 1088, 1097, 1098, 1102, 1088, 1103, 1103, 
	1088, 1103, 1103, 1103, 205, 1088, 1088, 1099, 
	1100, 1101, 1088, 1088, 1088, 1088, 1103, 1103, 
	1088, 1097, 1098, 1102, 1088, 1103, 1103, 1088, 
	1103, 1103, 1103, 205, 1099, 1100, 1101, 1088, 
	1088, 1088, 1088, 1103, 1098, 1088, 1097, 1098, 
	1102, 1088, 1103, 1103, 1088, 1103, 1103, 1103, 
	205, 1088, 1088, 1088, 1099, 1100, 1101, 1088, 
	1088, 1088, 1088, 1103, 1103, 1088, 1097, 1098, 
	1102, 1088, 1103, 1103, 1088, 1103, 1103, 1103, 
	205, 1099, 1100, 1101, 1088, 1088, 1088, 1088, 
	1103, 1095, 1088, 1097, 1098, 1102, 1088, 1103, 
	1103, 1088, 1103, 1103, 1103, 205, 1099, 1100, 
	1101, 1088, 1088, 1088, 1088, 1103, 1089, 1088, 
	1097, 1098, 1102, 1088, 1103, 1103, 1088, 1103, 
	1103, 1103, 205, 1108, 1099, 1100, 1101, 1088, 
	1088, 1088, 1088, 1103, 1089, 1088, 1097, 1098, 
	1102, 1088, 1103, 1103, 1088, 1103, 1103, 1103, 
	205, 1087, 1099, 1100, 1101, 1088, 1088, 1088, 
	1088, 1103, 1095, 1088, 1097, 1098, 1102, 1088, 
	1103, 1103, 1088, 1103, 1103, 1103, 205, 1109, 
	1099, 1100, 1101, 1088, 1088, 1088, 1088, 1103, 
	1089, 1088, 1097, 1098, 1102, 1088, 1103, 1103, 
	1088, 1103, 1103, 1103, 205, 1099, 1100, 1101, 
	1088, 1088, 1088, 1088, 1103, 1087, 1095, 1087, 
	1095, 1087, 1095, 1088, 1097, 1098, 1102, 1088, 
	1103, 1103, 1088, 1103, 1103, 1103, 205, 1110, 
	1111, 1099, 1100, 1101, 1088, 1088, 1088, 1088, 
	1103, 1089, 1088, 1097, 1098, 1102, 1088, 1103, 
	1103, 1088, 1103, 1103, 1103, 205, 1087, 1087, 
	1099, 1100, 1101, 1088, 1088, 1088, 1088, 1103, 
	1095, 1088, 1097, 1098, 1102, 1088, 1103, 1103, 
	1088, 1103, 1103, 1103, 205, 1087, 1087, 1087, 
	1099, 1100, 1101, 1088, 1088, 1088, 1088, 1103, 
	1095, 1088, 1097, 1098, 1102, 1088, 1103, 1103, 
	1088, 1103, 1103, 1103, 205, 1099, 1100, 1101, 
	1088, 1088, 1088, 1088, 1103, 1090, 1088, 1097, 
	1098, 1102, 1088, 1103, 1103, 1088, 1103, 1103, 
	1103, 205, 1091, 1092, 1093, 1087, 1096, 1087, 
	1087, 1087, 1087, 1095, 1088, 1089, 1090, 1094, 
	1088, 1095, 1095, 1087, 1095, 1095, 1095, 205, 
	1112, 212, 1113, 1112, 212, 1087, 1087, 212, 
	1114, 1112, 212, 1087, 1087, 1087, 212, 1115, 
	1116, 1112, 212, 1087, 1087, 1087, 212, 1087, 
	1087, 1087, 1087, 212, 1117, 212, 1118, 1119, 
	1120, 1087, 1112, 1117, 1121, 1087, 1087, 1087, 
	1087, 1087, 212, 1123, 1122, 1124, 1124, 1122, 
	1125, 1125, 1122, 1126, 1126, 1122, 1127, 1127, 
	1122, 1128, 1122, 1129, 1122, 1130, 1130, 1122, 
	1131, 1131, 1122, 1132, 1132, 1122, 1133, 1133, 
	1122, 1128, 1122, 1135, 1134, 1136, 1136, 1134, 
	1137, 1137, 1134, 1138, 1138, 1134, 1139, 1139, 
	1134, 1140, 1140, 1134, 1141, 1141, 1134, 1142, 
	1142, 1134, 1143, 1134, 1144, 1134, 1145, 1145, 
	1134, 1146, 1146, 1134, 1147, 1147, 1134, 1148, 
	1148, 1134, 1149, 1149, 1134, 1150, 1150, 1134, 
	1151, 1151, 1134, 1143, 1134, 1153, 1154, 1153, 
	1154, 1152, 1155, 1155, 1152, 1156, 1156, 1152, 
	1157, 1157, 1152, 1158, 1158, 1152, 1159, 1159, 
	1152, 1160, 1160, 1152, 1161, 1161, 1152, 1162, 
	1152, 1163, 1164, 1165, 1166, 1163, 1164, 1165, 
	1166, 1152, 1167, 1167, 1152, 1168, 1168, 1152, 
	1169, 1169, 1152, 1170, 1152, 1171, 1171, 1152, 
	1172, 1172, 1152, 1173, 1173, 1152, 1174, 1152, 
	1175, 1175, 1152, 1176, 1176, 1152, 1177, 1177, 
	1152, 1178, 1152, 1179, 1152, 1180, 1180, 1152, 
	1181, 1181, 1152, 1182, 1182, 1183, 1184, 1184, 
	1152, 1182, 1182, 1185, 1185, 1185, 1152, 1186, 
	1186, 1188, 1187, 1187, 1187, 1152, 1189, 1189, 
	1190, 1152, 1190, 1190, 1191, 1192, 1193, 1193, 
	1193, 1152, 1152, 1152, 1152, 1194, 1152, 1152, 
	1152, 1196, 1195, 1197, 1197, 1198, 1152, 1152, 
	1152, 1152, 1199, 1152, 1152, 1152, 1196, 1200, 
	1201, 1201, 1203, 1202, 1202, 1202, 1152, 1204, 
	1204, 1152, 1205, 1205, 1152, 1206, 1206, 1152, 
	1207, 1207, 1152, 1208, 1208, 1209, 1152, 1208, 
	1208, 1210, 1210, 1210, 1152, 1211, 1211, 1213, 
	1212, 1212, 1212, 1152, 1214, 1214, 1215, 1152, 
	1215, 1215, 1216, 1217, 1218, 1218, 1218, 1152, 
	1152, 1152, 1152, 1219, 1152, 1152, 1152, 1221, 
	1220, 1222, 1222, 1223, 1152, 1152, 1152, 1152, 
	1224, 1152, 1152, 1152, 1221, 1225, 1226, 1226, 
	1228, 1227, 1227, 1227, 1152, 1229, 1230, 1231, 
	1232, 1229, 1230, 1231, 1232, 1152, 1233, 1233, 
	1152, 1234, 1234, 1152, 1235, 1235, 1152, 1236, 
	1236, 1237, 1152, 1236, 1236, 1238, 1238, 1238, 
	1152, 1239, 1239, 1241, 1240, 1240, 1240, 1152, 
	1242, 1242, 1243, 1152, 1243, 1243, 1244, 1245, 
	1246, 1246, 1246, 1152, 1152, 1152, 1152, 1247, 
	1152, 1152, 1152, 1249, 1248, 1250, 1250, 1251, 
	1152, 1152, 1152, 1152, 1252, 1152, 1152, 1152, 
	1249, 1253, 1254, 1254, 1256, 1255, 1255, 1255, 
	1152, 1257, 1257, 1258, 1152, 1257, 1257, 1259, 
	1259, 1259, 1152, 1260, 1260, 1262, 1261, 1261, 
	1261, 1152, 1263, 1263, 1264, 1152, 1264, 1264, 
	1265, 1266, 1267, 1267, 1267, 1152, 1152, 1152, 
	1152, 1268, 1152, 1152, 1152, 1270, 1269, 1271, 
	1271, 1272, 1152, 1152, 1152, 1152, 1273, 1152, 
	1152, 1152, 1270, 1274, 1275, 1275, 1277, 1276, 
	1276, 1276, 1152, 1278, 1278, 1279, 1280, 1280, 
	1152, 1278, 1278, 1281, 1281, 1281, 1152, 1282, 
	1282, 1284, 1283, 1283, 1283, 1152, 1285, 1285, 
	1286, 1152, 1286, 1286, 1287, 1288, 1289, 1289, 
	1289, 1152, 1152, 1152, 1152, 1290, 1152, 1152, 
	1152, 1292, 1291, 1293, 1293, 1294, 1152, 1152, 
	1152, 1152, 1295, 1152, 1152, 1152, 1292, 1296, 
	1297, 1297, 1299, 1298, 1298, 1298, 1152, 1300, 
	1300, 1152, 1301, 1301, 1152, 1302, 1302, 1303, 
	1152, 1302, 1302, 1304, 1304, 1304, 1152, 1305, 
	1305, 1307, 1306, 1306, 1306, 1152, 1308, 1308, 
	1309, 1152, 1309, 1309, 1310, 1311, 1312, 1312, 
	1312, 1152, 1152, 1152, 1152, 1313, 1152, 1152, 
	1152, 1315, 1314, 1316, 1316, 1317, 1152, 1152, 
	1152, 1152, 1318, 1152, 1152, 1152, 1315, 1319, 
	1320, 1320, 1322, 1321, 1321, 1321, 1152, 1323, 
	1323, 1324, 1152, 1323, 1323, 1325, 1325, 1325, 
	1152, 1326, 1326, 1328, 1327, 1327, 1327, 1152, 
	1329, 1329, 1330, 1152, 1330, 1330, 1331, 1332, 
	1333, 1333, 1333, 1152, 1152, 1152, 1152, 1334, 
	1152, 1152, 1152, 1336, 1335, 1337, 1337, 1338, 
	1152, 1152, 1152, 1152, 1339, 1152, 1152, 1152, 
	1336, 1340, 1341, 1341, 1343, 1342, 1342, 1342, 
	1152, 1344, 1345, 1344, 1345, 1152, 1346, 1346, 
	1152, 1347, 1347, 1152, 1348, 1348, 1152, 1349, 
	1349, 1152, 1350, 1350, 1152, 1351, 1351, 1152, 
	1352, 1352, 1152, 1162, 1152, 1353, 1354, 1355, 
	1356, 1353, 1354, 1355, 1356, 1152, 1357, 1357, 
	1152, 1358, 1358, 1152, 1359, 1359, 1152, 1170, 
	1152, 1360, 1360, 1152, 1361, 1361, 1152, 1362, 
	1362, 1152, 1174, 1152, 1363, 1363, 1152, 1364, 
	1364, 1152, 1365, 1365, 1152, 1178, 1152, 1179, 
	1152, 1366, 1366, 1152, 1367, 1367, 1152, 1368, 
	1368, 1369, 1183, 1369, 1152, 1368, 1368, 1370, 
	1370, 1370, 1152, 1371, 1371, 1373, 1372, 1372, 
	1372, 1152, 1374, 1374, 1375, 1152, 1375, 1375, 
	1376, 1377, 1378, 1378, 1378, 1152, 1152, 1152, 
	1152, 1379, 1152, 1152, 1152, 1381, 1380, 1382, 
	1382, 1198, 1152, 1152, 1152, 1152, 1383, 1152, 
	1152, 1152, 1381, 1384, 1385, 1385, 1203, 1386, 
	1386, 1386, 1152, 1387, 1387, 1152, 1388, 1388, 
	1152, 1389, 1389, 1152, 1390, 1390, 1152, 1391, 
	1391, 1209, 1152, 1391, 1391, 1392, 1392, 1392, 
	1152, 1393, 1393, 1395, 1394, 1394, 1394, 1152, 
	1396, 1396, 1397, 1152, 1397, 1397, 1398, 1399, 
	1400, 1400, 1400, 1152, 1152, 1152, 1152, 1401, 
	1152, 1152, 1152, 1403, 1402, 1404, 1404, 1223, 
	1152, 1152, 1152, 1152, 1405, 1152, 1152, 1152, 
	1403, 1406, 1407, 1407, 1228, 1408, 1408, 1408, 
	1152, 1409, 1410, 1411, 1412, 1409, 1410, 1411, 
	1412, 1152, 1413, 1413, 1152, 1414, 1414, 1152, 
	1415, 1415, 1152, 1416, 1416, 1237, 1152, 1416, 
	1416, 1417, 1417, 1417, 1152, 1418, 1418, 1420, 
	1419, 1419, 1419, 1152, 1421, 1421, 1422, 1152, 
	1422, 1422, 1423, 1424, 1425, 1425, 1425, 1152, 
	1152, 1152, 1152, 1426, 1152, 1152, 1152, 1428, 
	1427, 1429, 1429, 1251, 1152, 1152, 1152, 1152, 
	1430, 1152, 1152, 1152, 1428, 1431, 1432, 1432, 
	1256, 1433, 1433, 1433, 1152, 1434, 1434, 1258, 
	1152, 1434, 1434, 1435, 1435, 1435, 1152, 1436, 
	1436, 1438, 1437, 1437, 1437, 1152, 1439, 1439, 
	1440, 1152, 1440, 1440, 1441, 1442, 1443, 1443, 
	1443, 1152, 1152, 1152, 1152, 1444, 1152, 1152, 
	1152, 1446, 1445, 1447, 1447, 1272, 1152, 1152, 
	1152, 1152, 1448, 1152, 1152, 1152, 1446, 1449, 
	1450, 1450, 1277, 1451, 1451, 1451, 1152, 1452, 
	1452, 1453, 1279, 1453, 1152, 1452, 1452, 1454, 
	1454, 1454, 1152, 1455, 1455, 1457, 1456, 1456, 
	1456, 1152, 1458, 1458, 1459, 1152, 1459, 1459, 
	1460, 1461, 1462, 1462, 1462, 1152, 1152, 1152, 
	1152, 1463, 1152, 1152, 1152, 1465, 1464, 1466, 
	1466, 1294, 1152, 1152, 1152, 1152, 1467, 1152, 
	1152, 1152, 1465, 1468, 1469, 1469, 1299, 1470, 
	1470, 1470, 1152, 1471, 1471, 1152, 1472, 1472, 
	1152, 1473, 1473, 1303, 1152, 1473, 1473, 1474, 
	1474, 1474, 1152, 1475, 1475, 1477, 1476, 1476, 
	1476, 1152, 1478, 1478, 1479, 1152, 1479, 1479, 
	1480, 1481, 1482, 1482, 1482, 1152, 1152, 1152, 
	1152, 1483, 1152, 1152, 1152, 1485, 1484, 1486, 
	1486, 1317, 1152, 1152, 1152, 1152, 1487, 1152, 
	1152, 1152, 1485, 1488, 1489, 1489, 1322, 1490, 
	1490, 1490, 1152, 1491, 1491, 1324, 1152, 1491, 
	1491, 1492, 1492, 1492, 1152, 1493, 1493, 1495, 
	1494, 1494, 1494, 1152, 1496, 1496, 1497, 1152, 
	1497, 1497, 1498, 1499, 1500, 1500, 1500, 1152, 
	1152, 1152, 1152, 1501, 1152, 1152, 1152, 1503, 
	1502, 1504, 1504, 1338, 1152, 1152, 1152, 1152, 
	1505, 1152, 1152, 1152, 1503, 1506, 1507, 1507, 
	1343, 1508, 1508, 1508, 1152, 1, 1510, 1, 
	1510, 1511, 1512, 1513, 1514, 1515, 1513, 1509, 
	1, 2, 1, 2, 1516, 1, 4, 1, 
	4, 5, 6, 1517, 11, 11, 1518, 26, 
	26, 27, 1517, 1519, 1519, 1519, 1520, 1519, 
	25, 1519, 1519, 25, 24, 1521, 1522, 1523, 
	7, 1524, 32, 1525, 1526, 1521, 1522, 1523, 
	7, 1524, 32, 1525, 1526, 1517, 37, 37, 
	1527, 55, 56, 55, 56, 1528, 58, 59, 
	58, 59, 1529, 1531, 1531, 1530, 64, 64, 
	1532, 1534, 1534, 1533, 78, 78, 1535, 93, 
	94, 93, 94, 1536, 101, 101, 1537, 1538, 
	1517, 1540, 1540, 1539, 1541, 1542, 17, 1543, 
	1544, 1545, 1546, 1541, 1542, 17, 1543, 1544, 
	1545, 1546, 1517, 1547, 1517, 1549, 1550, 1551, 
	1548, 1553, 199, 1554, 192, 1555, 1556, 199, 
	1554, 192, 1555, 1556, 1552, 1557, 1558, 1559, 
	1560, 1561, 1558, 1559, 1560, 1561, 1552, 1566, 
	1567, 1568, 1569, 1567, 1570, 1573, 1574, 1575, 
	1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 
	1584, 1585, 1586, 1573, 1574, 1575, 1576, 1577, 
	1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 
	1587, 1588, 1589, 1562, 1562, 1562, 1590, 1562, 
	1563, 1564, 1565, 1562, 1571, 1562, 1562, 1571, 
	1562, 1571, 1562, 1572, 206, 1591, 207, 209, 
	1593, 1592, 207, 1591, 209, 1591, 210, 211, 
	210, 211, 205, 211, 213, 211, 213, 1591, 
	210, 215, 1595, 215, 1596, 1597, 1598, 1599, 
	1600, 1598, 1594, 223, 223, 1601, 210, 211, 
	1595, 211, 1603, 1604, 1602, 1605, 1605, 1605, 
	1606, 1605, 283, 1605, 1605, 283, 282, 301, 
	301, 1607, 306, 306, 1608, 312, 312, 1609, 
	1611, 1611, 1610, 1591, 1612, 414, 415, 416, 
	1613, 418, 1613, 418, 418, 418, 1613, 1613, 
	418, 1613, 1613, 1613, 408, 413, 417, 1613, 
	1613, 418, 407, 426, 427, 428, 1613, 430, 
	407, 430, 430, 430, 1613, 1613, 431, 1613, 
	1613, 1613, 420, 425, 429, 1613, 1613, 430, 
	419, 434, 435, 436, 1613, 431, 407, 431, 
	431, 431, 431, 1613, 432, 433, 437, 1613, 
	1613, 431, 438, 457, 458, 459, 407, 454, 
	419, 464, 431, 461, 455, 456, 460, 461, 
	461, 461, 1613, 407, 419, 431, 468, 1613, 
	1615, 1616, 1614, 1614, 1614, 1592, 1618, 1618, 
	1618, 1617, 1620, 1620, 1620, 1619, 1622, 1622, 
	1622, 1621, 1624, 1624, 1624, 1623, 1625, 1625, 
	1625, 1617, 1626, 1626, 1626, 1619, 1628, 1628, 
	1628, 1627, 1630, 1630, 1630, 1629, 1632, 1632, 
	1632, 1631, 1634, 1634, 1634, 1633, 1635, 1635, 
	1635, 1631, 1636, 1636, 1636, 1633, 1637, 1635, 
	1635, 1635, 1631, 608, 1632, 1632, 1632, 1631, 
	1638, 1615, 1638, 1616, 1614, 1614, 1614, 1592, 
	1639, 1615, 1639, 1616, 1614, 1614, 1614, 1592, 
	1640, 1615, 1640, 1616, 1614, 1614, 1614, 1592, 
	1641, 1615, 1641, 1616, 1614, 1614, 1614, 1592, 
	1642, 1615, 1642, 1616, 1614, 1614, 1614, 1592, 
	1643, 1615, 1616, 1614, 1614, 1614, 1592, 1645, 
	1644, 1646, 1615, 1646, 1616, 1614, 1614, 1614, 
	1592, 1647, 1615, 1647, 1616, 1614, 1614, 1614, 
	1592, 1648, 1615, 1648, 1616, 1614, 1614, 1614, 
	1592, 1649, 1615, 1616, 1614, 1614, 1614, 1592, 
	1651, 1650, 1652, 1615, 1652, 1616, 1614, 1614, 
	1614, 1592, 1653, 1615, 1653, 1616, 1614, 1614, 
	1614, 1592, 1654, 1615, 1654, 1616, 1614, 1614, 
	1614, 1592, 1655, 1615, 1655, 1616, 1614, 1614, 
	1614, 1592, 1656, 1615, 1656, 1616, 1614, 1614, 
	1614, 1592, 1657, 1615, 1657, 1616, 1614, 1614, 
	1614, 1592, 1658, 1615, 1616, 1614, 1614, 1614, 
	1592, 1660, 1659, 1661, 1615, 1661, 1616, 1614, 
	1614, 1614, 1592, 1662, 1615, 1662, 1616, 1614, 
	1614, 1614, 1592, 1663, 1615, 1663, 1616, 1614, 
	1614, 1614, 1592, 1664, 1615, 1664, 1616, 1614, 
	1614, 1614, 1592, 1665, 1615, 1616, 1614, 1614, 
	1614, 1592, 1667, 1668, 1666, 1670, 1670, 1670, 
	1670, 1670, 1669, 1671, 1615, 1671, 1616, 1614, 
	1614, 1614, 1592, 1672, 1615, 1672, 1616, 1614, 
	1614, 1614, 1592, 1673, 1615, 1673, 1616, 1614, 
	1614, 1614, 1592, 1674, 1615, 1674, 1616, 1614, 
	1614, 1614, 1592, 1675, 1615, 1616, 1614, 1614, 
	1614, 1592, 1677, 1676, 1678, 1615, 1678, 1616, 
	1614, 1614, 1614, 1592, 1679, 1615, 1679, 1616, 
	1614, 1614, 1614, 1592, 1680, 1615, 1680, 1616, 
	1614, 1614, 1614, 1592, 1681, 1682, 1615, 1682, 
	1616, 1614, 1614, 1614, 1592, 677, 678, 679, 
	684, 674, 685, 686, 687, 681, 675, 676, 
	680, 681, 681, 681, 1683, 698, 699, 700, 
	1683, 702, 1683, 702, 702, 702, 1683, 1683, 
	702, 1683, 1683, 1683, 692, 697, 701, 1683, 
	1683, 702, 684, 709, 710, 711, 1683, 713, 
	684, 713, 713, 713, 1683, 1683, 687, 1683, 
	1683, 1683, 703, 708, 712, 1683, 1683, 713, 
	685, 716, 717, 718, 1683, 687, 684, 687, 
	687, 687, 687, 1683, 714, 715, 719, 1683, 
	1683, 687, 720, 684, 685, 687, 725, 1683, 
	1681, 1615, 1616, 1614, 1614, 1614, 1592, 1684, 
	1615, 1684, 1616, 1614, 1614, 1614, 1592, 1685, 
	1615, 1685, 1616, 1614, 1614, 1614, 1592, 1686, 
	1615, 1616, 1614, 1614, 1614, 1592, 1688, 1687, 
	1689, 1690, 1615, 1689, 1690, 1616, 1614, 1614, 
	1614, 1592, 1691, 1615, 1691, 1616, 1614, 1614, 
	1614, 1592, 1692, 1615, 1692, 1616, 1614, 1614, 
	1614, 1592, 1693, 1615, 1693, 1616, 1614, 1614, 
	1614, 1592, 1694, 1615, 1616, 1614, 1614, 1614, 
	1592, 1696, 1695, 1697, 1698, 1615, 1697, 1698, 
	1616, 1614, 1614, 1614, 1592, 1699, 1615, 1699, 
	1616, 1614, 1614, 1614, 1592, 1700, 1615, 1616, 
	1614, 1614, 1614, 1592, 1702, 1701, 1703, 1615, 
	1703, 1616, 1614, 1614, 1614, 1592, 1704, 1615, 
	1616, 1614, 1614, 1614, 1592, 1706, 1705, 1707, 
	1615, 1707, 1616, 1614, 1614, 1614, 1592, 1708, 
	1615, 1708, 1616, 1614, 1614, 1614, 1592, 1709, 
	1615, 1709, 1616, 1614, 1614, 1614, 1592, 1710, 
	1615, 1710, 1616, 1614, 1614, 1614, 1592, 1711, 
	1615, 1711, 1616, 1614, 1614, 1614, 1592, 1712, 
	1615, 1616, 1614, 1614, 1614, 1592, 1714, 1713, 
	1715, 1615, 1715, 1616, 1614, 1614, 1614, 1592, 
	1716, 1615, 1716, 1616, 1614, 1614, 1614, 1592, 
	1717, 1615, 1717, 1616, 1614, 1614, 1614, 1592, 
	1718, 1615, 1718, 1616, 1614, 1614, 1614, 1592, 
	1719, 1615, 1719, 1616, 1614, 1614, 1614, 1592, 
	1720, 1615, 1616, 1614, 1614, 1614, 1592, 1722, 
	1721, 1723, 1724, 1615, 1723, 1724, 1616, 1614, 
	1614, 1614, 1592, 1725, 1615, 1725, 1616, 1614, 
	1614, 1614, 1592, 1726, 1615, 1616, 1614, 1614, 
	1614, 1592, 1728, 1727, 1730, 1729, 1732, 1731, 
	1733, 1615, 1733, 1616, 1614, 1614, 1614, 1592, 
	1734, 1615, 1734, 1616, 1614, 1614, 1614, 1592, 
	1735, 1615, 1735, 1616, 1614, 1614, 1614, 1592, 
	1736, 1615, 1616, 1614, 1614, 1614, 1592, 1738, 
	1739, 1737, 1741, 1740, 1742, 1615, 1742, 1616, 
	1614, 1614, 1614, 1592, 1743, 1615, 1743, 1616, 
	1614, 1614, 1614, 1592, 1744, 1615, 1744, 1616, 
	1614, 1614, 1614, 1592, 1745, 1615, 1616, 1614, 
	1614, 1614, 1592, 1747, 1746, 1749, 1748, 1750, 
	1615, 1750, 1616, 1614, 1614, 1614, 1592, 1751, 
	1615, 1751, 1616, 1614, 1614, 1614, 1592, 1752, 
	1615, 1752, 1616, 1614, 1614, 1614, 1592, 1753, 
	1615, 1616, 1614, 1614, 1614, 1592, 1755, 1754, 
	1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 
	1764, 1765, 1766, 480, 1757, 1758, 1759, 1760, 
	1761, 1762, 1763, 1764, 1765, 1766, 1591, 831, 
	832, 831, 832, 1767, 834, 835, 834, 835, 
	1768, 883, 884, 883, 884, 1769, 573, 1591, 
	1770, 1771, 1772, 1773, 1774, 1775, 1044, 1776, 
	1018, 1777, 1778, 1779, 1771, 1772, 1773, 1774, 
	1775, 1044, 1776, 1018, 1777, 1778, 1779, 1591, 
	1770, 1771, 1772, 1773, 1774, 1775, 1044, 1776, 
	1018, 1777, 1778, 1779, 1771, 1772, 1773, 1774, 
	1775, 1044, 1776, 1018, 1777, 1778, 1779, 1780, 
	1591, 1783, 1784, 1785, 1788, 1788, 1787, 1781, 
	1782, 1786, 1787, 1787, 1787, 1787, 1787, 1591, 
	1099, 1100, 1101, 1088, 1088, 1088, 1088, 1103, 
	1088, 1097, 1098, 1102, 1088, 1103, 1103, 1088, 
	1103, 1103, 1103, 1789, 1091, 1092, 1093, 1087, 
	1096, 1087, 1087, 1095, 1088, 1089, 1090, 1094, 
	1088, 1095, 1095, 1087, 1095, 1095, 1095, 1789, 
	1791, 1792, 1793, 1794, 1790, 1796, 1797, 1795, 
	1123, 1795, 1129, 1795, 1799, 1800, 1801, 1802, 
	1798, 1804, 1805, 1803, 1135, 1803, 1144, 1803, 
	1807, 1808, 1806, 1810, 1811, 1812, 1811, 1812, 
	1809, 1813, 1814, 1815, 1814, 1815, 1809, 0
};

static const short _dtext_trans_targs[] = {
	1176, 1177, 1, 1176, 2, 3, 12, 4, 
	7, 5, 6, 1179, 8, 9, 10, 11, 
	1176, 13, 15, 14, 16, 17, 18, 19, 
	1181, 1182, 20, 21, 23, 24, 25, 26, 
	27, 28, 29, 30, 31, 1184, 33, 38, 
	34, 35, 36, 37, 1176, 39, 46, 40, 
	41, 42, 1186, 43, 43, 1185, 1176, 1176, 
	44, 1176, 1176, 45, 47, 48, 49, 51, 
	1188, 50, 49, 51, 1187, 50, 1187, 53, 
	54, 55, 56, 57, 58, 60, 1190, 59, 
	58, 60, 1189, 59, 1189, 62, 63, 64, 
	65, 66, 67, 1191, 1176, 1176, 68, 70, 
	71, 72, 73, 74, 75, 1192, 76, 78, 
	1176, 80, 1194, 81, 81, 1194, 83, 88, 
	84, 85, 86, 87, 89, 94, 90, 91, 
	92, 93, 93, 95, 96, 97, 99, 98, 
	97, 99, 98, 101, 102, 103, 104, 105, 
	106, 108, 107, 106, 108, 107, 110, 111, 
	112, 113, 114, 115, 117, 118, 119, 120, 
	122, 123, 124, 125, 126, 127, 128, 130, 
	132, 133, 132, 139, 134, 135, 134, 135, 
	136, 137, 138, 1176, 133, 140, 139, 133, 
	140, 1197, 142, 143, 144, 145, 150, 1197, 
	1197, 1197, 146, 147, 148, 149, 1197, 1197, 
	153, 1197, 1197, 155, 156, 157, 158, 151, 
	1197, 161, 162, 163, 164, 1200, 1202, 169, 
	1200, 170, 1205, 172, 1200, 173, 1200, 174, 
	175, 193, 176, 179, 188, 177, 178, 1208, 
	180, 181, 182, 183, 184, 185, 186, 187, 
	1200, 189, 190, 191, 192, 1200, 194, 196, 
	204, 195, 197, 198, 199, 200, 201, 202, 
	203, 205, 206, 207, 208, 1200, 210, 211, 
	217, 212, 213, 214, 215, 216, 1200, 218, 
	219, 220, 1200, 1200, 1200, 222, 223, 229, 
	224, 225, 226, 227, 228, 230, 231, 232, 
	234, 233, 1210, 1211, 236, 271, 278, 237, 
	247, 252, 258, 263, 238, 239, 240, 241, 
	242, 243, 244, 245, 246, 1212, 248, 249, 
	250, 251, 1213, 253, 254, 255, 256, 257, 
	1214, 259, 260, 261, 262, 264, 265, 266, 
	267, 268, 269, 1200, 270, 272, 273, 274, 
	275, 276, 1200, 277, 277, 1200, 279, 280, 
	281, 282, 283, 284, 286, 287, 1215, 288, 
	288, 1215, 290, 310, 317, 291, 296, 302, 
	292, 293, 294, 295, 297, 298, 299, 300, 
	301, 303, 304, 305, 306, 307, 308, 309, 
	311, 312, 313, 314, 315, 316, 316, 318, 
	319, 320, 321, 322, 323, 325, 326, 327, 
	326, 333, 328, 329, 328, 329, 330, 331, 
	332, 1200, 327, 334, 333, 327, 334, 335, 
	336, 337, 1217, 1218, 371, 396, 1200, 1217, 
	338, 341, 343, 345, 346, 339, 340, 342, 
	344, 347, 348, 1218, 349, 352, 354, 356, 
	357, 350, 351, 353, 355, 358, 359, 360, 
	361, 362, 363, 365, 367, 370, 1219, 364, 
	366, 368, 369, 372, 373, 374, 375, 395, 
	376, 377, 378, 380, 381, 379, 382, 383, 
	384, 385, 388, 390, 393, 1220, 386, 387, 
	394, 389, 391, 392, 1221, 397, 398, 397, 
	1200, 399, 400, 401, 402, 405, 403, 404, 
	407, 408, 407, 410, 421, 431, 444, 448, 
	451, 408, 409, 410, 411, 414, 415, 409, 
	411, 414, 415, 412, 413, 419, 420, 412, 
	414, 415, 413, 1223, 416, 415, 418, 416, 
	417, 418, 417, 418, 1225, 419, 422, 423, 
	424, 427, 423, 424, 427, 425, 426, 428, 
	429, 425, 427, 426, 427, 1227, 428, 430, 
	430, 432, 433, 434, 435, 436, 437, 438, 
	439, 438, 439, 440, 441, 442, 443, 440, 
	441, 442, 421, 445, 446, 447, 424, 427, 
	447, 424, 449, 450, 452, 455, 456, 457, 
	453, 454, 453, 454, 458, 460, 461, 463, 
	464, 499, 500, 502, 503, 461, 462, 466, 
	471, 462, 463, 464, 499, 500, 502, 493, 
	471, 493, 465, 472, 498, 467, 466, 469, 
	470, 467, 468, 469, 470, 468, 470, 1229, 
	1231, 473, 466, 479, 474, 473, 476, 477, 
	481, 487, 490, 493, 479, 474, 475, 479, 
	475, 476, 477, 481, 487, 490, 479, 478, 
	480, 1233, 1235, 482, 483, 484, 485, 486, 
	488, 489, 478, 491, 492, 494, 495, 496, 
	497, 494, 1236, 501, 504, 505, 506, 507, 
	509, 1243, 511, 1248, 513, 1256, 515, 1262, 
	1200, 1263, 518, 1269, 520, 521, 522, 524, 
	525, 523, 526, 527, 528, 529, 532, 534, 
	537, 1274, 530, 531, 1275, 1276, 571, 560, 
	533, 535, 536, 1200, 538, 541, 543, 545, 
	546, 539, 540, 542, 544, 547, 548, 549, 
	552, 554, 556, 557, 550, 551, 553, 555, 
	558, 559, 561, 562, 563, 565, 567, 570, 
	1277, 564, 566, 568, 569, 1278, 573, 574, 
	575, 576, 577, 578, 579, 580, 1283, 582, 
	583, 584, 583, 585, 1289, 587, 1293, 589, 
	1296, 591, 1303, 593, 1310, 595, 602, 615, 
	596, 597, 598, 599, 600, 601, 1314, 603, 
	604, 605, 606, 607, 608, 609, 610, 611, 
	612, 613, 614, 1315, 616, 617, 618, 619, 
	620, 621, 622, 623, 624, 625, 626, 627, 
	1316, 629, 1321, 1200, 631, 1322, 633, 634, 
	1327, 635, 636, 637, 638, 639, 640, 641, 
	1328, 643, 1333, 645, 646, 647, 648, 1200, 
	1200, 1200, 1200, 650, 1200, 1200, 652, 657, 
	653, 654, 655, 656, 1200, 658, 665, 659, 
	660, 661, 1336, 662, 662, 1335, 1200, 1200, 
	663, 1200, 1200, 664, 666, 667, 668, 670, 
	1200, 669, 668, 670, 1200, 669, 1200, 672, 
	673, 674, 675, 676, 677, 679, 1200, 678, 
	677, 679, 1200, 678, 1200, 681, 682, 683, 
	684, 691, 685, 686, 687, 688, 689, 690, 
	690, 1200, 1200, 694, 695, 696, 697, 698, 
	699, 1337, 1200, 1200, 700, 702, 703, 704, 
	705, 1200, 707, 1200, 708, 709, 710, 711, 
	712, 713, 1200, 715, 1200, 717, 1200, 718, 
	719, 720, 760, 721, 741, 742, 752, 722, 
	733, 722, 723, 723, 724, 725, 732, 725, 
	726, 727, 726, 727, 728, 729, 730, 731, 
	1200, 734, 735, 736, 737, 740, 738, 739, 
	741, 724, 743, 744, 743, 745, 746, 747, 
	748, 751, 749, 750, 753, 754, 755, 756, 
	759, 757, 758, 761, 773, 761, 762, 768, 
	762, 763, 764, 765, 766, 767, 1200, 769, 
	770, 771, 772, 774, 775, 776, 777, 780, 
	778, 779, 782, 783, 784, 785, 791, 786, 
	787, 788, 789, 790, 793, 794, 795, 796, 
	797, 798, 799, 800, 807, 800, 801, 802, 
	803, 803, 804, 805, 806, 1200, 808, 809, 
	810, 811, 814, 812, 813, 816, 825, 817, 
	818, 819, 820, 821, 822, 823, 824, 827, 
	832, 828, 829, 830, 831, 833, 838, 834, 
	835, 836, 837, 837, 839, 840, 841, 843, 
	842, 841, 843, 842, 845, 846, 847, 848, 
	849, 850, 851, 853, 852, 851, 853, 852, 
	855, 856, 857, 858, 862, 859, 860, 861, 
	1200, 864, 865, 866, 867, 868, 869, 871, 
	878, 872, 873, 874, 875, 876, 877, 879, 
	880, 881, 882, 884, 887, 887, 1200, 889, 
	890, 901, 902, 903, 905, 907, 910, 1343, 
	911, 891, 892, 893, 895, 897, 899, 1342, 
	894, 896, 898, 900, 904, 906, 908, 909, 
	888, 914, 916, 918, 919, 912, 913, 915, 
	917, 920, 1344, 923, 924, 925, 926, 927, 
	1344, 929, 930, 931, 932, 933, 1348, 935, 
	936, 937, 938, 939, 940, 941, 942, 1348, 
	944, 945, 946, 947, 948, 949, 950, 951, 
	1352, 953, 961, 954, 955, 956, 957, 958, 
	959, 960, 1352, 962, 966, 970, 974, 963, 
	964, 965, 1352, 967, 968, 969, 1352, 971, 
	972, 973, 1352, 1352, 976, 977, 978, 1352, 
	988, 979, 980, 979, 981, 980, 981, 982, 
	985, 987, 983, 983, 984, 978, 1352, 986, 
	986, 978, 987, 1352, 989, 990, 991, 992, 
	993, 1352, 994, 995, 994, 996, 995, 996, 
	997, 1000, 1002, 998, 998, 999, 993, 1352, 
	1001, 1001, 993, 1002, 1352, 1004, 1018, 1029, 
	1053, 1005, 1006, 1007, 1008, 1352, 1009, 1010, 
	1009, 1011, 1010, 1011, 1012, 1015, 1017, 1013, 
	1013, 1014, 1008, 1352, 1016, 1016, 1008, 1017, 
	1352, 1019, 1352, 1020, 1021, 1020, 1022, 1021, 
	1022, 1023, 1026, 1028, 1024, 1024, 1025, 1019, 
	1352, 1027, 1027, 1019, 1028, 1352, 1030, 1352, 
	1040, 1031, 1032, 1031, 1033, 1032, 1033, 1034, 
	1037, 1039, 1035, 1035, 1036, 1030, 1352, 1038, 
	1038, 1030, 1039, 1352, 1041, 1042, 1043, 1352, 
	1044, 1045, 1044, 1046, 1045, 1046, 1047, 1050, 
	1052, 1048, 1048, 1049, 1043, 1352, 1051, 1051, 
	1043, 1052, 1352, 1054, 1352, 1055, 1056, 1055, 
	1057, 1056, 1057, 1058, 1061, 1063, 1059, 1059, 
	1060, 1054, 1352, 1062, 1062, 1054, 1063, 1352, 
	1065, 1073, 1066, 1067, 1068, 1069, 1070, 1071, 
	1072, 1074, 1078, 1082, 1086, 1075, 1076, 1077, 
	1079, 1080, 1081, 1083, 1084, 1085, 1088, 1089, 
	1090, 1100, 1091, 1092, 1091, 1093, 1092, 1093, 
	1094, 1097, 1099, 1095, 1095, 1096, 1090, 1098, 
	1098, 1090, 1099, 1101, 1102, 1103, 1104, 1105, 
	1106, 1107, 1106, 1108, 1107, 1108, 1109, 1112, 
	1114, 1110, 1110, 1111, 1105, 1113, 1113, 1105, 
	1114, 1116, 1130, 1141, 1165, 1117, 1118, 1119, 
	1120, 1121, 1122, 1121, 1123, 1122, 1123, 1124, 
	1127, 1129, 1125, 1125, 1126, 1120, 1128, 1128, 
	1120, 1129, 1131, 1132, 1133, 1132, 1134, 1133, 
	1134, 1135, 1138, 1140, 1136, 1136, 1137, 1131, 
	1139, 1139, 1131, 1140, 1142, 1152, 1143, 1144, 
	1143, 1145, 1144, 1145, 1146, 1149, 1151, 1147, 
	1147, 1148, 1142, 1150, 1150, 1142, 1151, 1153, 
	1154, 1155, 1156, 1157, 1156, 1158, 1157, 1158, 
	1159, 1162, 1164, 1160, 1160, 1161, 1155, 1163, 
	1163, 1155, 1164, 1166, 1167, 1168, 1167, 1169, 
	1168, 1169, 1170, 1173, 1175, 1171, 1171, 1172, 
	1166, 1174, 1174, 1166, 1175, 1176, 1178, 1180, 
	1183, 1193, 1195, 1196, 1176, 1176, 1176, 1176, 
	1181, 22, 32, 52, 61, 69, 77, 1176, 
	1176, 1176, 1176, 1187, 1176, 1176, 1189, 1176, 
	1176, 1176, 79, 1176, 1194, 82, 100, 109, 
	116, 121, 129, 131, 1197, 1197, 1198, 1199, 
	1197, 141, 152, 154, 159, 160, 165, 166, 
	167, 168, 1200, 1201, 1203, 1204, 1205, 1206, 
	1207, 1200, 1216, 1222, 0, 1237, 1244, 1249, 
	1257, 1264, 1270, 1280, 1284, 1297, 1304, 1311, 
	1323, 1329, 1334, 1338, 1339, 1340, 1341, 1200, 
	1200, 171, 1200, 1209, 233, 235, 285, 289, 
	324, 1200, 1200, 209, 221, 1200, 1210, 1200, 
	1200, 1200, 1200, 1215, 335, 1200, 1222, 406, 
	459, 1200, 1224, 1200, 1224, 1200, 1226, 1200, 
	1226, 1228, 1228, 1200, 1230, 1200, 1230, 1200, 
	1232, 1200, 1232, 1234, 1234, 1231, 1238, 1239, 
	1240, 1241, 1242, 508, 1200, 1243, 1245, 1246, 
	1247, 510, 1200, 1248, 1250, 1251, 1252, 1253, 
	1254, 1255, 512, 1200, 1256, 1258, 1259, 1260, 
	1261, 514, 1200, 516, 1262, 1200, 1263, 1265, 
	1266, 1267, 1268, 517, 1200, 1269, 1271, 1272, 
	1273, 519, 1279, 1200, 1281, 1282, 572, 1200, 
	1283, 1285, 1290, 1286, 1287, 1288, 581, 1200, 
	1289, 1291, 1294, 1292, 586, 1200, 1293, 1295, 
	588, 1200, 1296, 1298, 1299, 1300, 1301, 1302, 
	590, 1200, 1303, 1305, 1306, 1307, 1308, 1309, 
	592, 1200, 1310, 1312, 1317, 1313, 594, 1200, 
	1314, 1200, 1315, 1200, 1316, 1318, 1319, 1320, 
	628, 1200, 630, 1321, 1200, 1322, 1324, 1325, 
	1326, 632, 1200, 1327, 1200, 1328, 1330, 1331, 
	1332, 642, 1200, 1333, 644, 649, 651, 671, 
	680, 692, 693, 701, 706, 714, 716, 1200, 
	1200, 1200, 781, 792, 815, 826, 844, 854, 
	863, 870, 883, 885, 886, 888, 912, 913, 
	915, 917, 920, 889, 921, 1200, 1344, 1344, 
	1345, 1346, 1347, 1344, 922, 928, 1348, 1348, 
	1349, 1350, 1351, 1348, 934, 943, 1352, 1353, 
	1354, 1352, 952, 975, 1003, 1064, 1087, 1115
};

static const short _dtext_trans_actions[] = {
	267, 25, 0, 269, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	227, 0, 0, 0, 0, 0, 0, 0, 
	5, 5, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 231, 0, 0, 0, 
	0, 0, 25, 1, 0, 424, 263, 221, 
	0, 261, 219, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 271, 0, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 271, 0, 3, 0, 0, 0, 
	0, 0, 0, 25, 265, 225, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	229, 3, 456, 5, 0, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 271, 271, 1, 5, 340, 0, 7, 
	0, 0, 0, 223, 3, 3, 0, 0, 
	0, 49, 0, 0, 0, 0, 0, 29, 
	33, 37, 0, 0, 0, 0, 41, 27, 
	0, 31, 35, 0, 0, 0, 0, 0, 
	39, 0, 0, 0, 0, 167, 442, 0, 
	163, 0, 433, 0, 165, 0, 161, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	89, 0, 0, 0, 0, 105, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 159, 0, 0, 
	0, 0, 0, 0, 0, 0, 79, 0, 
	0, 0, 109, 107, 75, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 0, 5, 5, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 93, 0, 0, 0, 0, 
	0, 0, 97, 1, 0, 280, 0, 0, 
	0, 0, 0, 0, 1, 3, 456, 5, 
	0, 7, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 271, 
	271, 1, 5, 340, 0, 7, 0, 0, 
	0, 87, 3, 3, 0, 0, 0, 0, 
	3, 0, 520, 533, 5, 0, 149, 427, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 524, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 524, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 524, 0, 0, 
	0, 0, 0, 0, 524, 5, 5, 0, 
	358, 0, 0, 0, 0, 0, 0, 0, 
	0, 5, 5, 5, 5, 5, 5, 5, 
	5, 0, 7, 0, 7, 7, 7, 0, 
	0, 0, 0, 9, 11, 11, 0, 0, 
	11, 11, 0, 0, 13, 385, 385, 0, 
	15, 15, 0, 0, 0, 0, 7, 464, 
	349, 464, 385, 13, 385, 9, 382, 382, 
	0, 0, 382, 0, 0, 0, 0, 15, 
	0, 7, 13, 0, 0, 0, 0, 7, 
	7, 0, 0, 9, 11, 11, 0, 0, 
	0, 0, 0, 7, 13, 352, 7, 352, 
	0, 0, 7, 0, 0, 0, 0, 0, 
	7, 7, 0, 0, 0, 0, 5, 5, 
	5, 5, 5, 5, 5, 0, 7, 7, 
	7, 0, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 7, 7, 9, 379, 9, 
	379, 0, 11, 0, 11, 0, 0, 0, 
	0, 460, 343, 460, 9, 379, 9, 9, 
	9, 9, 9, 9, 379, 0, 346, 346, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	346, 0, 7, 7, 9, 0, 0, 0, 
	0, 7, 9, 7, 9, 9, 9, 9, 
	0, 0, 7, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 0, 1, 0, 421, 
	147, 5, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 430, 0, 0, 25, 430, 0, 0, 
	0, 0, 0, 151, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	430, 0, 0, 0, 0, 430, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	1, 3, 0, 0, 5, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 421, 145, 0, 5, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 1, 0, 0, 0, 0, 59, 
	63, 67, 71, 0, 57, 81, 0, 0, 
	0, 0, 0, 0, 77, 0, 0, 0, 
	0, 0, 25, 1, 0, 424, 155, 85, 
	0, 153, 83, 0, 0, 0, 0, 0, 
	103, 1, 1, 1, 452, 0, 286, 0, 
	0, 0, 0, 0, 0, 0, 101, 1, 
	1, 1, 448, 0, 283, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 5, 
	0, 361, 61, 0, 0, 0, 0, 0, 
	0, 25, 157, 95, 0, 0, 0, 0, 
	0, 99, 0, 65, 0, 0, 0, 0, 
	0, 0, 91, 0, 73, 0, 69, 0, 
	0, 0, 0, 0, 5, 0, 5, 5, 
	5, 0, 7, 0, 0, 1, 1, 0, 
	3, 3, 0, 0, 0, 0, 0, 0, 
	51, 0, 0, 0, 0, 0, 0, 0, 
	0, 7, 5, 5, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 3, 3, 
	0, 0, 0, 0, 0, 0, 55, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 3, 0, 
	5, 0, 7, 0, 0, 53, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	274, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 277, 0, 
	0, 0, 0, 0, 0, 0, 0, 516, 
	0, 0, 0, 0, 0, 0, 0, 516, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 177, 0, 0, 0, 0, 0, 
	169, 0, 0, 0, 0, 0, 187, 0, 
	0, 0, 0, 0, 0, 0, 0, 179, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	217, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 191, 0, 0, 0, 0, 0, 
	0, 0, 211, 0, 0, 0, 201, 0, 
	0, 0, 197, 207, 0, 0, 0, 193, 
	0, 1, 3, 0, 3, 0, 0, 0, 
	0, 5, 5, 0, 7, 19, 403, 5, 
	0, 355, 0, 472, 0, 0, 0, 0, 
	0, 189, 1, 3, 0, 3, 0, 0, 
	0, 0, 5, 5, 0, 7, 19, 400, 
	5, 0, 355, 0, 468, 0, 0, 0, 
	0, 0, 0, 0, 0, 199, 1, 3, 
	0, 3, 0, 0, 0, 0, 5, 5, 
	0, 7, 19, 409, 5, 0, 355, 0, 
	480, 0, 209, 1, 3, 0, 3, 0, 
	0, 0, 0, 5, 5, 0, 7, 19, 
	418, 5, 0, 355, 0, 492, 0, 203, 
	0, 1, 3, 0, 3, 0, 0, 0, 
	0, 5, 5, 0, 7, 19, 412, 5, 
	0, 355, 0, 484, 0, 0, 0, 195, 
	1, 3, 0, 3, 0, 0, 0, 0, 
	5, 5, 0, 7, 19, 406, 5, 0, 
	355, 0, 476, 0, 205, 1, 3, 0, 
	3, 0, 0, 0, 0, 5, 5, 0, 
	7, 19, 415, 5, 0, 355, 0, 488, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 3, 0, 3, 0, 0, 
	0, 0, 5, 5, 0, 7, 19, 5, 
	0, 355, 0, 0, 0, 0, 0, 0, 
	1, 3, 0, 3, 0, 0, 0, 0, 
	5, 5, 0, 7, 19, 5, 0, 355, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 3, 0, 3, 0, 0, 0, 
	0, 5, 5, 0, 7, 19, 5, 0, 
	355, 0, 0, 1, 3, 0, 3, 0, 
	0, 0, 0, 5, 5, 0, 7, 19, 
	5, 0, 355, 0, 0, 0, 1, 3, 
	0, 3, 0, 0, 0, 0, 5, 5, 
	0, 7, 19, 5, 0, 355, 0, 0, 
	0, 0, 1, 3, 0, 3, 0, 0, 
	0, 0, 5, 5, 0, 7, 19, 5, 
	0, 355, 0, 0, 1, 3, 0, 3, 
	0, 0, 0, 0, 5, 5, 0, 7, 
	19, 5, 0, 355, 0, 233, 25, 421, 
	25, 25, 25, 25, 257, 259, 255, 376, 
	0, 0, 0, 0, 0, 0, 0, 237, 
	243, 241, 251, 0, 249, 247, 0, 245, 
	253, 239, 1, 235, 0, 0, 0, 0, 
	0, 0, 0, 0, 45, 43, 25, 25, 
	47, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 113, 0, 445, 445, 439, 445, 
	436, 111, 445, 512, 0, 512, 512, 512, 
	512, 512, 512, 512, 512, 512, 512, 512, 
	512, 512, 528, 528, 445, 445, 445, 143, 
	141, 0, 139, 433, 1, 0, 0, 0, 
	0, 135, 137, 0, 0, 373, 0, 129, 
	133, 131, 127, 0, 1, 115, 442, 3, 
	3, 504, 17, 394, 0, 508, 17, 397, 
	0, 17, 0, 500, 13, 391, 0, 496, 
	13, 388, 0, 13, 0, 385, 442, 442, 
	442, 442, 442, 0, 310, 0, 442, 442, 
	442, 0, 325, 0, 442, 442, 442, 442, 
	442, 442, 0, 298, 0, 442, 442, 442, 
	442, 0, 301, 3, 25, 364, 0, 442, 
	442, 442, 442, 0, 292, 0, 442, 442, 
	442, 0, 442, 117, 442, 442, 0, 331, 
	0, 442, 442, 442, 442, 442, 0, 370, 
	0, 442, 442, 442, 0, 304, 0, 442, 
	0, 289, 0, 442, 442, 442, 442, 442, 
	0, 334, 0, 442, 442, 442, 442, 442, 
	0, 328, 0, 442, 442, 442, 0, 316, 
	0, 319, 0, 322, 0, 442, 442, 442, 
	0, 295, 3, 25, 367, 0, 442, 442, 
	442, 0, 307, 0, 313, 0, 442, 442, 
	442, 0, 337, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 123, 
	121, 125, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 119, 173, 171, 
	25, 25, 25, 175, 0, 0, 183, 181, 
	25, 25, 25, 185, 0, 0, 213, 25, 
	25, 215, 0, 0, 0, 0, 0, 0
};

static const short _dtext_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	21, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 21, 0, 0, 
	21, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	21, 0, 0, 0, 21, 0, 0, 0, 
	21, 0, 0
};

static const short _dtext_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	23, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 23, 0, 0, 
	23, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	23, 0, 0, 0, 23, 0, 0, 0, 
	23, 0, 0
};

static const short _dtext_eof_trans[] = {
	0, 1, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 55, 58, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 93, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 206, 206, 209, 206, 213, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 254, 254, 254, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 254, 254, 254, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 215, 215, 215, 215, 215, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 215, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 215, 
	206, 206, 206, 206, 206, 206, 206, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 215, 206, 
	206, 206, 206, 206, 206, 206, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 213, 
	213, 213, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 209, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 209, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 209, 209, 209, 209, 
	209, 209, 209, 209, 665, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 788, 788, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 831, 
	834, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 883, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 1123, 1123, 1123, 1123, 1123, 1123, 
	1123, 1123, 1123, 1123, 1123, 1123, 1135, 1135, 
	1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 
	1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	0, 1517, 1518, 1519, 1518, 1520, 1520, 1518, 
	1528, 1529, 1530, 1531, 1533, 1534, 1536, 1537, 
	1538, 1518, 1540, 1518, 1518, 0, 1553, 1553, 
	0, 1592, 1593, 1592, 1592, 206, 1592, 1595, 
	1602, 1603, 1606, 1606, 1608, 1609, 1610, 1611, 
	1592, 1614, 1614, 1614, 1614, 1614, 1593, 1618, 
	1620, 1622, 1624, 1618, 1620, 1628, 1630, 1632, 
	1634, 1632, 1634, 1632, 1632, 1593, 1593, 1593, 
	1593, 1593, 1593, 1645, 1593, 1593, 1593, 1593, 
	1651, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 
	1660, 1593, 1593, 1593, 1593, 1593, 1667, 1670, 
	1593, 1593, 1593, 1593, 1593, 1677, 1593, 1593, 
	1593, 1593, 1684, 1684, 1684, 1684, 1684, 1593, 
	1593, 1593, 1593, 1688, 1593, 1593, 1593, 1593, 
	1593, 1696, 1593, 1593, 1593, 1702, 1593, 1593, 
	1706, 1593, 1593, 1593, 1593, 1593, 1593, 1714, 
	1593, 1593, 1593, 1593, 1593, 1593, 1722, 1593, 
	1593, 1593, 1728, 1730, 1732, 1593, 1593, 1593, 
	1593, 1738, 1741, 1593, 1593, 1593, 1593, 1747, 
	1749, 1593, 1593, 1593, 1593, 1755, 1592, 1768, 
	1769, 1770, 1592, 1592, 1592, 1592, 1790, 1790, 
	0, 1796, 1796, 1796, 0, 1804, 1804, 1804, 
	0, 1810, 1810
};

static const int dtext_start = 1176;
static const int dtext_first_final = 1176;
static const int dtext_error = 0;

static const int dtext_en_basic_inline = 1197;
static const int dtext_en_inline = 1200;
static const int dtext_en_code = 1344;
static const int dtext_en_nodtext = 1348;
static const int dtext_en_table = 1352;
static const int dtext_en_main = 1176;


#line 776 "ext/dtext/dtext.cpp.rl"

static void dstack_push(StateMachine * sm, element_t element) {
  sm->dstack.push_back(element);
}

static element_t dstack_pop(StateMachine * sm) {
  if (sm->dstack.empty()) {
    g_debug("dstack pop empty stack");
    return DSTACK_EMPTY;
  } else {
    auto element = sm->dstack.back();
    sm->dstack.pop_back();
    return element;
  }
}

static element_t dstack_peek(const StateMachine * sm) {
  return sm->dstack.empty() ? DSTACK_EMPTY : sm->dstack.back();
}

static bool dstack_check(const StateMachine * sm, element_t expected_element) {
  return dstack_peek(sm) == expected_element;
}

// Return true if the given tag is currently open.
static bool dstack_is_open(const StateMachine * sm, element_t element) {
  return std::find(sm->dstack.begin(), sm->dstack.end(), element) != sm->dstack.end();
}

static int dstack_count(const StateMachine * sm, element_t element) {
  return std::count(sm->dstack.begin(), sm->dstack.end(), element);
}

static bool is_internal_url(StateMachine * sm, const std::string_view url) {
  if (url.starts_with("/")) {
    return true;
  } else if (sm->options.domain.empty() || url.empty()) {
    return false;
  } else {
    // Matches the domain name part of a URL.
    static const std::regex url_regex("^https?://(?:[^/?#]*@)?([^/?#:]+)", std::regex_constants::icase);

    std::match_results<std::string_view::const_iterator> matches;
    std::regex_search(url.begin(), url.end(), matches, url_regex);
    return matches[1] == sm->options.domain;
  }
}

static void append(StateMachine * sm, const auto c) {
  sm->output += c;
}

static void append(StateMachine * sm, const char * a, const char * b) {
  append(sm, std::string_view(a, b));
}

static void append_html_escaped(StateMachine * sm, char s) {
  switch (s) {
    case '<': append(sm, "&lt;"); break;
    case '>': append(sm, "&gt;"); break;
    case '&': append(sm, "&amp;"); break;
    case '"': append(sm, "&quot;"); break;
    default:  append(sm, s);
  }
}

static void append_html_escaped(StateMachine * sm, const std::string_view string) {
  for (const unsigned char c : string) {
    append_html_escaped(sm, c);
  }
}

static void append_uri_escaped(StateMachine * sm, const std::string_view string) {
  static const char hex[] = "0123456789ABCDEF";

  for (const unsigned char c : string) {
    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '-' || c == '_' || c == '.' || c == '~') {
      append(sm, c);
    } else {
      append(sm, '%');
      append(sm, hex[c >> 4]);
      append(sm, hex[c & 0x0F]);
    }
  }
}

static void append_relative_url(StateMachine * sm, const auto url) {
  if ((url[0] == '/' || url[0] == '#') && !sm->options.base_url.empty()) {
    append_html_escaped(sm, sm->options.base_url);
  }

  append_html_escaped(sm, url);
}

static void append_absolute_link(StateMachine * sm, const std::string_view url, const std::string_view title, bool internal_url, bool escape_title) {
  if (internal_url) {
    append(sm, "<a class=\"dtext-link\" href=\"");
  } else if (url == title) {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-external-link\" href=\"");
  } else {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-external-link dtext-named-external-link\" href=\"");
  }

  append_html_escaped(sm, url);
  append(sm, "\">");

  if (escape_title) {
    append_html_escaped(sm, title);
  } else {
    append(sm, title);
  }

  append(sm, "</a>");
}

static void append_mention(StateMachine * sm, const std::string_view name) {
  append(sm, "<a class=\"dtext-link dtext-user-mention-link\" data-user-name=\"");
  append_html_escaped(sm, name);
  append(sm, "\" href=\"");
  append_relative_url(sm, "/users?name=");
  append_uri_escaped(sm, name);
  append(sm, "\">@");
  append_html_escaped(sm, name);
  append(sm, "</a>");
}

static void append_id_link(StateMachine * sm, const char * title, const char * id_name, const char * url, const std::string_view id) {
  if (url[0] == '/') {
    append(sm, "<a class=\"dtext-link dtext-id-link dtext-");
    append(sm, id_name);
    append(sm, "-id-link\" href=\"");
    append_relative_url(sm, url);
  } else {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-id-link dtext-");
    append(sm, id_name);
    append(sm, "-id-link\" href=\"");
    append_html_escaped(sm, url);
  }

  append_uri_escaped(sm, id);
  append(sm, "\">");
  append(sm, title);
  append(sm, " #");
  append_html_escaped(sm, id);
  append(sm, "</a>");
}

static void append_bare_unnamed_url(StateMachine * sm, const std::string_view url) {
  auto [trimmed_url, leftovers] = trim_url(url);
  append_unnamed_url(sm, trimmed_url);
  append_html_escaped(sm, leftovers);
}

static void append_unnamed_url(StateMachine * sm, const std::string_view url) {
  DText::URL parsed_url(url);

  if (sm->options.internal_domains.find(std::string(parsed_url.domain)) != sm->options.internal_domains.end()) {
    append_internal_url(sm, parsed_url);
  } else {
    append_absolute_link(sm, url, url, parsed_url.domain == sm->options.domain);
  }
}

static void append_internal_url(StateMachine * sm, const DText::URL& url) {
  auto path_components = url.path_components();
  auto query = url.query;
  auto fragment = url.fragment;

  if (path_components.size() == 2) {
    auto controller = path_components.at(0);
    auto id = path_components.at(1);

    if (!id.empty() && std::all_of(id.begin(), id.end(), ::isdigit)) {
      if (controller == "post" && fragment.empty()) {
        // https://danbooru.donmai.us/posts/6000000#comment_2288996
        return append_id_link(sm, "post", "post", "/posts/", id);
      } else if (controller == "pool" && query.empty()) {
        // https://danbooru.donmai.us/pools/903?page=2
        return append_id_link(sm, "pool", "pool", "/pools/", id);
      } else if (controller == "comment") {
        return append_id_link(sm, "comment", "comment", "/comments/", id);
      } else if (controller == "forum") {
        return append_id_link(sm, "forum", "forum-post", "/forums/", id);
      } else if (controller == "forum" && query.empty() && fragment.empty()) {
        // https://danbooru.donmai.us/forum_topics/1234?page=2
        // https://danbooru.donmai.us/forum_topics/1234#forum_post_5678
        return append_id_link(sm, "topic", "forum-topic", "/forums/", id);
      } else if (controller == "user") {
        return append_id_link(sm, "user", "user", "/users/", id);
      } else if (controller == "artist") {
        return append_id_link(sm, "artist", "artist", "/artists/", id);
      } else if (controller == "wiki" && fragment.empty()) {
        // http://danbooru.donmai.us/wiki_pages/10933#dtext-self-upload
        return append_id_link(sm, "wiki", "wiki-page", "/wiki/show/", id);
      }
    } else if (controller == "wiki" && fragment.empty()) {
      return append_wiki_link(sm, {}, id, {}, id, {});
    }
  } else if (path_components.size() >= 3) {
    // http://danbooru.donmai.us/post/show/1234/touhou
    auto controller = path_components.at(0);
    auto action = path_components.at(1);
    auto id = path_components.at(2);

    if (!id.empty() && std::all_of(id.begin(), id.end(), ::isdigit)) {
      if (controller == "post" && action == "show") {
        return append_id_link(sm, "post", "post", "/posts/", id);
      }
    }
  }

  append_absolute_link(sm, url.url, url.url, url.domain == sm->options.domain);
}

static void append_named_url(StateMachine * sm, const std::string_view url, const std::string_view title) {
  auto parsed_title = sm->parse_basic_inline(title);

  // protocol-relative url; treat `//example.com` like `http://example.com`
  if (url.size() > 2 && url.starts_with("//")) {
    auto full_url = "http:" + std::string(url);
    append_absolute_link(sm, full_url, parsed_title, is_internal_url(sm, full_url), false);
  } else if (url[0] == '/' || url[0] == '#') {
    append(sm, "<a class=\"dtext-link\" href=\"");
    append_relative_url(sm, url);
    append(sm, "\">");
    append(sm, parsed_title);
    append(sm, "</a>");
  } else if (url == title) {
    append_unnamed_url(sm, url);
  } else {
    append_absolute_link(sm, url, parsed_title, is_internal_url(sm, url), false);
  }
}

static void append_bare_named_url(StateMachine * sm, const std::string_view url, std::string_view title) {
  auto [trimmed_url, leftovers] = trim_url(url);
  append_named_url(sm, trimmed_url, title);
  append_html_escaped(sm, leftovers);
}

static void append_post_search_link(StateMachine * sm, const std::string_view prefix, const std::string_view search, const std::string_view title, const std::string_view suffix) {
  auto normalized_title = std::string(title);

  append(sm, "<a class=\"dtext-link dtext-post-search-link\" href=\"");
  append_relative_url(sm, "/post?tags=");
  append_uri_escaped(sm, search);
  append(sm, "\">");

  // 19{{60s}} -> {{60s|1960s}}
  if (!prefix.empty()) {
    normalized_title.insert(0, prefix);
  }

  // {{pokemon_(creature)|}} -> {{pokemon_(creature)|pokemon}}
  if (title.empty()) {
    std::regex_replace(std::back_inserter(normalized_title), search.begin(), search.end(), tag_qualifier_regex, "");
  }

  // {{cat}}s -> {{cat|cats}}
  if (!suffix.empty()) {
    normalized_title.append(suffix);
  }

  append_html_escaped(sm, normalized_title);
  append(sm, "</a>");

  clear_matches(sm);
}

static void append_wiki_link(StateMachine * sm, const std::string_view prefix, const std::string_view tag, const std::string_view anchor, const std::string_view title, const std::string_view suffix) {
  auto normalized_tag = std::string(tag);
  auto title_string = std::string(title);

  // "Kantai Collection" -> "kantai_collection"
  std::transform(normalized_tag.cbegin(), normalized_tag.cend(), normalized_tag.begin(), [](unsigned char c) { return c == ' ' ? '_' : std::tolower(c); });

  // [[2019]] -> [[~2019]]
  if (std::all_of(normalized_tag.cbegin(), normalized_tag.cend(), ::isdigit)) {
    normalized_tag.insert(0, "~");
  }

  // Pipe trick: [[Kaga (Kantai Collection)|]] -> [[kaga_(kantai_collection)|Kaga]]
  if (title_string.empty()) {
    std::regex_replace(std::back_inserter(title_string), tag.cbegin(), tag.cend(), tag_qualifier_regex, "");
  }

  // 19[[60s]] -> [[60s|1960s]]
  if (!prefix.empty()) {
    title_string.insert(0, prefix);
  }

  // [[cat]]s -> [[cat|cats]]
  if (!suffix.empty()) {
    title_string.append(suffix);
  }

  append(sm, "<a class=\"dtext-link dtext-wiki-link\" href=\"");
  append_relative_url(sm, "/wiki/show?title=");
  append_uri_escaped(sm, normalized_tag);

  if (!anchor.empty()) {
    std::string normalized_anchor(anchor);
    std::transform(normalized_anchor.begin(), normalized_anchor.end(), normalized_anchor.begin(), [](char c) { return isalnum(c) ? tolower(c) : '-'; });
    append_html_escaped(sm, "#dtext-");
    append_html_escaped(sm, normalized_anchor);
  }

  append(sm, "\">");
  append_html_escaped(sm, title_string);
  append(sm, "</a>");

  sm->wiki_pages.insert(std::string(tag));

  clear_matches(sm);
}

static void append_paged_link(StateMachine * sm, const char * title, const char * tag, const char * href, const char * param) {
  append(sm, tag);
  append_relative_url(sm, href);
  append(sm, sm->a1, sm->a2);
  append(sm, param);
  append(sm, sm->b1, sm->b2);
  append(sm, "\">");
  append(sm, title);
  append(sm, sm->a1, sm->a2);
  append(sm, "/p");
  append(sm, sm->b1, sm->b2);
  append(sm, "</a>");
}

static void append_dmail_key_link(StateMachine * sm) {
  append(sm, "<a class=\"dtext-link dtext-id-link dtext-dmail-id-link\" href=\"");
  append_relative_url(sm, "/dmails/");
  append(sm, sm->a1, sm->a2);
  append(sm, "?key=");
  append_uri_escaped(sm, { sm->b1, sm->b2 });
  append(sm, "\">");
  append(sm, "dmail #");
  append(sm, sm->a1, sm->a2);
  append(sm, "</a>");
}

static void append_code_fence(StateMachine * sm, const std::string_view code, const std::string_view language) {
  if (language.empty()) {
    append_block(sm, "<pre>");
    append_html_escaped(sm, code);
    append_block(sm, "</pre>");
  } else {
    append_block(sm, "<pre class=\"language-");
    append_html_escaped(sm, language);
    append_block(sm, "\">");
    append_html_escaped(sm, code);
    append_block(sm, "</pre>");
  }
}

static void append_inline_code(StateMachine * sm, const std::string_view language = {}) {
  if (language.empty()) {
    dstack_open_element(sm, INLINE_CODE, "<code>");
  } else {
    dstack_open_element(sm, INLINE_CODE, "<code class=\"language-");
    append_html_escaped(sm, language);
    append(sm, "\">");
  }
}

static void append_block_code(StateMachine * sm, const std::string_view language = {}) {
  dstack_close_leaf_blocks(sm);

  if (language.empty()) {
    dstack_open_element(sm, BLOCK_CODE, "<pre>");
  } else {
    dstack_open_element(sm, BLOCK_CODE, "<pre class=\"language-");
    append_html_escaped(sm, language);
    append(sm, "\">");
  }
}

static void append_header(StateMachine * sm, char header, const std::string_view id) {
  static element_t blocks[] = { BLOCK_H1, BLOCK_H2, BLOCK_H3, BLOCK_H4, BLOCK_H5, BLOCK_H6 };
  element_t block = blocks[header - '1'];

  if (id.empty()) {
    dstack_open_element(sm, block, "<h");
    append_block(sm, header);
    append_block(sm, ">");
  } else {
    auto normalized_id = std::string(id);
    std::transform(id.begin(), id.end(), normalized_id.begin(), [](char c) { return isalnum(c) ? tolower(c) : '-'; });

    dstack_open_element(sm, block, "<h");
    append_block(sm, header);
    append_block(sm, " id=\"dtext-");
    append_block(sm, normalized_id);
    append_block(sm, "\">");
  }

  sm->header_mode = true;
}

static void append_block(StateMachine * sm, const auto s) {
  if (!sm->options.f_inline) {
    append(sm, s);
  }
}

static void append_block_html_escaped(StateMachine * sm, const std::string_view string) {
  if (!sm->options.f_inline) {
    append_html_escaped(sm, string);
  }
}

static void append_closing_p(StateMachine * sm) {
  g_debug("append closing p");

  if (sm->output.size() > 4 && sm->output.ends_with("<br>")) {
    g_debug("trim last <br>");
    sm->output.resize(sm->output.size() - 4);
  }

  if (sm->output.size() > 3 && sm->output.ends_with("<p>")) {
    g_debug("trim last <p>");
    sm->output.resize(sm->output.size() - 3);
    return;
  }

  append_block(sm, "</p>");
}

static void dstack_open_element(StateMachine * sm, element_t type, const char * html) {
  g_debug("opening %s", html);

  dstack_push(sm, type);

  if (type >= INLINE) {
    append(sm, html);
  } else {
    append_block(sm, html);
  }
}

static void dstack_open_element(StateMachine * sm, element_t type, std::string_view tag_name, const StateMachine::TagAttributes& tag_attributes) {
  dstack_push(sm, type);
  append_block(sm, "<");
  append_block(sm, tag_name);

  auto& permitted_names = permitted_attribute_names.at(tag_name);
  for (auto& [name, value] : tag_attributes) {
    if (permitted_names.find(name) != permitted_names.end()) {
      auto validate_value = permitted_attribute_values.at(name);

      if (validate_value(value)) {
        append_block(sm, " ");
        append_block_html_escaped(sm, name);
        append_block(sm, "=\"");
        append_block_html_escaped(sm, value);
        append_block(sm, "\"");
      }
    }
  }

  append_block(sm, ">");
  clear_tag_attributes(sm);
}

static bool dstack_close_element(StateMachine * sm, element_t type) {
  if (dstack_check(sm, type)) {
    dstack_rewind(sm);
    return true;
  } else if (type >= INLINE && dstack_peek(sm) >= INLINE) {
    g_debug("out-of-order close %s; closing %s instead", element_names[type], element_names[dstack_peek(sm)]);
    dstack_rewind(sm);
    return true;
  } else if (type >= INLINE) {
    g_debug("out-of-order closing %s", element_names[type]);
    append_html_escaped(sm, { sm->ts, sm->te });
    return false;
  } else {
    g_debug("out-of-order closing %s", element_names[type]);
    append_block_html_escaped(sm, { sm->ts, sm->te });
    return false;
  }
}

// Close the last open tag.
static void dstack_rewind(StateMachine * sm) {
  element_t element = dstack_pop(sm);
  g_debug("dstack rewind %s", element_names[element]);

  switch(element) {
    case BLOCK_P: append_closing_p(sm); break;
    case INLINE_SPOILER: append(sm, "</span>"); break;
    case BLOCK_SPOILER: append_block(sm, "</div>"); break;
    case BLOCK_QUOTE: append_block(sm, "</blockquote>"); break;
    case BLOCK_EXPAND: append_block(sm, "</div></details>"); break;
    case BLOCK_COLOR: append_block(sm, "</span>"); break;
    case BLOCK_NODTEXT: append_block(sm, "</p>"); break;
    case BLOCK_CODE: append_block(sm, "</pre>"); break;
    case BLOCK_TD: append_block(sm, "</td>"); break;
    case BLOCK_TH: append_block(sm, "</th>"); break;

    case INLINE_NODTEXT: break;
    case INLINE_B: append(sm, "</strong>"); break;
    case INLINE_I: append(sm, "</em>"); break;
    case INLINE_U: append(sm, "</u>"); break;
    case INLINE_S: append(sm, "</s>"); break;
    case INLINE_TN: append(sm, "</span>"); break;
    case INLINE_CENTER: append(sm, "</span>"); break;
    case INLINE_CODE: append(sm, "</code>"); break;

    case BLOCK_TN: append_closing_p(sm); break;
    case BLOCK_CENTER: append_closing_p(sm); break;
    case BLOCK_TABLE: append_block(sm, "</table>"); break;
    case BLOCK_COLGROUP: append_block(sm, "</colgroup>"); break;
    case BLOCK_THEAD: append_block(sm, "</thead>"); break;
    case BLOCK_TBODY: append_block(sm, "</tbody>"); break;
    case BLOCK_TR: append_block(sm, "</tr>"); break;
    case BLOCK_UL: append_block(sm, "</ul>"); break;
    case BLOCK_LI: append_block(sm, "</li>"); break;
    case BLOCK_H6: append_block(sm, "</h6>"); sm->header_mode = false; break;
    case BLOCK_H5: append_block(sm, "</h5>"); sm->header_mode = false; break;
    case BLOCK_H4: append_block(sm, "</h4>"); sm->header_mode = false; break;
    case BLOCK_H3: append_block(sm, "</h3>"); sm->header_mode = false; break;
    case BLOCK_H2: append_block(sm, "</h2>"); sm->header_mode = false; break;
    case BLOCK_H1: append_block(sm, "</h1>"); sm->header_mode = false; break;

    // Should never happen.
    case INLINE: break;
    case DSTACK_EMPTY: break;
  } 
}

// container blocks: [spoiler], [quote], [expand], [tn], [center], [color]
// leaf blocks: [nodtext], [code], [table], [td]?, [th]?, <h1>, <p>, <li>, <ul>
static void dstack_close_leaf_blocks(StateMachine * sm) {
  g_debug("dstack close leaf blocks");

  while (!sm->dstack.empty() && !dstack_check(sm, BLOCK_QUOTE) && !dstack_check(sm, BLOCK_SPOILER) && !dstack_check(sm, BLOCK_EXPAND) && !dstack_check(sm, BLOCK_TN) && !dstack_check(sm, BLOCK_CENTER) && !dstack_check(sm, BLOCK_COLOR)) {
    dstack_rewind(sm);
  }
}

// Close all open tags up to and including the given tag.
static void dstack_close_until(StateMachine * sm, element_t element) {
  while (!sm->dstack.empty() && !dstack_check(sm, element)) {
    dstack_rewind(sm);
  }

  dstack_rewind(sm);
}

// Close all remaining open tags.
static void dstack_close_all(StateMachine * sm) {
  while (!sm->dstack.empty()) {
    dstack_rewind(sm);
  }
}

static void dstack_open_list(StateMachine * sm, int depth) {
  g_debug("open list");

  if (dstack_is_open(sm, BLOCK_LI)) {
    dstack_close_until(sm, BLOCK_LI);
  } else {
    dstack_close_leaf_blocks(sm);
  }

  while (dstack_count(sm, BLOCK_UL) < depth) {
    dstack_open_element(sm, BLOCK_UL, "<ul>");
  }

  while (dstack_count(sm, BLOCK_UL) > depth) {
    dstack_close_until(sm, BLOCK_UL);
  }

  dstack_open_element(sm, BLOCK_LI, "<li>");
}

static void dstack_close_list(StateMachine * sm) {
  while (dstack_is_open(sm, BLOCK_UL)) {
    dstack_close_until(sm, BLOCK_UL);
  }
}

static void save_tag_attribute(StateMachine * sm, const std::string_view name, const std::string_view value) {
  sm->tag_attributes[name] = value;
}

static void clear_tag_attributes(StateMachine * sm) {
  sm->tag_attributes.clear();
}

static void clear_matches(StateMachine * sm) {
  sm->a1 = NULL;
  sm->a2 = NULL;
  sm->b1 = NULL;
  sm->b2 = NULL;
  sm->c1 = NULL;
  sm->c2 = NULL;
  sm->d1 = NULL;
  sm->d2 = NULL;
  sm->e1 = NULL;
  sm->e2 = NULL;
}

// True if a mention is allowed to start after this character.
static bool is_mention_boundary(unsigned char c) {
  switch (c) {
    case '\0': return true;
    case '\r': return true;
    case '\n': return true;
    case ' ':  return true;
    case '/':  return true;
    case '"':  return true;
    case '\'': return true;
    case '(':  return true;
    case ')':  return true;
    case '[':  return true;
    case ']':  return true;
    case '{':  return true;
    case '}':  return true;
    default:   return false;
  }
}

// Trim trailing unbalanced ')' characters from the URL.
static std::tuple<std::string_view, std::string_view> trim_url(const std::string_view url) {
  std::string_view trimmed = url;

  while (!trimmed.empty() && trimmed.back() == ')' && std::count(trimmed.begin(), trimmed.end(), ')') > std::count(trimmed.begin(), trimmed.end(), '(')) {
    trimmed.remove_suffix(1);
  }

  return { trimmed, { trimmed.end(), url.end() } };
}

// Replace CRLF sequences with LF.
static void replace_newlines(const std::string_view input, std::string& output) {
  size_t pos, last = 0;

  while (std::string::npos != (pos = input.find("\r\n", last))) {
    output.append(input, last, pos - last);
    output.append("\n");
    last = pos + 2;
  }

  output.append(input, last, pos - last);
}

StateMachine::StateMachine(const auto string, int initial_state, const DTextOptions options) : options(options) {
  // Add null bytes to the beginning and end of the string as start and end of string markers.
  input.reserve(string.size());
  input.append(1, '\0');
  replace_newlines(string, input);
  input.append(1, '\0');

  output.reserve(string.size() * 1.5);
  stack.reserve(16);
  dstack.reserve(16);

  p = input.c_str();
  pb = input.c_str();
  pe = input.c_str() + input.size();
  eof = pe;
  cs = initial_state;
}

std::string StateMachine::parse_inline(const std::string_view dtext) {
  StateMachine sm(dtext, dtext_en_inline, options);
  return sm.parse();
}

std::string StateMachine::parse_basic_inline(const std::string_view dtext) {
  StateMachine sm(dtext, dtext_en_basic_inline, options);
  return sm.parse();
}

StateMachine::ParseResult StateMachine::parse_dtext(const std::string_view dtext, DTextOptions options) {
  StateMachine sm(dtext, dtext_en_main, options);
  return { sm.parse(), sm.wiki_pages };
}

std::string StateMachine::parse() {
  StateMachine* sm = this;
  g_debug("parse '%.*s'", (int)(sm->input.size() - 2), sm->input.c_str() + 1);

  
#line 4740 "ext/dtext/dtext.cpp"
	{
	( sm->top) = 0;
	( sm->ts) = 0;
	( sm->te) = 0;
	( sm->act) = 0;
	}

#line 1463 "ext/dtext/dtext.cpp.rl"
  
#line 4746 "ext/dtext/dtext.cpp"
	{
	int _klen;
	unsigned int _trans;
	short _widec;
	const unsigned char *_acts;
	unsigned int _nacts;
	const short *_keys;

	if ( ( sm->p) == ( sm->pe) )
		goto _test_eof;
	if (  sm->cs == 0 )
		goto _out;
_resume:
	_acts = _dtext_actions + _dtext_from_state_actions[ sm->cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 12:
#line 1 "NONE"
	{( sm->ts) = ( sm->p);}
	break;
#line 4766 "ext/dtext/dtext.cpp"
		}
	}

	_widec = (*( sm->p));
	_klen = _dtext_cond_lengths[ sm->cs];
	_keys = _dtext_cond_keys + (_dtext_cond_offsets[ sm->cs]*2);
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				switch ( _dtext_cond_spaces[_dtext_cond_offsets[ sm->cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = (short)(128 + ((*( sm->p)) - -128));
		if ( 
#line 82 "ext/dtext/dtext.cpp.rl"
 is_mention_boundary(p[-1])  ) _widec += 256;
		break;
	}
	case 1: {
		_widec = (short)(640 + ((*( sm->p)) - -128));
		if ( 
#line 83 "ext/dtext/dtext.cpp.rl"
 sm->options.f_mentions  ) _widec += 256;
		break;
	}
	case 2: {
		_widec = (short)(2176 + ((*( sm->p)) - -128));
		if ( 
#line 84 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_QUOTE)  ) _widec += 256;
		break;
	}
	case 3: {
		_widec = (short)(2688 + ((*( sm->p)) - -128));
		if ( 
#line 85 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_EXPAND)  ) _widec += 256;
		break;
	}
	case 4: {
		_widec = (short)(3200 + ((*( sm->p)) - -128));
		if ( 
#line 86 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_COLOR)  ) _widec += 256;
		break;
	}
	case 5: {
		_widec = (short)(1152 + ((*( sm->p)) - -128));
		if ( 
#line 82 "ext/dtext/dtext.cpp.rl"
 is_mention_boundary(p[-1])  ) _widec += 256;
		if ( 
#line 83 "ext/dtext/dtext.cpp.rl"
 sm->options.f_mentions  ) _widec += 512;
		break;
	}
				}
				break;
			}
		}
	}

	_keys = _dtext_trans_keys + _dtext_key_offsets[ sm->cs];
	_trans = _dtext_index_offsets[ sm->cs];

	_klen = _dtext_single_lengths[ sm->cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < *_mid )
				_upper = _mid - 1;
			else if ( _widec > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _dtext_range_lengths[ sm->cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _dtext_indicies[_trans];
_eof_trans:
	 sm->cs = _dtext_trans_targs[_trans];

	if ( _dtext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _dtext_actions + _dtext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 71 "ext/dtext/dtext.cpp.rl"
	{ sm->a1 = sm->p; }
	break;
	case 1:
#line 72 "ext/dtext/dtext.cpp.rl"
	{ sm->a2 = sm->p; }
	break;
	case 2:
#line 73 "ext/dtext/dtext.cpp.rl"
	{ sm->b1 = sm->p; }
	break;
	case 3:
#line 74 "ext/dtext/dtext.cpp.rl"
	{ sm->b2 = sm->p; }
	break;
	case 4:
#line 75 "ext/dtext/dtext.cpp.rl"
	{ sm->c1 = sm->p; }
	break;
	case 5:
#line 76 "ext/dtext/dtext.cpp.rl"
	{ sm->c2 = sm->p; }
	break;
	case 6:
#line 77 "ext/dtext/dtext.cpp.rl"
	{ sm->d1 = sm->p; }
	break;
	case 7:
#line 78 "ext/dtext/dtext.cpp.rl"
	{ sm->d2 = sm->p; }
	break;
	case 8:
#line 79 "ext/dtext/dtext.cpp.rl"
	{ sm->e1 = sm->p; }
	break;
	case 9:
#line 80 "ext/dtext/dtext.cpp.rl"
	{ sm->e2 = sm->p; }
	break;
	case 10:
#line 87 "ext/dtext/dtext.cpp.rl"
	{ save_tag_attribute(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }); }
	break;
	case 13:
#line 1 "NONE"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 14:
#line 282 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_B, "<strong>"); }}
	break;
	case 15:
#line 283 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_B); }}
	break;
	case 16:
#line 284 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_I, "<em>"); }}
	break;
	case 17:
#line 285 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_I); }}
	break;
	case 18:
#line 286 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_S, "<s>"); }}
	break;
	case 19:
#line 287 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_S); }}
	break;
	case 20:
#line 288 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_U, "<u>"); }}
	break;
	case 21:
#line 289 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_U); }}
	break;
	case 22:
#line 290 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 23:
#line 291 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 24:
#line 291 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 25:
#line 291 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 26:
#line 334 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 35;}
	break;
	case 27:
#line 346 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 38;}
	break;
	case 28:
#line 354 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 40;}
	break;
	case 29:
#line 535 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 75;}
	break;
	case 30:
#line 553 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 76;}
	break;
	case 31:
#line 571 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 78;}
	break;
	case 32:
#line 573 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 79;}
	break;
	case 33:
#line 577 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 80;}
	break;
	case 34:
#line 338 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_named_url(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }}
	break;
	case 35:
#line 342 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_named_url(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 });
  }}
	break;
	case 36:
#line 350 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_unnamed_url(sm, { sm->a1, sm->a2 });
  }}
	break;
	case 37:
#line 358 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("delimited mention: <@%.*s>", (int)(sm->a2 - sm->a1), sm->a1);
    append_mention(sm, { sm->a1, sm->a2 });
  }}
	break;
	case 38:
#line 369 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_B, "<strong>"); }}
	break;
	case 39:
#line 370 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_B); }}
	break;
	case 40:
#line 371 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_I, "<em>"); }}
	break;
	case 41:
#line 372 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_I); }}
	break;
	case 42:
#line 373 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_S, "<s>"); }}
	break;
	case 43:
#line 374 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_S); }}
	break;
	case 44:
#line 375 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_U, "<u>"); }}
	break;
	case 45:
#line 376 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_U); }}
	break;
	case 46:
#line 378 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_TN, "<span class=\"tn\">");
  }}
	break;
	case 47:
#line 382 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/tn]");

    if (dstack_check(sm, INLINE_TN)) {
      dstack_close_element(sm, INLINE_TN);
    } else if (dstack_close_element(sm, BLOCK_TN)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 48:
#line 392 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_CENTER, "<span class=\"center\">");
  }}
	break;
	case 49:
#line 396 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/center]");

    if (dstack_check(sm, INLINE_CENTER)) {
      dstack_close_element(sm, INLINE_CENTER);
    } else if (dstack_close_element(sm, BLOCK_CENTER)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 50:
#line 406 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (sm->header_mode) {
      append_html_escaped(sm, "<br>");
    } else {
      append(sm, "<br>");
    };
  }}
	break;
	case 51:
#line 414 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1344;goto _again;}}
  }}
	break;
	case 52:
#line 419 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1344;goto _again;}}
  }}
	break;
	case 53:
#line 424 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 54:
#line 430 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 55:
#line 436 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_SPOILER, "<span class=\"spoiler\">");
  }}
	break;
	case 56:
#line 440 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_is_open(sm, INLINE_SPOILER)) {
      dstack_close_element(sm, INLINE_SPOILER);
    } else if (dstack_is_open(sm, BLOCK_SPOILER)) {
      dstack_close_until(sm, BLOCK_SPOILER);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append_html_escaped(sm, { sm->ts, sm->te });
    }
  }}
	break;
	case 57:
#line 451 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1348;goto _again;}}
  }}
	break;
	case 58:
#line 459 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 59:
#line 471 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [quote]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 60:
#line 484 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [expand]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 61:
#line 497 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [color]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 62:
#line 510 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 63:
#line 516 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TH)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 64:
#line 522 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TD)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 65:
#line 567 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append(sm, ' ');
  }}
	break;
	case 66:
#line 577 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 67:
#line 295 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "post", "post", "/posts/", { sm->a1, sm->a2 }); }}
	break;
	case 68:
#line 296 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "forum", "forum-post", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 69:
#line 297 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "topic", "forum-topic", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 70:
#line 298 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "comment", "comment", "/comments/", { sm->a1, sm->a2 }); }}
	break;
	case 71:
#line 299 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "dmail", "dmail", "/dmails/", { sm->a1, sm->a2 }); }}
	break;
	case 72:
#line 300 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "pool", "pool", "/pools/", { sm->a1, sm->a2 }); }}
	break;
	case 73:
#line 301 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "user", "user", "/users/", { sm->a1, sm->a2 }); }}
	break;
	case 74:
#line 302 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "artist", "artist", "/artists/", { sm->a1, sm->a2 }); }}
	break;
	case 75:
#line 303 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "user report", "user-report", "/user_flags/", { sm->a1, sm->a2 }); }}
	break;
	case 76:
#line 304 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag alias", "tag-alias", "/tag_aliases?id=", { sm->a1, sm->a2 }); }}
	break;
	case 77:
#line 305 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag implication", "tag-implication", "/tag_implications?id=", { sm->a1, sm->a2 }); }}
	break;
	case 78:
#line 306 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag translation", "tag-translation", "/tag_translations?id=", { sm->a1, sm->a2 }); }}
	break;
	case 79:
#line 307 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "book", "book", "/pools/", { sm->a1, sm->a2 }); }}
	break;
	case 80:
#line 308 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "series", "series", "/series/", { sm->a1, sm->a2 }); }}
	break;
	case 81:
#line 309 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "mod action", "mod-action", "/mod_actions?id=", { sm->a1, sm->a2 }); }}
	break;
	case 82:
#line 310 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "record", "user-record", "/user_records?id=", { sm->a1, sm->a2 }); }}
	break;
	case 83:
#line 311 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "wiki", "wiki-page", "/wiki/show/", { sm->a1, sm->a2 }); }}
	break;
	case 84:
#line 313 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_dmail_key_link(sm); }}
	break;
	case 85:
#line 315 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_paged_link(sm, "topic #", "<a class=\"dtext-link dtext-id-link dtext-forum-topic-id-link\" href=\"", "/forums/", "?page="); }}
	break;
	case 86:
#line 316 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_paged_link(sm, "pixiv #", "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-id-link dtext-pixiv-id-link\" href=\"", "https://www.pixiv.net/artworks/", "#"); }}
	break;
	case 87:
#line 318 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_post_search_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->b1, sm->b2 }, { sm->d1, sm->d2 });
  }}
	break;
	case 88:
#line 322 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_post_search_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->d1, sm->d2 });
  }}
	break;
	case 89:
#line 326 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_wiki_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->b1, sm->b2 }, { sm->e1, sm->e2 });
  }}
	break;
	case 90:
#line 330 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_wiki_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->d1, sm->d2 }, { sm->e1, sm->e2 });
  }}
	break;
	case 91:
#line 334 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }}
	break;
	case 92:
#line 346 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }}
	break;
	case 93:
#line 354 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_mention(sm, { sm->a1, sm->a2 + 1 });
  }}
	break;
	case 94:
#line 363 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline list");
    {( sm->p) = (( sm->ts + 1))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 95:
#line 414 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1344;goto _again;}}
  }}
	break;
	case 96:
#line 419 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1344;goto _again;}}
  }}
	break;
	case 97:
#line 451 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1348;goto _again;}}
  }}
	break;
	case 98:
#line 465 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 99:
#line 478 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/quote]");
    dstack_close_until(sm, BLOCK_QUOTE);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 100:
#line 491 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/expand]");
    dstack_close_until(sm, BLOCK_EXPAND);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 101:
#line 504 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/color]");
    dstack_close_until(sm, BLOCK_COLOR);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 102:
#line 528 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [hr] (pos: %ld)", sm->ts - sm->pb);
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 103:
#line 535 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 104:
#line 553 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }}
	break;
	case 105:
#line 573 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append(sm, std::string_view { sm->ts, sm->te });
  }}
	break;
	case 106:
#line 577 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 107:
#line 297 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_id_link(sm, "topic", "forum-topic", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 108:
#line 299 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_id_link(sm, "dmail", "dmail", "/dmails/", { sm->a1, sm->a2 }); }}
	break;
	case 109:
#line 334 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }}
	break;
	case 110:
#line 346 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }}
	break;
	case 111:
#line 414 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1344;goto _again;}}
  }}
	break;
	case 112:
#line 419 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1344;goto _again;}}
  }}
	break;
	case 113:
#line 451 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1348;goto _again;}}
  }}
	break;
	case 114:
#line 535 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 115:
#line 553 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }}
	break;
	case 116:
#line 573 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append(sm, std::string_view { sm->ts, sm->te });
  }}
	break;
	case 117:
#line 577 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 118:
#line 1 "NONE"
	{	switch( ( sm->act) ) {
	case 35:
	{{( sm->p) = ((( sm->te)))-1;}
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }
	break;
	case 38:
	{{( sm->p) = ((( sm->te)))-1;}
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }
	break;
	case 40:
	{{( sm->p) = ((( sm->te)))-1;}
    append_mention(sm, { sm->a1, sm->a2 + 1 });
  }
	break;
	case 75:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }
	break;
	case 76:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }
	break;
	case 79:
	{{( sm->p) = ((( sm->te)))-1;}
    append(sm, std::string_view { sm->ts, sm->te });
  }
	break;
	case 80:
	{{( sm->p) = ((( sm->te)))-1;}
    append_html_escaped(sm, (*( sm->p)));
  }
	break;
	default:
	{{( sm->p) = ((( sm->te)))-1;}}
	break;
	}
	}
	break;
	case 119:
#line 583 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_rewind(sm);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 120:
#line 588 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 121:
#line 590 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 122:
#line 590 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 123:
#line 590 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 124:
#line 596 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_rewind(sm);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 125:
#line 601 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 126:
#line 603 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 127:
#line 603 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 128:
#line 603 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 129:
#line 609 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_COLGROUP, "colgroup", sm->tag_attributes);
  }}
	break;
	case 130:
#line 613 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_COLGROUP);
  }}
	break;
	case 131:
#line 617 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_COL, "col", sm->tag_attributes);
    dstack_pop(sm); // XXX [col] has no end tag
  }}
	break;
	case 132:
#line 622 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_THEAD, "thead", sm->tag_attributes);
  }}
	break;
	case 133:
#line 626 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_THEAD);
  }}
	break;
	case 134:
#line 630 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TBODY, "tbody", sm->tag_attributes);
  }}
	break;
	case 135:
#line 634 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_TBODY);
  }}
	break;
	case 136:
#line 638 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TH, "th", sm->tag_attributes);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1200;goto _again;}}
  }}
	break;
	case 137:
#line 643 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TR, "tr", sm->tag_attributes);
  }}
	break;
	case 138:
#line 647 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_TR);
  }}
	break;
	case 139:
#line 651 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TD, "td", sm->tag_attributes);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1200;goto _again;}}
  }}
	break;
	case 140:
#line 656 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TABLE)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 141:
#line 662 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 142:
#line 662 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;}
	break;
	case 143:
#line 662 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}}
	break;
	case 144:
#line 681 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1344;goto _again;}}
  }}
	break;
	case 145:
#line 686 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1344;goto _again;}}
  }}
	break;
	case 146:
#line 691 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_code_fence(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }}
	break;
	case 147:
#line 723 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1348;goto _again;}}
  }}
	break;
	case 148:
#line 729 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_TABLE, "<table class=\"highlightable\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1352;goto _again;}}
  }}
	break;
	case 149:
#line 735 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TN, "<p class=\"tn\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1200;goto _again;}}
  }}
	break;
	case 150:
#line 740 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_CENTER, "<p class=\"center\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1200;goto _again;}}
  }}
	break;
	case 151:
#line 761 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND) || dstack_check(sm, BLOCK_COLOR)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1200;goto _again;}}
  }}
	break;
	case 152:
#line 666 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_header(sm, *sm->a1, { sm->b1, sm->b2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1200;goto _again;}}
  }}
	break;
	case 153:
#line 671 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_QUOTE, "<blockquote>");
  }}
	break;
	case 154:
#line 676 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_SPOILER, "<div class=\"spoiler\">");
  }}
	break;
	case 155:
#line 681 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1344;goto _again;}}
  }}
	break;
	case 156:
#line 686 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1344;goto _again;}}
  }}
	break;
	case 157:
#line 695 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_EXPAND, "<details>");
    append_block(sm, "<summary>Show</summary><div>");
  }}
	break;
	case 158:
#line 701 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block [expand=]");
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_EXPAND, "<details>");
    append_block(sm, "<summary>");
    append_block_html_escaped(sm, { sm->a1, sm->a2 });
    append_block(sm, "</summary><div>");
  }}
	break;
	case 159:
#line 710 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_COLOR, "<span style=\"color:#FF761C;\">");
  }}
	break;
	case 160:
#line 715 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block [color=]");
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_COLOR, "<span style=\"color:");
    append_block_html_escaped(sm, { sm->a1, sm->a2 });
    append_block(sm, "\">");
  }}
	break;
	case 161:
#line 723 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1348;goto _again;}}
  }}
	break;
	case 162:
#line 745 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("write '<hr>' (pos: %ld)", sm->ts - sm->pb);
    append_block(sm, "<hr>");
  }}
	break;
	case 163:
#line 750 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block list");
    dstack_open_list(sm, sm->a2 - sm->a1);
    {( sm->p) = (( sm->b1))-1;}
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1200;goto _again;}}
  }}
	break;
	case 164:
#line 757 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block blank line(s)");
  }}
	break;
	case 165:
#line 761 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND) || dstack_check(sm, BLOCK_COLOR)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1200;goto _again;}}
  }}
	break;
	case 166:
#line 681 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1344;goto _again;}}
  }}
	break;
	case 167:
#line 686 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1344;goto _again;}}
  }}
	break;
	case 168:
#line 723 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1348;goto _again;}}
  }}
	break;
	case 169:
#line 757 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("block blank line(s)");
  }}
	break;
	case 170:
#line 761 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND) || dstack_check(sm, BLOCK_COLOR)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1200;goto _again;}}
  }}
	break;
#line 6180 "ext/dtext/dtext.cpp"
		}
	}

_again:
	_acts = _dtext_actions + _dtext_to_state_actions[ sm->cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 11:
#line 1 "NONE"
	{( sm->ts) = 0;}
	break;
#line 6191 "ext/dtext/dtext.cpp"
		}
	}

	if (  sm->cs == 0 )
		goto _out;
	if ( ++( sm->p) != ( sm->pe) )
		goto _resume;
	_test_eof: {}
	if ( ( sm->p) == ( sm->eof) )
	{
	if ( _dtext_eof_trans[ sm->cs] > 0 ) {
		_trans = _dtext_eof_trans[ sm->cs] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 1464 "ext/dtext/dtext.cpp.rl"

  g_debug("EOF; closing stray blocks");
  dstack_close_all(sm);
  g_debug("done");

  return sm->output;
}

/* Everything below is optional, it's only needed to build bin/cdtext.exe. */
#ifdef CDTEXT

#include <glib.h>
#include <iostream>

static void parse_file(FILE* input, FILE* output) {
  std::stringstream ss;
  ss << std::cin.rdbuf();
  std::string dtext = ss.str();

  try {
    auto result = StateMachine::parse_dtext(dtext, options);

    if (fwrite(result.c_str(), 1, result.size(), output) != result.size()) {
      perror("fwrite failed");
      exit(1);
    }
  } catch (std::exception& e) {
    fprintf(stderr, "dtext parse error: %s\n", e.what());
    exit(1);
  }
}

int main(int argc, char* argv[]) {
  GError* error = NULL;
  bool opt_verbose = FALSE;
  bool opt_inline = FALSE;
  bool opt_no_mentions = FALSE;

  GOptionEntry options[] = {
    { "no-mentions", 'm', 0, G_OPTION_ARG_NONE, &opt_no_mentions, "Don't parse @mentions", NULL },
    { "inline",      'i', 0, G_OPTION_ARG_NONE, &opt_inline,      "Parse in inline mode", NULL },
    { "verbose",     'v', 0, G_OPTION_ARG_NONE, &opt_verbose,     "Print debug output", NULL },
    { NULL }
  };

  g_autoptr(GOptionContext) context = g_option_context_new("[FILE...]");
  g_option_context_add_main_entries(context, options, NULL);

  if (!g_option_context_parse(context, &argc, &argv, &error)) {
    fprintf(stderr, "option parsing failed: %s\n", error->message);
    g_clear_error(&error);
    return 1;
  }

  if (opt_verbose) {
    g_setenv("G_MESSAGES_DEBUG", "all", TRUE);
  }

  /* skip first argument (progname) */
  argc--, argv++;

  if (argc == 0) {
    parse_file(stdin, stdout, { .f_inline = opt_inline, .f_mentions = !opt_no_mentions });
    return 0;
  }

  for (const char* filename = *argv; argc > 0; argc--, argv++) {
    FILE* input = fopen(filename, "r");
    if (!input) {
      perror("fopen failed");
      return 1;
    }

    parse_file(input, stdout, opt_inline, !opt_no_mentions);
    fclose(input);
  }

  return 0;
}

#endif