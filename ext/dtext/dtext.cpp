
#line 1 "ext/dtext/dtext.cpp.rl"
#include "dtext.h"
#include "url.h"

#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <regex>

#ifdef DEBUG
#undef g_debug
#define STRINGIFY(x) XSTRINGIFY(x)
#define XSTRINGIFY(x) #x
#define g_debug(fmt, ...) fprintf(stderr, "\x1B[1;32mDEBUG\x1B[0m %-28.28s %-24.24s " fmt "\n", __FILE__ ":" STRINGIFY(__LINE__), __func__, ##__VA_ARGS__)
#else
#undef g_debug
#define g_debug(...)
#endif

static const size_t MAX_STACK_DEPTH = 512;

// Strip qualifier from tag: "Artoria Pendragon (Lancer) (Fate)" -> "Artoria Pendragon (Lancer)"
static const std::regex tag_qualifier_regex("[ _]\\([^)]+?\\)$");

// Permitted HTML attribute names.
static const std::unordered_map<std::string_view, const std::unordered_set<std::string_view>> permitted_attribute_names = {
  { "thead",    { "align" } },
  { "tbody",    { "align" } },
  { "tr",       { "align" } },
  { "td",       { "align", "colspan", "rowspan" } },
  { "th",       { "align", "colspan", "rowspan" } },
  { "col",      { "align", "span" } },
  { "colgroup", {} },
};

// Permitted HTML attribute values.
static const std::unordered_set<std::string_view> align_values = { "left", "center", "right", "justify" };
static const std::unordered_map<std::string_view, std::function<bool(std::string_view)>> permitted_attribute_values = {
  { "align",   [](auto value) { return align_values.find(value) != align_values.end(); } },
  { "span",    [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
  { "colspan", [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
  { "rowspan", [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
};


#line 773 "ext/dtext/dtext.cpp.rl"



#line 47 "ext/dtext/dtext.cpp"
static const unsigned char _dtext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 10, 1, 11, 1, 
	12, 1, 13, 1, 14, 1, 15, 1, 
	16, 1, 17, 1, 18, 1, 19, 1, 
	20, 1, 21, 1, 22, 1, 23, 1, 
	24, 1, 25, 1, 51, 1, 52, 1, 
	53, 1, 55, 1, 56, 1, 57, 1, 
	58, 1, 59, 1, 60, 1, 61, 1, 
	62, 1, 63, 1, 64, 1, 65, 1, 
	66, 1, 67, 1, 68, 1, 69, 1, 
	70, 1, 71, 1, 72, 1, 73, 1, 
	74, 1, 75, 1, 76, 1, 77, 1, 
	78, 1, 79, 1, 80, 1, 81, 1, 
	82, 1, 83, 1, 108, 1, 109, 1, 
	110, 1, 112, 1, 113, 1, 114, 1, 
	115, 1, 116, 1, 117, 1, 118, 1, 
	119, 1, 120, 1, 121, 1, 122, 1, 
	123, 1, 124, 1, 125, 1, 126, 1, 
	127, 1, 128, 1, 129, 1, 130, 1, 
	131, 1, 132, 1, 133, 1, 134, 1, 
	135, 1, 136, 1, 137, 1, 138, 1, 
	139, 1, 140, 1, 141, 1, 142, 1, 
	143, 1, 144, 1, 145, 1, 146, 1, 
	147, 1, 148, 1, 149, 1, 150, 1, 
	151, 1, 152, 1, 153, 1, 154, 1, 
	155, 1, 156, 1, 157, 1, 158, 1, 
	159, 1, 160, 1, 161, 1, 162, 1, 
	163, 1, 164, 1, 165, 1, 166, 1, 
	167, 1, 168, 1, 169, 1, 170, 1, 
	171, 1, 172, 1, 173, 1, 174, 1, 
	175, 1, 176, 1, 177, 1, 178, 1, 
	179, 1, 181, 1, 182, 1, 183, 1, 
	184, 1, 185, 1, 186, 1, 187, 2, 
	0, 1, 2, 1, 53, 2, 1, 54, 
	2, 1, 75, 2, 1, 77, 2, 1, 
	78, 2, 1, 84, 2, 1, 85, 2, 
	1, 86, 2, 1, 87, 2, 1, 88, 
	2, 1, 89, 2, 1, 90, 2, 1, 
	91, 2, 1, 92, 2, 1, 93, 2, 
	1, 94, 2, 1, 95, 2, 1, 96, 
	2, 1, 97, 2, 1, 98, 2, 1, 
	99, 2, 1, 100, 2, 2, 3, 2, 
	3, 4, 2, 3, 5, 2, 3, 6, 
	2, 3, 7, 2, 3, 10, 2, 3, 
	51, 2, 3, 52, 2, 3, 101, 2, 
	3, 102, 2, 3, 103, 2, 3, 111, 
	2, 3, 180, 2, 4, 5, 2, 5, 
	7, 2, 6, 7, 2, 7, 104, 2, 
	7, 105, 2, 9, 106, 2, 9, 107, 
	2, 10, 146, 2, 10, 148, 2, 10, 
	149, 2, 10, 151, 2, 10, 153, 2, 
	10, 154, 2, 10, 156, 2, 13, 0, 
	2, 13, 1, 2, 13, 3, 2, 13, 
	26, 2, 13, 27, 2, 13, 28, 2, 
	13, 29, 2, 13, 30, 2, 13, 31, 
	2, 13, 32, 2, 13, 33, 2, 13, 
	34, 2, 13, 35, 2, 13, 36, 2, 
	13, 37, 2, 13, 38, 2, 13, 39, 
	2, 13, 40, 2, 13, 41, 2, 13, 
	42, 2, 13, 44, 2, 13, 46, 2, 
	13, 47, 2, 13, 48, 2, 13, 49, 
	2, 13, 50, 3, 0, 1, 77, 3, 
	0, 1, 78, 3, 1, 2, 3, 3, 
	3, 4, 5, 3, 3, 6, 7, 3, 
	3, 10, 146, 3, 3, 10, 148, 3, 
	3, 10, 149, 3, 3, 10, 151, 3, 
	3, 10, 153, 3, 3, 10, 154, 3, 
	3, 10, 156, 3, 6, 7, 104, 3, 
	6, 7, 105, 3, 8, 9, 106, 3, 
	8, 9, 107, 3, 13, 0, 26, 3, 
	13, 0, 27, 3, 13, 0, 28, 3, 
	13, 0, 29, 3, 13, 0, 30, 3, 
	13, 0, 31, 3, 13, 0, 32, 3, 
	13, 0, 33, 3, 13, 0, 34, 3, 
	13, 0, 35, 3, 13, 0, 36, 3, 
	13, 0, 37, 3, 13, 0, 38, 3, 
	13, 0, 39, 3, 13, 0, 40, 3, 
	13, 0, 41, 3, 13, 0, 42, 3, 
	13, 0, 49, 3, 13, 1, 45, 3, 
	13, 2, 3, 3, 13, 3, 43, 4, 
	13, 0, 1, 50, 4, 13, 2, 3, 
	43
};

static const short _dtext_cond_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 2, 2, 2, 2, 
	2, 2, 3, 3, 3, 3, 3, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	5, 5, 5, 5, 5, 5, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 10, 16, 
	17, 37, 57, 78, 99, 122, 145, 167, 
	193, 217, 242, 263, 290, 311, 332, 355, 
	378, 400, 426, 450, 475, 502, 523, 547, 
	548, 551, 553, 555, 558, 562, 565, 569, 
	570, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 586, 
	601, 621, 641, 641, 641, 641, 641, 641, 
	641, 641, 641, 641, 641
};

static const char _dtext_cond_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 4, 6, 1, 
	20, 20, 21, 21, 23, 23, 22, 26, 
	24, 25, 21, 27, 21, 21, 23, 23, 
	22, 26, 24, 25, 27, 21, 24, 1, 
	3, 2, 2, 3, 4, 3, 4, 1, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 15, 
	20, 20, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
};

static const short _dtext_cond_keys[] = {
	93, 93, 62, 62, 62, 62, 62, 62, 
	93, 93, 93, 93, -128, -1, 1, 8, 
	14, 31, 33, 127, -128, -1, 1, 9, 
	11, 12, 14, 61, 62, 62, 63, 127, 
	-128, -65, -128, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -100, 
	-99, -99, -98, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -84, -83, -83, 
	-82, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -128, -127, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -126, 
	-125, -121, -120, -111, -110, -109, -108, -100, 
	-99, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -69, -68, -68, -67, -67, 
	-66, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -120, -119, -119, -118, -68, 
	-67, -67, -66, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -100, 
	-99, -99, -98, -97, -96, -96, -95, -94, 
	-93, -93, -92, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -100, -99, -99, -98, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -84, 
	-83, -83, -82, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -128, -127, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -126, -125, -121, -120, -111, -110, -109, 
	-108, -100, -99, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -69, -68, -68, 
	-67, -67, -66, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -120, -119, -119, 
	-118, -68, -67, -67, -66, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -100, 
	-99, -99, -98, -97, -96, -96, -95, -94, 
	-93, -93, -92, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 99, 100, 100, 101, 114, 
	115, 115, 116, 122, 127, 127, -128, -65, 
	-128, -100, -99, -99, -98, -65, -128, -84, 
	-82, -65, -128, -128, -127, -65, -125, -121, 
	-110, -109, -99, -65, -128, -69, -68, -68, 
	-67, -67, -66, -65, -128, -120, -118, -68, 
	-66, -65, -128, -100, -98, -97, -95, -94, 
	-92, -65, -128, -65, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, 1, 8, 14, 31, 48, 57, 
	65, 90, 97, 122, 127, 127, 60, 60, 
	64, 64, 64, 64, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, 1, 8, 14, 31, 46, 46, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, 0
};

static const char _dtext_cond_spaces[] = {
	2, 4, 3, 2, 4, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0
};

static const short _dtext_key_offsets[] = {
	0, 0, 4, 10, 14, 16, 17, 21, 
	23, 25, 27, 29, 30, 34, 36, 37, 
	39, 41, 43, 45, 46, 51, 54, 56, 
	58, 60, 62, 64, 66, 68, 70, 72, 
	73, 77, 79, 81, 83, 85, 86, 90, 
	92, 96, 99, 107, 114, 118, 122, 124, 
	126, 130, 137, 141, 147, 149, 151, 153, 
	155, 157, 161, 168, 172, 178, 180, 182, 
	184, 186, 188, 190, 191, 195, 197, 199, 
	201, 203, 205, 207, 210, 211, 215, 216, 
	218, 229, 240, 244, 246, 248, 250, 252, 
	253, 257, 259, 263, 266, 274, 281, 283, 
	285, 289, 296, 300, 306, 308, 310, 312, 
	314, 316, 320, 327, 331, 337, 339, 341, 
	343, 345, 347, 349, 350, 352, 354, 356, 
	358, 359, 361, 363, 365, 367, 369, 371, 
	374, 375, 379, 380, 381, 391, 393, 395, 
	398, 401, 404, 408, 418, 422, 432, 433, 
	435, 436, 439, 441, 443, 445, 447, 448, 
	449, 451, 452, 455, 457, 459, 461, 463, 
	464, 472, 473, 474, 475, 476, 477, 478, 
	479, 480, 482, 484, 486, 490, 494, 500, 
	506, 508, 509, 513, 515, 517, 519, 521, 
	523, 525, 528, 532, 533, 535, 537, 539, 
	541, 542, 548, 550, 551, 553, 555, 557, 
	559, 561, 563, 566, 567, 569, 571, 573, 
	575, 576, 577, 581, 583, 585, 587, 589, 
	591, 592, 598, 599, 600, 601, 602, 606, 
	608, 610, 612, 614, 616, 617, 623, 624, 
	625, 626, 629, 634, 645, 657, 659, 661, 
	663, 665, 667, 669, 671, 673, 675, 676, 
	680, 682, 684, 686, 687, 689, 691, 693, 
	695, 697, 698, 700, 702, 704, 706, 707, 
	709, 711, 713, 715, 717, 719, 722, 723, 
	725, 727, 729, 733, 736, 744, 751, 753, 
	755, 757, 759, 761, 763, 764, 766, 768, 
	779, 790, 801, 811, 815, 817, 819, 821, 
	822, 824, 826, 828, 830, 832, 833, 835, 
	837, 839, 841, 843, 845, 848, 849, 851, 
	853, 855, 859, 862, 870, 877, 879, 881, 
	883, 885, 887, 889, 890, 891, 892, 902, 
	904, 906, 909, 912, 915, 919, 929, 933, 
	934, 935, 940, 942, 944, 947, 951, 954, 
	960, 964, 970, 978, 980, 1008, 1010, 1012, 
	1015, 1019, 1022, 1028, 1032, 1038, 1046, 1048, 
	1076, 1100, 1102, 1104, 1107, 1111, 1114, 1120, 
	1124, 1130, 1138, 1140, 1142, 1144, 1146, 1149, 
	1150, 1151, 1165, 1167, 1182, 1184, 1186, 1203, 
	1205, 1207, 1210, 1213, 1234, 1237, 1249, 1253, 
	1257, 1262, 1264, 1266, 1267, 1271, 1276, 1278, 
	1280, 1282, 1285, 1286, 1287, 1291, 1292, 1293, 
	1303, 1310, 1317, 1322, 1331, 1343, 1347, 1348, 
	1354, 1360, 1366, 1367, 1379, 1388, 1395, 1402, 
	1409, 1417, 1431, 1437, 1438, 1452, 1466, 1480, 
	1487, 1494, 1501, 1508, 1514, 1515, 1519, 1523, 
	1525, 1536, 1539, 1550, 1559, 1567, 1574, 1581, 
	1588, 1595, 1601, 1602, 1611, 1616, 1621, 1623, 
	1624, 1629, 1630, 1631, 1632, 1646, 1654, 1668, 
	1680, 1688, 1692, 1700, 1708, 1716, 1723, 1724, 
	1725, 1734, 1750, 1760, 1776, 1790, 1800, 1809, 
	1810, 1814, 1824, 1833, 1842, 1851, 1860, 1869, 
	1880, 1890, 1899, 1909, 1918, 1927, 1944, 1953, 
	1962, 1971, 1980, 1984, 1992, 2001, 2009, 2017, 
	2026, 2027, 2031, 2032, 2033, 2034, 2040, 2046, 
	2052, 2058, 2064, 2070, 2076, 2082, 2088, 2094, 
	2100, 2101, 2107, 2113, 2119, 2125, 2131, 2137, 
	2143, 2149, 2155, 2161, 2167, 2168, 2174, 2180, 
	2186, 2192, 2198, 2204, 2210, 2216, 2222, 2228, 
	2234, 2235, 2241, 2249, 2255, 2261, 2267, 2273, 
	2279, 2285, 2291, 2297, 2303, 2309, 2310, 2316, 
	2322, 2328, 2334, 2340, 2346, 2352, 2358, 2364, 
	2370, 2376, 2377, 2378, 2392, 2394, 2409, 2411, 
	2413, 2430, 2432, 2434, 2437, 2440, 2461, 2464, 
	2476, 2480, 2484, 2489, 2491, 2493, 2495, 2498, 
	2502, 2505, 2511, 2515, 2521, 2529, 2531, 2559, 
	2561, 2563, 2566, 2570, 2573, 2579, 2583, 2589, 
	2597, 2599, 2627, 2651, 2653, 2655, 2658, 2662, 
	2665, 2671, 2675, 2681, 2689, 2691, 2693, 2695, 
	2697, 2699, 2701, 2703, 2705, 2706, 2707, 2713, 
	2719, 2725, 2731, 2737, 2743, 2749, 2755, 2761, 
	2767, 2773, 2774, 2780, 2787, 2789, 2791, 2798, 
	2805, 2812, 2819, 2826, 2833, 2840, 2847, 2854, 
	2857, 2858, 2864, 2870, 2876, 2882, 2888, 2894, 
	2900, 2906, 2912, 2918, 2919, 2925, 2931, 2937, 
	2943, 2949, 2955, 2961, 2967, 2973, 2979, 2985, 
	2986, 2992, 2998, 3004, 3010, 3016, 3022, 3028, 
	3034, 3040, 3046, 3052, 3053, 3059, 3065, 3071, 
	3077, 3083, 3089, 3095, 3101, 3107, 3113, 3119, 
	3120, 3126, 3132, 3138, 3144, 3150, 3156, 3162, 
	3168, 3174, 3180, 3186, 3192, 3194, 3196, 3198, 
	3200, 3201, 3202, 3208, 3214, 3220, 3226, 3232, 
	3238, 3244, 3250, 3256, 3262, 3268, 3270, 3272, 
	3274, 3276, 3278, 3280, 3282, 3284, 3286, 3288, 
	3289, 3290, 3296, 3302, 3308, 3314, 3320, 3326, 
	3332, 3338, 3344, 3350, 3356, 3358, 3360, 3362, 
	3364, 3366, 3368, 3370, 3372, 3374, 3376, 3377, 
	3378, 3384, 3390, 3396, 3402, 3408, 3414, 3420, 
	3426, 3432, 3438, 3444, 3445, 3451, 3453, 3455, 
	3461, 3467, 3473, 3479, 3485, 3491, 3497, 3503, 
	3509, 3515, 3518, 3524, 3530, 3536, 3542, 3548, 
	3554, 3560, 3566, 3572, 3578, 3584, 3586, 3588, 
	3590, 3592, 3594, 3595, 3596, 3602, 3608, 3614, 
	3620, 3626, 3632, 3638, 3644, 3650, 3656, 3662, 
	3663, 3669, 3675, 3681, 3687, 3693, 3699, 3705, 
	3711, 3717, 3723, 3729, 3745, 3746, 3747, 3750, 
	3751, 3754, 3755, 3759, 3761, 3763, 3765, 3767, 
	3768, 3772, 3774, 3778, 3781, 3789, 3796, 3800, 
	3804, 3806, 3808, 3812, 3819, 3823, 3829, 3831, 
	3833, 3835, 3837, 3839, 3843, 3850, 3854, 3860, 
	3862, 3864, 3866, 3869, 3870, 3871, 3875, 3880, 
	3886, 3889, 3893, 3894, 3895, 3897, 3899, 3901, 
	3903, 3905, 3907, 3908, 3912, 3914, 3916, 3918, 
	3920, 3921, 3924, 3926, 3928, 3930, 3932, 3934, 
	3937, 3938, 3940, 3941, 3944, 3946, 3950, 3953, 
	3961, 3965, 3970, 3973, 3978, 3984, 3987, 3988, 
	3990, 3992, 3994, 3995, 4001, 4003, 4005, 4007, 
	4010, 4011, 4012, 4016, 4017, 4023, 4027, 4032, 
	4034, 4036, 4038, 4041, 4042, 4043, 4047, 4048, 
	4050, 4052, 4054, 4057, 4058, 4059, 4063, 4064, 
	4070, 4076, 4079, 4080, 4082, 4084, 4086, 4087, 
	4094, 4102, 4110, 4118, 4125, 4127, 4129, 4131, 
	4134, 4135, 4136, 4140, 4141, 4157, 4160, 4164, 
	4165, 4170, 4172, 4174, 4176, 4178, 4179, 4180, 
	4182, 4186, 4188, 4190, 4192, 4193, 4194, 4198, 
	4203, 4209, 4212, 4216, 4221, 4227, 4232, 4234, 
	4236, 4238, 4241, 4242, 4243, 4247, 4248, 4253, 
	4255, 4257, 4259, 4261, 4263, 4265, 4267, 4269, 
	4270, 4271, 4275, 4277, 4279, 4281, 4283, 4284, 
	4288, 4290, 4294, 4297, 4305, 4312, 4314, 4316, 
	4320, 4327, 4331, 4337, 4341, 4342, 4344, 4346, 
	4348, 4350, 4354, 4361, 4365, 4371, 4373, 4375, 
	4377, 4380, 4381, 4382, 4386, 4391, 4392, 4394, 
	4396, 4398, 4400, 4402, 4404, 4405, 4410, 4412, 
	4414, 4416, 4418, 4420, 4423, 4424, 4426, 4428, 
	4430, 4432, 4433, 4435, 4436, 4437, 4445, 4454, 
	4456, 4486, 4516, 4548, 4580, 4613, 4646, 4679, 
	4721, 4755, 4789, 4821, 4856, 4888, 4920, 4953, 
	4986, 5019, 5061, 5095, 5129, 5164, 5196, 5228, 
	5230, 5233, 5237, 5240, 5246, 5250, 5256, 5264, 
	5266, 5286, 5287, 5289, 5291, 5293, 5295, 5296, 
	5297, 5299, 5301, 5303, 5305, 5306, 5307, 5309, 
	5311, 5313, 5315, 5317, 5319, 5321, 5322, 5323, 
	5325, 5327, 5329, 5331, 5333, 5335, 5337, 5338, 
	5342, 5344, 5346, 5348, 5350, 5352, 5354, 5356, 
	5357, 5365, 5367, 5369, 5371, 5372, 5374, 5376, 
	5378, 5379, 5381, 5383, 5385, 5386, 5387, 5389, 
	5391, 5396, 5404, 5413, 5416, 5426, 5429, 5433, 
	5436, 5439, 5443, 5452, 5454, 5456, 5458, 5460, 
	5463, 5471, 5480, 5483, 5493, 5496, 5500, 5503, 
	5506, 5510, 5519, 5527, 5529, 5531, 5533, 5536, 
	5544, 5553, 5556, 5566, 5569, 5573, 5576, 5579, 
	5583, 5592, 5595, 5603, 5612, 5615, 5625, 5628, 
	5632, 5635, 5638, 5642, 5651, 5656, 5664, 5673, 
	5676, 5686, 5689, 5693, 5696, 5699, 5703, 5712, 
	5714, 5716, 5719, 5727, 5736, 5739, 5749, 5752, 
	5756, 5759, 5762, 5766, 5775, 5778, 5786, 5795, 
	5798, 5808, 5811, 5815, 5818, 5821, 5825, 5834, 
	5838, 5840, 5842, 5844, 5846, 5848, 5850, 5852, 
	5853, 5861, 5863, 5865, 5867, 5868, 5870, 5872, 
	5874, 5875, 5877, 5879, 5881, 5882, 5883, 5885, 
	5887, 5892, 5900, 5909, 5912, 5922, 5925, 5929, 
	5932, 5935, 5939, 5948, 5950, 5952, 5954, 5956, 
	5959, 5967, 5976, 5979, 5989, 5992, 5996, 5999, 
	6002, 6006, 6015, 6023, 6025, 6027, 6029, 6032, 
	6040, 6049, 6052, 6062, 6065, 6069, 6072, 6075, 
	6079, 6088, 6091, 6099, 6108, 6111, 6121, 6124, 
	6128, 6131, 6134, 6138, 6147, 6152, 6160, 6169, 
	6172, 6182, 6185, 6189, 6192, 6195, 6199, 6208, 
	6210, 6212, 6215, 6223, 6232, 6235, 6245, 6248, 
	6252, 6255, 6258, 6262, 6271, 6274, 6282, 6291, 
	6294, 6304, 6307, 6311, 6314, 6317, 6321, 6330, 
	6340, 6344, 6350, 6352, 6355, 6358, 6363, 6379, 
	6382, 6386, 6390, 6393, 6396, 6399, 6402, 6406, 
	6409, 6411, 6413, 6427, 6428, 6431, 6442, 6451, 
	6515, 6517, 6523, 6525, 6527, 6531, 6535, 6545, 
	6547, 6553, 6556, 6561, 6563, 6565, 6567, 6569, 
	6570, 6598, 6626, 6650, 6671, 6676, 6684, 6690, 
	6696, 6702, 6708, 6714, 6720, 6726, 6732, 6738, 
	6744, 6750, 6756, 6763, 6770, 6780, 6790, 6800, 
	6810, 6820, 6829, 6835, 6841, 6847, 6853, 6859, 
	6865, 6871, 6877, 6883, 6889, 6891, 6891, 6901, 
	6911, 6921, 6930, 6936, 6942, 6948, 6954, 6960, 
	6966, 6972, 6978, 6984, 6990, 6992, 6992, 7002, 
	7012, 7022, 7032, 7042, 7052, 7061, 7067, 7073, 
	7079, 7085, 7091, 7097, 7103, 7109, 7115, 7121, 
	7123, 7123, 7133, 7143, 7153, 7163, 7172, 7179, 
	7187, 7194, 7201, 7208, 7215, 7222, 7229, 7236, 
	7243, 7250, 7253, 7254, 7264, 7274, 7284, 7294, 
	7303, 7309, 7315, 7321, 7327, 7333, 7339, 7345, 
	7351, 7357, 7363, 7365, 7365, 7375, 7385, 7395, 
	7406, 7427, 7455, 7483, 7507, 7512, 7521, 7531, 
	7541, 7550, 7556, 7562, 7568, 7574, 7580, 7586, 
	7592, 7598, 7604, 7610, 7612, 7612, 7624, 7634, 
	7644, 7654, 7663, 7665, 7677, 7687, 7696, 7702, 
	7708, 7714, 7720, 7726, 7732, 7738, 7744, 7750, 
	7756, 7758, 7758, 7768, 7777, 7783, 7789, 7795, 
	7801, 7807, 7813, 7819, 7825, 7831, 7837, 7839, 
	7839, 7849, 7859, 7869, 7879, 7889, 7898, 7904, 
	7910, 7916, 7922, 7928, 7934, 7940, 7946, 7952, 
	7958, 7960, 7960, 7970, 7980, 7990, 8000, 8010, 
	8019, 8025, 8031, 8037, 8043, 8049, 8055, 8061, 
	8067, 8073, 8079, 8081, 8081, 8093, 8103, 8112, 
	8118, 8124, 8130, 8136, 8142, 8148, 8154, 8160, 
	8166, 8172, 8174, 8174, 8180, 8186, 8192, 8198, 
	8204, 8210, 8216, 8222, 8228, 8234, 8236, 8236, 
	8242, 8248, 8254, 8260, 8266, 8272, 8278, 8284, 
	8290, 8296, 8298, 8298, 8308, 8318, 8328, 8337, 
	8344, 8346, 8353, 8360, 8367, 8374, 8381, 8388, 
	8395, 8402, 8409, 8412, 8413, 8423, 8433, 8443, 
	8452, 8458, 8464, 8470, 8476, 8482, 8488, 8494, 
	8500, 8506, 8512, 8514, 8514, 8520, 8526, 8532, 
	8538, 8544, 8550, 8556, 8562, 8568, 8574, 8576, 
	8576, 8586, 8596, 8606, 8615, 8621, 8627, 8633, 
	8639, 8645, 8651, 8657, 8663, 8669, 8675, 8677, 
	8677, 8699, 8703, 8707, 8711, 8712, 8735, 8759, 
	8781, 8811, 8841, 8845, 8847, 8848, 8849, 8853, 
	8855, 8856, 8857, 8859, 8864
};

static const short _dtext_trans_keys[] = {
	0, 9, 10, 32, 0, 9, 10, 32, 
	60, 91, 72, 84, 104, 116, 82, 114, 
	62, 0, 9, 10, 32, 65, 97, 66, 
	98, 76, 108, 69, 101, 62, 72, 84, 
	104, 116, 82, 114, 93, 65, 97, 66, 
	98, 76, 108, 69, 101, 93, 0, 9, 
	10, 13, 32, 9, 32, 42, 76, 108, 
	79, 111, 67, 99, 75, 107, 81, 113, 
	85, 117, 79, 111, 84, 116, 69, 101, 
	62, 69, 79, 101, 111, 78, 110, 84, 
	116, 69, 101, 82, 114, 62, 68, 76, 
	100, 108, 69, 101, 9, 32, 61, 62, 
	9, 32, 61, 9, 32, 48, 57, 65, 
	90, 97, 122, 62, 48, 57, 65, 90, 
	97, 122, 0, 9, 10, 32, 0, 9, 
	10, 32, 79, 111, 82, 114, 9, 32, 
	61, 62, 0, 9, 10, 13, 32, 61, 
	62, 0, 10, 13, 62, 0, 9, 10, 
	13, 32, 62, 88, 120, 80, 112, 65, 
	97, 78, 110, 68, 100, 9, 32, 61, 
	62, 0, 9, 10, 13, 32, 61, 62, 
	0, 10, 13, 62, 0, 9, 10, 13, 
	32, 62, 79, 111, 68, 100, 84, 116, 
	69, 101, 88, 120, 84, 116, 62, 0, 
	9, 10, 32, 80, 112, 79, 111, 73, 
	105, 76, 108, 69, 101, 82, 114, 62, 
	83, 115, 62, 65, 78, 97, 110, 62, 
	35, 46, 33, 35, 38, 45, 95, 47, 
	58, 65, 90, 97, 122, 33, 35, 38, 
	46, 95, 45, 58, 65, 90, 97, 122, 
	69, 79, 101, 111, 78, 110, 84, 116, 
	69, 101, 82, 114, 93, 68, 76, 100, 
	108, 69, 101, 9, 32, 61, 93, 9, 
	32, 61, 9, 32, 48, 57, 65, 90, 
	97, 122, 93, 48, 57, 65, 90, 97, 
	122, 79, 111, 82, 114, 9, 32, 61, 
	93, 0, 9, 10, 13, 32, 61, 93, 
	0, 10, 13, 93, 0, 9, 10, 13, 
	32, 93, 88, 120, 80, 112, 65, 97, 
	78, 110, 68, 100, 9, 32, 61, 93, 
	0, 9, 10, 13, 32, 61, 93, 0, 
	10, 13, 93, 0, 9, 10, 13, 32, 
	93, 79, 111, 68, 100, 84, 116, 69, 
	101, 88, 120, 84, 116, 93, 85, 117, 
	79, 111, 84, 116, 69, 101, 93, 80, 
	112, 79, 111, 73, 105, 76, 108, 69, 
	101, 82, 114, 83, 93, 115, 93, 65, 
	78, 97, 110, 93, 96, 0, 9, 10, 
	32, 48, 57, 65, 90, 97, 122, 0, 
	10, 0, 10, 0, 10, 96, 0, 10, 
	96, 0, 10, 96, 0, 9, 10, 32, 
	0, 9, 10, 32, 48, 57, 65, 90, 
	97, 122, 0, 9, 10, 32, 66, 69, 
	73, 83, 85, 98, 101, 105, 115, 117, 
	62, 77, 109, 62, 62, 84, 116, 82, 
	114, 79, 111, 78, 110, 71, 103, 62, 
	62, 77, 109, 62, 62, 84, 116, 82, 
	114, 79, 111, 78, 110, 71, 103, 62, 
	66, 73, 83, 85, 98, 105, 115, 117, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	-128, -65, -128, -65, -128, -65, 0, 9, 
	10, 32, 0, 9, 10, 32, 0, 9, 
	10, 32, 60, 91, 72, 83, 84, 104, 
	115, 116, 82, 114, 62, 0, 9, 10, 
	32, 80, 112, 79, 111, 73, 105, 76, 
	108, 69, 101, 82, 114, 62, 83, 115, 
	0, 9, 10, 32, 62, 65, 97, 66, 
	98, 76, 108, 69, 101, 62, 72, 83, 
	84, 104, 115, 116, 82, 114, 93, 80, 
	112, 79, 111, 73, 105, 76, 108, 69, 
	101, 82, 114, 83, 93, 115, 93, 65, 
	97, 66, 98, 76, 108, 69, 101, 93, 
	47, 67, 84, 99, 116, 69, 101, 78, 
	110, 84, 116, 69, 101, 82, 114, 62, 
	68, 72, 78, 100, 104, 110, 62, 62, 
	62, 47, 67, 84, 99, 116, 69, 101, 
	78, 110, 84, 116, 69, 101, 82, 114, 
	93, 68, 72, 78, 100, 104, 110, 93, 
	93, 93, 9, 32, 42, 0, 9, 10, 
	13, 32, 47, 67, 72, 78, 83, 84, 
	99, 104, 110, 115, 116, 66, 67, 69, 
	81, 83, 84, 98, 99, 101, 113, 115, 
	116, 76, 108, 79, 111, 67, 99, 75, 
	107, 81, 113, 85, 117, 79, 111, 84, 
	116, 69, 101, 2653, 69, 79, 101, 111, 
	76, 108, 79, 111, 82, 114, 3646, 88, 
	120, 80, 112, 65, 97, 78, 110, 68, 
	100, 3134, 85, 117, 79, 111, 84, 116, 
	69, 101, 2622, 80, 112, 79, 111, 73, 
	105, 76, 108, 69, 101, 82, 114, 62, 
	83, 115, 62, 79, 111, 68, 100, 69, 
	101, 9, 32, 61, 62, 9, 32, 61, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	62, 48, 57, 65, 90, 97, 122, 79, 
	111, 68, 100, 84, 116, 69, 101, 88, 
	120, 84, 116, 62, 49, 54, 35, 46, 
	33, 35, 38, 45, 95, 47, 58, 65, 
	90, 97, 122, 33, 35, 38, 46, 95, 
	45, 58, 65, 90, 97, 122, 47, 67, 
	72, 78, 83, 84, 99, 104, 110, 115, 
	116, 67, 69, 81, 83, 84, 99, 101, 
	113, 115, 116, 69, 79, 101, 111, 76, 
	108, 79, 111, 82, 114, 3677, 88, 120, 
	80, 112, 65, 97, 78, 110, 68, 100, 
	3165, 80, 112, 79, 111, 73, 105, 76, 
	108, 69, 101, 82, 114, 83, 93, 115, 
	93, 79, 111, 68, 100, 69, 101, 9, 
	32, 61, 93, 9, 32, 61, 9, 32, 
	48, 57, 65, 90, 97, 122, 93, 48, 
	57, 65, 90, 97, 122, 79, 111, 68, 
	100, 84, 116, 69, 101, 88, 120, 84, 
	116, 93, 96, 96, 0, 9, 10, 32, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	0, 10, 0, 10, 96, 0, 10, 96, 
	0, 10, 96, 0, 9, 10, 32, 0, 
	9, 10, 32, 48, 57, 65, 90, 97, 
	122, 0, 9, 10, 32, 34, 58, 35, 
	47, 72, 91, 104, -128, -65, -128, -65, 
	-99, -128, -65, -128, -84, -82, -65, -128, 
	-127, -65, -125, -121, -110, -109, -99, -65, 
	-68, -67, -128, -65, -128, -120, -118, -68, 
	-66, -65, -128, -100, -98, -97, -95, -94, 
	-92, -65, -128, -65, -30, -29, -17, 32, 
	34, 35, 39, 44, 46, 60, 62, 63, 
	91, 93, -128, -63, -62, -33, -32, -18, 
	-16, -12, -11, 0, 9, 13, 58, 59, 
	-128, -65, -128, -65, -99, -128, -65, -128, 
	-84, -82, -65, -128, -127, -65, -125, -121, 
	-110, -109, -99, -65, -68, -67, -128, -65, 
	-128, -120, -118, -68, -66, -65, -128, -100, 
	-98, -97, -95, -94, -92, -65, -128, -65, 
	-30, -29, -17, 32, 34, 35, 39, 44, 
	46, 60, 62, 63, 91, 93, -128, -63, 
	-62, -33, -32, -18, -16, -12, -11, 0, 
	9, 13, 58, 59, -30, -29, -17, 32, 
	34, 35, 39, 44, 46, 63, -128, -63, 
	-62, -33, -32, -18, -16, -12, -11, 0, 
	9, 13, 58, 59, -128, -65, -128, -65, 
	-99, -128, -65, -128, -84, -82, -65, -128, 
	-127, -65, -125, -121, -110, -109, -99, -65, 
	-68, -67, -128, -65, -128, -120, -118, -68, 
	-66, -65, -128, -100, -98, -97, -95, -94, 
	-92, -65, -128, -65, 84, 116, 84, 116, 
	80, 112, 58, 83, 115, 47, 47, 45, 
	95, -62, -33, -32, -17, -16, -12, 48, 
	57, 65, 90, 97, 122, -128, -65, 45, 
	46, 95, -62, -33, -32, -17, -16, -12, 
	48, 57, 65, 90, 97, 122, -128, -65, 
	-128, -65, -30, -29, -17, 45, 95, -62, 
	-33, -32, -18, -16, -12, 48, 57, 65, 
	90, 97, 122, -128, -65, -128, -65, -99, 
	-128, -65, -83, -128, -65, -30, -29, -17, 
	35, 46, 47, 58, 63, 95, -62, -33, 
	-32, -18, -16, -12, 45, 57, 65, 90, 
	97, 122, -128, -127, -65, -128, -126, -125, 
	-121, -120, -111, -110, -109, -108, -100, -99, 
	-65, -68, -67, -128, -65, -119, -67, -128, 
	-65, -99, -96, -93, -128, -65, -128, -65, 
	48, 57, 58, 35, 47, 72, 104, 0, 
	32, 93, 9, 13, 84, 116, 84, 116, 
	80, 112, 58, 83, 115, 47, 47, 0, 
	32, 9, 13, 58, 91, 9, 32, 58, 
	60, 62, 92, 93, 124, 10, 13, 9, 
	32, 35, 93, 124, 10, 13, 9, 32, 
	35, 93, 124, 10, 13, 32, 93, 124, 
	9, 13, 9, 32, 35, 93, 124, 10, 
	13, 65, 90, 9, 32, 45, 93, 95, 
	124, 48, 57, 65, 90, 97, 122, 9, 
	32, 93, 124, 93, 9, 32, 93, 124, 
	10, 13, 9, 32, 93, 124, 10, 13, 
	9, 32, 93, 124, 10, 13, 93, 9, 
	32, 45, 93, 95, 124, 48, 57, 65, 
	90, 97, 122, 32, 45, 95, 48, 57, 
	65, 90, 97, 122, 9, 32, 35, 93, 
	124, 10, 13, 9, 32, 35, 93, 124, 
	10, 13, 9, 32, 35, 93, 124, 10, 
	13, 9, 32, 93, 124, 10, 13, 65, 
	90, 9, 32, 45, 93, 95, 124, 10, 
	13, 48, 57, 65, 90, 97, 122, 9, 
	32, 93, 124, 10, 13, 93, 9, 32, 
	45, 93, 95, 124, 10, 13, 48, 57, 
	65, 90, 97, 122, 9, 32, 45, 93, 
	95, 124, 10, 13, 48, 57, 65, 90, 
	97, 122, 9, 32, 45, 93, 95, 124, 
	10, 13, 48, 57, 65, 90, 97, 122, 
	9, 32, 35, 93, 124, 10, 13, 9, 
	32, 62, 93, 124, 10, 13, 9, 32, 
	93, 95, 124, 10, 13, 9, 32, 60, 
	93, 124, 10, 13, 9, 32, 93, 124, 
	10, 13, 62, 9, 32, 35, 93, 9, 
	32, 35, 93, 65, 90, 9, 32, 45, 
	93, 95, 48, 57, 65, 90, 97, 122, 
	9, 32, 93, 9, 32, 45, 93, 95, 
	48, 57, 65, 90, 97, 122, 32, 45, 
	95, 48, 57, 65, 90, 97, 122, 9, 
	32, 35, 58, 93, 124, 10, 13, 9, 
	32, 51, 93, 124, 10, 13, 9, 32, 
	35, 93, 124, 10, 13, 9, 32, 35, 
	93, 124, 10, 13, 9, 32, 35, 93, 
	124, 10, 13, 9, 32, 93, 124, 10, 
	13, 47, 95, 119, 124, 48, 57, 65, 
	90, 97, 122, 9, 32, 35, 93, 124, 
	9, 32, 35, 93, 124, 65, 90, 124, 
	9, 32, 35, 93, 124, 95, 124, 123, 
	0, 9, 32, 45, 58, 60, 62, 92, 
	124, 126, 10, 13, 123, 125, 0, 9, 
	32, 123, 124, 125, 10, 13, 0, 9, 
	32, 45, 58, 60, 62, 92, 123, 124, 
	125, 126, 10, 13, 0, 9, 32, 58, 
	60, 62, 92, 123, 124, 125, 10, 13, 
	0, 9, 32, 123, 124, 125, 10, 13, 
	9, 32, 124, 125, 0, 9, 10, 13, 
	32, 125, 11, 12, 0, 9, 10, 13, 
	32, 125, 11, 12, 0, 9, 10, 13, 
	32, 125, 11, 12, 0, 10, 13, 32, 
	125, 9, 12, 125, 125, 0, 9, 10, 
	13, 32, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 45, 58, 60, 62, 92, 
	123, 124, 125, 126, 11, 12, 0, 9, 
	10, 13, 32, 123, 124, 125, 11, 12, 
	0, 9, 10, 13, 32, 45, 58, 60, 
	62, 92, 123, 124, 125, 126, 11, 12, 
	0, 9, 10, 13, 32, 58, 60, 62, 
	92, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 123, 124, 125, 11, 12, 
	0, 9, 10, 13, 32, 124, 125, 11, 
	12, 125, 9, 32, 124, 125, 0, 9, 
	10, 13, 32, 123, 124, 125, 11, 12, 
	0, 9, 10, 13, 32, 62, 125, 11, 
	12, 0, 9, 10, 13, 32, 95, 125, 
	11, 12, 0, 9, 10, 13, 32, 60, 
	125, 11, 12, 0, 9, 10, 13, 32, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 62, 125, 11, 12, 0, 9, 10, 
	13, 32, 58, 123, 124, 125, 11, 12, 
	0, 9, 10, 13, 32, 123, 124, 125, 
	11, 12, 0, 9, 10, 13, 32, 51, 
	125, 11, 12, 0, 9, 10, 13, 32, 
	123, 124, 125, 11, 12, 0, 9, 10, 
	13, 32, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 47, 125, 11, 12, 0, 
	9, 10, 13, 32, 95, 119, 124, 125, 
	11, 12, 48, 57, 65, 90, 97, 122, 
	0, 9, 10, 13, 32, 124, 125, 11, 
	12, 0, 9, 10, 13, 32, 124, 125, 
	11, 12, 0, 9, 10, 13, 32, 95, 
	125, 11, 12, 0, 9, 10, 13, 32, 
	124, 125, 11, 12, 9, 32, 124, 125, 
	0, 9, 32, 123, 124, 125, 10, 13, 
	0, 9, 32, 58, 123, 124, 125, 10, 
	13, 0, 9, 32, 123, 124, 125, 10, 
	13, 0, 9, 32, 123, 124, 125, 10, 
	13, 95, 119, 124, 48, 57, 65, 90, 
	97, 122, 124, 9, 32, 124, 125, 95, 
	124, 35, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 35, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 35, 48, 57, 65, 90, 97, 
	122, 45, 61, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 35, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	47, 47, 45, 95, -62, -33, -32, -17, 
	-16, -12, 48, 57, 65, 90, 97, 122, 
	-128, -65, 45, 46, 95, -62, -33, -32, 
	-17, -16, -12, 48, 57, 65, 90, 97, 
	122, -128, -65, -128, -65, -30, -29, -17, 
	45, 95, -62, -33, -32, -18, -16, -12, 
	48, 57, 65, 90, 97, 122, -128, -65, 
	-128, -65, -99, -128, -65, -83, -128, -65, 
	-30, -29, -17, 35, 46, 47, 58, 63, 
	95, -62, -33, -32, -18, -16, -12, 45, 
	57, 65, 90, 97, 122, -128, -127, -65, 
	-128, -126, -125, -121, -120, -111, -110, -109, 
	-108, -100, -99, -65, -68, -67, -128, -65, 
	-119, -67, -128, -65, -99, -96, -93, -128, 
	-65, -128, -65, -128, -65, -128, -65, -99, 
	-128, -65, -128, -84, -82, -65, -128, -127, 
	-65, -125, -121, -110, -109, -99, -65, -68, 
	-67, -128, -65, -128, -120, -118, -68, -66, 
	-65, -128, -100, -98, -97, -95, -94, -92, 
	-65, -128, -65, -30, -29, -17, 32, 34, 
	35, 39, 44, 46, 60, 62, 63, 91, 
	93, -128, -63, -62, -33, -32, -18, -16, 
	-12, -11, 0, 9, 13, 58, 59, -128, 
	-65, -128, -65, -99, -128, -65, -128, -84, 
	-82, -65, -128, -127, -65, -125, -121, -110, 
	-109, -99, -65, -68, -67, -128, -65, -128, 
	-120, -118, -68, -66, -65, -128, -100, -98, 
	-97, -95, -94, -92, -65, -128, -65, -30, 
	-29, -17, 32, 34, 35, 39, 44, 46, 
	60, 62, 63, 91, 93, -128, -63, -62, 
	-33, -32, -18, -16, -12, -11, 0, 9, 
	13, 58, 59, -30, -29, -17, 32, 34, 
	35, 39, 44, 46, 63, -128, -63, -62, 
	-33, -32, -18, -16, -12, -11, 0, 9, 
	13, 58, 59, -128, -65, -128, -65, -99, 
	-128, -65, -128, -84, -82, -65, -128, -127, 
	-65, -125, -121, -110, -109, -99, -65, -68, 
	-67, -128, -65, -128, -120, -118, -68, -66, 
	-65, -128, -100, -98, -97, -95, -94, -92, 
	-65, -128, -65, 48, 57, 65, 97, 67, 
	99, 84, 116, 73, 105, 79, 111, 78, 
	110, 32, 35, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 35, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 80, 112, 48, 57, 47, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 65, 90, 97, 122, 
	47, 48, 57, 65, 90, 97, 122, 47, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 47, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 35, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 35, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 35, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 65, 73, 84, 97, 105, 116, 
	76, 108, 73, 105, 65, 97, 83, 115, 
	32, 35, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 77, 109, 80, 112, 
	76, 108, 73, 105, 67, 99, 65, 97, 
	84, 116, 73, 105, 79, 111, 78, 110, 
	32, 35, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 82, 114, 65, 97, 
	78, 110, 83, 115, 76, 108, 65, 97, 
	84, 116, 73, 105, 79, 111, 78, 110, 
	32, 35, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 35, 48, 57, 65, 
	90, 97, 122, 80, 112, 48, 57, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 35, 82, 114, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	69, 101, 80, 112, 79, 111, 82, 114, 
	84, 116, 32, 35, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 35, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 66, 67, 69, 73, 81, 83, 84, 
	85, 98, 99, 101, 105, 113, 115, 116, 
	117, 93, 93, 80, 93, 112, 93, 82, 
	93, 114, 93, 69, 79, 101, 111, 78, 
	110, 84, 116, 69, 101, 82, 114, 93, 
	68, 76, 100, 108, 69, 101, 9, 32, 
	61, 93, 9, 32, 61, 9, 32, 48, 
	57, 65, 90, 97, 122, 93, 48, 57, 
	65, 90, 97, 122, 0, 9, 10, 32, 
	0, 9, 10, 32, 79, 111, 82, 114, 
	9, 32, 61, 93, 0, 9, 10, 13, 
	32, 61, 93, 0, 10, 13, 93, 0, 
	9, 10, 13, 32, 93, 88, 120, 80, 
	112, 65, 97, 78, 110, 68, 100, 9, 
	32, 61, 93, 0, 9, 10, 13, 32, 
	61, 93, 0, 10, 13, 93, 0, 9, 
	10, 13, 32, 93, 84, 116, 84, 116, 
	80, 112, 58, 83, 115, 47, 47, 0, 
	32, 9, 13, 0, 32, 93, 9, 13, 
	0, 32, 40, 93, 9, 13, 0, 10, 
	13, 0, 10, 13, 41, 58, 93, 79, 
	111, 68, 100, 84, 116, 69, 101, 88, 
	120, 84, 116, 93, 0, 9, 10, 32, 
	85, 117, 79, 111, 84, 116, 69, 101, 
	93, 80, 93, 112, 79, 111, 73, 105, 
	76, 108, 69, 101, 82, 114, 83, 93, 
	115, 93, 78, 110, 93, 82, 93, 114, 
	76, 108, 9, 32, 61, 93, 9, 32, 
	61, 9, 32, 34, 35, 39, 47, 72, 
	104, 35, 47, 72, 104, 0, 32, 34, 
	9, 13, 9, 32, 93, 0, 9, 10, 
	13, 32, 0, 9, 10, 13, 32, 91, 
	9, 32, 91, 47, 85, 117, 82, 114, 
	76, 108, 93, 0, 9, 10, 13, 32, 
	91, 84, 116, 84, 116, 80, 112, 58, 
	83, 115, 47, 47, 0, 32, 9, 13, 
	58, 0, 9, 32, 93, 10, 13, 35, 
	47, 72, 104, 0, 32, 39, 9, 13, 
	84, 116, 84, 116, 80, 112, 58, 83, 
	115, 47, 47, 0, 32, 9, 13, 58, 
	84, 116, 84, 116, 80, 112, 58, 83, 
	115, 47, 47, 0, 32, 9, 13, 58, 
	9, 32, 35, 47, 72, 104, 0, 9, 
	32, 91, 10, 13, 9, 32, 91, 47, 
	85, 117, 82, 114, 76, 108, 93, 0, 
	9, 32, 47, 91, 10, 13, 0, 9, 
	32, 85, 91, 117, 10, 13, 0, 9, 
	32, 82, 91, 114, 10, 13, 0, 9, 
	32, 76, 91, 108, 10, 13, 0, 9, 
	32, 91, 93, 10, 13, 84, 116, 84, 
	116, 80, 112, 58, 83, 115, 47, 47, 
	0, 32, 9, 13, 58, 66, 67, 69, 
	73, 81, 83, 84, 85, 98, 99, 101, 
	105, 113, 115, 116, 117, 62, 76, 108, 
	77, 88, 109, 120, 62, 62, 80, 84, 
	112, 116, 82, 114, 79, 111, 78, 110, 
	71, 103, 62, 62, 9, 32, 9, 32, 
	72, 104, 82, 114, 69, 101, 70, 102, 
	61, 34, 35, 47, 72, 104, 0, 32, 
	34, 9, 13, 0, 32, 34, 62, 9, 
	13, 0, 10, 13, 0, 10, 13, 60, 
	0, 10, 13, 47, 60, 0, 10, 13, 
	60, 65, 97, 0, 10, 13, 60, 62, 
	84, 116, 84, 116, 80, 112, 58, 83, 
	115, 47, 47, 0, 32, 9, 13, 58, 
	62, 76, 82, 108, 114, 79, 111, 67, 
	99, 75, 107, 81, 113, 85, 117, 79, 
	111, 84, 116, 69, 101, 62, 62, 69, 
	79, 101, 111, 78, 110, 84, 116, 69, 
	101, 82, 114, 62, 68, 76, 100, 108, 
	69, 101, 9, 32, 61, 62, 9, 32, 
	61, 9, 32, 48, 57, 65, 90, 97, 
	122, 62, 48, 57, 65, 90, 97, 122, 
	79, 111, 82, 114, 9, 32, 61, 62, 
	0, 9, 10, 13, 32, 61, 62, 0, 
	10, 13, 62, 0, 9, 10, 13, 32, 
	62, 77, 88, 109, 120, 62, 80, 112, 
	65, 97, 78, 110, 68, 100, 9, 32, 
	61, 62, 0, 9, 10, 13, 32, 61, 
	62, 0, 10, 13, 62, 0, 9, 10, 
	13, 32, 62, 84, 116, 84, 116, 80, 
	112, 58, 83, 115, 47, 47, 0, 32, 
	9, 13, 0, 32, 62, 9, 13, 58, 
	79, 111, 68, 100, 84, 116, 69, 101, 
	88, 120, 84, 116, 62, 62, 80, 84, 
	112, 116, 79, 111, 73, 105, 76, 108, 
	69, 101, 82, 114, 62, 83, 115, 62, 
	82, 114, 79, 111, 78, 110, 71, 103, 
	62, 78, 110, 62, 62, 896, 1023, 1025, 
	1032, 1038, 1055, 1057, 1151, 1086, 896, 1023, 
	1025, 1033, 1035, 1036, 1038, 1151, 896, 959, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	896, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 959, 960, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 959, 960, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 925, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 941, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 896, 994, 
	995, 1007, 1057, 1063, 1067, 1119, 1151, 897, 
	959, 960, 961, 962, 991, 992, 1006, 1008, 
	1012, 1013, 1023, 1025, 1032, 1038, 1055, 1069, 
	1071, 1072, 1081, 1089, 1114, 1121, 1146, 994, 
	995, 1007, 1057, 1063, 1067, 1119, 1151, 896, 
	898, 899, 903, 904, 913, 914, 915, 916, 
	924, 925, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 956, 957, 994, 995, 1007, 1057, 1063, 
	1067, 1119, 1151, 896, 959, 960, 961, 962, 
	991, 992, 1006, 1008, 1012, 1013, 1023, 1025, 
	1032, 1038, 1055, 1069, 1071, 1072, 1081, 1089, 
	1114, 1121, 1146, 905, 957, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 925, 928, 931, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	896, 959, 960, 961, 962, 991, 992, 1006, 
	1008, 1012, 1013, 1023, 1025, 1032, 1038, 1055, 
	1069, 1071, 1072, 1081, 1089, 1114, 1121, 1146, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	896, 959, 960, 961, 962, 991, 992, 1006, 
	1008, 1012, 1013, 1023, 1025, 1032, 1038, 1055, 
	1069, 1071, 1072, 1081, 1089, 1114, 1121, 1146, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	896, 959, 960, 961, 962, 991, 992, 1006, 
	1008, 1012, 1013, 1023, 1025, 1032, 1038, 1055, 
	1069, 1071, 1072, 1081, 1089, 1114, 1121, 1146, 
	925, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 941, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 896, 994, 995, 1007, 1057, 1063, 
	1067, 1119, 1151, 897, 959, 960, 961, 962, 
	991, 992, 1006, 1008, 1012, 1013, 1023, 1025, 
	1032, 1038, 1055, 1069, 1071, 1072, 1081, 1089, 
	1114, 1121, 1146, 994, 995, 1007, 1057, 1063, 
	1067, 1119, 1151, 896, 898, 899, 903, 904, 
	913, 914, 915, 916, 924, 925, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 956, 957, 994, 
	995, 1007, 1057, 1063, 1067, 1119, 1151, 896, 
	959, 960, 961, 962, 991, 992, 1006, 1008, 
	1012, 1013, 1023, 1025, 1032, 1038, 1055, 1069, 
	1071, 1072, 1081, 1089, 1114, 1121, 1146, 905, 
	957, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 925, 928, 931, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 959, 960, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 959, 960, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1124, 1139, 1151, 896, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 896, 959, 925, 896, 
	959, 896, 940, 942, 959, 896, 897, 959, 
	899, 903, 914, 915, 925, 959, 956, 957, 
	896, 959, 896, 904, 906, 956, 958, 959, 
	896, 924, 926, 927, 929, 930, 932, 959, 
	896, 959, 994, 995, 1007, 1151, 962, 991, 
	992, 1006, 1008, 1012, 1025, 1032, 1038, 1055, 
	1072, 1081, 1089, 1114, 1121, 1146, 47, 67, 
	99, 79, 111, 68, 100, 69, 101, 62, 
	47, 67, 99, 79, 111, 68, 100, 69, 
	101, 93, 47, 78, 110, 79, 111, 68, 
	100, 84, 116, 69, 101, 88, 120, 84, 
	116, 62, 47, 78, 110, 79, 111, 68, 
	100, 84, 116, 69, 101, 88, 120, 84, 
	116, 93, 67, 84, 99, 116, 79, 111, 
	76, 108, 71, 103, 82, 114, 79, 111, 
	85, 117, 80, 112, 62, 65, 66, 72, 
	82, 97, 98, 104, 114, 66, 98, 76, 
	108, 69, 101, 62, 79, 111, 68, 100, 
	89, 121, 62, 69, 101, 65, 97, 68, 
	100, 62, 62, 79, 111, 76, 108, 9, 
	32, 62, 71, 103, 9, 32, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	9, 32, 34, 39, 48, 57, 65, 90, 
	97, 122, 0, 10, 13, 0, 10, 13, 
	34, 9, 32, 62, 0, 10, 13, 0, 
	10, 13, 39, 9, 32, 62, 48, 57, 
	65, 90, 97, 122, 82, 114, 79, 111, 
	85, 117, 80, 112, 9, 32, 62, 9, 
	32, 48, 57, 65, 90, 97, 122, 9, 
	32, 61, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 9, 32, 34, 39, 48, 
	57, 65, 90, 97, 122, 0, 10, 13, 
	0, 10, 13, 34, 9, 32, 62, 0, 
	10, 13, 0, 10, 13, 39, 9, 32, 
	62, 48, 57, 65, 90, 97, 122, 66, 
	68, 72, 82, 98, 100, 104, 114, 79, 
	111, 68, 100, 89, 121, 9, 32, 62, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 62, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 62, 48, 57, 65, 90, 97, 122, 
	9, 32, 62, 9, 32, 48, 57, 65, 
	90, 97, 122, 9, 32, 61, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 9, 
	32, 34, 39, 48, 57, 65, 90, 97, 
	122, 0, 10, 13, 0, 10, 13, 34, 
	9, 32, 62, 0, 10, 13, 0, 10, 
	13, 39, 9, 32, 62, 48, 57, 65, 
	90, 97, 122, 9, 32, 62, 69, 101, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 62, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 62, 48, 57, 65, 90, 97, 122, 
	65, 97, 68, 100, 9, 32, 62, 9, 
	32, 48, 57, 65, 90, 97, 122, 9, 
	32, 61, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 9, 32, 34, 39, 48, 
	57, 65, 90, 97, 122, 0, 10, 13, 
	0, 10, 13, 34, 9, 32, 62, 0, 
	10, 13, 0, 10, 13, 39, 9, 32, 
	62, 48, 57, 65, 90, 97, 122, 9, 
	32, 62, 9, 32, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 48, 57, 65, 
	90, 97, 122, 9, 32, 61, 9, 32, 
	34, 39, 48, 57, 65, 90, 97, 122, 
	0, 10, 13, 0, 10, 13, 34, 9, 
	32, 62, 0, 10, 13, 0, 10, 13, 
	39, 9, 32, 62, 48, 57, 65, 90, 
	97, 122, 67, 84, 99, 116, 79, 111, 
	76, 108, 71, 103, 82, 114, 79, 111, 
	85, 117, 80, 112, 93, 65, 66, 72, 
	82, 97, 98, 104, 114, 66, 98, 76, 
	108, 69, 101, 93, 79, 111, 68, 100, 
	89, 121, 93, 69, 101, 65, 97, 68, 
	100, 93, 93, 79, 111, 76, 108, 9, 
	32, 71, 93, 103, 9, 32, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	9, 32, 34, 39, 48, 57, 65, 90, 
	97, 122, 0, 10, 13, 0, 10, 13, 
	34, 9, 32, 93, 0, 10, 13, 0, 
	10, 13, 39, 9, 32, 93, 48, 57, 
	65, 90, 97, 122, 82, 114, 79, 111, 
	85, 117, 80, 112, 9, 32, 93, 9, 
	32, 48, 57, 65, 90, 97, 122, 9, 
	32, 61, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 9, 32, 34, 39, 48, 
	57, 65, 90, 97, 122, 0, 10, 13, 
	0, 10, 13, 34, 9, 32, 93, 0, 
	10, 13, 0, 10, 13, 39, 9, 32, 
	93, 48, 57, 65, 90, 97, 122, 66, 
	68, 72, 82, 98, 100, 104, 114, 79, 
	111, 68, 100, 89, 121, 9, 32, 93, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 93, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 93, 48, 57, 65, 90, 97, 122, 
	9, 32, 93, 9, 32, 48, 57, 65, 
	90, 97, 122, 9, 32, 61, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 9, 
	32, 34, 39, 48, 57, 65, 90, 97, 
	122, 0, 10, 13, 0, 10, 13, 34, 
	9, 32, 93, 0, 10, 13, 0, 10, 
	13, 39, 9, 32, 93, 48, 57, 65, 
	90, 97, 122, 9, 32, 69, 93, 101, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 93, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 93, 48, 57, 65, 90, 97, 122, 
	65, 97, 68, 100, 9, 32, 93, 9, 
	32, 48, 57, 65, 90, 97, 122, 9, 
	32, 61, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 9, 32, 34, 39, 48, 
	57, 65, 90, 97, 122, 0, 10, 13, 
	0, 10, 13, 34, 9, 32, 93, 0, 
	10, 13, 0, 10, 13, 39, 9, 32, 
	93, 48, 57, 65, 90, 97, 122, 9, 
	32, 93, 9, 32, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 48, 57, 65, 
	90, 97, 122, 9, 32, 61, 9, 32, 
	34, 39, 48, 57, 65, 90, 97, 122, 
	0, 10, 13, 0, 10, 13, 34, 9, 
	32, 93, 0, 10, 13, 0, 10, 13, 
	39, 9, 32, 93, 48, 57, 65, 90, 
	97, 122, 0, 9, 10, 32, 42, 60, 
	72, 91, 96, 104, 0, 9, 10, 32, 
	0, 9, 10, 32, 60, 91, 0, 10, 
	9, 32, 42, 0, 10, 13, 0, 9, 
	10, 13, 32, 66, 67, 69, 72, 78, 
	81, 83, 84, 98, 99, 101, 104, 110, 
	113, 115, 116, 32, 9, 13, 0, 9, 
	10, 32, 0, 9, 10, 32, 32, 9, 
	13, 32, 9, 13, 32, 9, 13, 32, 
	9, 13, 0, 9, 10, 32, 32, 9, 
	13, 49, 54, 9, 32, 67, 69, 72, 
	78, 81, 83, 84, 99, 101, 104, 110, 
	113, 115, 116, 96, 0, 60, 91, 47, 
	66, 69, 73, 83, 85, 98, 101, 105, 
	115, 117, 47, 66, 73, 83, 85, 98, 
	105, 115, 117, 0, 9, 10, 13, 32, 
	34, 65, 66, 67, 68, 70, 72, 77, 
	80, 82, 83, 84, 85, 87, 91, 97, 
	98, 99, 100, 102, 104, 109, 112, 114, 
	115, 116, 117, 119, 123, 828, 1084, 1344, 
	1600, 1856, 2112, -128, -63, -62, -33, -32, 
	-17, -16, -12, -11, 47, 48, 57, 58, 
	59, 61, 63, 69, 90, 92, 96, 101, 
	122, 124, 127, -128, -65, -62, -33, -32, 
	-17, -16, -12, -128, -65, -128, -65, 0, 
	9, 10, 32, 0, 9, 10, 32, 0, 
	9, 10, 32, 42, 60, 72, 91, 96, 
	104, 0, 10, 0, 9, 10, 32, 60, 
	91, 0, 10, 13, 0, 9, 10, 13, 
	32, 9, 32, 9, 32, 9, 32, 9, 
	32, 34, -30, -29, -17, 32, 34, 35, 
	39, 44, 46, 60, 62, 63, 91, 93, 
	-128, -63, -62, -33, -32, -18, -16, -12, 
	-11, 0, 9, 13, 58, 59, -30, -29, 
	-17, 32, 34, 35, 39, 44, 46, 60, 
	62, 63, 91, 93, -128, -63, -62, -33, 
	-32, -18, -16, -12, -11, 0, 9, 13, 
	58, 59, -30, -29, -17, 32, 34, 35, 
	39, 44, 46, 63, -128, -63, -62, -33, 
	-32, -18, -16, -12, -11, 0, 9, 13, 
	58, 59, -30, -29, -17, 35, 46, 47, 
	58, 63, 95, -62, -33, -32, -18, -16, 
	-12, 45, 57, 65, 90, 97, 122, 35, 
	47, 63, 48, 57, 91, 123, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 125, 48, 57, 65, 
	90, 97, 122, 125, 48, 57, 65, 90, 
	97, 122, 82, 91, 114, 123, 48, 57, 
	65, 90, 97, 122, 84, 91, 116, 123, 
	48, 57, 65, 90, 97, 122, 73, 91, 
	105, 123, 48, 57, 65, 90, 97, 122, 
	83, 91, 115, 123, 48, 57, 65, 90, 
	97, 122, 84, 91, 116, 123, 48, 57, 
	65, 90, 97, 122, 32, 91, 123, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 79, 91, 111, 123, 48, 
	57, 65, 90, 97, 122, 79, 91, 111, 
	123, 48, 57, 65, 90, 97, 122, 75, 
	91, 107, 123, 48, 57, 65, 90, 97, 
	122, 32, 91, 123, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	79, 91, 111, 123, 48, 57, 65, 90, 
	97, 122, 77, 91, 109, 123, 48, 57, 
	65, 90, 97, 122, 77, 91, 109, 123, 
	48, 57, 65, 90, 97, 122, 69, 91, 
	101, 123, 48, 57, 65, 90, 97, 122, 
	78, 91, 110, 123, 48, 57, 65, 90, 
	97, 122, 84, 91, 116, 123, 48, 57, 
	65, 90, 97, 122, 32, 91, 123, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 77, 91, 109, 123, 48, 
	57, 65, 90, 97, 122, 65, 91, 97, 
	123, 48, 57, 66, 90, 98, 122, 73, 
	91, 105, 123, 48, 57, 65, 90, 97, 
	122, 76, 91, 108, 123, 48, 57, 65, 
	90, 97, 122, 32, 91, 123, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 45, 61, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 65, 90, 97, 122, 
	47, 48, 57, 65, 90, 97, 122, 47, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 47, 79, 91, 
	111, 123, 48, 57, 65, 90, 97, 122, 
	82, 91, 114, 123, 48, 57, 65, 90, 
	97, 122, 85, 91, 117, 123, 48, 57, 
	65, 90, 97, 122, 77, 91, 109, 123, 
	48, 57, 65, 90, 97, 122, 32, 91, 
	123, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 84, 91, 116, 
	123, 48, 57, 65, 90, 97, 122, 84, 
	91, 116, 123, 48, 57, 65, 90, 97, 
	122, 80, 91, 112, 123, 48, 57, 65, 
	90, 97, 122, 58, 83, 91, 115, 123, 
	48, 57, 65, 90, 97, 122, -30, -29, 
	-17, 35, 46, 47, 58, 63, 95, -62, 
	-33, -32, -18, -16, -12, 45, 57, 65, 
	90, 97, 122, -30, -29, -17, 32, 34, 
	35, 39, 44, 46, 60, 62, 63, 91, 
	93, -128, -63, -62, -33, -32, -18, -16, 
	-12, -11, 0, 9, 13, 58, 59, -30, 
	-29, -17, 32, 34, 35, 39, 44, 46, 
	60, 62, 63, 91, 93, -128, -63, -62, 
	-33, -32, -18, -16, -12, -11, 0, 9, 
	13, 58, 59, -30, -29, -17, 32, 34, 
	35, 39, 44, 46, 63, -128, -63, -62, 
	-33, -32, -18, -16, -12, -11, 0, 9, 
	13, 58, 59, 35, 47, 63, 48, 57, 
	58, 91, 123, 48, 57, 65, 90, 97, 
	122, 79, 91, 111, 123, 48, 57, 65, 
	90, 97, 122, 68, 91, 100, 123, 48, 
	57, 65, 90, 97, 122, 32, 91, 123, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 73, 79, 91, 105, 
	111, 123, 48, 57, 65, 90, 97, 122, 
	88, 91, 120, 123, 48, 57, 65, 90, 
	97, 122, 73, 91, 105, 123, 48, 57, 
	65, 90, 97, 122, 86, 91, 118, 123, 
	48, 57, 65, 90, 97, 122, 32, 91, 
	123, 48, 57, 65, 90, 97, 122, 48, 
	57, 79, 83, 91, 111, 115, 123, 48, 
	57, 65, 90, 97, 122, 76, 91, 108, 
	123, 48, 57, 65, 90, 97, 122, 32, 
	91, 123, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 84, 91, 
	116, 123, 48, 57, 65, 90, 97, 122, 
	32, 91, 123, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 69, 
	91, 101, 123, 48, 57, 65, 90, 97, 
	122, 67, 91, 99, 123, 48, 57, 65, 
	90, 97, 122, 79, 91, 111, 123, 48, 
	57, 65, 90, 97, 122, 82, 91, 114, 
	123, 48, 57, 65, 90, 97, 122, 68, 
	91, 100, 123, 48, 57, 65, 90, 97, 
	122, 32, 91, 123, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	69, 91, 101, 123, 48, 57, 65, 90, 
	97, 122, 82, 91, 114, 123, 48, 57, 
	65, 90, 97, 122, 73, 91, 105, 123, 
	48, 57, 65, 90, 97, 122, 69, 91, 
	101, 123, 48, 57, 65, 90, 97, 122, 
	83, 91, 115, 123, 48, 57, 65, 90, 
	97, 122, 32, 91, 123, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 79, 91, 97, 111, 123, 48, 
	57, 66, 90, 98, 122, 71, 91, 103, 
	123, 48, 57, 65, 90, 97, 122, 32, 
	91, 123, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 80, 91, 112, 123, 48, 57, 
	65, 90, 97, 122, 73, 91, 105, 123, 
	48, 57, 65, 90, 97, 122, 67, 91, 
	99, 123, 48, 57, 65, 90, 97, 122, 
	32, 91, 123, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 65, 90, 97, 122, 
	48, 57, 47, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 65, 90, 97, 122, 
	47, 48, 57, 65, 90, 97, 122, 47, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 47, 83, 91, 115, 
	123, 48, 57, 65, 90, 97, 122, 69, 
	91, 101, 123, 48, 57, 65, 90, 97, 
	122, 82, 91, 114, 123, 48, 57, 65, 
	90, 97, 122, 32, 91, 123, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	73, 91, 105, 123, 48, 57, 65, 90, 
	97, 122, 75, 91, 107, 123, 48, 57, 
	65, 90, 97, 122, 73, 91, 105, 123, 
	48, 57, 65, 90, 97, 122, 32, 91, 
	123, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 47, 66, 67, 
	69, 72, 73, 78, 81, 83, 84, 85, 
	91, 98, 99, 101, 104, 105, 110, 113, 
	115, 116, 117, 0, 9, 10, 32, 0, 
	9, 10, 32, 0, 9, 10, 32, 123, 
	47, 65, 66, 67, 69, 72, 73, 78, 
	81, 83, 84, 85, 97, 98, 99, 101, 
	104, 105, 110, 113, 115, 116, 117, 47, 
	65, 66, 67, 69, 72, 73, 78, 81, 
	83, 84, 85, 97, 98, 99, 101, 104, 
	105, 110, 113, 115, 116, 117, 1088, 994, 
	995, 1007, 1070, 1119, 1151, 962, 991, 992, 
	1006, 1008, 1012, 1025, 1032, 1038, 1055, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 961, 962, 
	991, 992, 1006, 1008, 1012, 1013, 1023, 1025, 
	1032, 1038, 1055, 1069, 1071, 1072, 1081, 1089, 
	1114, 1121, 1146, 994, 995, 1007, 1057, 1063, 
	1067, 1119, 1151, 896, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 0, 10, 60, 91, 60, 91, 47, 
	47, 0, 10, 60, 91, 60, 91, 47, 
	47, 60, 91, 47, 67, 84, 99, 116, 
	47, 67, 84, 99, 116, 0
};

static const char _dtext_single_lengths[] = {
	0, 4, 6, 4, 2, 1, 4, 2, 
	2, 2, 2, 1, 4, 2, 1, 2, 
	2, 2, 2, 1, 5, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	4, 2, 2, 2, 2, 1, 4, 2, 
	4, 3, 2, 1, 4, 4, 2, 2, 
	4, 7, 4, 6, 2, 2, 2, 2, 
	2, 4, 7, 4, 6, 2, 2, 2, 
	2, 2, 2, 1, 4, 2, 2, 2, 
	2, 2, 2, 3, 1, 4, 1, 2, 
	5, 5, 4, 2, 2, 2, 2, 1, 
	4, 2, 4, 3, 2, 1, 2, 2, 
	4, 7, 4, 6, 2, 2, 2, 2, 
	2, 4, 7, 4, 6, 2, 2, 2, 
	2, 2, 2, 1, 2, 2, 2, 2, 
	1, 2, 2, 2, 2, 2, 2, 3, 
	1, 4, 1, 1, 4, 2, 2, 3, 
	3, 3, 4, 4, 4, 10, 1, 2, 
	1, 3, 2, 2, 2, 2, 1, 1, 
	2, 1, 3, 2, 2, 2, 2, 1, 
	8, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 4, 4, 6, 6, 
	2, 1, 4, 2, 2, 2, 2, 2, 
	2, 3, 4, 1, 2, 2, 2, 2, 
	1, 6, 2, 1, 2, 2, 2, 2, 
	2, 2, 3, 1, 2, 2, 2, 2, 
	1, 1, 4, 2, 2, 2, 2, 2, 
	1, 6, 1, 1, 1, 1, 4, 2, 
	2, 2, 2, 2, 1, 6, 1, 1, 
	1, 3, 5, 11, 12, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 4, 
	2, 2, 2, 1, 2, 2, 2, 2, 
	2, 1, 2, 2, 2, 2, 1, 2, 
	2, 2, 2, 2, 2, 3, 1, 2, 
	2, 2, 4, 3, 2, 1, 2, 2, 
	2, 2, 2, 2, 1, 0, 2, 5, 
	5, 11, 10, 4, 2, 2, 2, 1, 
	2, 2, 2, 2, 2, 1, 2, 2, 
	2, 2, 2, 2, 3, 1, 2, 2, 
	2, 4, 3, 2, 1, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 4, 2, 
	2, 3, 3, 3, 4, 4, 4, 1, 
	1, 5, 0, 0, 1, 0, 1, 0, 
	2, 0, 0, 0, 14, 0, 0, 1, 
	0, 1, 0, 2, 0, 0, 0, 14, 
	10, 0, 0, 1, 0, 1, 0, 2, 
	0, 0, 0, 2, 2, 2, 3, 1, 
	1, 2, 0, 3, 0, 0, 5, 0, 
	0, 1, 1, 9, 1, 0, 2, 2, 
	3, 0, 0, 1, 4, 3, 2, 2, 
	2, 3, 1, 1, 2, 1, 1, 8, 
	5, 5, 3, 5, 6, 4, 1, 4, 
	4, 4, 1, 6, 3, 5, 5, 5, 
	4, 6, 4, 1, 6, 6, 6, 5, 
	5, 5, 5, 4, 1, 4, 4, 0, 
	5, 3, 5, 3, 6, 5, 5, 5, 
	5, 4, 1, 3, 5, 5, 0, 1, 
	5, 1, 1, 1, 10, 6, 12, 10, 
	6, 4, 6, 6, 6, 5, 1, 1, 
	7, 14, 8, 14, 12, 8, 7, 1, 
	4, 8, 7, 7, 7, 7, 7, 9, 
	8, 7, 8, 7, 7, 9, 7, 7, 
	7, 7, 4, 6, 7, 6, 6, 3, 
	1, 4, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 2, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 2, 0, 3, 0, 0, 
	5, 0, 0, 1, 1, 9, 1, 0, 
	2, 2, 3, 0, 0, 0, 1, 0, 
	1, 0, 2, 0, 0, 0, 14, 0, 
	0, 1, 0, 1, 0, 2, 0, 0, 
	0, 14, 10, 0, 0, 1, 0, 1, 
	0, 2, 0, 0, 0, 0, 2, 2, 
	2, 2, 2, 2, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 2, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 6, 2, 2, 2, 2, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 2, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 2, 2, 2, 
	2, 2, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 16, 1, 1, 3, 1, 
	3, 1, 4, 2, 2, 2, 2, 1, 
	4, 2, 4, 3, 2, 1, 4, 4, 
	2, 2, 4, 7, 4, 6, 2, 2, 
	2, 2, 2, 4, 7, 4, 6, 2, 
	2, 2, 3, 1, 1, 2, 3, 4, 
	3, 4, 1, 1, 2, 2, 2, 2, 
	2, 2, 1, 4, 2, 2, 2, 2, 
	1, 3, 2, 2, 2, 2, 2, 3, 
	1, 2, 1, 3, 2, 4, 3, 8, 
	4, 3, 3, 5, 6, 3, 1, 2, 
	2, 2, 1, 6, 2, 2, 2, 3, 
	1, 1, 2, 1, 4, 4, 3, 2, 
	2, 2, 3, 1, 1, 2, 1, 2, 
	2, 2, 3, 1, 1, 2, 1, 6, 
	4, 3, 1, 2, 2, 2, 1, 5, 
	6, 6, 6, 5, 2, 2, 2, 3, 
	1, 1, 2, 1, 16, 3, 4, 1, 
	5, 2, 2, 2, 2, 1, 1, 2, 
	4, 2, 2, 2, 1, 1, 4, 3, 
	4, 3, 4, 5, 6, 5, 2, 2, 
	2, 3, 1, 1, 2, 1, 5, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 4, 2, 2, 2, 2, 1, 4, 
	2, 4, 3, 2, 1, 2, 2, 4, 
	7, 4, 6, 4, 1, 2, 2, 2, 
	2, 4, 7, 4, 6, 2, 2, 2, 
	3, 1, 1, 2, 3, 1, 2, 2, 
	2, 2, 2, 2, 1, 5, 2, 2, 
	2, 2, 2, 3, 1, 2, 2, 2, 
	2, 1, 2, 1, 1, 0, 1, 0, 
	8, 8, 8, 8, 9, 9, 9, 8, 
	10, 10, 8, 11, 8, 8, 9, 9, 
	9, 8, 10, 10, 11, 8, 10, 0, 
	1, 0, 1, 0, 2, 0, 0, 0, 
	4, 1, 2, 2, 2, 2, 1, 1, 
	2, 2, 2, 2, 1, 1, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 2, 
	2, 2, 2, 2, 2, 2, 1, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	8, 2, 2, 2, 1, 2, 2, 2, 
	1, 2, 2, 2, 1, 1, 2, 2, 
	5, 2, 3, 3, 4, 3, 4, 3, 
	3, 4, 3, 2, 2, 2, 2, 3, 
	2, 3, 3, 4, 3, 4, 3, 3, 
	4, 3, 8, 2, 2, 2, 3, 2, 
	3, 3, 4, 3, 4, 3, 3, 4, 
	3, 3, 2, 3, 3, 4, 3, 4, 
	3, 3, 4, 3, 5, 2, 3, 3, 
	4, 3, 4, 3, 3, 4, 3, 2, 
	2, 3, 2, 3, 3, 4, 3, 4, 
	3, 3, 4, 3, 3, 2, 3, 3, 
	4, 3, 4, 3, 3, 4, 3, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	8, 2, 2, 2, 1, 2, 2, 2, 
	1, 2, 2, 2, 1, 1, 2, 2, 
	5, 2, 3, 3, 4, 3, 4, 3, 
	3, 4, 3, 2, 2, 2, 2, 3, 
	2, 3, 3, 4, 3, 4, 3, 3, 
	4, 3, 8, 2, 2, 2, 3, 2, 
	3, 3, 4, 3, 4, 3, 3, 4, 
	3, 3, 2, 3, 3, 4, 3, 4, 
	3, 3, 4, 3, 5, 2, 3, 3, 
	4, 3, 4, 3, 3, 4, 3, 2, 
	2, 3, 2, 3, 3, 4, 3, 4, 
	3, 3, 4, 3, 3, 2, 3, 3, 
	4, 3, 4, 3, 3, 4, 3, 10, 
	4, 6, 2, 3, 3, 5, 16, 1, 
	4, 4, 1, 1, 1, 1, 4, 1, 
	0, 2, 14, 1, 3, 11, 9, 40, 
	0, 0, 0, 0, 4, 4, 10, 2, 
	6, 3, 5, 2, 2, 2, 2, 1, 
	14, 14, 10, 9, 3, 2, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 4, 4, 4, 4, 
	4, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 4, 
	4, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 4, 
	4, 4, 4, 4, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 4, 4, 4, 4, 3, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 4, 4, 4, 4, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 5, 
	9, 14, 14, 10, 3, 3, 4, 4, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 6, 4, 4, 
	4, 3, 0, 6, 4, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	4, 4, 4, 4, 4, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 4, 4, 4, 4, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 6, 4, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 3, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 4, 4, 4, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	4, 4, 4, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	22, 4, 4, 4, 1, 23, 24, 6, 
	8, 8, 4, 2, 1, 1, 4, 2, 
	1, 1, 2, 5, 5
};

static const char _dtext_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 1, 1, 1, 2, 1, 3, 
	1, 3, 4, 1, 7, 1, 1, 1, 
	2, 1, 3, 1, 3, 4, 1, 7, 
	7, 1, 1, 1, 2, 1, 3, 1, 
	3, 4, 1, 0, 0, 0, 0, 0, 
	0, 6, 1, 6, 1, 1, 6, 1, 
	1, 1, 1, 6, 1, 6, 1, 1, 
	1, 1, 1, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 1, 
	1, 1, 1, 2, 3, 0, 0, 1, 
	1, 1, 0, 3, 3, 1, 1, 1, 
	2, 4, 1, 0, 4, 4, 4, 1, 
	1, 1, 1, 1, 0, 0, 0, 1, 
	3, 0, 3, 3, 1, 1, 1, 1, 
	1, 1, 0, 3, 0, 0, 1, 0, 
	0, 0, 0, 0, 2, 1, 1, 1, 
	1, 0, 1, 1, 1, 1, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 0, 1, 1, 1, 1, 3, 
	0, 0, 0, 0, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 6, 1, 6, 1, 1, 
	6, 1, 1, 1, 1, 6, 1, 6, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 3, 1, 3, 4, 1, 7, 1, 
	1, 1, 2, 1, 3, 1, 3, 4, 
	1, 7, 7, 1, 1, 1, 2, 1, 
	3, 1, 3, 4, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 3, 3, 0, 1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 1, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 3, 0, 1, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 1, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 4, 4, 1, 
	11, 11, 12, 12, 12, 12, 12, 17, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 17, 12, 12, 12, 12, 11, 1, 
	1, 2, 1, 3, 1, 3, 4, 1, 
	8, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 0, 3, 0, 0, 0, 
	0, 0, 3, 0, 0, 0, 0, 0, 
	3, 3, 0, 3, 0, 0, 0, 0, 
	0, 3, 0, 0, 0, 0, 0, 3, 
	3, 0, 3, 0, 0, 0, 0, 0, 
	3, 0, 3, 3, 0, 3, 0, 0, 
	0, 0, 0, 3, 0, 3, 3, 0, 
	3, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 3, 3, 0, 3, 0, 0, 
	0, 0, 0, 3, 0, 3, 3, 0, 
	3, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 0, 3, 0, 0, 0, 
	0, 0, 3, 0, 0, 0, 0, 0, 
	3, 3, 0, 3, 0, 0, 0, 0, 
	0, 3, 0, 0, 0, 0, 0, 3, 
	3, 0, 3, 0, 0, 0, 0, 0, 
	3, 0, 3, 3, 0, 3, 0, 0, 
	0, 0, 0, 3, 0, 3, 3, 0, 
	3, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 3, 3, 0, 3, 0, 0, 
	0, 0, 0, 3, 0, 3, 3, 0, 
	3, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 1, 1, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 12, 
	1, 3, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 7, 7, 6, 1, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 1, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 1, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 1, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 1, 0, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 1, 0, 3, 3, 3, 3, 
	6, 7, 7, 7, 1, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 1, 0, 3, 3, 3, 
	3, 3, 1, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	1, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 1, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	1, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 1, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 1, 0, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 1, 0, 3, 3, 3, 3, 3, 
	1, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 1, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 1, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 1, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 8, 
	11, 11, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
};

static const short _dtext_index_offsets[] = {
	0, 0, 5, 12, 17, 20, 22, 27, 
	30, 33, 36, 39, 41, 46, 49, 51, 
	54, 57, 60, 63, 65, 71, 75, 78, 
	81, 84, 87, 90, 93, 96, 99, 102, 
	104, 109, 112, 115, 118, 121, 123, 128, 
	131, 136, 140, 146, 151, 156, 161, 164, 
	167, 172, 180, 185, 192, 195, 198, 201, 
	204, 207, 212, 220, 225, 232, 235, 238, 
	241, 244, 247, 250, 252, 257, 260, 263, 
	266, 269, 272, 275, 279, 281, 286, 288, 
	291, 300, 309, 314, 317, 320, 323, 326, 
	328, 333, 336, 341, 345, 351, 356, 359, 
	362, 367, 375, 380, 387, 390, 393, 396, 
	399, 402, 407, 415, 420, 427, 430, 433, 
	436, 439, 442, 445, 447, 450, 453, 456, 
	459, 461, 464, 467, 470, 473, 476, 479, 
	483, 485, 490, 492, 494, 502, 505, 508, 
	512, 516, 520, 525, 533, 538, 549, 551, 
	554, 556, 560, 563, 566, 569, 572, 574, 
	576, 579, 581, 585, 588, 591, 594, 597, 
	599, 608, 610, 612, 614, 616, 618, 620, 
	622, 624, 626, 628, 630, 635, 640, 647, 
	654, 657, 659, 664, 667, 670, 673, 676, 
	679, 682, 686, 691, 693, 696, 699, 702, 
	705, 707, 714, 717, 719, 722, 725, 728, 
	731, 734, 737, 741, 743, 746, 749, 752, 
	755, 757, 759, 764, 767, 770, 773, 776, 
	779, 781, 788, 790, 792, 794, 796, 801, 
	804, 807, 810, 813, 816, 818, 825, 827, 
	829, 831, 835, 841, 853, 866, 869, 872, 
	875, 878, 881, 884, 887, 890, 893, 895, 
	900, 903, 906, 909, 911, 914, 917, 920, 
	923, 926, 928, 931, 934, 937, 940, 942, 
	945, 948, 951, 954, 957, 960, 964, 966, 
	969, 972, 975, 980, 984, 990, 995, 998, 
	1001, 1004, 1007, 1010, 1013, 1015, 1017, 1020, 
	1029, 1038, 1050, 1061, 1066, 1069, 1072, 1075, 
	1077, 1080, 1083, 1086, 1089, 1092, 1094, 1097, 
	1100, 1103, 1106, 1109, 1112, 1116, 1118, 1121, 
	1124, 1127, 1132, 1136, 1142, 1147, 1150, 1153, 
	1156, 1159, 1162, 1165, 1167, 1169, 1171, 1179, 
	1182, 1185, 1189, 1193, 1197, 1202, 1210, 1215, 
	1217, 1219, 1225, 1227, 1229, 1232, 1235, 1238, 
	1242, 1246, 1250, 1255, 1257, 1279, 1281, 1283, 
	1286, 1289, 1292, 1296, 1300, 1304, 1309, 1311, 
	1333, 1351, 1353, 1355, 1358, 1361, 1364, 1368, 
	1372, 1376, 1381, 1383, 1386, 1389, 1392, 1396, 
	1398, 1400, 1409, 1411, 1421, 1423, 1425, 1437, 
	1439, 1441, 1444, 1447, 1463, 1466, 1473, 1477, 
	1481, 1486, 1488, 1490, 1492, 1497, 1502, 1505, 
	1508, 1511, 1515, 1517, 1519, 1523, 1525, 1527, 
	1537, 1544, 1551, 1556, 1564, 1574, 1579, 1581, 
	1587, 1593, 1599, 1601, 1611, 1618, 1625, 1632, 
	1639, 1646, 1657, 1663, 1665, 1676, 1687, 1698, 
	1705, 1712, 1719, 1726, 1732, 1734, 1739, 1744, 
	1746, 1755, 1759, 1768, 1775, 1783, 1790, 1797, 
	1804, 1811, 1817, 1819, 1826, 1832, 1838, 1840, 
	1842, 1848, 1850, 1852, 1854, 1867, 1875, 1889, 
	1901, 1909, 1914, 1922, 1930, 1938, 1945, 1947, 
	1949, 1958, 1974, 1984, 2000, 2014, 2024, 2033, 
	2035, 2040, 2050, 2059, 2068, 2077, 2086, 2095, 
	2106, 2116, 2125, 2135, 2144, 2153, 2167, 2176, 
	2185, 2194, 2203, 2208, 2216, 2225, 2233, 2241, 
	2248, 2250, 2255, 2257, 2259, 2261, 2265, 2269, 
	2273, 2277, 2281, 2285, 2289, 2293, 2297, 2301, 
	2305, 2307, 2311, 2315, 2319, 2323, 2327, 2331, 
	2335, 2339, 2343, 2347, 2351, 2353, 2357, 2361, 
	2365, 2369, 2373, 2377, 2381, 2385, 2389, 2393, 
	2397, 2399, 2403, 2409, 2413, 2417, 2421, 2425, 
	2429, 2433, 2437, 2441, 2445, 2449, 2451, 2455, 
	2459, 2463, 2467, 2471, 2475, 2479, 2483, 2487, 
	2491, 2495, 2497, 2499, 2508, 2510, 2520, 2522, 
	2524, 2536, 2538, 2540, 2543, 2546, 2562, 2565, 
	2572, 2576, 2580, 2585, 2587, 2589, 2591, 2594, 
	2597, 2600, 2604, 2608, 2612, 2617, 2619, 2641, 
	2643, 2645, 2648, 2651, 2654, 2658, 2662, 2666, 
	2671, 2673, 2695, 2713, 2715, 2717, 2720, 2723, 
	2726, 2730, 2734, 2738, 2743, 2745, 2747, 2750, 
	2753, 2756, 2759, 2762, 2765, 2767, 2769, 2773, 
	2777, 2781, 2785, 2789, 2793, 2797, 2801, 2805, 
	2809, 2813, 2815, 2819, 2824, 2827, 2829, 2834, 
	2839, 2844, 2849, 2854, 2859, 2864, 2869, 2874, 
	2877, 2879, 2883, 2887, 2891, 2895, 2899, 2903, 
	2907, 2911, 2915, 2919, 2921, 2925, 2929, 2933, 
	2937, 2941, 2945, 2949, 2953, 2957, 2961, 2965, 
	2967, 2971, 2975, 2979, 2983, 2987, 2991, 2995, 
	2999, 3003, 3007, 3011, 3013, 3017, 3021, 3025, 
	3029, 3033, 3037, 3041, 3045, 3049, 3053, 3057, 
	3059, 3063, 3067, 3071, 3075, 3079, 3083, 3087, 
	3091, 3095, 3099, 3103, 3110, 3113, 3116, 3119, 
	3122, 3124, 3126, 3130, 3134, 3138, 3142, 3146, 
	3150, 3154, 3158, 3162, 3166, 3170, 3173, 3176, 
	3179, 3182, 3185, 3188, 3191, 3194, 3197, 3200, 
	3202, 3204, 3208, 3212, 3216, 3220, 3224, 3228, 
	3232, 3236, 3240, 3244, 3248, 3251, 3254, 3257, 
	3260, 3263, 3266, 3269, 3272, 3275, 3278, 3280, 
	3282, 3286, 3290, 3294, 3298, 3302, 3306, 3310, 
	3314, 3318, 3322, 3326, 3328, 3332, 3335, 3337, 
	3341, 3345, 3349, 3353, 3357, 3361, 3365, 3369, 
	3373, 3377, 3381, 3385, 3389, 3393, 3397, 3401, 
	3405, 3409, 3413, 3417, 3421, 3425, 3428, 3431, 
	3434, 3437, 3440, 3442, 3444, 3448, 3452, 3456, 
	3460, 3464, 3468, 3472, 3476, 3480, 3484, 3488, 
	3490, 3494, 3498, 3502, 3506, 3510, 3514, 3518, 
	3522, 3526, 3530, 3534, 3551, 3553, 3555, 3559, 
	3561, 3565, 3567, 3572, 3575, 3578, 3581, 3584, 
	3586, 3591, 3594, 3599, 3603, 3609, 3614, 3619, 
	3624, 3627, 3630, 3635, 3643, 3648, 3655, 3658, 
	3661, 3664, 3667, 3670, 3675, 3683, 3688, 3695, 
	3698, 3701, 3704, 3708, 3710, 3712, 3716, 3721, 
	3727, 3731, 3736, 3738, 3740, 3743, 3746, 3749, 
	3752, 3755, 3758, 3760, 3765, 3768, 3771, 3774, 
	3777, 3779, 3783, 3786, 3789, 3792, 3795, 3798, 
	3802, 3804, 3807, 3809, 3813, 3816, 3821, 3825, 
	3834, 3839, 3844, 3848, 3854, 3861, 3865, 3867, 
	3870, 3873, 3876, 3878, 3885, 3888, 3891, 3894, 
	3898, 3900, 3902, 3906, 3908, 3914, 3919, 3924, 
	3927, 3930, 3933, 3937, 3939, 3941, 3945, 3947, 
	3950, 3953, 3956, 3960, 3962, 3964, 3968, 3970, 
	3977, 3983, 3987, 3989, 3992, 3995, 3998, 4000, 
	4007, 4015, 4023, 4031, 4038, 4041, 4044, 4047, 
	4051, 4053, 4055, 4059, 4061, 4078, 4082, 4087, 
	4089, 4095, 4098, 4101, 4104, 4107, 4109, 4111, 
	4114, 4119, 4122, 4125, 4128, 4130, 4132, 4137, 
	4142, 4148, 4152, 4157, 4163, 4170, 4176, 4179, 
	4182, 4185, 4189, 4191, 4193, 4197, 4199, 4205, 
	4208, 4211, 4214, 4217, 4220, 4223, 4226, 4229, 
	4231, 4233, 4238, 4241, 4244, 4247, 4250, 4252, 
	4257, 4260, 4265, 4269, 4275, 4280, 4283, 4286, 
	4291, 4299, 4304, 4311, 4316, 4318, 4321, 4324, 
	4327, 4330, 4335, 4343, 4348, 4355, 4358, 4361, 
	4364, 4368, 4370, 4372, 4376, 4381, 4383, 4386, 
	4389, 4392, 4395, 4398, 4401, 4403, 4409, 4412, 
	4415, 4418, 4421, 4424, 4428, 4430, 4433, 4436, 
	4439, 4442, 4444, 4447, 4449, 4451, 4456, 4462, 
	4464, 4484, 4504, 4525, 4546, 4568, 4590, 4612, 
	4638, 4661, 4684, 4705, 4729, 4750, 4771, 4793, 
	4815, 4837, 4863, 4886, 4909, 4933, 4954, 4976, 
	4978, 4981, 4984, 4987, 4991, 4995, 4999, 5004, 
	5006, 5019, 5021, 5024, 5027, 5030, 5033, 5035, 
	5037, 5040, 5043, 5046, 5049, 5051, 5053, 5056, 
	5059, 5062, 5065, 5068, 5071, 5074, 5076, 5078, 
	5081, 5084, 5087, 5090, 5093, 5096, 5099, 5101, 
	5106, 5109, 5112, 5115, 5118, 5121, 5124, 5127, 
	5129, 5138, 5141, 5144, 5147, 5149, 5152, 5155, 
	5158, 5160, 5163, 5166, 5169, 5171, 5173, 5176, 
	5179, 5185, 5191, 5198, 5202, 5210, 5214, 5219, 
	5223, 5227, 5232, 5239, 5242, 5245, 5248, 5251, 
	5255, 5261, 5268, 5272, 5280, 5284, 5289, 5293, 
	5297, 5302, 5309, 5318, 5321, 5324, 5327, 5331, 
	5337, 5344, 5348, 5356, 5360, 5365, 5369, 5373, 
	5378, 5385, 5389, 5395, 5402, 5406, 5414, 5418, 
	5423, 5427, 5431, 5436, 5443, 5449, 5455, 5462, 
	5466, 5474, 5478, 5483, 5487, 5491, 5496, 5503, 
	5506, 5509, 5513, 5519, 5526, 5530, 5538, 5542, 
	5547, 5551, 5555, 5560, 5567, 5571, 5577, 5584, 
	5588, 5596, 5600, 5605, 5609, 5613, 5618, 5625, 
	5630, 5633, 5636, 5639, 5642, 5645, 5648, 5651, 
	5653, 5662, 5665, 5668, 5671, 5673, 5676, 5679, 
	5682, 5684, 5687, 5690, 5693, 5695, 5697, 5700, 
	5703, 5709, 5715, 5722, 5726, 5734, 5738, 5743, 
	5747, 5751, 5756, 5763, 5766, 5769, 5772, 5775, 
	5779, 5785, 5792, 5796, 5804, 5808, 5813, 5817, 
	5821, 5826, 5833, 5842, 5845, 5848, 5851, 5855, 
	5861, 5868, 5872, 5880, 5884, 5889, 5893, 5897, 
	5902, 5909, 5913, 5919, 5926, 5930, 5938, 5942, 
	5947, 5951, 5955, 5960, 5967, 5973, 5979, 5986, 
	5990, 5998, 6002, 6007, 6011, 6015, 6020, 6027, 
	6030, 6033, 6037, 6043, 6050, 6054, 6062, 6066, 
	6071, 6075, 6079, 6084, 6091, 6095, 6101, 6108, 
	6112, 6120, 6124, 6129, 6133, 6137, 6142, 6149, 
	6160, 6165, 6172, 6175, 6179, 6183, 6189, 6206, 
	6209, 6214, 6219, 6222, 6225, 6228, 6231, 6236, 
	6239, 6241, 6244, 6259, 6261, 6265, 6277, 6287, 
	6340, 6342, 6346, 6348, 6350, 6355, 6360, 6371, 
	6374, 6381, 6385, 6391, 6394, 6397, 6400, 6403, 
	6405, 6427, 6449, 6467, 6483, 6488, 6494, 6498, 
	6502, 6506, 6510, 6514, 6518, 6522, 6526, 6530, 
	6534, 6538, 6542, 6547, 6552, 6560, 6568, 6576, 
	6584, 6592, 6599, 6603, 6607, 6611, 6615, 6619, 
	6623, 6627, 6631, 6635, 6639, 6641, 6642, 6650, 
	6658, 6666, 6673, 6677, 6681, 6685, 6689, 6693, 
	6697, 6701, 6705, 6709, 6713, 6715, 6716, 6724, 
	6732, 6740, 6748, 6756, 6764, 6771, 6775, 6779, 
	6783, 6787, 6791, 6795, 6799, 6803, 6807, 6811, 
	6813, 6814, 6822, 6830, 6838, 6846, 6853, 6858, 
	6864, 6869, 6874, 6879, 6884, 6889, 6894, 6899, 
	6904, 6909, 6912, 6914, 6922, 6930, 6938, 6946, 
	6953, 6957, 6961, 6965, 6969, 6973, 6977, 6981, 
	6985, 6989, 6993, 6995, 6996, 7004, 7012, 7020, 
	7029, 7045, 7067, 7089, 7107, 7112, 7119, 7127, 
	7135, 7142, 7146, 7150, 7154, 7158, 7162, 7166, 
	7170, 7174, 7178, 7182, 7184, 7185, 7195, 7203, 
	7211, 7219, 7226, 7228, 7238, 7246, 7253, 7257, 
	7261, 7265, 7269, 7273, 7277, 7281, 7285, 7289, 
	7293, 7295, 7296, 7304, 7311, 7315, 7319, 7323, 
	7327, 7331, 7335, 7339, 7343, 7347, 7351, 7353, 
	7354, 7362, 7370, 7378, 7386, 7394, 7401, 7405, 
	7409, 7413, 7417, 7421, 7425, 7429, 7433, 7437, 
	7441, 7443, 7444, 7452, 7460, 7468, 7476, 7484, 
	7491, 7495, 7499, 7503, 7507, 7511, 7515, 7519, 
	7523, 7527, 7531, 7533, 7534, 7544, 7552, 7559, 
	7563, 7567, 7571, 7575, 7579, 7583, 7587, 7591, 
	7595, 7599, 7601, 7602, 7606, 7610, 7614, 7618, 
	7622, 7626, 7630, 7634, 7638, 7642, 7644, 7645, 
	7649, 7653, 7657, 7661, 7665, 7669, 7673, 7677, 
	7681, 7685, 7687, 7688, 7696, 7704, 7712, 7719, 
	7724, 7726, 7731, 7736, 7741, 7746, 7751, 7756, 
	7761, 7766, 7771, 7774, 7776, 7784, 7792, 7800, 
	7807, 7811, 7815, 7819, 7823, 7827, 7831, 7835, 
	7839, 7843, 7847, 7849, 7850, 7854, 7858, 7862, 
	7866, 7870, 7874, 7878, 7882, 7886, 7890, 7892, 
	7893, 7901, 7909, 7917, 7924, 7928, 7932, 7936, 
	7940, 7944, 7948, 7952, 7956, 7960, 7964, 7966, 
	7967, 7990, 7995, 8000, 8005, 8007, 8031, 8056, 
	8071, 8091, 8111, 8116, 8119, 8121, 8123, 8128, 
	8131, 8133, 8135, 8138, 8144
};

static const short _dtext_indicies[] = {
	1, 2, 1, 2, 0, 1, 4, 1, 
	4, 5, 6, 3, 7, 8, 7, 8, 
	3, 9, 9, 3, 10, 3, 11, 10, 
	11, 10, 3, 12, 12, 3, 13, 13, 
	3, 14, 14, 3, 15, 15, 3, 16, 
	3, 17, 18, 17, 18, 3, 19, 19, 
	3, 10, 3, 20, 20, 3, 21, 21, 
	3, 22, 22, 3, 23, 23, 3, 16, 
	3, 3, 25, 3, 3, 25, 24, 26, 
	26, 27, 3, 28, 28, 3, 29, 29, 
	3, 30, 30, 3, 31, 31, 3, 32, 
	32, 3, 33, 33, 3, 34, 34, 3, 
	35, 35, 3, 36, 36, 3, 37, 3, 
	38, 39, 38, 39, 3, 40, 40, 3, 
	41, 41, 3, 42, 42, 3, 43, 43, 
	3, 44, 3, 45, 46, 45, 46, 3, 
	47, 47, 3, 48, 48, 49, 50, 3, 
	48, 48, 49, 3, 49, 49, 51, 51, 
	51, 3, 53, 52, 52, 52, 3, 55, 
	56, 55, 56, 54, 58, 59, 58, 59, 
	57, 60, 60, 3, 61, 61, 3, 62, 
	62, 63, 64, 3, 3, 66, 3, 3, 
	66, 67, 68, 65, 3, 3, 3, 70, 
	69, 3, 67, 3, 3, 67, 68, 65, 
	71, 71, 3, 72, 72, 3, 73, 73, 
	3, 74, 74, 3, 75, 75, 3, 76, 
	76, 77, 78, 3, 3, 80, 3, 3, 
	80, 81, 82, 79, 3, 3, 3, 84, 
	83, 3, 81, 3, 3, 81, 82, 79, 
	85, 85, 3, 86, 86, 3, 87, 87, 
	3, 88, 88, 3, 89, 89, 3, 90, 
	90, 3, 91, 3, 93, 94, 93, 94, 
	92, 95, 95, 3, 96, 96, 3, 97, 
	97, 3, 98, 98, 3, 99, 99, 3, 
	100, 100, 3, 101, 102, 102, 3, 101, 
	3, 12, 103, 12, 103, 3, 104, 3, 
	105, 106, 3, 107, 107, 107, 107, 107, 
	107, 107, 107, 3, 108, 108, 108, 109, 
	108, 108, 108, 108, 3, 110, 111, 110, 
	111, 3, 112, 112, 3, 113, 113, 3, 
	114, 114, 3, 115, 115, 3, 44, 3, 
	116, 117, 116, 117, 3, 118, 118, 3, 
	119, 119, 120, 50, 3, 119, 119, 120, 
	3, 120, 120, 121, 121, 121, 3, 53, 
	122, 122, 122, 3, 123, 123, 3, 124, 
	124, 3, 125, 125, 126, 64, 3, 3, 
	128, 3, 3, 128, 129, 68, 127, 3, 
	3, 3, 70, 130, 3, 129, 3, 3, 
	129, 68, 127, 131, 131, 3, 132, 132, 
	3, 133, 133, 3, 134, 134, 3, 135, 
	135, 3, 136, 136, 137, 78, 3, 3, 
	139, 3, 3, 139, 140, 82, 138, 3, 
	3, 3, 84, 141, 3, 140, 3, 3, 
	140, 82, 138, 142, 142, 3, 143, 143, 
	3, 144, 144, 3, 145, 145, 3, 146, 
	146, 3, 147, 147, 3, 91, 3, 148, 
	148, 3, 149, 149, 3, 150, 150, 3, 
	151, 151, 3, 37, 3, 152, 152, 3, 
	153, 153, 3, 154, 154, 3, 155, 155, 
	3, 156, 156, 3, 157, 157, 3, 158, 
	101, 158, 3, 101, 3, 20, 159, 20, 
	159, 3, 104, 3, 160, 3, 161, 162, 
	161, 162, 163, 163, 163, 3, 165, 165, 
	164, 167, 167, 166, 167, 167, 168, 166, 
	167, 167, 169, 166, 167, 167, 170, 166, 
	171, 170, 171, 170, 166, 172, 173, 172, 
	173, 174, 174, 174, 3, 175, 176, 175, 
	176, 3, 178, 179, 180, 181, 182, 178, 
	179, 180, 181, 182, 177, 183, 177, 180, 
	180, 177, 184, 177, 185, 186, 186, 177, 
	187, 187, 177, 188, 188, 177, 189, 189, 
	177, 178, 178, 177, 190, 177, 191, 177, 
	192, 192, 177, 193, 177, 194, 195, 195, 
	177, 196, 196, 177, 197, 197, 177, 198, 
	198, 177, 199, 199, 177, 200, 177, 201, 
	202, 203, 204, 201, 202, 203, 204, 177, 
	183, 177, 184, 177, 185, 177, 190, 177, 
	191, 177, 193, 177, 194, 177, 200, 177, 
	206, 205, 207, 205, 209, 208, 210, 211, 
	210, 211, 205, 211, 213, 211, 213, 212, 
	210, 215, 210, 215, 216, 217, 214, 218, 
	219, 220, 218, 219, 220, 214, 221, 221, 
	214, 222, 214, 223, 222, 223, 222, 214, 
	224, 224, 214, 225, 225, 214, 226, 226, 
	214, 227, 227, 214, 228, 228, 214, 229, 
	229, 214, 230, 231, 231, 214, 232, 230, 
	232, 230, 214, 230, 214, 233, 233, 214, 
	234, 234, 214, 235, 235, 214, 236, 236, 
	214, 237, 214, 238, 239, 240, 238, 239, 
	240, 214, 241, 241, 214, 222, 214, 242, 
	242, 214, 243, 243, 214, 244, 244, 214, 
	245, 245, 214, 246, 246, 214, 247, 247, 
	214, 248, 230, 248, 214, 230, 214, 249, 
	249, 214, 250, 250, 214, 251, 251, 214, 
	252, 252, 214, 237, 214, 254, 253, 255, 
	256, 255, 256, 253, 257, 257, 253, 258, 
	258, 205, 259, 259, 205, 260, 260, 205, 
	261, 261, 205, 262, 205, 263, 264, 265, 
	263, 264, 265, 205, 266, 205, 267, 205, 
	268, 205, 269, 253, 270, 271, 270, 271, 
	253, 272, 272, 253, 273, 273, 205, 274, 
	274, 205, 275, 275, 205, 276, 276, 205, 
	262, 205, 277, 278, 279, 277, 278, 279, 
	205, 266, 205, 267, 205, 268, 205, 280, 
	280, 281, 214, 214, 283, 214, 214, 283, 
	282, 284, 285, 218, 286, 219, 220, 285, 
	218, 286, 219, 220, 214, 287, 288, 289, 
	290, 291, 256, 287, 288, 289, 290, 291, 
	256, 214, 292, 292, 214, 293, 293, 205, 
	294, 294, 205, 295, 295, 205, 296, 296, 
	205, 297, 297, 205, 298, 298, 205, 299, 
	299, 205, 300, 300, 205, 301, 205, 257, 
	302, 257, 302, 205, 303, 303, 205, 304, 
	304, 205, 305, 305, 205, 306, 205, 307, 
	307, 214, 308, 308, 205, 309, 309, 205, 
	310, 310, 205, 311, 311, 205, 312, 205, 
	313, 313, 205, 314, 314, 205, 315, 315, 
	205, 316, 316, 205, 301, 205, 317, 317, 
	214, 318, 318, 205, 319, 319, 205, 320, 
	320, 205, 321, 321, 205, 322, 322, 205, 
	323, 324, 324, 205, 323, 205, 325, 325, 
	214, 326, 326, 214, 327, 327, 214, 328, 
	328, 329, 330, 214, 328, 328, 329, 214, 
	329, 329, 331, 331, 331, 214, 333, 332, 
	332, 332, 214, 334, 334, 214, 335, 335, 
	214, 336, 336, 214, 337, 337, 214, 338, 
	338, 214, 339, 339, 214, 330, 214, 340, 
	214, 341, 342, 214, 343, 343, 343, 343, 
	343, 343, 343, 343, 214, 344, 344, 344, 
	345, 344, 344, 344, 344, 214, 346, 347, 
	238, 348, 239, 240, 347, 238, 348, 239, 
	240, 214, 349, 350, 296, 351, 271, 349, 
	350, 296, 351, 271, 214, 272, 352, 272, 
	352, 205, 353, 353, 205, 354, 354, 205, 
	355, 355, 205, 306, 205, 356, 356, 205, 
	357, 357, 205, 358, 358, 205, 359, 359, 
	205, 360, 360, 205, 312, 205, 361, 361, 
	214, 362, 362, 205, 363, 363, 205, 364, 
	364, 205, 365, 365, 205, 366, 366, 205, 
	367, 323, 367, 205, 323, 205, 368, 368, 
	214, 369, 369, 214, 370, 370, 214, 371, 
	371, 372, 330, 214, 371, 371, 372, 214, 
	372, 372, 373, 373, 373, 214, 333, 374, 
	374, 374, 214, 375, 375, 214, 376, 376, 
	214, 377, 377, 214, 378, 378, 214, 379, 
	379, 214, 380, 380, 214, 330, 214, 381, 
	214, 382, 214, 383, 384, 383, 384, 385, 
	385, 385, 214, 387, 387, 386, 389, 389, 
	388, 389, 389, 390, 388, 389, 389, 391, 
	388, 389, 389, 392, 388, 393, 392, 393, 
	392, 388, 394, 395, 394, 395, 396, 396, 
	396, 214, 397, 398, 397, 398, 214, 400, 
	399, 401, 212, 402, 403, 404, 405, 404, 
	212, 407, 406, 408, 406, 409, 408, 406, 
	407, 407, 406, 410, 408, 406, 407, 407, 
	407, 406, 411, 412, 408, 406, 407, 407, 
	407, 406, 407, 407, 407, 407, 406, 413, 
	406, 414, 415, 416, 406, 418, 406, 418, 
	418, 418, 406, 406, 418, 406, 406, 406, 
	408, 413, 417, 406, 406, 418, 407, 419, 
	406, 420, 406, 421, 420, 406, 419, 419, 
	406, 422, 420, 406, 419, 419, 419, 406, 
	423, 424, 420, 406, 419, 419, 419, 406, 
	419, 419, 419, 419, 406, 425, 406, 426, 
	427, 428, 406, 430, 407, 430, 430, 430, 
	406, 406, 431, 406, 406, 406, 420, 425, 
	429, 406, 406, 430, 419, 434, 435, 436, 
	205, 431, 407, 431, 431, 431, 431, 205, 
	432, 433, 437, 205, 205, 431, 438, 438, 
	205, 432, 205, 439, 432, 205, 438, 438, 
	205, 440, 432, 205, 438, 438, 438, 205, 
	441, 442, 432, 205, 438, 438, 438, 205, 
	438, 438, 438, 438, 205, 433, 205, 443, 
	443, 212, 444, 444, 212, 445, 445, 212, 
	446, 447, 447, 212, 448, 212, 449, 212, 
	453, 453, 450, 451, 452, 453, 453, 453, 
	212, 453, 212, 453, 454, 453, 450, 451, 
	452, 453, 453, 453, 212, 450, 212, 451, 
	212, 457, 458, 459, 461, 461, 455, 456, 
	460, 461, 461, 461, 205, 461, 205, 455, 
	205, 462, 455, 205, 463, 461, 205, 457, 
	458, 459, 407, 454, 419, 464, 431, 461, 
	455, 456, 460, 461, 461, 461, 205, 465, 
	455, 205, 463, 461, 463, 461, 463, 461, 
	205, 466, 467, 455, 205, 463, 463, 461, 
	205, 463, 463, 463, 461, 205, 456, 205, 
	468, 205, 446, 212, 469, 469, 470, 470, 
	212, 212, 212, 472, 212, 471, 473, 473, 
	212, 474, 474, 212, 475, 475, 212, 476, 
	477, 477, 212, 478, 212, 479, 212, 212, 
	212, 212, 471, 476, 212, 480, 208, 482, 
	482, 484, 485, 486, 487, 205, 488, 483, 
	481, 490, 490, 492, 493, 494, 491, 489, 
	495, 495, 496, 497, 498, 491, 489, 491, 
	205, 205, 491, 489, 490, 490, 492, 493, 
	494, 491, 499, 489, 500, 501, 502, 504, 
	502, 505, 503, 503, 503, 205, 506, 506, 
	497, 498, 205, 507, 205, 509, 509, 510, 
	205, 205, 508, 512, 512, 513, 205, 205, 
	511, 514, 514, 515, 205, 205, 511, 516, 
	205, 506, 517, 502, 497, 502, 498, 503, 
	503, 503, 205, 502, 502, 502, 503, 503, 
	503, 205, 490, 490, 492, 493, 518, 491, 
	489, 519, 519, 520, 521, 205, 205, 508, 
	522, 522, 523, 524, 205, 205, 508, 512, 
	512, 513, 205, 205, 525, 511, 526, 527, 
	528, 530, 528, 205, 205, 529, 529, 529, 
	511, 531, 531, 532, 205, 205, 511, 533, 
	205, 531, 534, 528, 532, 528, 205, 205, 
	529, 529, 529, 511, 512, 535, 528, 513, 
	528, 205, 205, 529, 529, 529, 511, 514, 
	536, 528, 515, 528, 205, 205, 529, 529, 
	529, 511, 490, 490, 492, 493, 537, 491, 
	489, 509, 509, 538, 510, 205, 205, 508, 
	512, 512, 513, 539, 205, 205, 511, 512, 
	512, 540, 513, 205, 205, 511, 512, 512, 
	513, 541, 205, 511, 542, 205, 543, 543, 
	544, 493, 205, 545, 545, 546, 497, 205, 
	547, 205, 548, 549, 550, 504, 550, 551, 
	551, 551, 205, 552, 552, 497, 205, 552, 
	553, 550, 497, 550, 551, 551, 551, 205, 
	550, 550, 550, 551, 551, 551, 205, 490, 
	490, 492, 554, 493, 555, 491, 489, 509, 
	509, 556, 510, 205, 205, 508, 557, 557, 
	558, 559, 205, 205, 511, 560, 560, 561, 
	532, 205, 205, 511, 490, 490, 492, 493, 
	562, 491, 489, 509, 509, 510, 563, 205, 
	508, 542, 205, 565, 566, 567, 564, 564, 
	564, 205, 568, 568, 569, 493, 494, 205, 
	570, 570, 571, 497, 498, 205, 499, 205, 
	564, 205, 568, 568, 569, 493, 518, 205, 
	572, 205, 565, 205, 573, 208, 205, 573, 
	573, 575, 576, 577, 578, 579, 580, 575, 
	205, 205, 574, 205, 582, 582, 205, 583, 
	584, 205, 581, 205, 585, 585, 586, 587, 
	588, 589, 590, 205, 591, 592, 586, 205, 
	581, 205, 582, 582, 587, 588, 589, 590, 
	205, 593, 584, 205, 581, 205, 582, 582, 
	594, 595, 596, 205, 581, 582, 582, 583, 
	584, 205, 205, 598, 205, 205, 598, 600, 
	599, 597, 205, 602, 205, 205, 602, 604, 
	603, 601, 205, 605, 205, 205, 605, 606, 
	603, 601, 205, 205, 205, 603, 205, 603, 
	601, 607, 205, 608, 205, 205, 609, 205, 
	205, 609, 610, 611, 599, 597, 205, 613, 
	205, 205, 613, 614, 615, 616, 617, 618, 
	597, 619, 620, 614, 599, 612, 205, 622, 
	205, 205, 622, 601, 583, 623, 603, 621, 
	205, 624, 205, 205, 624, 625, 626, 627, 
	628, 629, 601, 591, 630, 625, 603, 621, 
	205, 622, 205, 205, 622, 626, 627, 628, 
	629, 601, 593, 623, 603, 621, 205, 622, 
	205, 205, 622, 631, 595, 632, 603, 621, 
	205, 622, 205, 205, 622, 583, 623, 603, 
	601, 633, 205, 582, 582, 583, 634, 205, 
	205, 622, 205, 205, 622, 601, 635, 623, 
	603, 621, 205, 598, 205, 205, 598, 636, 
	600, 599, 597, 205, 602, 205, 205, 602, 
	637, 604, 603, 601, 205, 602, 205, 205, 
	602, 638, 604, 603, 601, 205, 602, 205, 
	205, 602, 639, 604, 603, 601, 205, 602, 
	205, 205, 602, 631, 604, 603, 601, 205, 
	622, 205, 205, 622, 640, 601, 641, 623, 
	603, 621, 205, 622, 205, 205, 622, 601, 
	595, 623, 603, 621, 205, 598, 205, 205, 
	598, 642, 600, 599, 597, 205, 622, 205, 
	205, 622, 601, 643, 623, 603, 621, 205, 
	598, 205, 205, 598, 644, 600, 599, 597, 
	205, 602, 205, 205, 602, 631, 604, 603, 
	601, 205, 598, 205, 205, 598, 645, 646, 
	647, 600, 599, 642, 642, 642, 597, 205, 
	602, 205, 205, 602, 631, 604, 603, 601, 
	205, 622, 205, 205, 622, 595, 623, 603, 
	601, 205, 602, 205, 205, 602, 648, 604, 
	603, 601, 205, 602, 205, 205, 602, 649, 
	604, 603, 601, 582, 582, 583, 650, 205, 
	205, 582, 582, 205, 635, 584, 205, 581, 
	205, 582, 582, 651, 205, 641, 584, 205, 
	581, 205, 582, 582, 205, 595, 584, 205, 
	581, 205, 582, 582, 205, 643, 584, 205, 
	581, 652, 653, 654, 594, 594, 594, 205, 
	594, 205, 582, 582, 595, 584, 205, 655, 
	205, 652, 205, 656, 208, 657, 658, 658, 
	208, 659, 659, 659, 205, 660, 660, 660, 
	205, 661, 661, 661, 205, 662, 662, 662, 
	205, 663, 663, 663, 205, 664, 664, 664, 
	205, 665, 665, 665, 205, 666, 666, 666, 
	205, 667, 667, 667, 205, 668, 668, 668, 
	208, 669, 208, 670, 671, 671, 208, 672, 
	672, 672, 205, 673, 673, 673, 205, 674, 
	674, 674, 205, 675, 675, 675, 205, 676, 
	676, 676, 205, 677, 677, 677, 205, 678, 
	678, 678, 205, 679, 679, 679, 205, 680, 
	680, 680, 205, 681, 681, 681, 208, 682, 
	208, 683, 684, 684, 208, 685, 685, 685, 
	205, 686, 686, 686, 205, 687, 687, 687, 
	205, 688, 688, 688, 205, 689, 689, 689, 
	205, 690, 690, 690, 205, 691, 691, 691, 
	205, 692, 692, 692, 205, 693, 693, 693, 
	205, 694, 694, 694, 208, 695, 208, 696, 
	697, 697, 208, 699, 699, 699, 699, 699, 
	698, 700, 700, 700, 205, 701, 701, 701, 
	205, 702, 702, 702, 205, 703, 703, 703, 
	205, 704, 704, 704, 205, 705, 705, 705, 
	205, 706, 706, 706, 205, 707, 707, 707, 
	205, 708, 708, 708, 205, 709, 709, 709, 
	208, 710, 208, 711, 712, 712, 208, 713, 
	713, 713, 205, 714, 714, 714, 205, 715, 
	715, 715, 205, 716, 716, 716, 205, 717, 
	717, 717, 205, 718, 718, 718, 205, 719, 
	719, 719, 205, 720, 720, 720, 205, 721, 
	721, 721, 205, 722, 722, 722, 208, 723, 
	208, 724, 208, 728, 728, 725, 726, 727, 
	728, 728, 728, 208, 728, 208, 728, 729, 
	728, 725, 726, 727, 728, 728, 728, 208, 
	725, 208, 726, 208, 732, 733, 734, 736, 
	736, 730, 731, 735, 736, 736, 736, 205, 
	736, 205, 730, 205, 737, 730, 205, 738, 
	736, 205, 732, 733, 734, 739, 729, 740, 
	741, 742, 736, 730, 731, 735, 736, 736, 
	736, 205, 743, 730, 205, 738, 736, 738, 
	736, 738, 736, 205, 744, 745, 730, 205, 
	738, 738, 736, 205, 738, 738, 738, 736, 
	205, 731, 205, 739, 746, 747, 746, 748, 
	747, 746, 739, 739, 746, 749, 747, 746, 
	739, 739, 739, 746, 750, 751, 747, 746, 
	739, 739, 739, 746, 739, 739, 739, 739, 
	746, 752, 746, 753, 754, 755, 746, 757, 
	746, 757, 757, 757, 746, 746, 757, 746, 
	746, 746, 747, 752, 756, 746, 746, 757, 
	739, 740, 746, 758, 746, 759, 758, 746, 
	740, 740, 746, 760, 758, 746, 740, 740, 
	740, 746, 761, 762, 758, 746, 740, 740, 
	740, 746, 740, 740, 740, 740, 746, 763, 
	746, 764, 765, 766, 746, 768, 739, 768, 
	768, 768, 746, 746, 742, 746, 746, 746, 
	758, 763, 767, 746, 746, 768, 740, 771, 
	772, 773, 205, 742, 739, 742, 742, 742, 
	742, 205, 769, 770, 774, 205, 205, 742, 
	775, 775, 205, 769, 205, 776, 769, 205, 
	775, 775, 205, 777, 769, 205, 775, 775, 
	775, 205, 778, 779, 769, 205, 775, 775, 
	775, 205, 775, 775, 775, 775, 205, 770, 
	205, 780, 205, 781, 781, 208, 782, 782, 
	208, 783, 783, 208, 784, 784, 208, 785, 
	785, 208, 786, 786, 208, 787, 208, 788, 
	208, 789, 790, 790, 208, 791, 791, 791, 
	205, 792, 792, 792, 205, 793, 793, 793, 
	205, 794, 794, 794, 205, 795, 795, 795, 
	205, 796, 796, 796, 205, 797, 797, 797, 
	205, 798, 798, 798, 205, 799, 799, 799, 
	205, 800, 800, 800, 208, 801, 208, 802, 
	803, 803, 208, 804, 805, 806, 806, 208, 
	807, 807, 208, 808, 208, 804, 809, 810, 
	810, 208, 804, 811, 812, 812, 208, 804, 
	813, 814, 814, 208, 804, 815, 816, 816, 
	208, 804, 817, 818, 818, 208, 804, 819, 
	820, 820, 208, 804, 821, 822, 822, 208, 
	804, 823, 824, 824, 208, 804, 825, 826, 
	826, 208, 804, 825, 208, 804, 208, 826, 
	826, 826, 208, 824, 824, 824, 208, 822, 
	822, 822, 208, 820, 820, 820, 208, 818, 
	818, 818, 208, 816, 816, 816, 208, 814, 
	814, 814, 208, 812, 812, 812, 208, 810, 
	810, 810, 208, 806, 806, 806, 208, 827, 
	208, 828, 829, 829, 208, 830, 830, 830, 
	205, 831, 831, 831, 205, 832, 832, 832, 
	205, 833, 833, 833, 205, 834, 834, 834, 
	205, 835, 835, 835, 205, 836, 836, 836, 
	205, 837, 837, 837, 205, 838, 838, 838, 
	205, 839, 839, 839, 208, 840, 208, 841, 
	842, 842, 208, 843, 843, 843, 205, 844, 
	844, 844, 205, 845, 845, 845, 205, 846, 
	846, 846, 205, 847, 847, 847, 205, 848, 
	848, 848, 205, 849, 849, 849, 205, 850, 
	850, 850, 205, 851, 851, 851, 205, 852, 
	852, 852, 208, 853, 208, 854, 855, 855, 
	208, 856, 856, 856, 205, 857, 857, 857, 
	205, 858, 858, 858, 205, 859, 859, 859, 
	205, 860, 860, 860, 205, 861, 861, 861, 
	205, 862, 862, 862, 205, 863, 863, 863, 
	205, 864, 864, 864, 205, 865, 865, 865, 
	208, 866, 208, 867, 868, 868, 208, 869, 
	869, 869, 205, 870, 870, 870, 205, 871, 
	871, 871, 205, 872, 872, 872, 205, 873, 
	873, 873, 205, 874, 874, 874, 205, 875, 
	875, 875, 205, 876, 876, 876, 205, 877, 
	877, 877, 205, 878, 878, 878, 208, 879, 
	880, 881, 879, 880, 881, 208, 882, 882, 
	208, 883, 883, 208, 884, 884, 208, 885, 
	885, 208, 886, 208, 887, 208, 888, 889, 
	889, 208, 890, 890, 890, 205, 891, 891, 
	891, 205, 892, 892, 892, 205, 893, 893, 
	893, 205, 894, 894, 894, 205, 895, 895, 
	895, 205, 896, 896, 896, 205, 897, 897, 
	897, 205, 898, 898, 898, 205, 899, 899, 
	899, 208, 900, 900, 208, 901, 901, 208, 
	902, 902, 208, 903, 903, 208, 904, 904, 
	208, 905, 905, 208, 906, 906, 208, 907, 
	907, 208, 908, 908, 208, 909, 909, 208, 
	910, 208, 911, 208, 912, 913, 913, 208, 
	914, 914, 914, 205, 915, 915, 915, 205, 
	916, 916, 916, 205, 917, 917, 917, 205, 
	918, 918, 918, 205, 919, 919, 919, 205, 
	920, 920, 920, 205, 921, 921, 921, 205, 
	922, 922, 922, 205, 923, 923, 923, 208, 
	924, 924, 208, 925, 925, 208, 926, 926, 
	208, 927, 927, 208, 928, 928, 208, 929, 
	929, 208, 930, 930, 208, 931, 931, 208, 
	932, 932, 208, 933, 933, 208, 934, 208, 
	935, 208, 936, 937, 937, 208, 938, 938, 
	938, 205, 939, 939, 939, 205, 940, 940, 
	940, 205, 941, 941, 941, 205, 942, 942, 
	942, 205, 943, 943, 943, 205, 944, 944, 
	944, 205, 945, 945, 945, 205, 946, 946, 
	946, 205, 947, 947, 947, 208, 948, 208, 
	949, 950, 950, 208, 952, 952, 951, 953, 
	951, 954, 954, 954, 205, 955, 955, 955, 
	205, 956, 956, 956, 205, 957, 957, 957, 
	205, 958, 958, 958, 205, 959, 959, 959, 
	205, 960, 960, 960, 205, 961, 961, 961, 
	205, 962, 962, 962, 205, 963, 963, 963, 
	208, 964, 965, 965, 208, 966, 967, 967, 
	208, 968, 968, 968, 205, 969, 969, 969, 
	205, 970, 970, 970, 205, 971, 971, 971, 
	205, 972, 972, 972, 205, 973, 973, 973, 
	205, 974, 974, 974, 205, 975, 975, 975, 
	205, 976, 976, 976, 205, 977, 977, 977, 
	208, 978, 978, 208, 979, 979, 208, 980, 
	980, 208, 981, 981, 208, 982, 982, 208, 
	983, 208, 984, 208, 985, 986, 986, 208, 
	987, 987, 987, 205, 988, 988, 988, 205, 
	989, 989, 989, 205, 990, 990, 990, 205, 
	991, 991, 991, 205, 992, 992, 992, 205, 
	993, 993, 993, 205, 994, 994, 994, 205, 
	995, 995, 995, 205, 996, 996, 996, 208, 
	997, 208, 998, 999, 999, 208, 1000, 1000, 
	1000, 205, 1001, 1001, 1001, 205, 1002, 1002, 
	1002, 205, 1003, 1003, 1003, 205, 1004, 1004, 
	1004, 205, 1005, 1005, 1005, 205, 1006, 1006, 
	1006, 205, 1007, 1007, 1007, 205, 1008, 1008, 
	1008, 205, 1009, 1009, 1009, 208, 1010, 349, 
	350, 1011, 296, 1012, 271, 1013, 1010, 349, 
	350, 1011, 296, 1012, 271, 1013, 212, 1014, 
	212, 1015, 212, 361, 1016, 361, 212, 1017, 
	212, 1018, 1019, 1018, 212, 1020, 212, 1021, 
	1022, 1021, 1022, 212, 1023, 1023, 212, 1024, 
	1024, 212, 1025, 1025, 212, 1026, 1026, 212, 
	1027, 212, 1028, 1029, 1028, 1029, 212, 1030, 
	1030, 212, 1031, 1031, 1032, 1033, 212, 1031, 
	1031, 1032, 212, 1032, 1032, 1034, 1034, 1034, 
	212, 1036, 1035, 1035, 1035, 212, 1038, 1039, 
	1038, 1039, 1037, 1041, 1042, 1041, 1042, 1040, 
	1043, 1043, 212, 1044, 1044, 212, 1045, 1045, 
	1046, 1047, 212, 212, 1049, 212, 212, 1049, 
	1050, 1051, 1048, 212, 212, 212, 1053, 1052, 
	212, 1050, 212, 212, 1050, 1051, 1048, 1054, 
	1054, 212, 1055, 1055, 212, 1056, 1056, 212, 
	1057, 1057, 212, 1058, 1058, 212, 1059, 1059, 
	1060, 1061, 212, 212, 1063, 212, 212, 1063, 
	1064, 1065, 1062, 212, 212, 212, 1067, 1066, 
	212, 1064, 212, 212, 1064, 1065, 1062, 1068, 
	1068, 212, 1069, 1069, 212, 1070, 1070, 212, 
	1071, 1072, 1072, 212, 1073, 212, 1074, 212, 
	212, 212, 212, 1075, 212, 212, 1076, 212, 
	1075, 212, 212, 1077, 1076, 212, 1075, 212, 
	212, 212, 1078, 212, 212, 212, 1080, 1079, 
	1071, 212, 1081, 212, 1082, 1082, 212, 1083, 
	1083, 212, 1084, 1084, 212, 1085, 1085, 212, 
	1086, 1086, 212, 1087, 1087, 212, 1088, 212, 
	1090, 1091, 1090, 1091, 1089, 1092, 1092, 212, 
	1093, 1093, 212, 1094, 1094, 212, 1095, 1095, 
	212, 1096, 212, 1097, 1098, 1097, 212, 1099, 
	1099, 212, 1100, 1100, 212, 1101, 1101, 212, 
	1102, 1102, 212, 1103, 1103, 212, 1104, 1105, 
	1104, 212, 1105, 212, 1106, 1106, 212, 1107, 
	212, 1108, 1109, 1108, 212, 1110, 1110, 212, 
	1111, 1111, 1112, 1113, 212, 1111, 1111, 1112, 
	212, 1112, 1112, 1114, 1115, 1116, 1115, 1117, 
	1117, 212, 1118, 1118, 1119, 1119, 212, 212, 
	212, 1121, 212, 1120, 1122, 1122, 1123, 212, 
	212, 1125, 212, 212, 1125, 1124, 212, 1127, 
	212, 212, 1127, 1128, 1126, 1129, 1129, 1130, 
	212, 1131, 212, 1132, 1132, 212, 1133, 1133, 
	212, 1134, 1134, 212, 1135, 212, 212, 1127, 
	212, 212, 1127, 1128, 1124, 1136, 1136, 212, 
	1137, 1137, 212, 1138, 1138, 212, 1139, 1140, 
	1140, 212, 1141, 212, 1142, 212, 212, 212, 
	212, 1120, 1139, 212, 212, 1121, 1121, 1144, 
	212, 1143, 1145, 1145, 1146, 1146, 212, 212, 
	212, 1121, 212, 1147, 1148, 1148, 212, 1149, 
	1149, 212, 1150, 1150, 212, 1151, 1152, 1152, 
	212, 1153, 212, 1154, 212, 212, 212, 212, 
	1147, 1151, 212, 1155, 1155, 212, 1156, 1156, 
	212, 1157, 1157, 212, 1158, 1159, 1159, 212, 
	1160, 212, 1161, 212, 212, 212, 212, 1143, 
	1158, 212, 1113, 1113, 1162, 1162, 1163, 1163, 
	212, 212, 1165, 1165, 1166, 212, 1164, 1167, 
	1167, 1168, 212, 1169, 212, 1170, 1170, 212, 
	1171, 1171, 212, 1172, 1172, 212, 1173, 212, 
	212, 1165, 1165, 1174, 1166, 212, 1164, 212, 
	1165, 1165, 1175, 1166, 1175, 212, 1164, 212, 
	1165, 1165, 1176, 1166, 1176, 212, 1164, 212, 
	1165, 1165, 1177, 1166, 1177, 212, 1164, 212, 
	1165, 1165, 1166, 1173, 212, 1164, 1178, 1178, 
	212, 1179, 1179, 212, 1180, 1180, 212, 1181, 
	1182, 1182, 212, 1183, 212, 1184, 212, 212, 
	212, 212, 1164, 1181, 212, 1185, 288, 1186, 
	1187, 290, 1188, 256, 1189, 1185, 288, 1186, 
	1187, 290, 1188, 256, 1189, 212, 1014, 292, 
	292, 212, 1187, 307, 1187, 307, 212, 1015, 
	212, 1016, 317, 1190, 317, 1190, 212, 1191, 
	1191, 212, 1192, 1192, 212, 1193, 1193, 212, 
	1194, 1194, 212, 1014, 212, 1017, 212, 1195, 
	1195, 212, 1195, 1195, 1196, 1196, 212, 1197, 
	1197, 212, 1198, 1198, 212, 1199, 1199, 212, 
	1200, 212, 1201, 212, 1202, 1202, 1203, 1203, 
	212, 212, 212, 1205, 212, 1204, 212, 212, 
	1205, 1206, 212, 1204, 212, 212, 212, 1207, 
	212, 212, 212, 1209, 1208, 212, 212, 212, 
	1210, 1209, 1208, 212, 212, 212, 1209, 1211, 
	1211, 1208, 212, 212, 212, 1209, 1212, 1208, 
	1213, 1213, 212, 1214, 1214, 212, 1215, 1215, 
	212, 1216, 1217, 1217, 212, 1218, 212, 1219, 
	212, 212, 212, 212, 1204, 1216, 212, 1019, 
	1220, 1221, 1220, 1221, 212, 1222, 1222, 212, 
	1223, 1223, 212, 1224, 1224, 212, 1225, 1225, 
	212, 1226, 1226, 212, 1227, 1227, 212, 1228, 
	1228, 212, 1229, 1229, 212, 1096, 212, 1020, 
	212, 1230, 1231, 1230, 1231, 212, 1232, 1232, 
	212, 1233, 1233, 212, 1234, 1234, 212, 1235, 
	1235, 212, 1027, 212, 1236, 1237, 1236, 1237, 
	212, 1238, 1238, 212, 1239, 1239, 1240, 1033, 
	212, 1239, 1239, 1240, 212, 1240, 1240, 1241, 
	1241, 1241, 212, 1036, 1242, 1242, 1242, 212, 
	1243, 1243, 212, 1244, 1244, 212, 1245, 1245, 
	1246, 1047, 212, 212, 1248, 212, 212, 1248, 
	1249, 1051, 1247, 212, 212, 212, 1053, 1250, 
	212, 1249, 212, 212, 1249, 1051, 1247, 1251, 
	1252, 1251, 1252, 212, 1081, 212, 1253, 1253, 
	212, 1254, 1254, 212, 1255, 1255, 212, 1256, 
	1256, 212, 1257, 1257, 1258, 1061, 212, 212, 
	1260, 212, 212, 1260, 1261, 1065, 1259, 212, 
	212, 212, 1067, 1262, 212, 1261, 212, 212, 
	1261, 1065, 1259, 1263, 1263, 212, 1264, 1264, 
	212, 1265, 1265, 212, 1266, 1267, 1267, 212, 
	1268, 212, 1269, 212, 212, 212, 212, 1270, 
	212, 212, 1271, 212, 1270, 1266, 212, 1272, 
	1272, 212, 1273, 1273, 212, 1274, 1274, 212, 
	1275, 1275, 212, 1276, 1276, 212, 1277, 1277, 
	212, 1088, 212, 1098, 1278, 1279, 1278, 1279, 
	212, 1280, 1280, 212, 1281, 1281, 212, 1282, 
	1282, 212, 1283, 1283, 212, 1284, 1284, 212, 
	1105, 1285, 1285, 212, 1105, 212, 1286, 1286, 
	212, 1287, 1287, 212, 1288, 1288, 212, 1289, 
	1289, 212, 1019, 212, 1290, 1290, 212, 1107, 
	212, 1109, 212, 1291, 1291, 1291, 1291, 212, 
	1293, 1292, 1292, 1292, 1292, 212, 1294, 212, 
	1298, 1299, 1300, 1294, 1303, 1294, 1294, 1302, 
	1295, 1296, 1297, 1301, 1295, 1302, 1302, 1294, 
	1302, 1302, 1302, 205, 1306, 1307, 1308, 1295, 
	1295, 1295, 1295, 1310, 1295, 1304, 1305, 1309, 
	1295, 1310, 1310, 1295, 1310, 1310, 1310, 205, 
	1306, 1307, 1308, 1295, 1295, 1295, 1295, 1310, 
	1310, 1295, 1304, 1305, 1309, 1295, 1310, 1310, 
	1295, 1310, 1310, 1310, 205, 1306, 1307, 1308, 
	1295, 1295, 1295, 1295, 1310, 1304, 1295, 1304, 
	1305, 1309, 1295, 1310, 1310, 1295, 1310, 1310, 
	1310, 205, 1311, 1306, 1307, 1308, 1295, 1295, 
	1295, 1295, 1310, 1304, 1295, 1304, 1305, 1309, 
	1295, 1310, 1310, 1295, 1310, 1310, 1310, 205, 
	1295, 1306, 1307, 1308, 1295, 1295, 1295, 1295, 
	1310, 1310, 1295, 1304, 1305, 1309, 1295, 1310, 
	1310, 1295, 1310, 1310, 1310, 205, 1312, 1306, 
	1307, 1308, 1295, 1295, 1295, 1295, 1310, 1304, 
	1295, 1304, 1305, 1309, 1295, 1310, 1310, 1295, 
	1310, 1310, 1310, 205, 1306, 1307, 1308, 1295, 
	1295, 1295, 1295, 1310, 1295, 1310, 1295, 1310, 
	1295, 1310, 1295, 1304, 1305, 1309, 1295, 1310, 
	1310, 1295, 1310, 1310, 1310, 205, 1313, 1314, 
	1306, 1307, 1308, 1295, 1295, 1295, 1295, 1310, 
	1304, 1295, 1304, 1305, 1309, 1295, 1310, 1310, 
	1295, 1310, 1310, 1310, 205, 1295, 1295, 1306, 
	1307, 1308, 1295, 1295, 1295, 1295, 1310, 1310, 
	1295, 1304, 1305, 1309, 1295, 1310, 1310, 1295, 
	1310, 1310, 1310, 205, 1306, 1307, 1308, 1295, 
	1295, 1295, 1295, 1310, 1305, 1295, 1304, 1305, 
	1309, 1295, 1310, 1310, 1295, 1310, 1310, 1310, 
	205, 1295, 1295, 1295, 1306, 1307, 1308, 1295, 
	1295, 1295, 1295, 1310, 1310, 1295, 1304, 1305, 
	1309, 1295, 1310, 1310, 1295, 1310, 1310, 1310, 
	205, 1306, 1307, 1308, 1295, 1295, 1295, 1295, 
	1310, 1302, 1295, 1304, 1305, 1309, 1295, 1310, 
	1310, 1295, 1310, 1310, 1310, 205, 1306, 1307, 
	1308, 1295, 1295, 1295, 1295, 1310, 1296, 1295, 
	1304, 1305, 1309, 1295, 1310, 1310, 1295, 1310, 
	1310, 1310, 205, 1315, 1306, 1307, 1308, 1295, 
	1295, 1295, 1295, 1310, 1296, 1295, 1304, 1305, 
	1309, 1295, 1310, 1310, 1295, 1310, 1310, 1310, 
	205, 1294, 1306, 1307, 1308, 1295, 1295, 1295, 
	1295, 1310, 1302, 1295, 1304, 1305, 1309, 1295, 
	1310, 1310, 1295, 1310, 1310, 1310, 205, 1316, 
	1306, 1307, 1308, 1295, 1295, 1295, 1295, 1310, 
	1296, 1295, 1304, 1305, 1309, 1295, 1310, 1310, 
	1295, 1310, 1310, 1310, 205, 1306, 1307, 1308, 
	1295, 1295, 1295, 1295, 1310, 1294, 1302, 1294, 
	1302, 1294, 1302, 1295, 1304, 1305, 1309, 1295, 
	1310, 1310, 1295, 1310, 1310, 1310, 205, 1317, 
	1318, 1306, 1307, 1308, 1295, 1295, 1295, 1295, 
	1310, 1296, 1295, 1304, 1305, 1309, 1295, 1310, 
	1310, 1295, 1310, 1310, 1310, 205, 1294, 1294, 
	1306, 1307, 1308, 1295, 1295, 1295, 1295, 1310, 
	1302, 1295, 1304, 1305, 1309, 1295, 1310, 1310, 
	1295, 1310, 1310, 1310, 205, 1294, 1294, 1294, 
	1306, 1307, 1308, 1295, 1295, 1295, 1295, 1310, 
	1302, 1295, 1304, 1305, 1309, 1295, 1310, 1310, 
	1295, 1310, 1310, 1310, 205, 1306, 1307, 1308, 
	1295, 1295, 1295, 1295, 1310, 1297, 1295, 1304, 
	1305, 1309, 1295, 1310, 1310, 1295, 1310, 1310, 
	1310, 205, 1298, 1299, 1300, 1294, 1303, 1294, 
	1294, 1294, 1294, 1302, 1295, 1296, 1297, 1301, 
	1295, 1302, 1302, 1294, 1302, 1302, 1302, 205, 
	1319, 212, 1320, 1319, 212, 1294, 1294, 212, 
	1321, 1319, 212, 1294, 1294, 1294, 212, 1322, 
	1323, 1319, 212, 1294, 1294, 1294, 212, 1294, 
	1294, 1294, 1294, 212, 1324, 212, 1325, 1326, 
	1327, 1294, 1319, 1324, 1328, 1294, 1294, 1294, 
	1294, 1294, 212, 1330, 1329, 1331, 1331, 1329, 
	1332, 1332, 1329, 1333, 1333, 1329, 1334, 1334, 
	1329, 1335, 1329, 1336, 1329, 1337, 1337, 1329, 
	1338, 1338, 1329, 1339, 1339, 1329, 1340, 1340, 
	1329, 1335, 1329, 1342, 1341, 1343, 1343, 1341, 
	1344, 1344, 1341, 1345, 1345, 1341, 1346, 1346, 
	1341, 1347, 1347, 1341, 1348, 1348, 1341, 1349, 
	1349, 1341, 1350, 1341, 1351, 1341, 1352, 1352, 
	1341, 1353, 1353, 1341, 1354, 1354, 1341, 1355, 
	1355, 1341, 1356, 1356, 1341, 1357, 1357, 1341, 
	1358, 1358, 1341, 1350, 1341, 1360, 1361, 1360, 
	1361, 1359, 1362, 1362, 1359, 1363, 1363, 1359, 
	1364, 1364, 1359, 1365, 1365, 1359, 1366, 1366, 
	1359, 1367, 1367, 1359, 1368, 1368, 1359, 1369, 
	1359, 1370, 1371, 1372, 1373, 1370, 1371, 1372, 
	1373, 1359, 1374, 1374, 1359, 1375, 1375, 1359, 
	1376, 1376, 1359, 1377, 1359, 1378, 1378, 1359, 
	1379, 1379, 1359, 1380, 1380, 1359, 1381, 1359, 
	1382, 1382, 1359, 1383, 1383, 1359, 1384, 1384, 
	1359, 1385, 1359, 1386, 1359, 1387, 1387, 1359, 
	1388, 1388, 1359, 1389, 1389, 1390, 1391, 1391, 
	1359, 1389, 1389, 1392, 1392, 1392, 1359, 1393, 
	1393, 1395, 1394, 1394, 1394, 1359, 1396, 1396, 
	1397, 1359, 1397, 1397, 1398, 1399, 1400, 1400, 
	1400, 1359, 1359, 1359, 1359, 1401, 1359, 1359, 
	1359, 1403, 1402, 1404, 1404, 1405, 1359, 1359, 
	1359, 1359, 1406, 1359, 1359, 1359, 1403, 1407, 
	1408, 1408, 1410, 1409, 1409, 1409, 1359, 1411, 
	1411, 1359, 1412, 1412, 1359, 1413, 1413, 1359, 
	1414, 1414, 1359, 1415, 1415, 1416, 1359, 1415, 
	1415, 1417, 1417, 1417, 1359, 1418, 1418, 1420, 
	1419, 1419, 1419, 1359, 1421, 1421, 1422, 1359, 
	1422, 1422, 1423, 1424, 1425, 1425, 1425, 1359, 
	1359, 1359, 1359, 1426, 1359, 1359, 1359, 1428, 
	1427, 1429, 1429, 1430, 1359, 1359, 1359, 1359, 
	1431, 1359, 1359, 1359, 1428, 1432, 1433, 1433, 
	1435, 1434, 1434, 1434, 1359, 1436, 1437, 1438, 
	1439, 1436, 1437, 1438, 1439, 1359, 1440, 1440, 
	1359, 1441, 1441, 1359, 1442, 1442, 1359, 1443, 
	1443, 1444, 1359, 1443, 1443, 1445, 1445, 1445, 
	1359, 1446, 1446, 1448, 1447, 1447, 1447, 1359, 
	1449, 1449, 1450, 1359, 1450, 1450, 1451, 1452, 
	1453, 1453, 1453, 1359, 1359, 1359, 1359, 1454, 
	1359, 1359, 1359, 1456, 1455, 1457, 1457, 1458, 
	1359, 1359, 1359, 1359, 1459, 1359, 1359, 1359, 
	1456, 1460, 1461, 1461, 1463, 1462, 1462, 1462, 
	1359, 1464, 1464, 1465, 1359, 1464, 1464, 1466, 
	1466, 1466, 1359, 1467, 1467, 1469, 1468, 1468, 
	1468, 1359, 1470, 1470, 1471, 1359, 1471, 1471, 
	1472, 1473, 1474, 1474, 1474, 1359, 1359, 1359, 
	1359, 1475, 1359, 1359, 1359, 1477, 1476, 1478, 
	1478, 1479, 1359, 1359, 1359, 1359, 1480, 1359, 
	1359, 1359, 1477, 1481, 1482, 1482, 1484, 1483, 
	1483, 1483, 1359, 1485, 1485, 1486, 1487, 1487, 
	1359, 1485, 1485, 1488, 1488, 1488, 1359, 1489, 
	1489, 1491, 1490, 1490, 1490, 1359, 1492, 1492, 
	1493, 1359, 1493, 1493, 1494, 1495, 1496, 1496, 
	1496, 1359, 1359, 1359, 1359, 1497, 1359, 1359, 
	1359, 1499, 1498, 1500, 1500, 1501, 1359, 1359, 
	1359, 1359, 1502, 1359, 1359, 1359, 1499, 1503, 
	1504, 1504, 1506, 1505, 1505, 1505, 1359, 1507, 
	1507, 1359, 1508, 1508, 1359, 1509, 1509, 1510, 
	1359, 1509, 1509, 1511, 1511, 1511, 1359, 1512, 
	1512, 1514, 1513, 1513, 1513, 1359, 1515, 1515, 
	1516, 1359, 1516, 1516, 1517, 1518, 1519, 1519, 
	1519, 1359, 1359, 1359, 1359, 1520, 1359, 1359, 
	1359, 1522, 1521, 1523, 1523, 1524, 1359, 1359, 
	1359, 1359, 1525, 1359, 1359, 1359, 1522, 1526, 
	1527, 1527, 1529, 1528, 1528, 1528, 1359, 1530, 
	1530, 1531, 1359, 1530, 1530, 1532, 1532, 1532, 
	1359, 1533, 1533, 1535, 1534, 1534, 1534, 1359, 
	1536, 1536, 1537, 1359, 1537, 1537, 1538, 1539, 
	1540, 1540, 1540, 1359, 1359, 1359, 1359, 1541, 
	1359, 1359, 1359, 1543, 1542, 1544, 1544, 1545, 
	1359, 1359, 1359, 1359, 1546, 1359, 1359, 1359, 
	1543, 1547, 1548, 1548, 1550, 1549, 1549, 1549, 
	1359, 1551, 1552, 1551, 1552, 1359, 1553, 1553, 
	1359, 1554, 1554, 1359, 1555, 1555, 1359, 1556, 
	1556, 1359, 1557, 1557, 1359, 1558, 1558, 1359, 
	1559, 1559, 1359, 1369, 1359, 1560, 1561, 1562, 
	1563, 1560, 1561, 1562, 1563, 1359, 1564, 1564, 
	1359, 1565, 1565, 1359, 1566, 1566, 1359, 1377, 
	1359, 1567, 1567, 1359, 1568, 1568, 1359, 1569, 
	1569, 1359, 1381, 1359, 1570, 1570, 1359, 1571, 
	1571, 1359, 1572, 1572, 1359, 1385, 1359, 1386, 
	1359, 1573, 1573, 1359, 1574, 1574, 1359, 1575, 
	1575, 1576, 1390, 1576, 1359, 1575, 1575, 1577, 
	1577, 1577, 1359, 1578, 1578, 1580, 1579, 1579, 
	1579, 1359, 1581, 1581, 1582, 1359, 1582, 1582, 
	1583, 1584, 1585, 1585, 1585, 1359, 1359, 1359, 
	1359, 1586, 1359, 1359, 1359, 1588, 1587, 1589, 
	1589, 1405, 1359, 1359, 1359, 1359, 1590, 1359, 
	1359, 1359, 1588, 1591, 1592, 1592, 1410, 1593, 
	1593, 1593, 1359, 1594, 1594, 1359, 1595, 1595, 
	1359, 1596, 1596, 1359, 1597, 1597, 1359, 1598, 
	1598, 1416, 1359, 1598, 1598, 1599, 1599, 1599, 
	1359, 1600, 1600, 1602, 1601, 1601, 1601, 1359, 
	1603, 1603, 1604, 1359, 1604, 1604, 1605, 1606, 
	1607, 1607, 1607, 1359, 1359, 1359, 1359, 1608, 
	1359, 1359, 1359, 1610, 1609, 1611, 1611, 1430, 
	1359, 1359, 1359, 1359, 1612, 1359, 1359, 1359, 
	1610, 1613, 1614, 1614, 1435, 1615, 1615, 1615, 
	1359, 1616, 1617, 1618, 1619, 1616, 1617, 1618, 
	1619, 1359, 1620, 1620, 1359, 1621, 1621, 1359, 
	1622, 1622, 1359, 1623, 1623, 1444, 1359, 1623, 
	1623, 1624, 1624, 1624, 1359, 1625, 1625, 1627, 
	1626, 1626, 1626, 1359, 1628, 1628, 1629, 1359, 
	1629, 1629, 1630, 1631, 1632, 1632, 1632, 1359, 
	1359, 1359, 1359, 1633, 1359, 1359, 1359, 1635, 
	1634, 1636, 1636, 1458, 1359, 1359, 1359, 1359, 
	1637, 1359, 1359, 1359, 1635, 1638, 1639, 1639, 
	1463, 1640, 1640, 1640, 1359, 1641, 1641, 1465, 
	1359, 1641, 1641, 1642, 1642, 1642, 1359, 1643, 
	1643, 1645, 1644, 1644, 1644, 1359, 1646, 1646, 
	1647, 1359, 1647, 1647, 1648, 1649, 1650, 1650, 
	1650, 1359, 1359, 1359, 1359, 1651, 1359, 1359, 
	1359, 1653, 1652, 1654, 1654, 1479, 1359, 1359, 
	1359, 1359, 1655, 1359, 1359, 1359, 1653, 1656, 
	1657, 1657, 1484, 1658, 1658, 1658, 1359, 1659, 
	1659, 1660, 1486, 1660, 1359, 1659, 1659, 1661, 
	1661, 1661, 1359, 1662, 1662, 1664, 1663, 1663, 
	1663, 1359, 1665, 1665, 1666, 1359, 1666, 1666, 
	1667, 1668, 1669, 1669, 1669, 1359, 1359, 1359, 
	1359, 1670, 1359, 1359, 1359, 1672, 1671, 1673, 
	1673, 1501, 1359, 1359, 1359, 1359, 1674, 1359, 
	1359, 1359, 1672, 1675, 1676, 1676, 1506, 1677, 
	1677, 1677, 1359, 1678, 1678, 1359, 1679, 1679, 
	1359, 1680, 1680, 1510, 1359, 1680, 1680, 1681, 
	1681, 1681, 1359, 1682, 1682, 1684, 1683, 1683, 
	1683, 1359, 1685, 1685, 1686, 1359, 1686, 1686, 
	1687, 1688, 1689, 1689, 1689, 1359, 1359, 1359, 
	1359, 1690, 1359, 1359, 1359, 1692, 1691, 1693, 
	1693, 1524, 1359, 1359, 1359, 1359, 1694, 1359, 
	1359, 1359, 1692, 1695, 1696, 1696, 1529, 1697, 
	1697, 1697, 1359, 1698, 1698, 1531, 1359, 1698, 
	1698, 1699, 1699, 1699, 1359, 1700, 1700, 1702, 
	1701, 1701, 1701, 1359, 1703, 1703, 1704, 1359, 
	1704, 1704, 1705, 1706, 1707, 1707, 1707, 1359, 
	1359, 1359, 1359, 1708, 1359, 1359, 1359, 1710, 
	1709, 1711, 1711, 1545, 1359, 1359, 1359, 1359, 
	1712, 1359, 1359, 1359, 1710, 1713, 1714, 1714, 
	1550, 1715, 1715, 1715, 1359, 1, 1717, 1, 
	1717, 1718, 1719, 1720, 1721, 1722, 1720, 1716, 
	1, 2, 1, 2, 1723, 1, 4, 1, 
	4, 5, 6, 1724, 11, 11, 1725, 26, 
	26, 27, 1724, 1726, 1726, 1726, 1727, 1726, 
	25, 1726, 1726, 25, 24, 1728, 1729, 1730, 
	7, 1731, 32, 1732, 1733, 1728, 1729, 1730, 
	7, 1731, 32, 1732, 1733, 1724, 37, 37, 
	1734, 55, 56, 55, 56, 1735, 58, 59, 
	58, 59, 1736, 1738, 1738, 1737, 64, 64, 
	1739, 1741, 1741, 1740, 78, 78, 1742, 93, 
	94, 93, 94, 1743, 101, 101, 1744, 1745, 
	1724, 1747, 1747, 1746, 1748, 1749, 17, 1750, 
	1751, 1752, 1753, 1748, 1749, 17, 1750, 1751, 
	1752, 1753, 1724, 1754, 1724, 1756, 1757, 1758, 
	1755, 1760, 199, 1761, 192, 1762, 1763, 199, 
	1761, 192, 1762, 1763, 1759, 1764, 1765, 1766, 
	1767, 1768, 1765, 1766, 1767, 1768, 1759, 1773, 
	1774, 1775, 1776, 1774, 1777, 1780, 1781, 1782, 
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 
	1791, 1792, 1793, 1780, 1781, 1782, 1783, 1784, 
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 
	1794, 1795, 1796, 1769, 1769, 1769, 1797, 1769, 
	1770, 1771, 1772, 1769, 1778, 1769, 1769, 1778, 
	1769, 1778, 1769, 1779, 206, 1798, 207, 209, 
	1800, 1799, 207, 1798, 209, 1798, 210, 211, 
	210, 211, 205, 211, 213, 211, 213, 1798, 
	210, 215, 1802, 215, 1803, 1804, 1805, 1806, 
	1807, 1805, 1801, 223, 223, 1808, 210, 211, 
	1802, 211, 1810, 1811, 1809, 1812, 1812, 1812, 
	1813, 1812, 283, 1812, 1812, 283, 282, 301, 
	301, 1814, 306, 306, 1815, 312, 312, 1816, 
	1818, 1818, 1817, 1798, 1819, 414, 415, 416, 
	1820, 418, 1820, 418, 418, 418, 1820, 1820, 
	418, 1820, 1820, 1820, 408, 413, 417, 1820, 
	1820, 418, 407, 426, 427, 428, 1820, 430, 
	407, 430, 430, 430, 1820, 1820, 431, 1820, 
	1820, 1820, 420, 425, 429, 1820, 1820, 430, 
	419, 434, 435, 436, 1820, 431, 407, 431, 
	431, 431, 431, 1820, 432, 433, 437, 1820, 
	1820, 431, 438, 457, 458, 459, 407, 454, 
	419, 464, 431, 461, 455, 456, 460, 461, 
	461, 461, 1820, 407, 419, 431, 468, 1820, 
	1822, 1823, 1821, 1821, 1821, 1799, 1825, 1825, 
	1825, 1824, 1827, 1827, 1827, 1826, 1829, 1829, 
	1829, 1828, 1831, 1831, 1831, 1830, 1832, 1832, 
	1832, 1824, 1833, 1833, 1833, 1826, 1835, 1835, 
	1835, 1834, 1837, 1837, 1837, 1836, 1839, 1839, 
	1839, 1838, 1841, 1841, 1841, 1840, 1842, 1842, 
	1842, 1838, 1843, 1843, 1843, 1840, 1844, 1842, 
	1842, 1842, 1838, 608, 1839, 1839, 1839, 1838, 
	1845, 1822, 1845, 1823, 1821, 1821, 1821, 1799, 
	1846, 1822, 1846, 1823, 1821, 1821, 1821, 1799, 
	1847, 1822, 1847, 1823, 1821, 1821, 1821, 1799, 
	1848, 1822, 1848, 1823, 1821, 1821, 1821, 1799, 
	1849, 1822, 1849, 1823, 1821, 1821, 1821, 1799, 
	1850, 1822, 1823, 1821, 1821, 1821, 1799, 1852, 
	668, 668, 1851, 1853, 667, 667, 1851, 1854, 
	666, 666, 1851, 1855, 665, 665, 1851, 1856, 
	664, 664, 1851, 1857, 663, 663, 1851, 1858, 
	662, 662, 1851, 1859, 661, 661, 1851, 1860, 
	660, 660, 1851, 1861, 659, 659, 1851, 1861, 
	1851, 1851, 1862, 1822, 1862, 1823, 1821, 1821, 
	1821, 1799, 1863, 1822, 1863, 1823, 1821, 1821, 
	1821, 1799, 1864, 1822, 1864, 1823, 1821, 1821, 
	1821, 1799, 1865, 1822, 1823, 1821, 1821, 1821, 
	1799, 1867, 681, 681, 1866, 1868, 680, 680, 
	1866, 1869, 679, 679, 1866, 1870, 678, 678, 
	1866, 1871, 677, 677, 1866, 1872, 676, 676, 
	1866, 1873, 675, 675, 1866, 1874, 674, 674, 
	1866, 1875, 673, 673, 1866, 1876, 672, 672, 
	1866, 1876, 1866, 1866, 1877, 1822, 1877, 1823, 
	1821, 1821, 1821, 1799, 1878, 1822, 1878, 1823, 
	1821, 1821, 1821, 1799, 1879, 1822, 1879, 1823, 
	1821, 1821, 1821, 1799, 1880, 1822, 1880, 1823, 
	1821, 1821, 1821, 1799, 1881, 1822, 1881, 1823, 
	1821, 1821, 1821, 1799, 1882, 1822, 1882, 1823, 
	1821, 1821, 1821, 1799, 1883, 1822, 1823, 1821, 
	1821, 1821, 1799, 1885, 694, 694, 1884, 1886, 
	693, 693, 1884, 1887, 692, 692, 1884, 1888, 
	691, 691, 1884, 1889, 690, 690, 1884, 1890, 
	689, 689, 1884, 1891, 688, 688, 1884, 1892, 
	687, 687, 1884, 1893, 686, 686, 1884, 1894, 
	685, 685, 1884, 1894, 1884, 1884, 1895, 1822, 
	1895, 1823, 1821, 1821, 1821, 1799, 1896, 1822, 
	1896, 1823, 1821, 1821, 1821, 1799, 1897, 1822, 
	1897, 1823, 1821, 1821, 1821, 1799, 1898, 1822, 
	1898, 1823, 1821, 1821, 1821, 1799, 1899, 1822, 
	1823, 1821, 1821, 1821, 1799, 1901, 1902, 709, 
	709, 1900, 1904, 1904, 1904, 1904, 1904, 1903, 
	1901, 1905, 708, 708, 1900, 1901, 1906, 707, 
	707, 1900, 1901, 1907, 706, 706, 1900, 1901, 
	1908, 705, 705, 1900, 1901, 1909, 704, 704, 
	1900, 1901, 1910, 703, 703, 1900, 1901, 1911, 
	702, 702, 1900, 1901, 1912, 701, 701, 1900, 
	1901, 1913, 700, 700, 1900, 1901, 1913, 1900, 
	1901, 1900, 1914, 1822, 1914, 1823, 1821, 1821, 
	1821, 1799, 1915, 1822, 1915, 1823, 1821, 1821, 
	1821, 1799, 1916, 1822, 1916, 1823, 1821, 1821, 
	1821, 1799, 1917, 1822, 1917, 1823, 1821, 1821, 
	1821, 1799, 1918, 1822, 1823, 1821, 1821, 1821, 
	1799, 1920, 722, 722, 1919, 1921, 721, 721, 
	1919, 1922, 720, 720, 1919, 1923, 719, 719, 
	1919, 1924, 718, 718, 1919, 1925, 717, 717, 
	1919, 1926, 716, 716, 1919, 1927, 715, 715, 
	1919, 1928, 714, 714, 1919, 1929, 713, 713, 
	1919, 1929, 1919, 1919, 1930, 1822, 1930, 1823, 
	1821, 1821, 1821, 1799, 1931, 1822, 1931, 1823, 
	1821, 1821, 1821, 1799, 1932, 1822, 1932, 1823, 
	1821, 1821, 1821, 1799, 1933, 1934, 1822, 1934, 
	1823, 1821, 1821, 1821, 1799, 732, 733, 734, 
	739, 729, 740, 741, 742, 736, 730, 731, 
	735, 736, 736, 736, 1935, 753, 754, 755, 
	1935, 757, 1935, 757, 757, 757, 1935, 1935, 
	757, 1935, 1935, 1935, 747, 752, 756, 1935, 
	1935, 757, 739, 764, 765, 766, 1935, 768, 
	739, 768, 768, 768, 1935, 1935, 742, 1935, 
	1935, 1935, 758, 763, 767, 1935, 1935, 768, 
	740, 771, 772, 773, 1935, 742, 739, 742, 
	742, 742, 742, 1935, 769, 770, 774, 1935, 
	1935, 742, 775, 739, 740, 742, 780, 1935, 
	1933, 1822, 1823, 1821, 1821, 1821, 1799, 1936, 
	1822, 1936, 1823, 1821, 1821, 1821, 1799, 1937, 
	1822, 1937, 1823, 1821, 1821, 1821, 1799, 1938, 
	1822, 1823, 1821, 1821, 1821, 1799, 1940, 800, 
	800, 1939, 1941, 799, 799, 1939, 1942, 798, 
	798, 1939, 1943, 797, 797, 1939, 1944, 796, 
	796, 1939, 1945, 795, 795, 1939, 1946, 794, 
	794, 1939, 1947, 793, 793, 1939, 1948, 792, 
	792, 1939, 1949, 791, 791, 1939, 1949, 1939, 
	1939, 1950, 1951, 1822, 1950, 1951, 1823, 1821, 
	1821, 1821, 1799, 1952, 1822, 1952, 1823, 1821, 
	1821, 1821, 1799, 1953, 1822, 1953, 1823, 1821, 
	1821, 1821, 1799, 1954, 1822, 1954, 1823, 1821, 
	1821, 1821, 1799, 1955, 1822, 1823, 1821, 1821, 
	1821, 1799, 1957, 1956, 1958, 1959, 1822, 1958, 
	1959, 1823, 1821, 1821, 1821, 1799, 1960, 1822, 
	1960, 1823, 1821, 1821, 1821, 1799, 1961, 1822, 
	1823, 1821, 1821, 1821, 1799, 1963, 839, 839, 
	1962, 1964, 838, 838, 1962, 1965, 837, 837, 
	1962, 1966, 836, 836, 1962, 1967, 835, 835, 
	1962, 1968, 834, 834, 1962, 1969, 833, 833, 
	1962, 1970, 832, 832, 1962, 1971, 831, 831, 
	1962, 1972, 830, 830, 1962, 1972, 1962, 1962, 
	1973, 1822, 1973, 1823, 1821, 1821, 1821, 1799, 
	1974, 1822, 1823, 1821, 1821, 1821, 1799, 1976, 
	852, 852, 1975, 1977, 851, 851, 1975, 1978, 
	850, 850, 1975, 1979, 849, 849, 1975, 1980, 
	848, 848, 1975, 1981, 847, 847, 1975, 1982, 
	846, 846, 1975, 1983, 845, 845, 1975, 1984, 
	844, 844, 1975, 1985, 843, 843, 1975, 1985, 
	1975, 1975, 1986, 1822, 1986, 1823, 1821, 1821, 
	1821, 1799, 1987, 1822, 1987, 1823, 1821, 1821, 
	1821, 1799, 1988, 1822, 1988, 1823, 1821, 1821, 
	1821, 1799, 1989, 1822, 1989, 1823, 1821, 1821, 
	1821, 1799, 1990, 1822, 1990, 1823, 1821, 1821, 
	1821, 1799, 1991, 1822, 1823, 1821, 1821, 1821, 
	1799, 1993, 865, 865, 1992, 1994, 864, 864, 
	1992, 1995, 863, 863, 1992, 1996, 862, 862, 
	1992, 1997, 861, 861, 1992, 1998, 860, 860, 
	1992, 1999, 859, 859, 1992, 2000, 858, 858, 
	1992, 2001, 857, 857, 1992, 2002, 856, 856, 
	1992, 2002, 1992, 1992, 2003, 1822, 2003, 1823, 
	1821, 1821, 1821, 1799, 2004, 1822, 2004, 1823, 
	1821, 1821, 1821, 1799, 2005, 1822, 2005, 1823, 
	1821, 1821, 1821, 1799, 2006, 1822, 2006, 1823, 
	1821, 1821, 1821, 1799, 2007, 1822, 2007, 1823, 
	1821, 1821, 1821, 1799, 2008, 1822, 1823, 1821, 
	1821, 1821, 1799, 2010, 878, 878, 2009, 2011, 
	877, 877, 2009, 2012, 876, 876, 2009, 2013, 
	875, 875, 2009, 2014, 874, 874, 2009, 2015, 
	873, 873, 2009, 2016, 872, 872, 2009, 2017, 
	871, 871, 2009, 2018, 870, 870, 2009, 2019, 
	869, 869, 2009, 2019, 2009, 2009, 2020, 2021, 
	1822, 2020, 2021, 1823, 1821, 1821, 1821, 1799, 
	2022, 1822, 2022, 1823, 1821, 1821, 1821, 1799, 
	2023, 1822, 1823, 1821, 1821, 1821, 1799, 2025, 
	899, 899, 2024, 2026, 898, 898, 2024, 2027, 
	897, 897, 2024, 2028, 896, 896, 2024, 2029, 
	895, 895, 2024, 2030, 894, 894, 2024, 2031, 
	893, 893, 2024, 2032, 892, 892, 2024, 2033, 
	891, 891, 2024, 2034, 890, 890, 2024, 2034, 
	2024, 2024, 2036, 923, 923, 2035, 2037, 922, 
	922, 2035, 2038, 921, 921, 2035, 2039, 920, 
	920, 2035, 2040, 919, 919, 2035, 2041, 918, 
	918, 2035, 2042, 917, 917, 2035, 2043, 916, 
	916, 2035, 2044, 915, 915, 2035, 2045, 914, 
	914, 2035, 2045, 2035, 2035, 2047, 947, 947, 
	2046, 2048, 946, 946, 2046, 2049, 945, 945, 
	2046, 2050, 944, 944, 2046, 2051, 943, 943, 
	2046, 2052, 942, 942, 2046, 2053, 941, 941, 
	2046, 2054, 940, 940, 2046, 2055, 939, 939, 
	2046, 2056, 938, 938, 2046, 2056, 2046, 2046, 
	2057, 1822, 2057, 1823, 1821, 1821, 1821, 1799, 
	2058, 1822, 2058, 1823, 1821, 1821, 1821, 1799, 
	2059, 1822, 2059, 1823, 1821, 1821, 1821, 1799, 
	2060, 1822, 1823, 1821, 1821, 1821, 1799, 2062, 
	2063, 963, 963, 2061, 2065, 2064, 2062, 2066, 
	962, 962, 2061, 2062, 2067, 961, 961, 2061, 
	2062, 2068, 960, 960, 2061, 2062, 2069, 959, 
	959, 2061, 2062, 2070, 958, 958, 2061, 2062, 
	2071, 957, 957, 2061, 2062, 2072, 956, 956, 
	2061, 2062, 2073, 955, 955, 2061, 2062, 2074, 
	954, 954, 2061, 2062, 2074, 2061, 2062, 2061, 
	2075, 1822, 2075, 1823, 1821, 1821, 1821, 1799, 
	2076, 1822, 2076, 1823, 1821, 1821, 1821, 1799, 
	2077, 1822, 2077, 1823, 1821, 1821, 1821, 1799, 
	2078, 1822, 1823, 1821, 1821, 1821, 1799, 2080, 
	977, 977, 2079, 2081, 976, 976, 2079, 2082, 
	975, 975, 2079, 2083, 974, 974, 2079, 2084, 
	973, 973, 2079, 2085, 972, 972, 2079, 2086, 
	971, 971, 2079, 2087, 970, 970, 2079, 2088, 
	969, 969, 2079, 2089, 968, 968, 2079, 2089, 
	2079, 2079, 2091, 996, 996, 2090, 2092, 995, 
	995, 2090, 2093, 994, 994, 2090, 2094, 993, 
	993, 2090, 2095, 992, 992, 2090, 2096, 991, 
	991, 2090, 2097, 990, 990, 2090, 2098, 989, 
	989, 2090, 2099, 988, 988, 2090, 2100, 987, 
	987, 2090, 2100, 2090, 2090, 2101, 1822, 2101, 
	1823, 1821, 1821, 1821, 1799, 2102, 1822, 2102, 
	1823, 1821, 1821, 1821, 1799, 2103, 1822, 2103, 
	1823, 1821, 1821, 1821, 1799, 2104, 1822, 1823, 
	1821, 1821, 1821, 1799, 2106, 1009, 1009, 2105, 
	2107, 1008, 1008, 2105, 2108, 1007, 1007, 2105, 
	2109, 1006, 1006, 2105, 2110, 1005, 1005, 2105, 
	2111, 1004, 1004, 2105, 2112, 1003, 1003, 2105, 
	2113, 1002, 1002, 2105, 2114, 1001, 1001, 2105, 
	2115, 1000, 1000, 2105, 2115, 2105, 2105, 2116, 
	2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 
	2125, 2126, 480, 2117, 2118, 2119, 2120, 2121, 
	2122, 2123, 2124, 2125, 2126, 1798, 1038, 1039, 
	1038, 1039, 2127, 1041, 1042, 1041, 1042, 2128, 
	1090, 1091, 1090, 1091, 2129, 573, 1798, 2130, 
	2131, 2132, 2133, 2134, 2135, 1251, 2136, 1225, 
	2137, 2138, 2139, 2131, 2132, 2133, 2134, 2135, 
	1251, 2136, 1225, 2137, 2138, 2139, 1798, 2130, 
	2131, 2132, 2133, 2134, 2135, 1251, 2136, 1225, 
	2137, 2138, 2139, 2131, 2132, 2133, 2134, 2135, 
	1251, 2136, 1225, 2137, 2138, 2139, 2140, 1798, 
	2143, 2144, 2145, 2148, 2148, 2147, 2141, 2142, 
	2146, 2147, 2147, 2147, 2147, 2147, 1798, 1306, 
	1307, 1308, 1295, 1295, 1295, 1295, 1310, 1295, 
	1304, 1305, 1309, 1295, 1310, 1310, 1295, 1310, 
	1310, 1310, 2149, 1298, 1299, 1300, 1294, 1303, 
	1294, 1294, 1302, 1295, 1296, 1297, 1301, 1295, 
	1302, 1302, 1294, 1302, 1302, 1302, 2149, 2151, 
	2152, 2153, 2154, 2150, 2156, 2157, 2155, 1330, 
	2155, 1336, 2155, 2159, 2160, 2161, 2162, 2158, 
	2164, 2165, 2163, 1342, 2163, 1351, 2163, 2167, 
	2168, 2166, 2170, 2171, 2172, 2171, 2172, 2169, 
	2173, 2174, 2175, 2174, 2175, 2169, 0
};

static const short _dtext_trans_targs[] = {
	1367, 1368, 1, 1367, 2, 3, 12, 4, 
	7, 5, 6, 1370, 8, 9, 10, 11, 
	1367, 13, 15, 14, 16, 17, 18, 19, 
	1372, 1373, 20, 21, 23, 24, 25, 26, 
	27, 28, 29, 30, 31, 1375, 33, 38, 
	34, 35, 36, 37, 1367, 39, 46, 40, 
	41, 42, 1377, 43, 43, 1376, 1367, 1367, 
	44, 1367, 1367, 45, 47, 48, 49, 51, 
	1379, 50, 49, 51, 1378, 50, 1378, 53, 
	54, 55, 56, 57, 58, 60, 1381, 59, 
	58, 60, 1380, 59, 1380, 62, 63, 64, 
	65, 66, 67, 1382, 1367, 1367, 68, 70, 
	71, 72, 73, 74, 75, 1383, 76, 78, 
	1367, 80, 1385, 81, 81, 1385, 83, 88, 
	84, 85, 86, 87, 89, 94, 90, 91, 
	92, 93, 93, 95, 96, 97, 99, 98, 
	97, 99, 98, 101, 102, 103, 104, 105, 
	106, 108, 107, 106, 108, 107, 110, 111, 
	112, 113, 114, 115, 117, 118, 119, 120, 
	122, 123, 124, 125, 126, 127, 128, 130, 
	132, 133, 132, 139, 134, 135, 134, 135, 
	136, 137, 138, 1367, 133, 140, 139, 133, 
	140, 1388, 142, 143, 144, 145, 150, 1388, 
	1388, 1388, 146, 147, 148, 149, 1388, 1388, 
	153, 1388, 1388, 155, 156, 157, 158, 151, 
	1388, 161, 162, 163, 164, 1391, 1393, 169, 
	1391, 170, 1396, 172, 1391, 173, 1391, 174, 
	175, 193, 176, 179, 188, 177, 178, 1399, 
	180, 181, 182, 183, 184, 185, 186, 187, 
	1391, 189, 190, 191, 192, 1391, 194, 196, 
	204, 195, 197, 198, 199, 200, 201, 202, 
	203, 205, 206, 207, 208, 1391, 210, 211, 
	217, 212, 213, 214, 215, 216, 1391, 218, 
	219, 220, 1391, 1391, 1391, 222, 223, 229, 
	224, 225, 226, 227, 228, 230, 231, 232, 
	234, 233, 1401, 1402, 236, 271, 278, 237, 
	247, 252, 258, 263, 238, 239, 240, 241, 
	242, 243, 244, 245, 246, 1403, 248, 249, 
	250, 251, 1404, 253, 254, 255, 256, 257, 
	1405, 259, 260, 261, 262, 264, 265, 266, 
	267, 268, 269, 1391, 270, 272, 273, 274, 
	275, 276, 1391, 277, 277, 1391, 279, 280, 
	281, 282, 283, 284, 286, 287, 1406, 288, 
	288, 1406, 290, 310, 317, 291, 296, 302, 
	292, 293, 294, 295, 297, 298, 299, 300, 
	301, 303, 304, 305, 306, 307, 308, 309, 
	311, 312, 313, 314, 315, 316, 316, 318, 
	319, 320, 321, 322, 323, 325, 326, 327, 
	326, 333, 328, 329, 328, 329, 330, 331, 
	332, 1391, 327, 334, 333, 327, 334, 335, 
	336, 337, 1408, 1409, 371, 396, 1391, 1408, 
	338, 341, 343, 345, 346, 339, 340, 342, 
	344, 347, 348, 1409, 349, 352, 354, 356, 
	357, 350, 351, 353, 355, 358, 359, 360, 
	361, 362, 363, 365, 367, 370, 1410, 364, 
	366, 368, 369, 372, 373, 374, 375, 395, 
	376, 377, 378, 380, 381, 379, 382, 383, 
	384, 385, 388, 390, 393, 1411, 386, 387, 
	394, 389, 391, 392, 1412, 397, 398, 397, 
	1391, 399, 400, 401, 402, 405, 403, 404, 
	407, 408, 407, 410, 421, 431, 444, 448, 
	451, 408, 409, 410, 411, 414, 415, 409, 
	411, 414, 415, 412, 413, 419, 420, 412, 
	414, 415, 413, 1414, 416, 415, 418, 416, 
	417, 418, 417, 418, 1416, 419, 422, 423, 
	424, 427, 423, 424, 427, 425, 426, 428, 
	429, 425, 427, 426, 427, 1418, 428, 430, 
	430, 432, 433, 434, 435, 436, 437, 438, 
	439, 438, 439, 440, 441, 442, 443, 440, 
	441, 442, 421, 445, 446, 447, 424, 427, 
	447, 424, 449, 450, 452, 455, 456, 457, 
	453, 454, 453, 454, 458, 460, 461, 463, 
	464, 499, 500, 502, 503, 461, 462, 466, 
	471, 462, 463, 464, 499, 500, 502, 493, 
	471, 493, 465, 472, 498, 467, 466, 469, 
	470, 467, 468, 469, 470, 468, 470, 1420, 
	1422, 473, 466, 479, 474, 473, 476, 477, 
	481, 487, 490, 493, 479, 474, 475, 479, 
	475, 476, 477, 481, 487, 490, 479, 478, 
	480, 1424, 1426, 482, 483, 484, 485, 486, 
	488, 489, 478, 491, 492, 494, 495, 496, 
	497, 494, 1427, 501, 504, 505, 506, 507, 
	509, 1434, 519, 1445, 510, 511, 512, 513, 
	514, 515, 516, 517, 518, 521, 1450, 531, 
	1461, 522, 523, 524, 525, 526, 527, 528, 
	529, 530, 533, 1469, 543, 1480, 534, 535, 
	536, 537, 538, 539, 540, 541, 542, 545, 
	1486, 556, 1391, 1487, 1498, 547, 548, 549, 
	550, 551, 552, 553, 554, 555, 558, 1504, 
	568, 1515, 559, 560, 561, 562, 563, 564, 
	565, 566, 567, 570, 571, 572, 574, 575, 
	573, 576, 577, 578, 579, 582, 584, 587, 
	1520, 580, 581, 1521, 1522, 621, 610, 583, 
	585, 586, 1391, 588, 591, 593, 595, 596, 
	589, 590, 592, 594, 597, 598, 599, 602, 
	604, 606, 607, 600, 601, 603, 605, 608, 
	609, 611, 612, 613, 615, 617, 620, 1523, 
	614, 616, 618, 619, 1524, 623, 624, 625, 
	626, 627, 628, 629, 630, 1529, 640, 1540, 
	631, 632, 633, 634, 635, 636, 637, 638, 
	639, 642, 643, 666, 644, 646, 665, 645, 
	1546, 647, 664, 648, 663, 649, 662, 650, 
	661, 651, 660, 652, 659, 653, 658, 654, 
	657, 655, 656, 668, 1550, 678, 1561, 669, 
	670, 671, 672, 673, 674, 675, 676, 677, 
	680, 1564, 690, 1575, 681, 682, 683, 684, 
	685, 686, 687, 688, 689, 692, 1582, 702, 
	1593, 693, 694, 695, 696, 697, 698, 699, 
	700, 701, 704, 1600, 714, 1611, 705, 706, 
	707, 708, 709, 710, 711, 712, 713, 716, 
	733, 756, 717, 718, 719, 720, 721, 722, 
	1615, 732, 1626, 723, 724, 725, 726, 727, 
	728, 729, 730, 731, 734, 735, 736, 737, 
	738, 739, 740, 741, 742, 743, 744, 745, 
	1627, 755, 1638, 746, 747, 748, 749, 750, 
	751, 752, 753, 754, 757, 758, 759, 760, 
	761, 762, 763, 764, 765, 766, 767, 768, 
	1639, 778, 1650, 769, 770, 771, 772, 773, 
	774, 775, 776, 777, 780, 1655, 792, 1391, 
	782, 1656, 1667, 783, 784, 785, 786, 787, 
	788, 789, 790, 791, 794, 805, 1672, 804, 
	1683, 795, 796, 797, 798, 799, 800, 801, 
	802, 803, 806, 807, 808, 809, 810, 811, 
	812, 1684, 822, 1695, 813, 814, 815, 816, 
	817, 818, 819, 820, 821, 824, 1700, 834, 
	1711, 825, 826, 827, 828, 829, 830, 831, 
	832, 833, 836, 837, 838, 839, 1391, 1391, 
	1391, 1391, 841, 1391, 1391, 843, 848, 844, 
	845, 846, 847, 1391, 849, 856, 850, 851, 
	852, 1714, 853, 853, 1713, 1391, 1391, 854, 
	1391, 1391, 855, 857, 858, 859, 861, 1391, 
	860, 859, 861, 1391, 860, 1391, 863, 864, 
	865, 866, 867, 868, 870, 1391, 869, 868, 
	870, 1391, 869, 1391, 872, 873, 874, 875, 
	882, 876, 877, 878, 879, 880, 881, 881, 
	1391, 1391, 885, 886, 887, 888, 889, 890, 
	1715, 1391, 1391, 891, 893, 894, 895, 896, 
	1391, 898, 1391, 899, 900, 901, 902, 903, 
	904, 1391, 906, 1391, 908, 1391, 909, 910, 
	911, 951, 912, 932, 933, 943, 913, 924, 
	913, 914, 914, 915, 916, 923, 916, 917, 
	918, 917, 918, 919, 920, 921, 922, 1391, 
	925, 926, 927, 928, 931, 929, 930, 932, 
	915, 934, 935, 934, 936, 937, 938, 939, 
	942, 940, 941, 944, 945, 946, 947, 950, 
	948, 949, 952, 964, 952, 953, 959, 953, 
	954, 955, 956, 957, 958, 1391, 960, 961, 
	962, 963, 965, 966, 967, 968, 971, 969, 
	970, 973, 974, 975, 976, 982, 977, 978, 
	979, 980, 981, 984, 985, 986, 987, 988, 
	989, 990, 991, 998, 991, 992, 993, 994, 
	994, 995, 996, 997, 1391, 999, 1000, 1001, 
	1002, 1005, 1003, 1004, 1007, 1016, 1008, 1009, 
	1010, 1011, 1012, 1013, 1014, 1015, 1018, 1023, 
	1019, 1020, 1021, 1022, 1024, 1029, 1025, 1026, 
	1027, 1028, 1028, 1030, 1031, 1032, 1034, 1033, 
	1032, 1034, 1033, 1036, 1037, 1038, 1039, 1040, 
	1041, 1042, 1044, 1043, 1042, 1044, 1043, 1046, 
	1047, 1048, 1049, 1053, 1050, 1051, 1052, 1391, 
	1055, 1056, 1057, 1058, 1059, 1060, 1062, 1069, 
	1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 
	1072, 1073, 1075, 1078, 1078, 1391, 1080, 1081, 
	1092, 1093, 1094, 1096, 1098, 1101, 1721, 1102, 
	1082, 1083, 1084, 1086, 1088, 1090, 1720, 1085, 
	1087, 1089, 1091, 1095, 1097, 1099, 1100, 1079, 
	1105, 1107, 1109, 1110, 1103, 1104, 1106, 1108, 
	1111, 1722, 1114, 1115, 1116, 1117, 1118, 1722, 
	1120, 1121, 1122, 1123, 1124, 1726, 1126, 1127, 
	1128, 1129, 1130, 1131, 1132, 1133, 1726, 1135, 
	1136, 1137, 1138, 1139, 1140, 1141, 1142, 1730, 
	1144, 1152, 1145, 1146, 1147, 1148, 1149, 1150, 
	1151, 1730, 1153, 1157, 1161, 1165, 1154, 1155, 
	1156, 1730, 1158, 1159, 1160, 1730, 1162, 1163, 
	1164, 1730, 1730, 1167, 1168, 1169, 1730, 1179, 
	1170, 1171, 1170, 1172, 1171, 1172, 1173, 1176, 
	1178, 1174, 1174, 1175, 1169, 1730, 1177, 1177, 
	1169, 1178, 1730, 1180, 1181, 1182, 1183, 1184, 
	1730, 1185, 1186, 1185, 1187, 1186, 1187, 1188, 
	1191, 1193, 1189, 1189, 1190, 1184, 1730, 1192, 
	1192, 1184, 1193, 1730, 1195, 1209, 1220, 1244, 
	1196, 1197, 1198, 1199, 1730, 1200, 1201, 1200, 
	1202, 1201, 1202, 1203, 1206, 1208, 1204, 1204, 
	1205, 1199, 1730, 1207, 1207, 1199, 1208, 1730, 
	1210, 1730, 1211, 1212, 1211, 1213, 1212, 1213, 
	1214, 1217, 1219, 1215, 1215, 1216, 1210, 1730, 
	1218, 1218, 1210, 1219, 1730, 1221, 1730, 1231, 
	1222, 1223, 1222, 1224, 1223, 1224, 1225, 1228, 
	1230, 1226, 1226, 1227, 1221, 1730, 1229, 1229, 
	1221, 1230, 1730, 1232, 1233, 1234, 1730, 1235, 
	1236, 1235, 1237, 1236, 1237, 1238, 1241, 1243, 
	1239, 1239, 1240, 1234, 1730, 1242, 1242, 1234, 
	1243, 1730, 1245, 1730, 1246, 1247, 1246, 1248, 
	1247, 1248, 1249, 1252, 1254, 1250, 1250, 1251, 
	1245, 1730, 1253, 1253, 1245, 1254, 1730, 1256, 
	1264, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 
	1265, 1269, 1273, 1277, 1266, 1267, 1268, 1270, 
	1271, 1272, 1274, 1275, 1276, 1279, 1280, 1281, 
	1291, 1282, 1283, 1282, 1284, 1283, 1284, 1285, 
	1288, 1290, 1286, 1286, 1287, 1281, 1289, 1289, 
	1281, 1290, 1292, 1293, 1294, 1295, 1296, 1297, 
	1298, 1297, 1299, 1298, 1299, 1300, 1303, 1305, 
	1301, 1301, 1302, 1296, 1304, 1304, 1296, 1305, 
	1307, 1321, 1332, 1356, 1308, 1309, 1310, 1311, 
	1312, 1313, 1312, 1314, 1313, 1314, 1315, 1318, 
	1320, 1316, 1316, 1317, 1311, 1319, 1319, 1311, 
	1320, 1322, 1323, 1324, 1323, 1325, 1324, 1325, 
	1326, 1329, 1331, 1327, 1327, 1328, 1322, 1330, 
	1330, 1322, 1331, 1333, 1343, 1334, 1335, 1334, 
	1336, 1335, 1336, 1337, 1340, 1342, 1338, 1338, 
	1339, 1333, 1341, 1341, 1333, 1342, 1344, 1345, 
	1346, 1347, 1348, 1347, 1349, 1348, 1349, 1350, 
	1353, 1355, 1351, 1351, 1352, 1346, 1354, 1354, 
	1346, 1355, 1357, 1358, 1359, 1358, 1360, 1359, 
	1360, 1361, 1364, 1366, 1362, 1362, 1363, 1357, 
	1365, 1365, 1357, 1366, 1367, 1369, 1371, 1374, 
	1384, 1386, 1387, 1367, 1367, 1367, 1367, 1372, 
	22, 32, 52, 61, 69, 77, 1367, 1367, 
	1367, 1367, 1378, 1367, 1367, 1380, 1367, 1367, 
	1367, 79, 1367, 1385, 82, 100, 109, 116, 
	121, 129, 131, 1388, 1388, 1389, 1390, 1388, 
	141, 152, 154, 159, 160, 165, 166, 167, 
	168, 1391, 1392, 1394, 1395, 1396, 1397, 1398, 
	1391, 1407, 1413, 0, 1428, 1446, 1462, 1481, 
	1499, 1516, 1526, 1541, 1576, 1594, 1612, 1668, 
	1696, 1712, 1716, 1717, 1718, 1719, 1391, 1391, 
	171, 1391, 1400, 233, 235, 285, 289, 324, 
	1391, 1391, 209, 221, 1391, 1401, 1391, 1391, 
	1391, 1391, 1406, 335, 1391, 1413, 406, 459, 
	1391, 1415, 1391, 1415, 1391, 1417, 1391, 1417, 
	1419, 1419, 1391, 1421, 1391, 1421, 1391, 1423, 
	1391, 1423, 1425, 1425, 1422, 1429, 1430, 1431, 
	1432, 1433, 508, 1391, 1435, 1436, 1437, 1438, 
	1439, 1440, 1441, 1442, 1443, 1444, 1447, 1448, 
	1449, 520, 1391, 1451, 1452, 1453, 1454, 1455, 
	1456, 1457, 1458, 1459, 1460, 1463, 1464, 1465, 
	1466, 1467, 1468, 532, 1391, 1470, 1471, 1472, 
	1473, 1474, 1475, 1476, 1477, 1478, 1479, 1482, 
	1483, 1484, 1485, 544, 1391, 546, 1488, 1391, 
	1487, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 
	1496, 1497, 1500, 1501, 1502, 1503, 557, 1391, 
	1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 
	1513, 1514, 1517, 1518, 1519, 569, 1525, 1391, 
	1527, 1528, 622, 1391, 1530, 1531, 1532, 1533, 
	1534, 1535, 1536, 1537, 1538, 1539, 1542, 1547, 
	1543, 1544, 1545, 641, 1391, 1546, 1548, 1562, 
	1549, 667, 1391, 1551, 1552, 1553, 1554, 1555, 
	1556, 1557, 1558, 1559, 1560, 1563, 679, 1391, 
	1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 
	1573, 1574, 1577, 1578, 1579, 1580, 1581, 691, 
	1391, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 
	1590, 1591, 1592, 1595, 1596, 1597, 1598, 1599, 
	703, 1391, 1601, 1602, 1603, 1604, 1605, 1606, 
	1607, 1608, 1609, 1610, 1613, 1651, 1614, 715, 
	1391, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 
	1623, 1624, 1625, 1391, 1628, 1629, 1630, 1631, 
	1632, 1633, 1634, 1635, 1636, 1637, 1391, 1640, 
	1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 
	1649, 1652, 1653, 1654, 779, 1391, 781, 1657, 
	1391, 1656, 1658, 1659, 1660, 1661, 1662, 1663, 
	1664, 1665, 1666, 1669, 1670, 1671, 793, 1391, 
	1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 
	1681, 1682, 1391, 1685, 1686, 1687, 1688, 1689, 
	1690, 1691, 1692, 1693, 1694, 1697, 1698, 1699, 
	823, 1391, 1701, 1702, 1703, 1704, 1705, 1706, 
	1707, 1708, 1709, 1710, 835, 840, 842, 862, 
	871, 883, 884, 892, 897, 905, 907, 1391, 
	1391, 1391, 972, 983, 1006, 1017, 1035, 1045, 
	1054, 1061, 1074, 1076, 1077, 1079, 1103, 1104, 
	1106, 1108, 1111, 1080, 1112, 1391, 1722, 1722, 
	1723, 1724, 1725, 1722, 1113, 1119, 1726, 1726, 
	1727, 1728, 1729, 1726, 1125, 1134, 1730, 1731, 
	1732, 1730, 1143, 1166, 1194, 1255, 1278, 1306
};

static const short _dtext_trans_actions[] = {
	267, 25, 0, 269, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	227, 0, 0, 0, 0, 0, 0, 0, 
	5, 5, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 231, 0, 0, 0, 
	0, 0, 25, 1, 0, 424, 263, 221, 
	0, 261, 219, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 271, 0, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 271, 0, 3, 0, 0, 0, 
	0, 0, 0, 25, 265, 225, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	229, 3, 507, 5, 0, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 271, 271, 1, 5, 340, 0, 7, 
	0, 0, 0, 223, 3, 3, 0, 0, 
	0, 49, 0, 0, 0, 0, 0, 29, 
	33, 37, 0, 0, 0, 0, 41, 27, 
	0, 31, 35, 0, 0, 0, 0, 0, 
	39, 0, 0, 0, 0, 167, 493, 0, 
	163, 0, 484, 0, 165, 0, 161, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	89, 0, 0, 0, 0, 105, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 159, 0, 0, 
	0, 0, 0, 0, 0, 0, 79, 0, 
	0, 0, 109, 107, 75, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 0, 5, 5, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 93, 0, 0, 0, 0, 
	0, 0, 97, 1, 0, 280, 0, 0, 
	0, 0, 0, 0, 1, 3, 507, 5, 
	0, 7, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 271, 
	271, 1, 5, 340, 0, 7, 0, 0, 
	0, 87, 3, 3, 0, 0, 0, 0, 
	3, 0, 639, 652, 5, 0, 149, 427, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 643, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 643, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 643, 0, 0, 
	0, 0, 0, 0, 643, 5, 5, 0, 
	358, 0, 0, 0, 0, 0, 0, 0, 
	0, 5, 5, 5, 5, 5, 5, 5, 
	5, 0, 7, 0, 7, 7, 7, 0, 
	0, 0, 0, 9, 11, 11, 0, 0, 
	11, 11, 0, 0, 13, 385, 385, 0, 
	15, 15, 0, 0, 0, 0, 7, 515, 
	349, 515, 385, 13, 385, 9, 382, 382, 
	0, 0, 382, 0, 0, 0, 0, 15, 
	0, 7, 13, 0, 0, 0, 0, 7, 
	7, 0, 0, 9, 11, 11, 0, 0, 
	0, 0, 0, 7, 13, 352, 7, 352, 
	0, 0, 7, 0, 0, 0, 0, 0, 
	7, 7, 0, 0, 0, 0, 5, 5, 
	5, 5, 5, 5, 5, 0, 7, 7, 
	7, 0, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 7, 7, 9, 379, 9, 
	379, 0, 11, 0, 11, 0, 0, 0, 
	0, 511, 343, 511, 9, 379, 9, 9, 
	9, 9, 9, 9, 379, 0, 346, 346, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	346, 0, 7, 7, 9, 0, 0, 0, 
	0, 7, 9, 7, 9, 9, 9, 9, 
	0, 0, 7, 0, 0, 0, 0, 0, 
	0, 591, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 611, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 575, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	579, 1, 147, 5, 25, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 567, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	481, 0, 0, 25, 481, 0, 0, 0, 
	0, 0, 151, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 481, 
	0, 0, 0, 0, 481, 0, 0, 0, 
	0, 0, 0, 0, 0, 619, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 3, 0, 0, 0, 
	5, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 583, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 563, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 623, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 615, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	599, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	603, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	607, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 571, 1, 145, 
	0, 5, 25, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 587, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 595, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 627, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 59, 63, 
	67, 71, 0, 57, 81, 0, 0, 0, 
	0, 0, 0, 77, 0, 0, 0, 0, 
	0, 25, 1, 0, 424, 155, 85, 0, 
	153, 83, 0, 0, 0, 0, 0, 103, 
	1, 1, 1, 503, 0, 286, 0, 0, 
	0, 0, 0, 0, 0, 101, 1, 1, 
	1, 499, 0, 283, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 0, 5, 0, 
	361, 61, 0, 0, 0, 0, 0, 0, 
	25, 157, 95, 0, 0, 0, 0, 0, 
	99, 0, 65, 0, 0, 0, 0, 0, 
	0, 91, 0, 73, 0, 69, 0, 0, 
	0, 0, 0, 5, 0, 5, 5, 5, 
	0, 7, 0, 0, 1, 1, 0, 3, 
	3, 0, 0, 0, 0, 0, 0, 51, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 5, 5, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 3, 3, 0, 
	0, 0, 0, 0, 0, 55, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 3, 0, 5, 
	0, 7, 0, 0, 53, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 274, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 277, 0, 0, 
	0, 0, 0, 0, 0, 0, 635, 0, 
	0, 0, 0, 0, 0, 0, 635, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 177, 0, 0, 0, 0, 0, 169, 
	0, 0, 0, 0, 0, 187, 0, 0, 
	0, 0, 0, 0, 0, 0, 179, 0, 
	0, 0, 0, 0, 0, 0, 0, 217, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 191, 0, 0, 0, 0, 0, 0, 
	0, 211, 0, 0, 0, 201, 0, 0, 
	0, 197, 207, 0, 0, 0, 193, 0, 
	1, 3, 0, 3, 0, 0, 0, 0, 
	5, 5, 0, 7, 19, 403, 5, 0, 
	355, 0, 523, 0, 0, 0, 0, 0, 
	189, 1, 3, 0, 3, 0, 0, 0, 
	0, 5, 5, 0, 7, 19, 400, 5, 
	0, 355, 0, 519, 0, 0, 0, 0, 
	0, 0, 0, 0, 199, 1, 3, 0, 
	3, 0, 0, 0, 0, 5, 5, 0, 
	7, 19, 409, 5, 0, 355, 0, 531, 
	0, 209, 1, 3, 0, 3, 0, 0, 
	0, 0, 5, 5, 0, 7, 19, 418, 
	5, 0, 355, 0, 543, 0, 203, 0, 
	1, 3, 0, 3, 0, 0, 0, 0, 
	5, 5, 0, 7, 19, 412, 5, 0, 
	355, 0, 535, 0, 0, 0, 195, 1, 
	3, 0, 3, 0, 0, 0, 0, 5, 
	5, 0, 7, 19, 406, 5, 0, 355, 
	0, 527, 0, 205, 1, 3, 0, 3, 
	0, 0, 0, 0, 5, 5, 0, 7, 
	19, 415, 5, 0, 355, 0, 539, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 3, 0, 3, 0, 0, 0, 
	0, 5, 5, 0, 7, 19, 5, 0, 
	355, 0, 0, 0, 0, 0, 0, 1, 
	3, 0, 3, 0, 0, 0, 0, 5, 
	5, 0, 7, 19, 5, 0, 355, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 3, 0, 3, 0, 0, 0, 0, 
	5, 5, 0, 7, 19, 5, 0, 355, 
	0, 0, 1, 3, 0, 3, 0, 0, 
	0, 0, 5, 5, 0, 7, 19, 5, 
	0, 355, 0, 0, 0, 1, 3, 0, 
	3, 0, 0, 0, 0, 5, 5, 0, 
	7, 19, 5, 0, 355, 0, 0, 0, 
	0, 1, 3, 0, 3, 0, 0, 0, 
	0, 5, 5, 0, 7, 19, 5, 0, 
	355, 0, 0, 1, 3, 0, 3, 0, 
	0, 0, 0, 5, 5, 0, 7, 19, 
	5, 0, 355, 0, 233, 25, 421, 25, 
	25, 25, 25, 257, 259, 255, 376, 0, 
	0, 0, 0, 0, 0, 0, 237, 243, 
	241, 251, 0, 249, 247, 0, 245, 253, 
	239, 1, 235, 0, 0, 0, 0, 0, 
	0, 0, 0, 45, 43, 25, 25, 47, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 113, 0, 496, 496, 490, 496, 487, 
	111, 496, 631, 0, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 647, 647, 496, 496, 496, 143, 141, 
	0, 139, 484, 1, 0, 0, 0, 0, 
	135, 137, 0, 0, 373, 0, 129, 133, 
	131, 127, 0, 1, 115, 493, 3, 3, 
	555, 17, 394, 0, 559, 17, 397, 0, 
	17, 0, 551, 13, 391, 0, 547, 13, 
	388, 0, 13, 0, 385, 493, 493, 493, 
	493, 493, 0, 310, 451, 451, 451, 451, 
	451, 451, 451, 451, 0, 0, 493, 493, 
	493, 0, 325, 466, 466, 466, 466, 466, 
	466, 466, 466, 0, 0, 493, 493, 493, 
	493, 493, 493, 0, 298, 439, 439, 439, 
	439, 439, 439, 439, 439, 0, 0, 493, 
	493, 493, 493, 0, 301, 3, 442, 364, 
	0, 442, 442, 442, 442, 442, 442, 442, 
	25, 25, 493, 493, 493, 493, 0, 292, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	0, 0, 493, 493, 493, 0, 493, 117, 
	493, 493, 0, 331, 472, 472, 472, 472, 
	472, 472, 472, 472, 0, 0, 493, 493, 
	493, 493, 493, 0, 370, 0, 493, 493, 
	493, 0, 304, 445, 445, 445, 445, 445, 
	445, 445, 445, 0, 0, 493, 0, 289, 
	430, 430, 430, 430, 430, 430, 430, 430, 
	0, 0, 493, 493, 493, 493, 493, 0, 
	334, 475, 475, 475, 475, 475, 475, 475, 
	475, 0, 0, 493, 493, 493, 493, 493, 
	0, 328, 469, 469, 469, 469, 469, 469, 
	469, 469, 0, 0, 493, 493, 493, 0, 
	316, 457, 457, 457, 457, 457, 457, 457, 
	457, 0, 0, 319, 460, 460, 460, 460, 
	460, 460, 460, 460, 0, 0, 322, 463, 
	463, 463, 463, 463, 463, 463, 463, 0, 
	0, 493, 493, 493, 0, 295, 3, 436, 
	367, 0, 436, 436, 436, 436, 436, 436, 
	436, 25, 25, 493, 493, 493, 0, 307, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	0, 0, 313, 454, 454, 454, 454, 454, 
	454, 454, 454, 0, 0, 493, 493, 493, 
	0, 337, 478, 478, 478, 478, 478, 478, 
	478, 478, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 123, 
	121, 125, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 119, 173, 171, 
	25, 25, 25, 175, 0, 0, 183, 181, 
	25, 25, 25, 185, 0, 0, 213, 25, 
	25, 215, 0, 0, 0, 0, 0, 0
};

static const short _dtext_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 21, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 21, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 21, 0, 0, 0, 21, 0, 
	0, 0, 21, 0, 0
};

static const short _dtext_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 23, 0, 0, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 23, 0, 0, 0, 23, 0, 
	0, 0, 23, 0, 0
};

static const short _dtext_eof_trans[] = {
	0, 1, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 55, 58, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 93, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 206, 206, 209, 206, 213, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 254, 254, 254, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 254, 254, 254, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 215, 215, 215, 215, 215, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 215, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 215, 
	206, 206, 206, 206, 206, 206, 206, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 215, 206, 
	206, 206, 206, 206, 206, 206, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 213, 
	213, 213, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 209, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 209, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 209, 209, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 209, 
	209, 209, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 209, 209, 209, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 209, 
	209, 209, 699, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 209, 209, 209, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 209, 209, 
	209, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 209, 209, 209, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 209, 209, 
	209, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 209, 209, 209, 952, 952, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	209, 209, 209, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 209, 209, 
	209, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 209, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 1038, 1041, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 1090, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 
	1330, 1330, 1330, 1330, 1330, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 0, 
	1724, 1725, 1726, 1725, 1727, 1727, 1725, 1735, 
	1736, 1737, 1738, 1740, 1741, 1743, 1744, 1745, 
	1725, 1747, 1725, 1725, 0, 1760, 1760, 0, 
	1799, 1800, 1799, 1799, 206, 1799, 1802, 1809, 
	1810, 1813, 1813, 1815, 1816, 1817, 1818, 1799, 
	1821, 1821, 1821, 1821, 1821, 1800, 1825, 1827, 
	1829, 1831, 1825, 1827, 1835, 1837, 1839, 1841, 
	1839, 1841, 1839, 1839, 1800, 1800, 1800, 1800, 
	1800, 1800, 1852, 1852, 1852, 1852, 1852, 1852, 
	1852, 1852, 1852, 1852, 1852, 1852, 1800, 1800, 
	1800, 1800, 1867, 1867, 1867, 1867, 1867, 1867, 
	1867, 1867, 1867, 1867, 1867, 1867, 1800, 1800, 
	1800, 1800, 1800, 1800, 1800, 1885, 1885, 1885, 
	1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885, 
	1885, 1800, 1800, 1800, 1800, 1800, 1901, 1904, 
	1901, 1901, 1901, 1901, 1901, 1901, 1901, 1901, 
	1901, 1901, 1901, 1800, 1800, 1800, 1800, 1800, 
	1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 
	1920, 1920, 1920, 1920, 1800, 1800, 1800, 1800, 
	1936, 1936, 1936, 1936, 1936, 1800, 1800, 1800, 
	1800, 1940, 1940, 1940, 1940, 1940, 1940, 1940, 
	1940, 1940, 1940, 1940, 1940, 1800, 1800, 1800, 
	1800, 1800, 1957, 1800, 1800, 1800, 1963, 1963, 
	1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963, 
	1963, 1963, 1800, 1800, 1976, 1976, 1976, 1976, 
	1976, 1976, 1976, 1976, 1976, 1976, 1976, 1976, 
	1800, 1800, 1800, 1800, 1800, 1800, 1993, 1993, 
	1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 
	1993, 1993, 1800, 1800, 1800, 1800, 1800, 1800, 
	2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 
	2010, 2010, 2010, 2010, 1800, 1800, 1800, 2025, 
	2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 
	2025, 2025, 2025, 2036, 2036, 2036, 2036, 2036, 
	2036, 2036, 2036, 2036, 2036, 2036, 2036, 2047, 
	2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 
	2047, 2047, 2047, 1800, 1800, 1800, 1800, 2062, 
	2065, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 
	2062, 2062, 2062, 2062, 1800, 1800, 1800, 1800, 
	2080, 2080, 2080, 2080, 2080, 2080, 2080, 2080, 
	2080, 2080, 2080, 2080, 2091, 2091, 2091, 2091, 
	2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 
	1800, 1800, 1800, 1800, 2106, 2106, 2106, 2106, 
	2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106, 
	1799, 2128, 2129, 2130, 1799, 1799, 1799, 1799, 
	2150, 2150, 0, 2156, 2156, 2156, 0, 2164, 
	2164, 2164, 0, 2170, 2170
};

static const int dtext_start = 1367;
static const int dtext_first_final = 1367;
static const int dtext_error = 0;

static const int dtext_en_basic_inline = 1388;
static const int dtext_en_inline = 1391;
static const int dtext_en_code = 1722;
static const int dtext_en_nodtext = 1726;
static const int dtext_en_table = 1730;
static const int dtext_en_main = 1367;


#line 776 "ext/dtext/dtext.cpp.rl"

static void dstack_push(StateMachine * sm, element_t element) {
  sm->dstack.push_back(element);
}

static element_t dstack_pop(StateMachine * sm) {
  if (sm->dstack.empty()) {
    g_debug("dstack pop empty stack");
    return DSTACK_EMPTY;
  } else {
    auto element = sm->dstack.back();
    sm->dstack.pop_back();
    return element;
  }
}

static element_t dstack_peek(const StateMachine * sm) {
  return sm->dstack.empty() ? DSTACK_EMPTY : sm->dstack.back();
}

static bool dstack_check(const StateMachine * sm, element_t expected_element) {
  return dstack_peek(sm) == expected_element;
}

// Return true if the given tag is currently open.
static bool dstack_is_open(const StateMachine * sm, element_t element) {
  return std::find(sm->dstack.begin(), sm->dstack.end(), element) != sm->dstack.end();
}

static int dstack_count(const StateMachine * sm, element_t element) {
  return std::count(sm->dstack.begin(), sm->dstack.end(), element);
}

static bool is_internal_url(StateMachine * sm, const std::string_view url) {
  if (url.starts_with("/")) {
    return true;
  } else if (sm->options.domain.empty() || url.empty()) {
    return false;
  } else {
    // Matches the domain name part of a URL.
    static const std::regex url_regex("^https?://(?:[^/?#]*@)?([^/?#:]+)", std::regex_constants::icase);

    std::match_results<std::string_view::const_iterator> matches;
    std::regex_search(url.begin(), url.end(), matches, url_regex);
    return matches[1] == sm->options.domain;
  }
}

static void append(StateMachine * sm, const auto c) {
  sm->output += c;
}

static void append(StateMachine * sm, const char * a, const char * b) {
  append(sm, std::string_view(a, b));
}

static void append_html_escaped(StateMachine * sm, char s) {
  switch (s) {
    case '<': append(sm, "&lt;"); break;
    case '>': append(sm, "&gt;"); break;
    case '&': append(sm, "&amp;"); break;
    case '"': append(sm, "&quot;"); break;
    default:  append(sm, s);
  }
}

static void append_html_escaped(StateMachine * sm, const std::string_view string) {
  for (const unsigned char c : string) {
    append_html_escaped(sm, c);
  }
}

static void append_uri_escaped(StateMachine * sm, const std::string_view string) {
  static const char hex[] = "0123456789ABCDEF";

  for (const unsigned char c : string) {
    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '-' || c == '_' || c == '.' || c == '~') {
      append(sm, c);
    } else {
      append(sm, '%');
      append(sm, hex[c >> 4]);
      append(sm, hex[c & 0x0F]);
    }
  }
}

static void append_relative_url(StateMachine * sm, const auto url) {
  if ((url[0] == '/' || url[0] == '#') && !sm->options.base_url.empty()) {
    append_html_escaped(sm, sm->options.base_url);
  }

  append_html_escaped(sm, url);
}

static void append_absolute_link(StateMachine * sm, const std::string_view url, const std::string_view title, bool internal_url, bool escape_title) {
  if (internal_url) {
    append(sm, "<a class=\"dtext-link\" href=\"");
  } else if (url == title) {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-external-link\" href=\"");
  } else {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-external-link dtext-named-external-link\" href=\"");
  }

  append_html_escaped(sm, url);
  append(sm, "\">");

  if (escape_title) {
    append_html_escaped(sm, title);
  } else {
    append(sm, title);
  }

  append(sm, "</a>");
}

static void append_mention(StateMachine * sm, const std::string_view name) {
  append(sm, "<a class=\"dtext-link dtext-user-mention-link\" data-user-name=\"");
  append_html_escaped(sm, name);
  append(sm, "\" href=\"");
  append_relative_url(sm, "/users?name=");
  append_uri_escaped(sm, name);
  append(sm, "\">@");
  append_html_escaped(sm, name);
  append(sm, "</a>");
}

static void append_id_link(StateMachine * sm, const char * title, const char * id_name, const char * url, const std::string_view id) {
  if (url[0] == '/') {
    append(sm, "<a class=\"dtext-link dtext-id-link dtext-");
    append(sm, id_name);
    append(sm, "-id-link\" href=\"");
    append_relative_url(sm, url);
  } else {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-id-link dtext-");
    append(sm, id_name);
    append(sm, "-id-link\" href=\"");
    append_html_escaped(sm, url);
  }

  append_uri_escaped(sm, id);
  append(sm, "\">");
  append(sm, title);
  append(sm, " #");
  append_html_escaped(sm, id);
  append(sm, "</a>");
}

static void append_bare_unnamed_url(StateMachine * sm, const std::string_view url) {
  auto [trimmed_url, leftovers] = trim_url(url);
  append_unnamed_url(sm, trimmed_url);
  append_html_escaped(sm, leftovers);
}

static void append_unnamed_url(StateMachine * sm, const std::string_view url) {
  DText::URL parsed_url(url);

  if (sm->options.internal_domains.find(std::string(parsed_url.domain)) != sm->options.internal_domains.end()) {
    append_internal_url(sm, parsed_url);
  } else {
    append_absolute_link(sm, url, url, parsed_url.domain == sm->options.domain);
  }
}

static void append_internal_url(StateMachine * sm, const DText::URL& url) {
  auto path_components = url.path_components();
  auto query = url.query;
  auto fragment = url.fragment;

  if (path_components.size() == 2) {
    auto controller = path_components.at(0);
    auto id = path_components.at(1);

    if (!id.empty() && std::all_of(id.begin(), id.end(), ::isdigit)) {
      if (controller == "post" && fragment.empty()) {
        // https://danbooru.donmai.us/posts/6000000#comment_2288996
        return append_id_link(sm, "post", "post", "/posts/", id);
      } else if (controller == "pool" && query.empty()) {
        // https://danbooru.donmai.us/pools/903?page=2
        return append_id_link(sm, "pool", "pool", "/pools/", id);
      } else if (controller == "comment") {
        return append_id_link(sm, "comment", "comment", "/comments/", id);
      } else if (controller == "forum") {
        return append_id_link(sm, "forum", "forum-post", "/forums/", id);
      } else if (controller == "forum" && query.empty() && fragment.empty()) {
        // https://danbooru.donmai.us/forum_topics/1234?page=2
        // https://danbooru.donmai.us/forum_topics/1234#forum_post_5678
        return append_id_link(sm, "topic", "forum-topic", "/forums/", id);
      } else if (controller == "user") {
        return append_id_link(sm, "user", "user", "/users/", id);
      } else if (controller == "artist") {
        return append_id_link(sm, "artist", "artist", "/artists/", id);
      } else if (controller == "wiki" && fragment.empty()) {
        // http://danbooru.donmai.us/wiki_pages/10933#dtext-self-upload
        return append_id_link(sm, "wiki", "wiki-page", "/wiki/", id);
      }
    } else if (controller == "wiki" && fragment.empty()) {
      return append_wiki_link(sm, {}, id, {}, id, {});
    }
  } else if (path_components.size() >= 3) {
    // http://danbooru.donmai.us/post/show/1234/touhou
    auto controller = path_components.at(0);
    auto action = path_components.at(1);
    auto id = path_components.at(2);

    if (!id.empty() && std::all_of(id.begin(), id.end(), ::isdigit)) {
      if (controller == "post" && action == "show") {
        return append_id_link(sm, "post", "post", "/posts/", id);
      }
    }
  }

  append_absolute_link(sm, url.url, url.url, url.domain == sm->options.domain);
}

static void append_named_url(StateMachine * sm, const std::string_view url, const std::string_view title) {
  auto parsed_title = sm->parse_basic_inline(title);

  // protocol-relative url; treat `//example.com` like `http://example.com`
  if (url.size() > 2 && url.starts_with("//")) {
    auto full_url = "http:" + std::string(url);
    append_absolute_link(sm, full_url, parsed_title, is_internal_url(sm, full_url), false);
  } else if (url[0] == '/' || url[0] == '#') {
    append(sm, "<a class=\"dtext-link\" href=\"");
    append_relative_url(sm, url);
    append(sm, "\">");
    append(sm, parsed_title);
    append(sm, "</a>");
  } else if (url == title) {
    append_unnamed_url(sm, url);
  } else {
    append_absolute_link(sm, url, parsed_title, is_internal_url(sm, url), false);
  }
}

static void append_bare_named_url(StateMachine * sm, const std::string_view url, std::string_view title) {
  auto [trimmed_url, leftovers] = trim_url(url);
  append_named_url(sm, trimmed_url, title);
  append_html_escaped(sm, leftovers);
}

static void append_post_search_link(StateMachine * sm, const std::string_view prefix, const std::string_view search, const std::string_view title, const std::string_view suffix) {
  auto normalized_title = std::string(title);

  append(sm, "<a class=\"dtext-link dtext-post-search-link\" href=\"");
  append_relative_url(sm, "/post?tags=");
  append_uri_escaped(sm, search);
  append(sm, "\">");

  // 19{{60s}} -> {{60s|1960s}}
  if (!prefix.empty()) {
    normalized_title.insert(0, prefix);
  }

  // {{pokemon_(creature)|}} -> {{pokemon_(creature)|pokemon}}
  if (title.empty()) {
    std::regex_replace(std::back_inserter(normalized_title), search.begin(), search.end(), tag_qualifier_regex, "");
  }

  // {{cat}}s -> {{cat|cats}}
  if (!suffix.empty()) {
    normalized_title.append(suffix);
  }

  append_html_escaped(sm, normalized_title);
  append(sm, "</a>");

  clear_matches(sm);
}

static void append_wiki_link(StateMachine * sm, const std::string_view prefix, const std::string_view tag, const std::string_view anchor, const std::string_view title, const std::string_view suffix) {
  auto normalized_tag = std::string(tag);
  auto title_string = std::string(title);

  // "Kantai Collection" -> "kantai_collection"
  std::transform(normalized_tag.cbegin(), normalized_tag.cend(), normalized_tag.begin(), [](unsigned char c) { return c == ' ' ? '_' : std::tolower(c); });

  // [[2019]] -> [[~2019]]
  if (std::all_of(normalized_tag.cbegin(), normalized_tag.cend(), ::isdigit)) {
    normalized_tag.insert(0, "~");
  }

  // Pipe trick: [[Kaga (Kantai Collection)|]] -> [[kaga_(kantai_collection)|Kaga]]
  if (title_string.empty()) {
    std::regex_replace(std::back_inserter(title_string), tag.cbegin(), tag.cend(), tag_qualifier_regex, "");
  }

  // 19[[60s]] -> [[60s|1960s]]
  if (!prefix.empty()) {
    title_string.insert(0, prefix);
  }

  // [[cat]]s -> [[cat|cats]]
  if (!suffix.empty()) {
    title_string.append(suffix);
  }

  append(sm, "<a class=\"dtext-link dtext-wiki-link\" href=\"");
  append_relative_url(sm, "/wiki/");
  append_uri_escaped(sm, normalized_tag);

  if (!anchor.empty()) {
    std::string normalized_anchor(anchor);
    std::transform(normalized_anchor.begin(), normalized_anchor.end(), normalized_anchor.begin(), [](char c) { return isalnum(c) ? tolower(c) : '-'; });
    append_html_escaped(sm, "#dtext-");
    append_html_escaped(sm, normalized_anchor);
  }

  append(sm, "\">");
  append_html_escaped(sm, title_string);
  append(sm, "</a>");

  sm->wiki_pages.insert(std::string(tag));

  clear_matches(sm);
}

static void append_paged_link(StateMachine * sm, const char * title, const char * tag, const char * href, const char * param) {
  append(sm, tag);
  append_relative_url(sm, href);
  append(sm, sm->a1, sm->a2);
  append(sm, param);
  append(sm, sm->b1, sm->b2);
  append(sm, "\">");
  append(sm, title);
  append(sm, sm->a1, sm->a2);
  append(sm, "/p");
  append(sm, sm->b1, sm->b2);
  append(sm, "</a>");
}

static void append_dmail_key_link(StateMachine * sm) {
  append(sm, "<a class=\"dtext-link dtext-id-link dtext-dmail-id-link\" href=\"");
  append_relative_url(sm, "/dmails/");
  append(sm, sm->a1, sm->a2);
  append(sm, "?key=");
  append_uri_escaped(sm, { sm->b1, sm->b2 });
  append(sm, "\">");
  append(sm, "dmail #");
  append(sm, sm->a1, sm->a2);
  append(sm, "</a>");
}

static void append_code_fence(StateMachine * sm, const std::string_view code, const std::string_view language) {
  if (language.empty()) {
    append_block(sm, "<pre>");
    append_html_escaped(sm, code);
    append_block(sm, "</pre>");
  } else {
    append_block(sm, "<pre class=\"language-");
    append_html_escaped(sm, language);
    append_block(sm, "\">");
    append_html_escaped(sm, code);
    append_block(sm, "</pre>");
  }
}

static void append_inline_code(StateMachine * sm, const std::string_view language = {}) {
  if (language.empty()) {
    dstack_open_element(sm, INLINE_CODE, "<code>");
  } else {
    dstack_open_element(sm, INLINE_CODE, "<code class=\"language-");
    append_html_escaped(sm, language);
    append(sm, "\">");
  }
}

static void append_block_code(StateMachine * sm, const std::string_view language = {}) {
  dstack_close_leaf_blocks(sm);

  if (language.empty()) {
    dstack_open_element(sm, BLOCK_CODE, "<pre>");
  } else {
    dstack_open_element(sm, BLOCK_CODE, "<pre class=\"language-");
    append_html_escaped(sm, language);
    append(sm, "\">");
  }
}

static void append_header(StateMachine * sm, char header, const std::string_view id) {
  static element_t blocks[] = { BLOCK_H1, BLOCK_H2, BLOCK_H3, BLOCK_H4, BLOCK_H5, BLOCK_H6 };
  element_t block = blocks[header - '1'];

  if (id.empty()) {
    dstack_open_element(sm, block, "<h");
    append_block(sm, header);
    append_block(sm, ">");
  } else {
    auto normalized_id = std::string(id);
    std::transform(id.begin(), id.end(), normalized_id.begin(), [](char c) { return isalnum(c) ? tolower(c) : '-'; });

    dstack_open_element(sm, block, "<h");
    append_block(sm, header);
    append_block(sm, " id=\"dtext-");
    append_block(sm, normalized_id);
    append_block(sm, "\">");
  }

  sm->header_mode = true;
}

static void append_block(StateMachine * sm, const auto s) {
  if (!sm->options.f_inline) {
    append(sm, s);
  }
}

static void append_block_html_escaped(StateMachine * sm, const std::string_view string) {
  if (!sm->options.f_inline) {
    append_html_escaped(sm, string);
  }
}

static void append_closing_p(StateMachine * sm) {
  g_debug("append closing p");

  if (sm->output.size() > 4 && sm->output.ends_with("<br>")) {
    g_debug("trim last <br>");
    sm->output.resize(sm->output.size() - 4);
  }

  if (sm->output.size() > 3 && sm->output.ends_with("<p>")) {
    g_debug("trim last <p>");
    sm->output.resize(sm->output.size() - 3);
    return;
  }

  append_block(sm, "</p>");
}

static void dstack_open_element(StateMachine * sm, element_t type, const char * html) {
  g_debug("opening %s", html);

  dstack_push(sm, type);

  if (type >= INLINE) {
    append(sm, html);
  } else {
    append_block(sm, html);
  }
}

static void dstack_open_element(StateMachine * sm, element_t type, std::string_view tag_name, const StateMachine::TagAttributes& tag_attributes) {
  dstack_push(sm, type);
  append_block(sm, "<");
  append_block(sm, tag_name);

  auto& permitted_names = permitted_attribute_names.at(tag_name);
  for (auto& [name, value] : tag_attributes) {
    if (permitted_names.find(name) != permitted_names.end()) {
      auto validate_value = permitted_attribute_values.at(name);

      if (validate_value(value)) {
        append_block(sm, " ");
        append_block_html_escaped(sm, name);
        append_block(sm, "=\"");
        append_block_html_escaped(sm, value);
        append_block(sm, "\"");
      }
    }
  }

  append_block(sm, ">");
  clear_tag_attributes(sm);
}

static bool dstack_close_element(StateMachine * sm, element_t type) {
  if (dstack_check(sm, type)) {
    dstack_rewind(sm);
    return true;
  } else if (type >= INLINE && dstack_peek(sm) >= INLINE) {
    g_debug("out-of-order close %s; closing %s instead", element_names[type], element_names[dstack_peek(sm)]);
    dstack_rewind(sm);
    return true;
  } else if (type >= INLINE) {
    g_debug("out-of-order closing %s", element_names[type]);
    append_html_escaped(sm, { sm->ts, sm->te });
    return false;
  } else {
    g_debug("out-of-order closing %s", element_names[type]);
    append_block_html_escaped(sm, { sm->ts, sm->te });
    return false;
  }
}

// Close the last open tag.
static void dstack_rewind(StateMachine * sm) {
  element_t element = dstack_pop(sm);
  g_debug("dstack rewind %s", element_names[element]);

  switch(element) {
    case BLOCK_P: append_closing_p(sm); break;
    case INLINE_SPOILER: append(sm, "</span>"); break;
    case BLOCK_SPOILER: append_block(sm, "</div>"); break;
    case BLOCK_QUOTE: append_block(sm, "</blockquote>"); break;
    case BLOCK_EXPAND: append_block(sm, "</div></details>"); break;
    case BLOCK_COLOR: append_block(sm, "</span>"); break;
    case BLOCK_NODTEXT: append_block(sm, "</p>"); break;
    case BLOCK_CODE: append_block(sm, "</pre>"); break;
    case BLOCK_TD: append_block(sm, "</td>"); break;
    case BLOCK_TH: append_block(sm, "</th>"); break;

    case INLINE_NODTEXT: break;
    case INLINE_B: append(sm, "</strong>"); break;
    case INLINE_I: append(sm, "</em>"); break;
    case INLINE_U: append(sm, "</u>"); break;
    case INLINE_S: append(sm, "</s>"); break;
    case INLINE_TN: append(sm, "</span>"); break;
    case INLINE_CENTER: append(sm, "</span>"); break;
    case INLINE_CODE: append(sm, "</code>"); break;

    case BLOCK_TN: append_closing_p(sm); break;
    case BLOCK_CENTER: append_closing_p(sm); break;
    case BLOCK_TABLE: append_block(sm, "</table>"); break;
    case BLOCK_COLGROUP: append_block(sm, "</colgroup>"); break;
    case BLOCK_THEAD: append_block(sm, "</thead>"); break;
    case BLOCK_TBODY: append_block(sm, "</tbody>"); break;
    case BLOCK_TR: append_block(sm, "</tr>"); break;
    case BLOCK_UL: append_block(sm, "</ul>"); break;
    case BLOCK_LI: append_block(sm, "</li>"); break;
    case BLOCK_H6: append_block(sm, "</h6>"); sm->header_mode = false; break;
    case BLOCK_H5: append_block(sm, "</h5>"); sm->header_mode = false; break;
    case BLOCK_H4: append_block(sm, "</h4>"); sm->header_mode = false; break;
    case BLOCK_H3: append_block(sm, "</h3>"); sm->header_mode = false; break;
    case BLOCK_H2: append_block(sm, "</h2>"); sm->header_mode = false; break;
    case BLOCK_H1: append_block(sm, "</h1>"); sm->header_mode = false; break;

    // Should never happen.
    case INLINE: break;
    case DSTACK_EMPTY: break;
  } 
}

// container blocks: [spoiler], [quote], [expand], [tn], [center], [color]
// leaf blocks: [nodtext], [code], [table], [td]?, [th]?, <h1>, <p>, <li>, <ul>
static void dstack_close_leaf_blocks(StateMachine * sm) {
  g_debug("dstack close leaf blocks");

  while (!sm->dstack.empty() && !dstack_check(sm, BLOCK_QUOTE) && !dstack_check(sm, BLOCK_SPOILER) && !dstack_check(sm, BLOCK_EXPAND) && !dstack_check(sm, BLOCK_TN) && !dstack_check(sm, BLOCK_CENTER) && !dstack_check(sm, BLOCK_COLOR)) {
    dstack_rewind(sm);
  }
}

// Close all open tags up to and including the given tag.
static void dstack_close_until(StateMachine * sm, element_t element) {
  while (!sm->dstack.empty() && !dstack_check(sm, element)) {
    dstack_rewind(sm);
  }

  dstack_rewind(sm);
}

// Close all remaining open tags.
static void dstack_close_all(StateMachine * sm) {
  while (!sm->dstack.empty()) {
    dstack_rewind(sm);
  }
}

static void dstack_open_list(StateMachine * sm, int depth) {
  g_debug("open list");

  if (dstack_is_open(sm, BLOCK_LI)) {
    dstack_close_until(sm, BLOCK_LI);
  } else {
    dstack_close_leaf_blocks(sm);
  }

  while (dstack_count(sm, BLOCK_UL) < depth) {
    dstack_open_element(sm, BLOCK_UL, "<ul>");
  }

  while (dstack_count(sm, BLOCK_UL) > depth) {
    dstack_close_until(sm, BLOCK_UL);
  }

  dstack_open_element(sm, BLOCK_LI, "<li>");
}

static void dstack_close_list(StateMachine * sm) {
  while (dstack_is_open(sm, BLOCK_UL)) {
    dstack_close_until(sm, BLOCK_UL);
  }
}

static void save_tag_attribute(StateMachine * sm, const std::string_view name, const std::string_view value) {
  sm->tag_attributes[name] = value;
}

static void clear_tag_attributes(StateMachine * sm) {
  sm->tag_attributes.clear();
}

static void clear_matches(StateMachine * sm) {
  sm->a1 = NULL;
  sm->a2 = NULL;
  sm->b1 = NULL;
  sm->b2 = NULL;
  sm->c1 = NULL;
  sm->c2 = NULL;
  sm->d1 = NULL;
  sm->d2 = NULL;
  sm->e1 = NULL;
  sm->e2 = NULL;
}

// True if a mention is allowed to start after this character.
static bool is_mention_boundary(unsigned char c) {
  switch (c) {
    case '\0': return true;
    case '\r': return true;
    case '\n': return true;
    case ' ':  return true;
    case '/':  return true;
    case '"':  return true;
    case '\'': return true;
    case '(':  return true;
    case ')':  return true;
    case '[':  return true;
    case ']':  return true;
    case '{':  return true;
    case '}':  return true;
    default:   return false;
  }
}

// Trim trailing unbalanced ')' characters from the URL.
static std::tuple<std::string_view, std::string_view> trim_url(const std::string_view url) {
  std::string_view trimmed = url;

  while (!trimmed.empty() && trimmed.back() == ')' && std::count(trimmed.begin(), trimmed.end(), ')') > std::count(trimmed.begin(), trimmed.end(), '(')) {
    trimmed.remove_suffix(1);
  }

  return { trimmed, { trimmed.end(), url.end() } };
}

// Replace CRLF sequences with LF.
static void replace_newlines(const std::string_view input, std::string& output) {
  size_t pos, last = 0;

  while (std::string::npos != (pos = input.find("\r\n", last))) {
    output.append(input, last, pos - last);
    output.append("\n");
    last = pos + 2;
  }

  output.append(input, last, pos - last);
}

StateMachine::StateMachine(const auto string, int initial_state, const DTextOptions options) : options(options) {
  // Add null bytes to the beginning and end of the string as start and end of string markers.
  input.reserve(string.size());
  input.append(1, '\0');
  replace_newlines(string, input);
  input.append(1, '\0');

  output.reserve(string.size() * 1.5);
  stack.reserve(16);
  dstack.reserve(16);

  p = input.c_str();
  pb = input.c_str();
  pe = input.c_str() + input.size();
  eof = pe;
  cs = initial_state;
}

std::string StateMachine::parse_inline(const std::string_view dtext) {
  StateMachine sm(dtext, dtext_en_inline, options);
  return sm.parse();
}

std::string StateMachine::parse_basic_inline(const std::string_view dtext) {
  StateMachine sm(dtext, dtext_en_basic_inline, options);
  return sm.parse();
}

StateMachine::ParseResult StateMachine::parse_dtext(const std::string_view dtext, DTextOptions options) {
  StateMachine sm(dtext, dtext_en_main, options);
  return { sm.parse(), sm.wiki_pages };
}

std::string StateMachine::parse() {
  StateMachine* sm = this;
  g_debug("parse '%.*s'", (int)(sm->input.size() - 2), sm->input.c_str() + 1);

  
#line 5742 "ext/dtext/dtext.cpp"
	{
	( sm->top) = 0;
	( sm->ts) = 0;
	( sm->te) = 0;
	( sm->act) = 0;
	}

#line 1463 "ext/dtext/dtext.cpp.rl"
  
#line 5748 "ext/dtext/dtext.cpp"
	{
	int _klen;
	unsigned int _trans;
	short _widec;
	const unsigned char *_acts;
	unsigned int _nacts;
	const short *_keys;

	if ( ( sm->p) == ( sm->pe) )
		goto _test_eof;
	if (  sm->cs == 0 )
		goto _out;
_resume:
	_acts = _dtext_actions + _dtext_from_state_actions[ sm->cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 12:
#line 1 "NONE"
	{( sm->ts) = ( sm->p);}
	break;
#line 5768 "ext/dtext/dtext.cpp"
		}
	}

	_widec = (*( sm->p));
	_klen = _dtext_cond_lengths[ sm->cs];
	_keys = _dtext_cond_keys + (_dtext_cond_offsets[ sm->cs]*2);
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				switch ( _dtext_cond_spaces[_dtext_cond_offsets[ sm->cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = (short)(128 + ((*( sm->p)) - -128));
		if ( 
#line 82 "ext/dtext/dtext.cpp.rl"
 is_mention_boundary(p[-1])  ) _widec += 256;
		break;
	}
	case 1: {
		_widec = (short)(640 + ((*( sm->p)) - -128));
		if ( 
#line 83 "ext/dtext/dtext.cpp.rl"
 sm->options.f_mentions  ) _widec += 256;
		break;
	}
	case 2: {
		_widec = (short)(2176 + ((*( sm->p)) - -128));
		if ( 
#line 84 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_QUOTE)  ) _widec += 256;
		break;
	}
	case 3: {
		_widec = (short)(2688 + ((*( sm->p)) - -128));
		if ( 
#line 85 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_EXPAND)  ) _widec += 256;
		break;
	}
	case 4: {
		_widec = (short)(3200 + ((*( sm->p)) - -128));
		if ( 
#line 86 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_COLOR)  ) _widec += 256;
		break;
	}
	case 5: {
		_widec = (short)(1152 + ((*( sm->p)) - -128));
		if ( 
#line 82 "ext/dtext/dtext.cpp.rl"
 is_mention_boundary(p[-1])  ) _widec += 256;
		if ( 
#line 83 "ext/dtext/dtext.cpp.rl"
 sm->options.f_mentions  ) _widec += 512;
		break;
	}
				}
				break;
			}
		}
	}

	_keys = _dtext_trans_keys + _dtext_key_offsets[ sm->cs];
	_trans = _dtext_index_offsets[ sm->cs];

	_klen = _dtext_single_lengths[ sm->cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < *_mid )
				_upper = _mid - 1;
			else if ( _widec > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _dtext_range_lengths[ sm->cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _dtext_indicies[_trans];
_eof_trans:
	 sm->cs = _dtext_trans_targs[_trans];

	if ( _dtext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _dtext_actions + _dtext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 71 "ext/dtext/dtext.cpp.rl"
	{ sm->a1 = sm->p; }
	break;
	case 1:
#line 72 "ext/dtext/dtext.cpp.rl"
	{ sm->a2 = sm->p; }
	break;
	case 2:
#line 73 "ext/dtext/dtext.cpp.rl"
	{ sm->b1 = sm->p; }
	break;
	case 3:
#line 74 "ext/dtext/dtext.cpp.rl"
	{ sm->b2 = sm->p; }
	break;
	case 4:
#line 75 "ext/dtext/dtext.cpp.rl"
	{ sm->c1 = sm->p; }
	break;
	case 5:
#line 76 "ext/dtext/dtext.cpp.rl"
	{ sm->c2 = sm->p; }
	break;
	case 6:
#line 77 "ext/dtext/dtext.cpp.rl"
	{ sm->d1 = sm->p; }
	break;
	case 7:
#line 78 "ext/dtext/dtext.cpp.rl"
	{ sm->d2 = sm->p; }
	break;
	case 8:
#line 79 "ext/dtext/dtext.cpp.rl"
	{ sm->e1 = sm->p; }
	break;
	case 9:
#line 80 "ext/dtext/dtext.cpp.rl"
	{ sm->e2 = sm->p; }
	break;
	case 10:
#line 87 "ext/dtext/dtext.cpp.rl"
	{ save_tag_attribute(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }); }
	break;
	case 13:
#line 1 "NONE"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 14:
#line 282 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_B, "<strong>"); }}
	break;
	case 15:
#line 283 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_B); }}
	break;
	case 16:
#line 284 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_I, "<em>"); }}
	break;
	case 17:
#line 285 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_I); }}
	break;
	case 18:
#line 286 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_S, "<s>"); }}
	break;
	case 19:
#line 287 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_S); }}
	break;
	case 20:
#line 288 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_U, "<u>"); }}
	break;
	case 21:
#line 289 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_U); }}
	break;
	case 22:
#line 290 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 23:
#line 291 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 24:
#line 291 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 25:
#line 291 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 26:
#line 295 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 11;}
	break;
	case 27:
#line 296 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 12;}
	break;
	case 28:
#line 297 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 13;}
	break;
	case 29:
#line 298 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 14;}
	break;
	case 30:
#line 299 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 15;}
	break;
	case 31:
#line 300 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 16;}
	break;
	case 32:
#line 301 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 17;}
	break;
	case 33:
#line 302 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 18;}
	break;
	case 34:
#line 303 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 19;}
	break;
	case 35:
#line 304 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 20;}
	break;
	case 36:
#line 305 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 21;}
	break;
	case 37:
#line 306 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 22;}
	break;
	case 38:
#line 307 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 23;}
	break;
	case 39:
#line 308 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 24;}
	break;
	case 40:
#line 309 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 25;}
	break;
	case 41:
#line 310 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 26;}
	break;
	case 42:
#line 311 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 27;}
	break;
	case 43:
#line 334 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 35;}
	break;
	case 44:
#line 346 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 38;}
	break;
	case 45:
#line 354 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 40;}
	break;
	case 46:
#line 535 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 75;}
	break;
	case 47:
#line 553 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 76;}
	break;
	case 48:
#line 571 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 78;}
	break;
	case 49:
#line 573 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 79;}
	break;
	case 50:
#line 577 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 80;}
	break;
	case 51:
#line 338 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_named_url(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }}
	break;
	case 52:
#line 342 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_named_url(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 });
  }}
	break;
	case 53:
#line 350 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_unnamed_url(sm, { sm->a1, sm->a2 });
  }}
	break;
	case 54:
#line 358 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("delimited mention: <@%.*s>", (int)(sm->a2 - sm->a1), sm->a1);
    append_mention(sm, { sm->a1, sm->a2 });
  }}
	break;
	case 55:
#line 369 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_B, "<strong>"); }}
	break;
	case 56:
#line 370 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_B); }}
	break;
	case 57:
#line 371 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_I, "<em>"); }}
	break;
	case 58:
#line 372 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_I); }}
	break;
	case 59:
#line 373 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_S, "<s>"); }}
	break;
	case 60:
#line 374 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_S); }}
	break;
	case 61:
#line 375 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_U, "<u>"); }}
	break;
	case 62:
#line 376 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_U); }}
	break;
	case 63:
#line 378 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_TN, "<span class=\"tn\">");
  }}
	break;
	case 64:
#line 382 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/tn]");

    if (dstack_check(sm, INLINE_TN)) {
      dstack_close_element(sm, INLINE_TN);
    } else if (dstack_close_element(sm, BLOCK_TN)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 65:
#line 392 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_CENTER, "<span class=\"center\">");
  }}
	break;
	case 66:
#line 396 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/center]");

    if (dstack_check(sm, INLINE_CENTER)) {
      dstack_close_element(sm, INLINE_CENTER);
    } else if (dstack_close_element(sm, BLOCK_CENTER)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 67:
#line 406 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (sm->header_mode) {
      append_html_escaped(sm, "<br>");
    } else {
      append(sm, "<br>");
    };
  }}
	break;
	case 68:
#line 414 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1722;goto _again;}}
  }}
	break;
	case 69:
#line 419 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1722;goto _again;}}
  }}
	break;
	case 70:
#line 424 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 71:
#line 430 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 72:
#line 436 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_SPOILER, "<span class=\"spoiler\">");
  }}
	break;
	case 73:
#line 440 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_is_open(sm, INLINE_SPOILER)) {
      dstack_close_element(sm, INLINE_SPOILER);
    } else if (dstack_is_open(sm, BLOCK_SPOILER)) {
      dstack_close_until(sm, BLOCK_SPOILER);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append_html_escaped(sm, { sm->ts, sm->te });
    }
  }}
	break;
	case 74:
#line 451 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1726;goto _again;}}
  }}
	break;
	case 75:
#line 459 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 76:
#line 471 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [quote]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 77:
#line 484 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [expand]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 78:
#line 497 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [color]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 79:
#line 510 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 80:
#line 516 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TH)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 81:
#line 522 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TD)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 82:
#line 567 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append(sm, ' ');
  }}
	break;
	case 83:
#line 577 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 84:
#line 295 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "post", "post", "/posts/", { sm->a1, sm->a2 }); }}
	break;
	case 85:
#line 296 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "forum", "forum-post", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 86:
#line 297 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "topic", "forum-topic", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 87:
#line 298 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "comment", "comment", "/comments/", { sm->a1, sm->a2 }); }}
	break;
	case 88:
#line 299 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "dmail", "dmail", "/dmails/", { sm->a1, sm->a2 }); }}
	break;
	case 89:
#line 300 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "pool", "pool", "/pools/", { sm->a1, sm->a2 }); }}
	break;
	case 90:
#line 301 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "user", "user", "/users/", { sm->a1, sm->a2 }); }}
	break;
	case 91:
#line 302 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "artist", "artist", "/artists/", { sm->a1, sm->a2 }); }}
	break;
	case 92:
#line 303 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "user report", "user-report", "/user_flags/", { sm->a1, sm->a2 }); }}
	break;
	case 93:
#line 304 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag alias", "tag-alias", "/tag_aliases?id=", { sm->a1, sm->a2 }); }}
	break;
	case 94:
#line 305 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag implication", "tag-implication", "/tag_implications?id=", { sm->a1, sm->a2 }); }}
	break;
	case 95:
#line 306 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag translation", "tag-translation", "/tag_translations?id=", { sm->a1, sm->a2 }); }}
	break;
	case 96:
#line 307 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "book", "book", "/pools/", { sm->a1, sm->a2 }); }}
	break;
	case 97:
#line 308 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "series", "series", "/series/", { sm->a1, sm->a2 }); }}
	break;
	case 98:
#line 309 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "mod action", "mod-action", "/mod_actions?id=", { sm->a1, sm->a2 }); }}
	break;
	case 99:
#line 310 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "record", "user-record", "/user_records?id=", { sm->a1, sm->a2 }); }}
	break;
	case 100:
#line 311 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "wiki", "wiki-page", "/wiki/", { sm->a1, sm->a2 }); }}
	break;
	case 101:
#line 313 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_dmail_key_link(sm); }}
	break;
	case 102:
#line 315 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_paged_link(sm, "topic #", "<a class=\"dtext-link dtext-id-link dtext-forum-topic-id-link\" href=\"", "/forums/", "?page="); }}
	break;
	case 103:
#line 316 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_paged_link(sm, "pixiv #", "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-id-link dtext-pixiv-id-link\" href=\"", "https://www.pixiv.net/artworks/", "#"); }}
	break;
	case 104:
#line 318 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_post_search_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->b1, sm->b2 }, { sm->d1, sm->d2 });
  }}
	break;
	case 105:
#line 322 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_post_search_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->d1, sm->d2 });
  }}
	break;
	case 106:
#line 326 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_wiki_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->b1, sm->b2 }, { sm->e1, sm->e2 });
  }}
	break;
	case 107:
#line 330 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_wiki_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->d1, sm->d2 }, { sm->e1, sm->e2 });
  }}
	break;
	case 108:
#line 334 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }}
	break;
	case 109:
#line 346 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }}
	break;
	case 110:
#line 354 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_mention(sm, { sm->a1, sm->a2 + 1 });
  }}
	break;
	case 111:
#line 363 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline list");
    {( sm->p) = (( sm->ts + 1))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 112:
#line 414 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1722;goto _again;}}
  }}
	break;
	case 113:
#line 419 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1722;goto _again;}}
  }}
	break;
	case 114:
#line 451 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1726;goto _again;}}
  }}
	break;
	case 115:
#line 465 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 116:
#line 478 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/quote]");
    dstack_close_until(sm, BLOCK_QUOTE);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 117:
#line 491 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/expand]");
    dstack_close_until(sm, BLOCK_EXPAND);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 118:
#line 504 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/color]");
    dstack_close_until(sm, BLOCK_COLOR);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 119:
#line 528 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [hr] (pos: %ld)", sm->ts - sm->pb);
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 120:
#line 535 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 121:
#line 553 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }}
	break;
	case 122:
#line 573 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append(sm, std::string_view { sm->ts, sm->te });
  }}
	break;
	case 123:
#line 577 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 124:
#line 297 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_id_link(sm, "topic", "forum-topic", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 125:
#line 299 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_id_link(sm, "dmail", "dmail", "/dmails/", { sm->a1, sm->a2 }); }}
	break;
	case 126:
#line 334 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }}
	break;
	case 127:
#line 346 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }}
	break;
	case 128:
#line 414 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1722;goto _again;}}
  }}
	break;
	case 129:
#line 419 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1722;goto _again;}}
  }}
	break;
	case 130:
#line 451 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1726;goto _again;}}
  }}
	break;
	case 131:
#line 535 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 132:
#line 553 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }}
	break;
	case 133:
#line 573 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append(sm, std::string_view { sm->ts, sm->te });
  }}
	break;
	case 134:
#line 577 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 135:
#line 1 "NONE"
	{	switch( ( sm->act) ) {
	case 11:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "post", "post", "/posts/", { sm->a1, sm->a2 }); }
	break;
	case 12:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "forum", "forum-post", "/forums/", { sm->a1, sm->a2 }); }
	break;
	case 13:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "topic", "forum-topic", "/forums/", { sm->a1, sm->a2 }); }
	break;
	case 14:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "comment", "comment", "/comments/", { sm->a1, sm->a2 }); }
	break;
	case 15:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "dmail", "dmail", "/dmails/", { sm->a1, sm->a2 }); }
	break;
	case 16:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "pool", "pool", "/pools/", { sm->a1, sm->a2 }); }
	break;
	case 17:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "user", "user", "/users/", { sm->a1, sm->a2 }); }
	break;
	case 18:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "artist", "artist", "/artists/", { sm->a1, sm->a2 }); }
	break;
	case 19:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "user report", "user-report", "/user_flags/", { sm->a1, sm->a2 }); }
	break;
	case 20:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "tag alias", "tag-alias", "/tag_aliases?id=", { sm->a1, sm->a2 }); }
	break;
	case 21:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "tag implication", "tag-implication", "/tag_implications?id=", { sm->a1, sm->a2 }); }
	break;
	case 22:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "tag translation", "tag-translation", "/tag_translations?id=", { sm->a1, sm->a2 }); }
	break;
	case 23:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "book", "book", "/pools/", { sm->a1, sm->a2 }); }
	break;
	case 24:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "series", "series", "/series/", { sm->a1, sm->a2 }); }
	break;
	case 25:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "mod action", "mod-action", "/mod_actions?id=", { sm->a1, sm->a2 }); }
	break;
	case 26:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "record", "user-record", "/user_records?id=", { sm->a1, sm->a2 }); }
	break;
	case 27:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "wiki", "wiki-page", "/wiki/", { sm->a1, sm->a2 }); }
	break;
	case 35:
	{{( sm->p) = ((( sm->te)))-1;}
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }
	break;
	case 38:
	{{( sm->p) = ((( sm->te)))-1;}
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }
	break;
	case 40:
	{{( sm->p) = ((( sm->te)))-1;}
    append_mention(sm, { sm->a1, sm->a2 + 1 });
  }
	break;
	case 75:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }
	break;
	case 76:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }
	break;
	case 79:
	{{( sm->p) = ((( sm->te)))-1;}
    append(sm, std::string_view { sm->ts, sm->te });
  }
	break;
	case 80:
	{{( sm->p) = ((( sm->te)))-1;}
    append_html_escaped(sm, (*( sm->p)));
  }
	break;
	default:
	{{( sm->p) = ((( sm->te)))-1;}}
	break;
	}
	}
	break;
	case 136:
#line 583 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_rewind(sm);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 137:
#line 588 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 138:
#line 590 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 139:
#line 590 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 140:
#line 590 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 141:
#line 596 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_rewind(sm);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 142:
#line 601 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 143:
#line 603 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 144:
#line 603 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 145:
#line 603 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 146:
#line 609 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_COLGROUP, "colgroup", sm->tag_attributes);
  }}
	break;
	case 147:
#line 613 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_COLGROUP);
  }}
	break;
	case 148:
#line 617 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_COL, "col", sm->tag_attributes);
    dstack_pop(sm); // XXX [col] has no end tag
  }}
	break;
	case 149:
#line 622 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_THEAD, "thead", sm->tag_attributes);
  }}
	break;
	case 150:
#line 626 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_THEAD);
  }}
	break;
	case 151:
#line 630 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TBODY, "tbody", sm->tag_attributes);
  }}
	break;
	case 152:
#line 634 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_TBODY);
  }}
	break;
	case 153:
#line 638 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TH, "th", sm->tag_attributes);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1391;goto _again;}}
  }}
	break;
	case 154:
#line 643 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TR, "tr", sm->tag_attributes);
  }}
	break;
	case 155:
#line 647 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_TR);
  }}
	break;
	case 156:
#line 651 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TD, "td", sm->tag_attributes);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1391;goto _again;}}
  }}
	break;
	case 157:
#line 656 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TABLE)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 158:
#line 662 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 159:
#line 662 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;}
	break;
	case 160:
#line 662 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}}
	break;
	case 161:
#line 681 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1722;goto _again;}}
  }}
	break;
	case 162:
#line 686 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1722;goto _again;}}
  }}
	break;
	case 163:
#line 691 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_code_fence(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }}
	break;
	case 164:
#line 723 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1726;goto _again;}}
  }}
	break;
	case 165:
#line 729 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_TABLE, "<table class=\"highlightable\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1730;goto _again;}}
  }}
	break;
	case 166:
#line 735 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TN, "<p class=\"tn\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1391;goto _again;}}
  }}
	break;
	case 167:
#line 740 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_CENTER, "<p class=\"center\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1391;goto _again;}}
  }}
	break;
	case 168:
#line 761 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND) || dstack_check(sm, BLOCK_COLOR)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1391;goto _again;}}
  }}
	break;
	case 169:
#line 666 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_header(sm, *sm->a1, { sm->b1, sm->b2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1391;goto _again;}}
  }}
	break;
	case 170:
#line 671 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_QUOTE, "<blockquote>");
  }}
	break;
	case 171:
#line 676 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_SPOILER, "<div class=\"spoiler\">");
  }}
	break;
	case 172:
#line 681 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1722;goto _again;}}
  }}
	break;
	case 173:
#line 686 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1722;goto _again;}}
  }}
	break;
	case 174:
#line 695 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_EXPAND, "<details>");
    append_block(sm, "<summary>Show</summary><div>");
  }}
	break;
	case 175:
#line 701 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block [expand=]");
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_EXPAND, "<details>");
    append_block(sm, "<summary>");
    append_block_html_escaped(sm, { sm->a1, sm->a2 });
    append_block(sm, "</summary><div>");
  }}
	break;
	case 176:
#line 710 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_COLOR, "<span style=\"color:#FF761C;\">");
  }}
	break;
	case 177:
#line 715 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block [color=]");
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_COLOR, "<span style=\"color:");
    append_block_html_escaped(sm, { sm->a1, sm->a2 });
    append_block(sm, "\">");
  }}
	break;
	case 178:
#line 723 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1726;goto _again;}}
  }}
	break;
	case 179:
#line 745 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("write '<hr>' (pos: %ld)", sm->ts - sm->pb);
    append_block(sm, "<hr>");
  }}
	break;
	case 180:
#line 750 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block list");
    dstack_open_list(sm, sm->a2 - sm->a1);
    {( sm->p) = (( sm->b1))-1;}
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1391;goto _again;}}
  }}
	break;
	case 181:
#line 757 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block blank line(s)");
  }}
	break;
	case 182:
#line 761 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND) || dstack_check(sm, BLOCK_COLOR)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1391;goto _again;}}
  }}
	break;
	case 183:
#line 681 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1722;goto _again;}}
  }}
	break;
	case 184:
#line 686 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1722;goto _again;}}
  }}
	break;
	case 185:
#line 723 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1726;goto _again;}}
  }}
	break;
	case 186:
#line 757 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("block blank line(s)");
  }}
	break;
	case 187:
#line 761 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND) || dstack_check(sm, BLOCK_COLOR)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1391;goto _again;}}
  }}
	break;
#line 7284 "ext/dtext/dtext.cpp"
		}
	}

_again:
	_acts = _dtext_actions + _dtext_to_state_actions[ sm->cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 11:
#line 1 "NONE"
	{( sm->ts) = 0;}
	break;
#line 7295 "ext/dtext/dtext.cpp"
		}
	}

	if (  sm->cs == 0 )
		goto _out;
	if ( ++( sm->p) != ( sm->pe) )
		goto _resume;
	_test_eof: {}
	if ( ( sm->p) == ( sm->eof) )
	{
	if ( _dtext_eof_trans[ sm->cs] > 0 ) {
		_trans = _dtext_eof_trans[ sm->cs] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 1464 "ext/dtext/dtext.cpp.rl"

  g_debug("EOF; closing stray blocks");
  dstack_close_all(sm);
  g_debug("done");

  return sm->output;
}

/* Everything below is optional, it's only needed to build bin/cdtext.exe. */
#ifdef CDTEXT

#include <glib.h>
#include <iostream>

static void parse_file(FILE* input, FILE* output) {
  std::stringstream ss;
  ss << std::cin.rdbuf();
  std::string dtext = ss.str();

  try {
    auto result = StateMachine::parse_dtext(dtext, options);

    if (fwrite(result.c_str(), 1, result.size(), output) != result.size()) {
      perror("fwrite failed");
      exit(1);
    }
  } catch (std::exception& e) {
    fprintf(stderr, "dtext parse error: %s\n", e.what());
    exit(1);
  }
}

int main(int argc, char* argv[]) {
  GError* error = NULL;
  bool opt_verbose = FALSE;
  bool opt_inline = FALSE;
  bool opt_no_mentions = FALSE;

  GOptionEntry options[] = {
    { "no-mentions", 'm', 0, G_OPTION_ARG_NONE, &opt_no_mentions, "Don't parse @mentions", NULL },
    { "inline",      'i', 0, G_OPTION_ARG_NONE, &opt_inline,      "Parse in inline mode", NULL },
    { "verbose",     'v', 0, G_OPTION_ARG_NONE, &opt_verbose,     "Print debug output", NULL },
    { NULL }
  };

  g_autoptr(GOptionContext) context = g_option_context_new("[FILE...]");
  g_option_context_add_main_entries(context, options, NULL);

  if (!g_option_context_parse(context, &argc, &argv, &error)) {
    fprintf(stderr, "option parsing failed: %s\n", error->message);
    g_clear_error(&error);
    return 1;
  }

  if (opt_verbose) {
    g_setenv("G_MESSAGES_DEBUG", "all", TRUE);
  }

  /* skip first argument (progname) */
  argc--, argv++;

  if (argc == 0) {
    parse_file(stdin, stdout, { .f_inline = opt_inline, .f_mentions = !opt_no_mentions });
    return 0;
  }

  for (const char* filename = *argv; argc > 0; argc--, argv++) {
    FILE* input = fopen(filename, "r");
    if (!input) {
      perror("fopen failed");
      return 1;
    }

    parse_file(input, stdout, opt_inline, !opt_no_mentions);
    fclose(input);
  }

  return 0;
}

#endif